{
  LOG.warn("Change occurred to property " + t.getQualifiedName() + " with new value "+ newValue+ " which will reset logging levels.");
  String newValueStr=(String)newValue;
  int newValueId=0;
  try {
    newValueId=Integer.parseInt(newValueStr);
  }
 catch (  Exception ex) {
    throw new ConfigurablePropertyException("Unable to set fault id to " + newValue);
  }
  try {
    t.getField().set(null,t.getTypeParser().apply(newValue));
  }
 catch (  IllegalArgumentException e1) {
    e1.printStackTrace();
    throw new ConfigurablePropertyException(e1);
  }
catch (  IllegalAccessException e1) {
    e1.printStackTrace();
    throw new ConfigurablePropertyException(e1);
  }
  Properties varProps=null;
  LOG.warn("No properties file set for fault trigger test");
  if (VAR_PROPS_FILE != null && !VAR_PROPS_FILE.trim().isEmpty()) {
    File propsFile=new File(VAR_PROPS_FILE);
    if (propsFile.exists()) {
      varProps=new Properties();
      InputStream in=null;
      try {
        in=new FileInputStream(propsFile);
        varProps.load(in);
      }
 catch (      IOException ex) {
        ex.printStackTrace();
      }
 finally {
        if (in != null) {
          try {
            in.close();
          }
 catch (          IOException ignore) {
            ;
          }
        }
      }
    }
 else {
      LOG.warn("Properties file for fault trigger test " + VAR_PROPS_FILE + " does not exist");
    }
  }
 else {
    LOG.warn("No properties file set for fault trigger test");
  }
  TestFaultTrigger.triggerFault(newValueId,varProps);
}
