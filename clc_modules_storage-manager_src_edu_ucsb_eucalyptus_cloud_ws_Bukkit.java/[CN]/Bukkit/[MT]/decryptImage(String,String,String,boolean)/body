{
  EntityWrapper<BucketInfo> db=new EntityWrapper<BucketInfo>();
  BucketInfo bucketInfo=new BucketInfo(bucketName);
  List<BucketInfo> bucketList=db.query(bucketInfo);
  if (bucketList.size() > 0) {
    BucketInfo bucket=bucketList.get(0);
    for (    ObjectInfo objectInfo : bucket.getObjects()) {
      if (objectInfo.getObjectKey().equals(objectKey)) {
        if (objectInfo.canRead(userId)) {
          String objectName=objectInfo.getObjectName();
          File file=new File(storageManager.getObjectPath(bucketName,objectName));
          XMLParser parser=new XMLParser(file);
          String imageKey=parser.getValue("//image/name");
          String encryptedKey=parser.getValue("//ec2_encrypted_key");
          String encryptedIV=parser.getValue("//ec2_encrypted_iv");
          String signature=parser.getValue("//signature");
          AbstractKeyStore userKeyStore=UserKeyStore.getInstance();
          String image=parser.getXML("image");
          String machineConfiguration=parser.getXML("machine_configuration");
          String verificationString=machineConfiguration + image;
          Signature sigVerifier;
          try {
            sigVerifier=Signature.getInstance("SHA1withRSA");
          }
 catch (          NoSuchAlgorithmException ex) {
            LOG.error(ex,ex);
            throw new DecryptionFailedException("SHA1withRSA not found");
          }
          EntityWrapper<UserInfo> db2=new EntityWrapper<UserInfo>();
          UserInfo userInfo=new UserInfo(userId);
          List<UserInfo> foundUserInfos=db2.query(userInfo);
          if (foundUserInfos.size() == 0) {
            db2.rollback();
            db.rollback();
            throw new AccessDeniedException(userId);
          }
          if (isAdministrator) {
            try {
              boolean verified=false;
              List<String> aliases=userKeyStore.getAliases();
              for (              String alias : aliases) {
                X509Certificate cert=userKeyStore.getCertificate(alias);
                verified=canVerifySignature(sigVerifier,cert,signature,verificationString);
                if (verified)                 break;
              }
              if (!verified) {
                throw new NotAuthorizedException("Invalid signature");
              }
            }
 catch (            Exception ex) {
              db2.rollback();
              db.rollback();
              LOG.error(ex,ex);
              throw new DecryptionFailedException("signature verification");
            }
          }
 else {
            List<CertificateInfo> certInfos=foundUserInfos.get(0).getCertificates();
            boolean signatureVerified=false;
            for (            CertificateInfo certInfo : certInfos) {
              String alias=certInfo.getCertAlias();
              try {
                X509Certificate cert=userKeyStore.getCertificate(alias);
                signatureVerified=canVerifySignature(sigVerifier,cert,signature,verificationString);
                if (signatureVerified)                 break;
              }
 catch (              Exception ex) {
                db2.rollback();
                db.rollback();
                LOG.error(ex,ex);
                throw new DecryptionFailedException("signature verification");
              }
            }
            if (!signatureVerified) {
              throw new NotAuthorizedException("Invalid signature");
            }
          }
          List<String> parts=parser.getValues("//image/parts/part/filename");
          ArrayList<String> qualifiedPaths=new ArrayList<String>();
          EntityWrapper<ObjectInfo> dbObject=new EntityWrapper<ObjectInfo>();
          for (          String part : parts) {
            ObjectInfo partInfo=new ObjectInfo();
            objectInfo.setObjectKey(part);
            List<ObjectInfo> partInfos=dbObject.query(partInfo);
            if (partInfos.size() > 0) {
              ObjectInfo pInfo=partInfos.get(0);
              qualifiedPaths.add(storageManager.getObjectPath(bucketName,pInfo.getObjectName()));
            }
          }
          dbObject.commit();
          String encryptedImageKey=imageKey + "-" + Hashes.getRandom(5)+ ".crypt.gz";
          String encryptedImageName=storageManager.getObjectPath(bucketName,encryptedImageKey);
          String decryptedImageKey=encryptedImageKey.replaceAll("crypt.gz","tgz");
          String decryptedImageName=storageManager.getObjectPath(bucketName,decryptedImageKey);
          assembleParts(encryptedImageName,qualifiedPaths);
          byte[] key;
          byte[] iv;
          try {
            PrivateKey pk=(PrivateKey)userKeyStore.getKey(EucalyptusProperties.NAME,EucalyptusProperties.NAME);
            Cipher cipher=Cipher.getInstance("RSA/ECB/PKCS1Padding");
            cipher.init(Cipher.DECRYPT_MODE,pk);
            key=hexToBytes(new String(cipher.doFinal(hexToBytes(encryptedKey))));
            iv=hexToBytes(new String(cipher.doFinal(hexToBytes(encryptedIV))));
          }
 catch (          Exception ex) {
            db2.rollback();
            db.rollback();
            LOG.error(ex,ex);
            throw new DecryptionFailedException("AES params");
          }
          try {
            Cipher cipher=Cipher.getInstance("AES/CBC/PKCS5Padding");
            IvParameterSpec salt=new IvParameterSpec(iv);
            SecretKey keySpec=new SecretKeySpec(key,"AES");
            cipher.init(Cipher.DECRYPT_MODE,keySpec,salt);
            decryptImage(encryptedImageName,decryptedImageName,cipher);
          }
 catch (          Exception ex) {
            db2.rollback();
            db.rollback();
            LOG.error(ex,ex);
            throw new DecryptionFailedException("decryption failed");
          }
          try {
            storageManager.deleteAbsoluteObject(encryptedImageName);
          }
 catch (          Exception ex) {
            LOG.warn(ex,ex);
            throw new EucalyptusCloudException();
          }
          db2.commit();
          db.commit();
          return decryptedImageKey;
        }
      }
    }
  }
  return null;
}
