{
  EntityWrapper<BucketInfo> db=new EntityWrapper<BucketInfo>();
  BucketInfo bucketInfo=new BucketInfo(bucketName);
  List<BucketInfo> bucketList=db.query(bucketInfo);
  if (bucketList.size() > 0) {
    BucketInfo bucket=bucketList.get(0);
    for (    ObjectInfo objectInfo : bucket.getObjects()) {
      if (objectInfo.getObjectKey().equals(objectKey)) {
        if (objectInfo.canRead(userId)) {
          String objectName=objectInfo.getObjectName();
          File file=new File(storageManager.getObjectPath(bucketName,objectName));
          XMLParser parser=new XMLParser(file);
          String encryptedKey=parser.getValue("//ec2_encrypted_key");
          String encryptedIV=parser.getValue("//ec2_encrypted_iv");
          String signature=parser.getValue("//signature");
          AbstractKeyStore userKeyStore=UserKeyStore.getInstance();
          String image=parser.getXML("image");
          String machineConfiguration=parser.getXML("machine_configuration");
          EntityWrapper<UserInfo> db2=new EntityWrapper<UserInfo>();
          UserInfo userInfo=new UserInfo(userId);
          List<UserInfo> foundUserInfos=db2.query(userInfo);
          if (foundUserInfos.size() == 0) {
            db2.rollback();
            db.rollback();
            throw new AccessDeniedException(userId);
          }
          List<CertificateInfo> certInfos=foundUserInfos.get(0).getCertificates();
          boolean signatureVerified=false;
          Signature sigVerifier;
          try {
            sigVerifier=Signature.getInstance("SHA1withRSA");
          }
 catch (          NoSuchAlgorithmException ex) {
            LOG.error(ex,ex);
            throw new DecryptionFailedException("SHA1withRSA not found");
          }
          for (          CertificateInfo certInfo : certInfos) {
            String alias=certInfo.getCertAlias();
            try {
              X509Certificate cert=userKeyStore.getCertificate(alias);
              PublicKey publicKey=cert.getPublicKey();
              sigVerifier.initVerify(publicKey);
              sigVerifier.update((machineConfiguration + image).getBytes());
              signatureVerified=sigVerifier.verify(hexToBytes(signature));
              if (signatureVerified) {
                break;
              }
            }
 catch (            Exception ex) {
              db2.rollback();
              db.rollback();
              LOG.error(ex,ex);
              throw new DecryptionFailedException("signature verification");
            }
          }
          if (!signatureVerified) {
            throw new NotAuthorizedException("Invalid signature");
          }
          byte[] key;
          byte[] iv;
          try {
            PrivateKey pk=(PrivateKey)userKeyStore.getKey(EucalyptusProperties.NAME,EucalyptusProperties.NAME);
            Cipher cipher=Cipher.getInstance("RSA/ECB/PKCS1Padding");
            cipher.init(Cipher.DECRYPT_MODE,pk);
            key=hexToBytes(new String(cipher.doFinal(hexToBytes(encryptedKey))));
            iv=hexToBytes(new String(cipher.doFinal(hexToBytes(encryptedIV))));
          }
 catch (          Exception ex) {
            db2.rollback();
            db.rollback();
            LOG.error(ex,ex);
            throw new DecryptionFailedException("AES params");
          }
          db2.commit();
          db.commit();
        }
      }
    }
  }
}
