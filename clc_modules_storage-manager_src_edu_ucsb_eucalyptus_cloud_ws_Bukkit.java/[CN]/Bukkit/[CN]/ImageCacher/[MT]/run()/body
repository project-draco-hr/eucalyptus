{
  String decryptedImageName=storageManager.getObjectPath(bucketName,decryptedImageKey);
  String tarredImageName=decryptedImageName.replaceAll("tgz","tar");
  String imageName=tarredImageName.replaceAll(".tar","");
  String imageKey=decryptedImageKey.replaceAll(".tgz","");
  Long unencryptedSize;
  int numberOfRetries=0;
  while ((unencryptedSize=tryToCache(decryptedImageName,tarredImageName,imageName)) < 0) {
    try {
      Thread.sleep(CACHE_RETRY_TIMEOUT);
    }
 catch (    InterruptedException ex) {
      notifyWaiters();
      return;
    }
    CACHE_RETRY_TIMEOUT=2 * CACHE_RETRY_TIMEOUT;
    if (numberOfRetries++ >= CACHE_RETRY_LIMIT) {
      notifyWaiters();
      return;
    }
    EntityWrapper<ImageCacheInfo> db=new EntityWrapper<ImageCacheInfo>();
    List<ImageCacheInfo> imageCacheInfos=db.query(new ImageCacheInfo());
    ImageCacheInfo imageCacheInfo;
    if (imageCacheInfos.size() > 1) {
      boolean anyCached=false;
      for (      ImageCacheInfo icInfo : imageCacheInfos) {
        if (icInfo.getInCache()) {
          anyCached=true;
          break;
        }
      }
      if (!anyCached) {
        db.rollback();
        notifyWaiters();
        return;
      }
      Collections.sort(imageCacheInfos);
      imageCacheInfo=imageCacheInfos.get(0);
    }
 else {
      db.rollback();
      notifyWaiters();
      return;
    }
    db.commit();
    if (imageCacheInfo.getInCache()) {
      flushCachedImage(imageCacheInfo.getBucketName(),imageCacheInfo.getManifestName());
    }
  }
  try {
    storageManager.deleteAbsoluteObject(decryptedImageName);
    storageManager.deleteAbsoluteObject(tarredImageName);
    EntityWrapper<ImageCacheInfo> db=new EntityWrapper<ImageCacheInfo>();
    ImageCacheInfo searchImageCacheInfo=new ImageCacheInfo(bucketName,manifestKey);
    List<ImageCacheInfo> foundImageCacheInfos=db.query(searchImageCacheInfo);
    if (foundImageCacheInfos.size() > 0) {
      ImageCacheInfo foundImageCacheInfo=foundImageCacheInfos.get(0);
      foundImageCacheInfo.setImageName(imageKey);
      foundImageCacheInfo.setInCache(true);
      foundImageCacheInfo.setSize(unencryptedSize);
      db.commit();
      notifyWaiters();
    }
 else {
      db.rollback();
      LOG.error("Could not expand image" + decryptedImageName);
    }
  }
 catch (  Exception ex) {
    LOG.error(ex);
  }
}
