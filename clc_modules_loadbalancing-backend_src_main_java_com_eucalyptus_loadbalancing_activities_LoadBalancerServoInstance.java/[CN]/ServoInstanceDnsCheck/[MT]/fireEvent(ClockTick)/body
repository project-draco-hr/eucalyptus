{
  if (!(Bootstrap.isOperational() && Topology.isEnabledLocally(LoadBalancingBackend.class) && Topology.isEnabled(Compute.class)))   return;
  final Date now=new Date(System.currentTimeMillis());
  final int elapsedSec=(int)((now.getTime() - lastCheckTime.getTime()) / 1000.0);
  if (elapsedSec < CHECK_EVERY_SECONDS)   return;
  lastCheckTime=now;
  final List<LoadBalancerServoInstance> allInstances=Lists.newArrayList();
  try (final TransactionResource db=Entities.transactionFor(LoadBalancerServoInstance.class)){
    allInstances.addAll(Entities.query(LoadBalancerServoInstance.named()));
  }
 catch (  final Exception ex) {
  }
  final List<LoadBalancerServoInstance> stateOutdated=allInstances;
  for (  final LoadBalancerServoInstance instance : stateOutdated) {
    if (LoadBalancerServoInstance.STATE.InService.equals(instance.getState())) {
      if (!LoadBalancerServoInstance.DNS_STATE.Registered.equals(instance.getDnsState())) {
        String ipAddr=null;
        String privateIpAddr=null;
        if (LoadBalancingSystemVpcs.isCloudVpc().isPresent() && LoadBalancingSystemVpcs.isCloudVpc().get()) {
          final List<Optional<String>> userVpcInterfaceAddresses=LoadBalancingSystemVpcs.getUserVpcInterfaceIps(instance.getInstanceId());
          if (userVpcInterfaceAddresses != null) {
            final Optional<String> optPublicIp=userVpcInterfaceAddresses.get(0);
            final Optional<String> optPrivateIp=userVpcInterfaceAddresses.get(1);
            if (optPublicIp.isPresent())             ipAddr=optPublicIp.get();
            if (optPrivateIp.isPresent())             privateIpAddr=optPrivateIp.get();
          }
        }
 else {
          if (instance.getAddress() == null) {
            try {
              List<RunningInstancesItemType> result=null;
              result=EucalyptusActivityTasks.getInstance().describeSystemInstancesWithVerbose(Lists.newArrayList(instance.getInstanceId()));
              if (result != null && result.size() > 0) {
                ipAddr=result.get(0).getIpAddress();
                privateIpAddr=result.get(0).getPrivateIpAddress();
              }
            }
 catch (            Exception ex) {
              LOG.warn("failed to run describe-instances",ex);
              continue;
            }
          }
 else {
            ipAddr=instance.getAddress();
            privateIpAddr=instance.getPrivateIp();
          }
        }
        try (final TransactionResource db=Entities.transactionFor(LoadBalancerServoInstance.class)){
          final LoadBalancerServoInstance update=Entities.uniqueResult(instance);
          update.setAddress(ipAddr);
          update.setPrivateIp(privateIpAddr);
          if (!(ipAddr == null && privateIpAddr == null))           update.setDnsState(LoadBalancerServoInstance.DNS_STATE.Registered);
          db.commit();
          LoadBalancingServoCache.getInstance().invalidate(update);
        }
 catch (        NoSuchElementException ex) {
          LOG.warn("failed to find the servo instance named " + instance.getInstanceId(),ex);
        }
catch (        Exception ex) {
          LOG.warn("failed to update servo instance's ip address",ex);
        }
      }
    }
 else     if (LoadBalancerServoInstance.STATE.OutOfService.equals(instance.getState()) || LoadBalancerServoInstance.STATE.Error.equals(instance.getState())) {
      if (!LoadBalancerServoInstance.DNS_STATE.Deregistered.equals(instance.getDnsState())) {
        try (final TransactionResource db=Entities.transactionFor(LoadBalancerServoInstance.class)){
          final LoadBalancerServoInstance update=Entities.uniqueResult(instance);
          update.setDnsState(LoadBalancerServoInstance.DNS_STATE.Deregistered);
          db.commit();
          LoadBalancingServoCache.getInstance().invalidate(update);
        }
 catch (        NoSuchElementException ex) {
          LOG.warn("failed to find the servo instance named " + instance.getInstanceId(),ex);
        }
catch (        Exception ex) {
          LOG.warn("failed to update servo instance's ip address",ex);
        }
      }
    }
  }
}
