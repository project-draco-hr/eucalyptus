{
  AWSEC2SecurityGroupResourceAction action=(AWSEC2SecurityGroupResourceAction)resourceAction;
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
  if (action.properties.getSecurityGroupEgress() != null && !action.properties.getSecurityGroupEgress().isEmpty()) {
    RevokeSecurityGroupEgressType revokeSecurityGroupEgressType=MessageHelper.createMessage(RevokeSecurityGroupEgressType.class,action.info.getEffectiveUserId());
    revokeSecurityGroupEgressType.setGroupId(JsonHelper.getJsonNodeFromString(action.info.getGroupId()).asText());
    revokeSecurityGroupEgressType.setIpPermissions(Lists.newArrayList(DEFAULT_EGRESS_RULE()));
    RevokeSecurityGroupEgressResponseType revokeSecurityGroupEgressResponseType=AsyncRequests.<RevokeSecurityGroupEgressType,RevokeSecurityGroupEgressResponseType>sendSync(configuration,revokeSecurityGroupEgressType);
    for (    EC2SecurityGroupRule ec2SecurityGroupRule : action.properties.getSecurityGroupEgress()) {
      AuthorizeSecurityGroupEgressType authorizeSecurityGroupEgressType=MessageHelper.createMessage(AuthorizeSecurityGroupEgressType.class,action.info.getEffectiveUserId());
      authorizeSecurityGroupEgressType.setGroupId(JsonHelper.getJsonNodeFromString(action.info.getGroupId()).asText());
      IpPermissionType ipPermissionType=getIpPermissionTypeForEgress(ec2SecurityGroupRule);
      authorizeSecurityGroupEgressType.setIpPermissions(Lists.newArrayList(ipPermissionType));
      AuthorizeSecurityGroupEgressResponseType authorizeSecurityGroupEgressResponseType=AsyncRequests.<AuthorizeSecurityGroupEgressType,AuthorizeSecurityGroupEgressResponseType>sendSync(configuration,authorizeSecurityGroupEgressType);
    }
  }
  return action;
}
