{
  AWSEC2SecurityGroupResourceAction action=(AWSEC2SecurityGroupResourceAction)resourceAction;
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
  if (action.properties.getSecurityGroupIngress() != null && !action.properties.getSecurityGroupIngress().isEmpty()) {
    for (    EC2SecurityGroupRule ec2SecurityGroupRule : action.properties.getSecurityGroupIngress()) {
      AuthorizeSecurityGroupIngressType authorizeSecurityGroupIngressType=MessageHelper.createMessage(AuthorizeSecurityGroupIngressType.class,action.info.getEffectiveUserId());
      authorizeSecurityGroupIngressType.setGroupId(JsonHelper.getJsonNodeFromString(action.info.getGroupId()).asText());
      IpPermissionType ipPermissionType=getIpPermissionTypeForIngress(action,ec2SecurityGroupRule);
      authorizeSecurityGroupIngressType.setIpPermissions(Lists.newArrayList(ipPermissionType));
      AuthorizeSecurityGroupIngressResponseType authorizeSecurityGroupIngressResponseType=AsyncRequests.<AuthorizeSecurityGroupIngressType,AuthorizeSecurityGroupIngressResponseType>sendSync(configuration,authorizeSecurityGroupIngressType);
    }
  }
  return action;
}
