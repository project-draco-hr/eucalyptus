{
  AWSEC2SecurityGroupResourceAction action=(AWSEC2SecurityGroupResourceAction)resourceAction;
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
  if (action.info.getPhysicalResourceId() == null)   return action;
  String groupId=JsonHelper.getJsonNodeFromString(action.info.getGroupId()).textValue();
  DescribeSecurityGroupsType describeSecurityGroupsType=MessageHelper.createMessage(DescribeSecurityGroupsType.class,action.info.getEffectiveUserId());
  describeSecurityGroupsType.setSecurityGroupIdSet(Lists.newArrayList(groupId));
  DescribeSecurityGroupsResponseType describeSecurityGroupsResponseType=AsyncRequests.<DescribeSecurityGroupsType,DescribeSecurityGroupsResponseType>sendSync(configuration,describeSecurityGroupsType);
  ArrayList<SecurityGroupItemType> securityGroupItemTypeArrayList=describeSecurityGroupsResponseType.getSecurityGroupInfo();
  if (securityGroupItemTypeArrayList == null || securityGroupItemTypeArrayList.isEmpty()) {
    return action;
  }
  DeleteSecurityGroupType deleteSecurityGroupType=MessageHelper.createMessage(DeleteSecurityGroupType.class,action.info.getEffectiveUserId());
  deleteSecurityGroupType.setGroupId(groupId);
  try {
    AsyncRequests.<DeleteSecurityGroupType,DeleteSecurityGroupResponseType>sendSync(configuration,deleteSecurityGroupType);
    return action;
  }
 catch (  Exception ex) {
    throw new ValidationFailedException("Security group " + groupId + " not yet deleted");
  }
}
