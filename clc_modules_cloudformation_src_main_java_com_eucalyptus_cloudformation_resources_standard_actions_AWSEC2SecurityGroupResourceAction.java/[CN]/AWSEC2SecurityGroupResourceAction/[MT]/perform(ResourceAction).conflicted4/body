{
  AWSEC2SecurityGroupResourceAction action=(AWSEC2SecurityGroupResourceAction)resourceAction;
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
  if (action.info.getCreatedEnoughToDelete() != Boolean.TRUE)   return action;
  String groupId=JsonHelper.getJsonNodeFromString(action.info.getGroupId()).asText();
  DescribeSecurityGroupsType describeSecurityGroupsType=MessageHelper.createMessage(DescribeSecurityGroupsType.class,action.info.getEffectiveUserId());
  describeSecurityGroupsType.setFilterSet(Lists.newArrayList(Filter.filter("group-id",groupId)));
  DescribeSecurityGroupsResponseType describeSecurityGroupsResponseType=AsyncRequests.sendSync(configuration,describeSecurityGroupsType);
  ArrayList<SecurityGroupItemType> securityGroupItemTypeArrayList=describeSecurityGroupsResponseType.getSecurityGroupInfo();
  if (securityGroupItemTypeArrayList == null || securityGroupItemTypeArrayList.isEmpty()) {
    return action;
  }
  DeleteSecurityGroupType deleteSecurityGroupType=MessageHelper.createMessage(DeleteSecurityGroupType.class,action.info.getEffectiveUserId());
  deleteSecurityGroupType.setGroupId(groupId);
  try {
    AsyncRequests.<DeleteSecurityGroupType,DeleteSecurityGroupResponseType>sendSync(configuration,deleteSecurityGroupType);
    return action;
  }
 catch (  Exception ex) {
    Throwable cause=Throwables.getRootCause(ex);
    throw new RetryAfterConditionCheckFailedException(ex.getMessage());
  }
}
