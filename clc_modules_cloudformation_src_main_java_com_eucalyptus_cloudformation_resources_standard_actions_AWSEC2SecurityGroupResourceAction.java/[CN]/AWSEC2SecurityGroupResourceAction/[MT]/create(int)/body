{
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
switch (stepNum) {
case 0:
    CreateSecurityGroupType createSecurityGroupType=new CreateSecurityGroupType();
  if (!Strings.isNullOrEmpty(properties.getGroupDescription())) {
    createSecurityGroupType.setGroupDescription(properties.getGroupDescription());
  }
if (!Strings.isNullOrEmpty(properties.getVpcId())) {
  createSecurityGroupType.setVpcId(properties.getVpcId());
}
String groupName=getDefaultPhysicalResourceId();
createSecurityGroupType.setGroupName(groupName);
createSecurityGroupType.setEffectiveUserId(getResourceInfo().getEffectiveUserId());
CreateSecurityGroupResponseType createSecurityGroupResponseType=AsyncRequests.<CreateSecurityGroupType,CreateSecurityGroupResponseType>sendSync(configuration,createSecurityGroupType);
String groupId=createSecurityGroupResponseType.getGroupId();
if (!Strings.isNullOrEmpty(properties.getVpcId())) {
info.setPhysicalResourceId(groupId);
}
 else {
info.setPhysicalResourceId(groupName);
}
info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(info.getPhysicalResourceId())));
info.setGroupId(JsonHelper.getStringFromJsonNode(new TextNode(groupId)));
break;
case 1:
if (properties.getTags() != null && !properties.getTags().isEmpty()) {
CreateTagsType createTagsType=new CreateTagsType();
createTagsType.setEffectiveUserId(info.getEffectiveUserId());
createTagsType.setResourcesSet(Lists.newArrayList(JsonHelper.getJsonNodeFromString(info.getGroupId()).textValue()));
createTagsType.setTagSet(EC2Helper.createTagSet(properties.getTags()));
AsyncRequests.<CreateTagsType,CreateTagsResponseType>sendSync(configuration,createTagsType);
}
break;
case 2:
if (properties.getSecurityGroupIngress() != null && !properties.getSecurityGroupIngress().isEmpty()) {
for (EC2SecurityGroupRule ec2SecurityGroupRule : properties.getSecurityGroupIngress()) {
AuthorizeSecurityGroupIngressType authorizeSecurityGroupIngressType=new AuthorizeSecurityGroupIngressType();
authorizeSecurityGroupIngressType.setEffectiveUserId(getResourceInfo().getEffectiveUserId());
authorizeSecurityGroupIngressType.setGroupId(JsonHelper.getJsonNodeFromString(info.getGroupId()).textValue());
if (!Strings.isNullOrEmpty(ec2SecurityGroupRule.getCidrIp()) && (!Strings.isNullOrEmpty(ec2SecurityGroupRule.getSourceSecurityGroupId()) || !Strings.isNullOrEmpty(ec2SecurityGroupRule.getSourceSecurityGroupName()) || !Strings.isNullOrEmpty(ec2SecurityGroupRule.getSourceSecurityGroupOwnerId()))) {
throw new ValidationErrorException("Both CidrIp and SourceSecurityGroup cannot be specified in SecurityGroupIngress");
}
if (!Strings.isNullOrEmpty(ec2SecurityGroupRule.getSourceSecurityGroupId()) && !Strings.isNullOrEmpty(ec2SecurityGroupRule.getSourceSecurityGroupName())) {
throw new ValidationErrorException("Both SourceSecurityGroupName and SourceSecurityGroupId cannot be specified in SecurityGroupIngress");
}
IpPermissionType ipPermissionType=new IpPermissionType(ec2SecurityGroupRule.getIpProtocol(),ec2SecurityGroupRule.getFromPort(),ec2SecurityGroupRule.getToPort());
if (!Strings.isNullOrEmpty(ec2SecurityGroupRule.getCidrIp())) {
ipPermissionType.setCidrIpRanges(Lists.newArrayList(ec2SecurityGroupRule.getCidrIp()));
}
if (!Strings.isNullOrEmpty(ec2SecurityGroupRule.getSourceSecurityGroupId())) {
ipPermissionType.setGroups(Lists.newArrayList(new UserIdGroupPairType(ec2SecurityGroupRule.getSourceSecurityGroupOwnerId(),null,ec2SecurityGroupRule.getSourceSecurityGroupId())));
}
if (!Strings.isNullOrEmpty(ec2SecurityGroupRule.getSourceSecurityGroupName())) {
String sourceSecurityGroupOwnerId=ec2SecurityGroupRule.getSourceSecurityGroupOwnerId();
if (Strings.isNullOrEmpty(sourceSecurityGroupOwnerId)) {
sourceSecurityGroupOwnerId=stackEntity.getAccountId();
}
ipPermissionType.setGroups(Lists.newArrayList(new UserIdGroupPairType(sourceSecurityGroupOwnerId,ec2SecurityGroupRule.getSourceSecurityGroupName(),null)));
}
authorizeSecurityGroupIngressType.setIpPermissions(Lists.newArrayList(ipPermissionType));
AuthorizeSecurityGroupIngressResponseType authorizeSecurityGroupIngressResponseType=AsyncRequests.<AuthorizeSecurityGroupIngressType,AuthorizeSecurityGroupIngressResponseType>sendSync(configuration,authorizeSecurityGroupIngressType);
}
}
break;
case 3:
if (properties.getSecurityGroupEgress() != null && !properties.getSecurityGroupEgress().isEmpty()) {
RevokeSecurityGroupEgressType revokeSecurityGroupEgressType=new RevokeSecurityGroupEgressType();
revokeSecurityGroupEgressType.setEffectiveUserId(getResourceInfo().getEffectiveUserId());
revokeSecurityGroupEgressType.setGroupId(JsonHelper.getJsonNodeFromString(info.getGroupId()).textValue());
revokeSecurityGroupEgressType.setIpPermissions(Lists.newArrayList(DEFAULT_EGRESS_RULE()));
RevokeSecurityGroupEgressResponseType revokeSecurityGroupEgressResponseType=AsyncRequests.<RevokeSecurityGroupEgressType,RevokeSecurityGroupEgressResponseType>sendSync(configuration,revokeSecurityGroupEgressType);
for (EC2SecurityGroupRule ec2SecurityGroupRule : properties.getSecurityGroupEgress()) {
AuthorizeSecurityGroupEgressType authorizeSecurityGroupEgressType=new AuthorizeSecurityGroupEgressType();
authorizeSecurityGroupEgressType.setEffectiveUserId(getResourceInfo().getEffectiveUserId());
authorizeSecurityGroupEgressType.setGroupId(JsonHelper.getJsonNodeFromString(info.getGroupId()).textValue());
if (!Strings.isNullOrEmpty(ec2SecurityGroupRule.getCidrIp()) && !Strings.isNullOrEmpty(ec2SecurityGroupRule.getDestinationSecurityGroupId())) {
throw new ValidationErrorException("Both CidrIp and DestinationSecurityGroup cannot be specified in SecurityGroupEgress");
}
IpPermissionType ipPermissionType=new IpPermissionType(ec2SecurityGroupRule.getIpProtocol(),ec2SecurityGroupRule.getFromPort(),ec2SecurityGroupRule.getToPort());
if (!Strings.isNullOrEmpty(ec2SecurityGroupRule.getCidrIp())) {
ipPermissionType.setCidrIpRanges(Lists.newArrayList(ec2SecurityGroupRule.getCidrIp()));
}
if (!Strings.isNullOrEmpty(ec2SecurityGroupRule.getDestinationSecurityGroupId())) {
ipPermissionType.setGroups(Lists.newArrayList(new UserIdGroupPairType(null,null,ec2SecurityGroupRule.getDestinationSecurityGroupId())));
}
authorizeSecurityGroupEgressType.setIpPermissions(Lists.newArrayList(ipPermissionType));
AuthorizeSecurityGroupEgressResponseType authorizeSecurityGroupEgressResponseType=AsyncRequests.<AuthorizeSecurityGroupEgressType,AuthorizeSecurityGroupEgressResponseType>sendSync(configuration,authorizeSecurityGroupEgressType);
}
}
break;
default :
throw new IllegalStateException("Invalid step " + stepNum);
}
}
