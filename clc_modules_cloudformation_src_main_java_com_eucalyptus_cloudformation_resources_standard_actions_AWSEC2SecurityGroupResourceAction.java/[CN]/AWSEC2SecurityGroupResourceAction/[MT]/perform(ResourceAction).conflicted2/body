{
  AWSEC2SecurityGroupResourceAction action=(AWSEC2SecurityGroupResourceAction)resourceAction;
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
  CreateSecurityGroupType createSecurityGroupType=MessageHelper.createMessage(CreateSecurityGroupType.class,action.info.getEffectiveUserId());
  if (!Strings.isNullOrEmpty(action.properties.getGroupDescription())) {
    createSecurityGroupType.setGroupDescription(action.properties.getGroupDescription());
  }
  if (!Strings.isNullOrEmpty(action.properties.getVpcId())) {
    createSecurityGroupType.setVpcId(action.properties.getVpcId());
  }
  String groupName=action.getDefaultPhysicalResourceId();
  createSecurityGroupType.setGroupName(groupName);
  CreateSecurityGroupResponseType createSecurityGroupResponseType=AsyncRequests.<CreateSecurityGroupType,CreateSecurityGroupResponseType>sendSync(configuration,createSecurityGroupType);
  String groupId=createSecurityGroupResponseType.getGroupId();
  if (!Strings.isNullOrEmpty(action.properties.getVpcId())) {
    action.info.setPhysicalResourceId(groupId);
  }
 else {
    action.info.setPhysicalResourceId(groupName);
  }
  action.info.setCreatedEnoughToDelete(true);
  action.info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(action.info.getPhysicalResourceId())));
  action.info.setGroupId(JsonHelper.getStringFromJsonNode(new TextNode(groupId)));
  return action;
}
