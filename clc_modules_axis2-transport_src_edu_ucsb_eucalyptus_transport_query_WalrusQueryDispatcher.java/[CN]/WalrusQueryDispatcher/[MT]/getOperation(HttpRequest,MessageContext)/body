{
  Map operationParams=new HashMap();
  String[] target=null;
  String path=httpRequest.getOperationPath();
  boolean walrusInternalOperation=false;
  if (path.length() > 0) {
    target=getTarget(path);
  }
  String verb=httpRequest.getHttpMethod();
  Map<String,String> headers=httpRequest.getHeaders();
  String operationKey="";
  Map<String,String> params=httpRequest.getParameters();
  String operationName=null;
  if (headers.containsKey(StorageProperties.EUCALYPTUS_OPERATION)) {
    String value=headers.get(StorageProperties.EUCALYPTUS_OPERATION);
    for (    WalrusProperties.WalrusInternalOperations operation : WalrusProperties.WalrusInternalOperations.values()) {
      if (value.toLowerCase().equals(operation.toString().toLowerCase())) {
        operationName=operation.toString();
        walrusInternalOperation=true;
        break;
      }
    }
    if (!walrusInternalOperation) {
      for (      WalrusProperties.StorageOperations operation : WalrusProperties.StorageOperations.values()) {
        if (value.toLowerCase().equals(operation.toString().toLowerCase())) {
          operationName=operation.toString();
          walrusInternalOperation=true;
          break;
        }
      }
    }
  }
  if (target == null) {
    operationKey=SERVICE + verb;
  }
 else   if (target.length < 2) {
    if (!target[0].equals("")) {
      operationKey=BUCKET + verb;
      operationParams.put("Bucket",target[0]);
    }
 else {
      operationKey=SERVICE + verb;
    }
  }
 else {
    operationKey=OBJECT + verb;
    operationParams.put("Bucket",target[0]);
    operationParams.put("Key",target[1]);
  }
  if (!params.containsKey(OperationParameter.acl.toString())) {
    if (verb.equals(HTTPVerb.PUT.toString())) {
      messageContext.setProperty(WalrusProperties.STREAMING_HTTP_PUT,Boolean.TRUE);
      InputStream in=(InputStream)messageContext.getProperty("TRANSPORT_IN");
      BufferedInputStream bufferedIn=new BufferedInputStream(in);
      String key=target[0] + "." + target[1];
      String randomKey=key + "." + Hashes.getRandom(10);
      LinkedBlockingQueue<WalrusDataMessage> putQueue=getWriteMessenger().interruptAllAndGetQueue(key,randomKey);
      int dataLength=0;
      try {
        dataLength=bufferedIn.available();
      }
 catch (      IOException ex) {
        ex.printStackTrace();
      }
      Writer writer=new Writer(bufferedIn,dataLength,putQueue);
      writer.start();
      operationParams.put("ContentLength",(new Long(dataLength).toString()));
      operationParams.put(WalrusProperties.Headers.RandomKey.toString(),randomKey);
    }
 else     if (verb.equals(HTTPVerb.GET.toString())) {
      messageContext.setProperty(WalrusProperties.STREAMING_HTTP_GET,Boolean.TRUE);
      if (!walrusInternalOperation) {
        operationParams.put("GetData",Boolean.TRUE);
        operationParams.put("InlineData",Boolean.FALSE);
        operationParams.put("GetMetaData",Boolean.FALSE);
        Iterator<String> iterator=headers.keySet().iterator();
        boolean isExtendedGet=false;
        while (iterator.hasNext()) {
          String key=iterator.next();
          for (          WalrusProperties.ExtendedGetHeaders header : WalrusProperties.ExtendedGetHeaders.values()) {
            if (key.toLowerCase().equals(header.toString().toLowerCase())) {
              String value=headers.get(key);
              isExtendedGet=true;
              parseExtendedGetHeaders(operationParams,header.toString(),value);
            }
          }
        }
        if (isExtendedGet) {
          operationKey+="extended";
          operationParams.put("ReturnCompleteObjectOnConditionFailure",Boolean.FALSE);
        }
      }
 else {
        for (        WalrusProperties.InfoOperations operation : WalrusProperties.InfoOperations.values()) {
          if (operation.toString().equals(operationName)) {
            messageContext.removeProperty(WalrusProperties.STREAMING_HTTP_GET);
            break;
          }
        }
      }
    }
 else     if (verb.equals(HTTPVerb.HEAD.toString())) {
      messageContext.setProperty(WalrusProperties.STREAMING_HTTP_GET,Boolean.FALSE);
      if (!walrusInternalOperation) {
        operationParams.put("GetData",Boolean.FALSE);
        operationParams.put("InlineData",Boolean.FALSE);
        operationParams.put("GetMetaData",Boolean.FALSE);
      }
    }
  }
  if (verb.equals(HTTPVerb.PUT.toString()) && params.containsKey(OperationParameter.acl.toString())) {
    try {
      InputStream in=(InputStream)messageContext.getProperty("TRANSPORT_IN");
      BufferedInputStream bufferedIn=new BufferedInputStream(in);
      byte[] bytes=new byte[DATA_MESSAGE_SIZE];
      int bytesRead;
      String aclString="";
      while ((bytesRead=bufferedIn.read(bytes)) > 0) {
        aclString+=new String(bytes,0,bytesRead);
      }
      if (aclString.length() > 0) {
        XMLParser xmlParser=new XMLParser(aclString);
        AccessControlPolicyType accessControlPolicy=new AccessControlPolicyType();
        String ownerId=xmlParser.getValue("//Owner/ID");
        String displayName=xmlParser.getValue("//Owner/DisplayName");
        CanonicalUserType canonicalUser=new CanonicalUserType(ownerId,displayName);
        accessControlPolicy.setOwner(canonicalUser);
        AccessControlListType accessControlList=new AccessControlListType();
        ArrayList<Grant> grants=new ArrayList<Grant>();
        List<String> displayNames=xmlParser.getValues("//AccessControlList/Grant/Grantee/DisplayName");
        List<String> ids=xmlParser.getValues("//AccessControlList/Grant/Grantee/ID");
        List<String> permissions=xmlParser.getValues("//AccessControlList/Grant/Permission");
        if ((ids.size() == permissions.size()) && (ids.size() == displayNames.size())) {
          for (int i=0; i < ids.size(); ++i) {
            Grant grant=new Grant();
            grant.setGrantee(new CanonicalUserType(ids.get(i),displayNames.get(i)));
            grant.setPermission(permissions.get(i));
            grants.add(grant);
          }
        }
        accessControlList.setGrants(grants);
        accessControlPolicy.setAccessControlList(accessControlList);
        operationParams.put("AccessControlPolicy",accessControlPolicy);
      }
    }
 catch (    Exception ex) {
      LOG.warn(ex,ex);
    }
  }
  ArrayList paramsToRemove=new ArrayList();
  boolean addMore=true;
  Iterator iterator=params.keySet().iterator();
  while (iterator.hasNext()) {
    Object key=iterator.next();
    String keyString=key.toString().toLowerCase();
    String value=params.get(key);
    if (value != null) {
      String[] keyStringParts=keyString.split("-");
      if (keyStringParts.length > 1) {
        keyString="";
        for (int i=0; i < keyStringParts.length; ++i) {
          keyString+=toUpperFirst(keyStringParts[i]);
        }
      }
 else {
        keyString=toUpperFirst(keyString);
      }
      operationParams.put(keyString,value);
    }
    if (addMore) {
      operationKey+=keyString.toLowerCase();
      addMore=false;
    }
    paramsToRemove.add(key);
  }
  for (  Object key : paramsToRemove) {
    params.remove(key);
  }
  if (!headers.containsKey(StorageProperties.EUCALYPTUS_OPERATION)) {
    operationName=operationMap.get(operationKey);
  }
  httpRequest.setBindingArguments(operationParams);
  messageContext.setProperty(WalrusProperties.WALRUS_OPERATION,operationName);
  return operationName;
}
