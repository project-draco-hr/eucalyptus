{
  Map operationParams=new HashMap();
  String[] target=null;
  String path=httpRequest.getOperationPath();
  boolean walrusInternalOperation=false;
  if (path.length() > 0) {
    target=getTarget(path);
  }
  String verb=httpRequest.getHttpMethod();
  Map<String,String> headers=httpRequest.getHeaders();
  String operationKey="";
  Map<String,String> params=httpRequest.getParameters();
  String operationName=null;
  if (headers.containsKey(StorageProperties.EUCALYPTUS_OPERATION)) {
    String value=headers.get(StorageProperties.EUCALYPTUS_OPERATION);
    for (    WalrusProperties.WalrusInternalOperations operation : WalrusProperties.WalrusInternalOperations.values()) {
      if (value.toLowerCase().equals(operation.toString().toLowerCase())) {
        operationName=operation.toString();
        walrusInternalOperation=true;
        break;
      }
    }
    if (!walrusInternalOperation) {
      for (      WalrusProperties.StorageOperations operation : WalrusProperties.StorageOperations.values()) {
        if (value.toLowerCase().equals(operation.toString().toLowerCase())) {
          operationName=operation.toString();
          walrusInternalOperation=true;
          break;
        }
      }
    }
  }
  if (target == null) {
    operationKey=SERVICE + verb;
  }
 else   if (target.length < 2) {
    if (!target[0].equals("")) {
      operationKey=BUCKET + verb;
      operationParams.put("Bucket",target[0]);
      if (verb.equals(HTTPVerb.POST.toString())) {
        InputStream in=(InputStream)messageContext.getProperty("TRANSPORT_IN");
        messageContext.setProperty(WalrusProperties.STREAMING_HTTP_PUT,Boolean.TRUE);
        String contentType=headers.get(HTTP.CONTENT_TYPE);
        int contentLength=Integer.parseInt(headers.get(HTTP.CONTENT_LEN));
        POSTRequestContext postRequestContext=new POSTRequestContext(in,contentType,contentLength);
        FileUpload fileUpload=new FileUpload(new WalrusFileItemFactory());
        InputStream formDataIn=null;
        String objectKey=null;
        String key;
        Map<String,String> formFields=new HashMap<String,String>();
        try {
          List<FileItem> parts=fileUpload.parseRequest(postRequestContext);
          for (          FileItem part : parts) {
            if (part.isFormField()) {
              String fieldName=part.getFieldName().toString().toLowerCase();
              InputStream formFieldIn=part.getInputStream();
              int bytesRead;
              String fieldValue="";
              byte[] bytes=new byte[512];
              while ((bytesRead=formFieldIn.read(bytes)) > 0) {
                fieldValue+=new String(bytes,0,bytesRead);
              }
              formFields.put(fieldName,fieldValue);
            }
 else {
              formDataIn=part.getInputStream();
            }
          }
        }
 catch (        Exception ex) {
          LOG.warn(ex,ex);
          throw new EucalyptusCloudException("could not process form request");
        }
        String authenticationHeader="";
        formFields.put(WalrusProperties.FormField.bucket.toString(),target[0]);
        if (formFields.containsKey(WalrusProperties.FormField.key.toString())) {
          objectKey=formFields.get(WalrusProperties.FormField.key.toString());
        }
        if (formFields.containsKey(WalrusProperties.FormField.acl.toString())) {
          String acl=formFields.get(WalrusProperties.FormField.acl.toString());
          headers.put(WalrusProperties.AMZ_ACL,acl);
        }
        if (formFields.containsKey(WalrusProperties.FormField.success_action_redirect.toString())) {
          String successActionRedirect=formFields.get(WalrusProperties.FormField.success_action_redirect.toString());
          operationParams.put("SuccessActionRedirect",successActionRedirect);
        }
        if (formFields.containsKey(WalrusProperties.FormField.success_action_status.toString())) {
          Integer successActionStatus=Integer.parseInt(formFields.get(WalrusProperties.FormField.success_action_status.toString()));
          if (successActionStatus == 200 || successActionStatus == 201)           operationParams.put("SuccessActionStatus",successActionStatus);
 else           operationParams.put("SuccessActionStatus",204);
        }
 else {
          operationParams.put("SuccessActionStatus",204);
        }
        if (formFields.containsKey(WalrusProperties.FormField.policy.toString())) {
          String policy=new String(Base64.decode(formFields.remove(WalrusProperties.FormField.policy.toString())));
          String policyData;
          try {
            policyData=new String(Base64.encode(policy.getBytes()));
          }
 catch (          Exception ex) {
            LOG.warn(ex,ex);
            throw new EucalyptusCloudException("error reading policy data.");
          }
          try {
            JSONObject policyObject=new JSONObject(policy);
            String expiration=(String)policyObject.get(WalrusProperties.PolicyHeaders.expiration.toString());
            if (expiration != null) {
              Date expirationDate=DateUtils.parseIso8601DateTimeOrDate(expiration);
              if ((new Date()).getTime() > expirationDate.getTime()) {
                LOG.warn("Policy has expired.");
                throw new EucalyptusCloudException("Policy has expired.");
              }
            }
            List<String> policyItemNames=new ArrayList<String>();
            JSONArray conditions=(JSONArray)policyObject.get(WalrusProperties.PolicyHeaders.conditions.toString());
            for (int i=0; i < conditions.length(); ++i) {
              Object policyItem=conditions.get(i);
              if (policyItem instanceof JSONObject) {
                JSONObject jsonObject=(JSONObject)policyItem;
                if (!exactMatch(jsonObject,formFields,policyItemNames)) {
                  LOG.warn("Policy verification failed. ");
                  throw new EucalyptusCloudException("Policy verification failed.");
                }
              }
 else               if (policyItem instanceof JSONArray) {
                JSONArray jsonArray=(JSONArray)policyItem;
                if (!partialMatch(jsonArray,formFields,policyItemNames)) {
                  LOG.warn("Policy verification failed. ");
                  throw new EucalyptusCloudException("Policy verification failed.");
                }
              }
            }
            Set<String> formFieldsKeys=formFields.keySet();
            for (            String formKey : formFieldsKeys) {
              if (formKey.startsWith(WalrusProperties.IGNORE_PREFIX))               continue;
              boolean fieldOkay=false;
              for (              WalrusProperties.IgnoredFields field : WalrusProperties.IgnoredFields.values()) {
                if (formKey.equals(field.toString().toLowerCase())) {
                  fieldOkay=true;
                  break;
                }
              }
              if (fieldOkay)               continue;
              if (policyItemNames.contains(formKey))               continue;
              LOG.warn("All fields except those marked with x-ignore- should be in policy.");
              throw new EucalyptusCloudException("All fields except those marked with x-ignore- should be in policy.");
            }
          }
 catch (          Exception ex) {
            if (ex instanceof EucalyptusCloudException)             throw (EucalyptusCloudException)ex;
            LOG.warn(ex);
          }
          if (formFields.containsKey(WalrusProperties.FormField.AWSAccessKeyId.toString().toLowerCase())) {
            String accessKeyId=formFields.remove(WalrusProperties.FormField.AWSAccessKeyId.toString().toLowerCase());
            authenticationHeader+="AWS" + " " + accessKeyId + ":";
          }
          if (formFields.containsKey(WalrusProperties.FormField.signature.toString())) {
            String signature=formFields.remove(WalrusProperties.FormField.signature.toString());
            authenticationHeader+=signature;
            headers.put(HMACQuerySecurityHandler.SecurityParameter.Authorization.toString(),authenticationHeader);
          }
          headers.put(WalrusProperties.FormField.FormUploadPolicyData.toString(),policyData);
        }
        operationParams.put("Key",objectKey);
        key=target[0] + "." + objectKey;
        String randomKey=key + "." + Hashes.getRandom(10);
        LinkedBlockingQueue<WalrusDataMessage> putQueue=getWriteMessenger().interruptAllAndGetQueue(key,randomKey);
        int dataLength=0;
        try {
          dataLength=formDataIn.available();
        }
 catch (        IOException ex) {
          ex.printStackTrace();
        }
        Writer writer=new Writer(formDataIn,dataLength,putQueue);
        writer.start();
        operationParams.put("ContentLength",(new Long(dataLength).toString()));
        operationParams.put(WalrusProperties.Headers.RandomKey.toString(),randomKey);
      }
    }
 else {
      operationKey=SERVICE + verb;
    }
  }
 else {
    operationKey=OBJECT + verb;
    String objectKey="";
    String splitOn="";
    for (int i=1; i < target.length; ++i) {
      objectKey+=splitOn + target[i];
      splitOn="/";
    }
    operationParams.put("Bucket",target[0]);
    operationParams.put("Key",objectKey);
    if (!params.containsKey(OperationParameter.acl.toString())) {
      if (verb.equals(HTTPVerb.PUT.toString())) {
        messageContext.setProperty(WalrusProperties.STREAMING_HTTP_PUT,Boolean.TRUE);
        InputStream in=(InputStream)messageContext.getProperty("TRANSPORT_IN");
        InputStream inStream=in;
        if ((!walrusInternalOperation) || (!WalrusProperties.StorageOperations.StoreSnapshot.toString().equals(operationName))) {
          inStream=new BufferedInputStream(in);
        }
 else {
          try {
            inStream=new GZIPInputStream(in);
          }
 catch (          Exception ex) {
            LOG.warn(ex,ex);
            throw new EucalyptusCloudException("cannot process input");
          }
        }
        String key=target[0] + "." + objectKey;
        String randomKey=key + "." + Hashes.getRandom(10);
        LinkedBlockingQueue<WalrusDataMessage> putQueue=getWriteMessenger().interruptAllAndGetQueue(key,randomKey);
        int dataLength=0;
        try {
          dataLength=inStream.available();
        }
 catch (        IOException ex) {
          ex.printStackTrace();
        }
        Writer writer=new Writer(inStream,dataLength,putQueue);
        writer.start();
        operationParams.put("ContentLength",(new Long(dataLength).toString()));
        operationParams.put(WalrusProperties.Headers.RandomKey.toString(),randomKey);
      }
 else       if (verb.equals(HTTPVerb.GET.toString())) {
        messageContext.setProperty(WalrusProperties.STREAMING_HTTP_GET,Boolean.TRUE);
        if (!walrusInternalOperation) {
          operationParams.put("GetData",Boolean.TRUE);
          operationParams.put("InlineData",Boolean.FALSE);
          operationParams.put("GetMetaData",Boolean.TRUE);
          Iterator<String> iterator=headers.keySet().iterator();
          boolean isExtendedGet=false;
          while (iterator.hasNext()) {
            String key=iterator.next();
            for (            WalrusProperties.ExtendedGetHeaders header : WalrusProperties.ExtendedGetHeaders.values()) {
              if (key.toLowerCase().equals(header.toString().toLowerCase())) {
                String value=headers.get(key);
                isExtendedGet=true;
                parseExtendedGetHeaders(operationParams,header.toString(),value);
              }
            }
          }
          if (isExtendedGet) {
            operationKey+="extended";
            operationParams.put("ReturnCompleteObjectOnConditionFailure",Boolean.FALSE);
          }
        }
 else {
          for (          WalrusProperties.InfoOperations operation : WalrusProperties.InfoOperations.values()) {
            if (operation.toString().equals(operationName)) {
              messageContext.removeProperty(WalrusProperties.STREAMING_HTTP_GET);
              break;
            }
          }
        }
      }
 else       if (verb.equals(HTTPVerb.HEAD.toString())) {
        messageContext.setProperty(WalrusProperties.STREAMING_HTTP_GET,Boolean.FALSE);
        if (!walrusInternalOperation) {
          operationParams.put("GetData",Boolean.FALSE);
          operationParams.put("InlineData",Boolean.FALSE);
          operationParams.put("GetMetaData",Boolean.FALSE);
        }
      }
    }
  }
  if (verb.equals(HTTPVerb.PUT.toString()) && params.containsKey(OperationParameter.acl.toString())) {
    try {
      InputStream in=(InputStream)messageContext.getProperty("TRANSPORT_IN");
      BufferedInputStream bufferedIn=new BufferedInputStream(in);
      byte[] bytes=new byte[DATA_MESSAGE_SIZE];
      int bytesRead;
      String aclString="";
      while ((bytesRead=bufferedIn.read(bytes)) > 0) {
        aclString+=new String(bytes,0,bytesRead);
      }
      if (aclString.length() > 0) {
        XMLParser xmlParser=new XMLParser(aclString);
        AccessControlPolicyType accessControlPolicy=new AccessControlPolicyType();
        String ownerId=xmlParser.getValue("//Owner/ID");
        String displayName=xmlParser.getValue("//Owner/DisplayName");
        CanonicalUserType canonicalUser=new CanonicalUserType(ownerId,displayName);
        accessControlPolicy.setOwner(canonicalUser);
        AccessControlListType accessControlList=new AccessControlListType();
        ArrayList<Grant> grants=new ArrayList<Grant>();
        List<String> permissions=xmlParser.getValues("//AccessControlList/Grant/Permission");
        DTMNodeList grantees=xmlParser.getNodes("//AccessControlList/Grant/Grantee");
        for (int i=0; i < grantees.getLength(); ++i) {
          String canonicalUserName=xmlParser.getValue(grantees.item(i),"DisplayName");
          if (canonicalUserName.length() > 0) {
            String id=xmlParser.getValue(grantees.item(i),"ID");
            Grant grant=new Grant();
            Grantee grantee=new Grantee();
            grantee.setCanonicalUser(new CanonicalUserType(id,canonicalUserName));
            grant.setGrantee(grantee);
            grant.setPermission(permissions.get(i));
            grants.add(grant);
          }
 else {
            String groupUri=xmlParser.getValue(grantees.item(i),"URI");
            if (groupUri.length() == 0)             throw new EucalyptusCloudException("malformed access control list");
            Grant grant=new Grant();
            Grantee grantee=new Grantee();
            grantee.setGroup(new Group(groupUri));
            grant.setGrantee(grantee);
            grant.setPermission(permissions.get(i));
            grants.add(grant);
          }
        }
        accessControlList.setGrants(grants);
        accessControlPolicy.setAccessControlList(accessControlList);
        operationParams.put("AccessControlPolicy",accessControlPolicy);
      }
    }
 catch (    Exception ex) {
      LOG.warn(ex);
      throw new EucalyptusCloudException(ex.getMessage());
    }
  }
  ArrayList paramsToRemove=new ArrayList();
  boolean addMore=true;
  Iterator iterator=params.keySet().iterator();
  while (iterator.hasNext()) {
    Object key=iterator.next();
    String keyString=key.toString().toLowerCase();
    boolean dontIncludeParam=false;
    for (    HMACQuerySecurityHandler.SecurityParameter securityParam : HMACQuerySecurityHandler.SecurityParameter.values()) {
      if (keyString.equals(securityParam.toString().toLowerCase())) {
        dontIncludeParam=true;
        break;
      }
    }
    if (dontIncludeParam)     continue;
    String value=params.get(key);
    if (value != null) {
      String[] keyStringParts=keyString.split("-");
      if (keyStringParts.length > 1) {
        keyString="";
        for (int i=0; i < keyStringParts.length; ++i) {
          keyString+=toUpperFirst(keyStringParts[i]);
        }
      }
 else {
        keyString=toUpperFirst(keyString);
      }
      operationParams.put(keyString,value);
    }
    if (addMore) {
      operationKey+=keyString.toLowerCase();
      addMore=false;
    }
    paramsToRemove.add(key);
  }
  for (  Object key : paramsToRemove) {
    params.remove(key);
  }
  if (!walrusInternalOperation) {
    operationName=operationMap.get(operationKey);
  }
  httpRequest.setBindingArguments(operationParams);
  messageContext.setProperty(WalrusProperties.WALRUS_OPERATION,operationName);
  return operationName;
}
