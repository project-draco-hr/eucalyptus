{
  List<MetricDatum> result=Lists.<MetricDatum>newArrayList();
  Dimensions dims=new Dimensions();
  Dimension lb=new Dimension();
  lb.setName("LoadBalancerName");
  lb.setValue(this.loadbalancer);
  Dimension az=new Dimension();
  az.setName("AvailabilityZone");
  az.setValue(this.availabilityZone);
  dims.setMember(Lists.newArrayList(lb,az));
  if (this.latency > 0 && this.requestCount > 0) {
    final MetricDatum latencyData=new MetricDatum();
    latencyData.setDimensions(dims);
    latencyData.setMetricName("Latency");
    latencyData.setUnit("Seconds");
    double latency=this.latency / (double)this.requestCount;
    latencyData.setValue(latency);
    result.add(latencyData);
  }
  if (this.requestCount > 0) {
    final MetricDatum reqCountData=new MetricDatum();
    reqCountData.setDimensions(dims);
    reqCountData.setMetricName("RequestCount");
    reqCountData.setUnit("Count");
    final StatisticSet sset=new StatisticSet();
    sset.setSampleCount((double)this.requestCount);
    sset.setMaximum(1.0);
    sset.setMinimum(1.0);
    sset.setSum((double)this.requestCount);
    reqCountData.setStatisticValues(sset);
    result.add(reqCountData);
  }
  if (this.httpCode_ELB_4XX > 0) {
    final MetricDatum httpCode_ELB_4XX=new MetricDatum();
    httpCode_ELB_4XX.setDimensions(dims);
    httpCode_ELB_4XX.setMetricName("HTTPCode_ELB_4XX");
    httpCode_ELB_4XX.setUnit("Count");
    final StatisticSet sset=new StatisticSet();
    sset.setSampleCount((double)this.httpCode_ELB_4XX);
    sset.setMaximum(0.0);
    sset.setMinimum(0.0);
    sset.setSum((double)this.httpCode_ELB_4XX);
    httpCode_ELB_4XX.setStatisticValues(sset);
    result.add(httpCode_ELB_4XX);
  }
  if (this.httpCode_ELB_5XX > 0) {
    final MetricDatum httpCode_ELB_5XX=new MetricDatum();
    httpCode_ELB_5XX.setDimensions(dims);
    httpCode_ELB_5XX.setMetricName("HTTPCode_ELB_5XX");
    httpCode_ELB_5XX.setUnit("Count");
    final StatisticSet sset=new StatisticSet();
    sset.setSampleCount((double)this.httpCode_ELB_5XX);
    sset.setMaximum(0.0);
    sset.setMinimum(0.0);
    sset.setSum((double)this.httpCode_ELB_5XX);
    httpCode_ELB_5XX.setStatisticValues(sset);
    result.add(httpCode_ELB_5XX);
  }
  if (this.httpCode_Backend_2XX > 0) {
    final MetricDatum httpCode_Backend_2XX=new MetricDatum();
    httpCode_Backend_2XX.setDimensions(dims);
    httpCode_Backend_2XX.setMetricName("HTTPCode_Backend_2XX");
    httpCode_Backend_2XX.setUnit("Count");
    final StatisticSet sset=new StatisticSet();
    sset.setSampleCount((double)this.httpCode_Backend_2XX);
    sset.setMaximum(0.0);
    sset.setMinimum(0.0);
    sset.setSum((double)this.httpCode_Backend_2XX);
    httpCode_Backend_2XX.setStatisticValues(sset);
    result.add(httpCode_Backend_2XX);
  }
  if (this.httpCode_Backend_3XX > 0) {
    final MetricDatum httpCode_Backend_3XX=new MetricDatum();
    httpCode_Backend_3XX.setDimensions(dims);
    httpCode_Backend_3XX.setMetricName("HTTPCode_Backend_3XX");
    httpCode_Backend_3XX.setUnit("Count");
    final StatisticSet sset=new StatisticSet();
    sset.setSampleCount((double)this.httpCode_Backend_3XX);
    sset.setMaximum(0.0);
    sset.setMinimum(0.0);
    sset.setSum((double)this.httpCode_Backend_3XX);
    httpCode_Backend_3XX.setStatisticValues(sset);
    result.add(httpCode_Backend_3XX);
  }
  if (this.httpCode_Backend_4XX > 0) {
    final MetricDatum httpCode_Backend_4XX=new MetricDatum();
    httpCode_Backend_4XX.setDimensions(dims);
    httpCode_Backend_4XX.setMetricName("HTTPCode_Backend_4XX");
    httpCode_Backend_4XX.setUnit("Count");
    final StatisticSet sset=new StatisticSet();
    sset.setSampleCount((double)this.httpCode_Backend_4XX);
    sset.setMaximum(0.0);
    sset.setMinimum(0.0);
    sset.setSum((double)this.httpCode_Backend_4XX);
    httpCode_Backend_4XX.setStatisticValues(sset);
    result.add(httpCode_Backend_4XX);
  }
  if (this.httpCode_Backend_5XX > 0) {
    final MetricDatum httpCode_Backend_5XX=new MetricDatum();
    httpCode_Backend_5XX.setDimensions(dims);
    httpCode_Backend_5XX.setMetricName("HTTPCode_Backend_5XX");
    httpCode_Backend_5XX.setUnit("Count");
    final StatisticSet sset=new StatisticSet();
    sset.setSampleCount((double)this.httpCode_Backend_5XX);
    sset.setMaximum(0.0);
    sset.setMinimum(0.0);
    sset.setSum((double)this.httpCode_Backend_5XX);
    httpCode_Backend_5XX.setStatisticValues(sset);
    result.add(httpCode_Backend_5XX);
  }
  return result;
}
