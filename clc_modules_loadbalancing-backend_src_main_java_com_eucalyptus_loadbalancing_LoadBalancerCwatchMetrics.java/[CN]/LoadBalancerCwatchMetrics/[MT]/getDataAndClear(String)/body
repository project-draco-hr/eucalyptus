{
  final MetricData data=new MetricData();
  data.setMember(Lists.<MetricDatum>newArrayList());
  final List<ElbDimension> toCleanup=Lists.newArrayList();
  final Map<ElbDimension,Integer> healthyCountMap=new HashMap<ElbDimension,Integer>();
  final Map<ElbDimension,Integer> unhealthyCountMap=new HashMap<ElbDimension,Integer>();
  final List<BackendInstance> candidates=Lists.newArrayList(Iterables.filter(this.instanceHealthMap.keySet(),new Predicate<BackendInstance>(){
    @Override public boolean apply(    @Nullable BackendInstance instance){
      try {
        if (!userId.equals(instance.getUserId()))         return false;
        return true;
      }
 catch (      final Exception ex) {
        return false;
      }
    }
  }
));
synchronized (lock) {
    for (    final BackendInstance instance : candidates) {
      if (!this.instanceHealthMap.containsKey(instance))       continue;
      final ElbDimension thisDim=this.instanceToDimensionMap.get(instance);
      if (!healthyCountMap.containsKey(thisDim))       healthyCountMap.put(thisDim,0);
      if (!unhealthyCountMap.containsKey(thisDim))       unhealthyCountMap.put(thisDim,0);
      if (this.instanceHealthMap.get(instance).booleanValue())       healthyCountMap.put(thisDim,healthyCountMap.get(thisDim) + 1);
 else       unhealthyCountMap.put(thisDim,unhealthyCountMap.get(thisDim) + 1);
    }
    for (    final ElbDimension dim : this.metricsMap.keySet()) {
      if (!dim.getUserId().equals(userId))       continue;
      final ElbAggregate aggr=this.metricsMap.get(dim);
      final List<MetricDatum> datumList=aggr.toELBStatistics();
      Dimensions dims=new Dimensions();
      Dimension lb=new Dimension();
      lb.setName("LoadBalancerName");
      lb.setValue(dim.getLoadbalancer());
      Dimension az=new Dimension();
      az.setName("AvailabilityZone");
      az.setValue(dim.getAvailabilityZone());
      dims.setMember(Lists.newArrayList(lb,az));
      if (healthyCountMap.containsKey(dim)) {
        int numHealthy=healthyCountMap.get(dim);
        if (numHealthy >= 0) {
          MetricDatum datum=new MetricDatum();
          datum.setDimensions(dims);
          datum.setMetricName("HealthyHostCount");
          datum.setUnit("Count");
          final StatisticSet sset=new StatisticSet();
          sset.setSampleCount(1.0);
          sset.setMaximum((double)numHealthy);
          sset.setMinimum((double)numHealthy);
          sset.setSum((double)numHealthy);
          datum.setStatisticValues(sset);
          datumList.add(datum);
        }
      }
      if (unhealthyCountMap.containsKey(dim)) {
        int numUnhealthy=unhealthyCountMap.get(dim);
        if (numUnhealthy >= 0) {
          MetricDatum datum=new MetricDatum();
          datum.setDimensions(dims);
          datum.setMetricName("UnHealthyHostCount");
          datum.setUnit("Count");
          final StatisticSet sset=new StatisticSet();
          sset.setSampleCount(1.0);
          sset.setMaximum((double)numUnhealthy);
          sset.setMinimum((double)numUnhealthy);
          sset.setSum((double)numUnhealthy);
          datum.setStatisticValues(sset);
          datumList.add(datum);
        }
      }
      if (datumList.size() > 0)       data.getMember().addAll(datumList);
      toCleanup.add(dim);
    }
    for (    final ElbDimension cleanup : toCleanup) {
      this.metricsMap.remove(cleanup);
      healthyCountMap.remove(cleanup);
      unhealthyCountMap.remove(cleanup);
    }
    for (    final BackendInstance instance : candidates) {
      this.instanceHealthMap.remove(instance);
      this.instanceToDimensionMap.remove(instance);
    }
  }
  return data;
}
