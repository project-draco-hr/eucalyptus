{
  DescribeInstanceTypesResponseType reply=request.getReply();
  final boolean administrator=Contexts.lookup().isAdministrator();
  for (  final VmType v : Iterables.filter(VmTypes.list(),CloudMetadatas.filteringFor(VmType.class).byId(request.getInstanceTypes()).byPrivileges().buildPredicate())) {
    VmTypeDetails vmTypeDetails=new VmTypeDetails(){
{
        this.setName(v.getName());
        this.setDisk(v.getDisk());
        this.setCpu(v.getCpu());
        this.setMemory(v.getMemory());
        this.setNetworkInterfaces(v.getNetworkInterfaces());
        if (request.getVerbose()) {
          for (          EphemeralDisk e : v.getEphemeralDisks()) {
            this.getEphemeralDisk().add(new VmTypeEphemeralDisk(e.getDiskName(),e.getDeviceName(),e.getSize(),e.getFormat().name()));
          }
        }
        if (request.getAvailability()) {
          if (!administrator) {
            throw new ClientComputeException("AuthFailure","Not permitted to access availability");
          }
          for (          ServiceConfiguration cc : Topology.enabledServices(ClusterController.class)) {
            VmTypeAvailability available=Clusters.lookup(cc).getNodeState().getAvailability(v.getName());
            VmTypeZoneStatus status=VmAvailabilityToZoneStatus.INSTANCE.apply(available);
            status.setZoneName(cc.getPartition());
            this.getAvailability().add(status);
          }
        }
      }
    }
;
    reply.getInstanceTypeDetails().add(vmTypeDetails);
  }
  return reply;
}
