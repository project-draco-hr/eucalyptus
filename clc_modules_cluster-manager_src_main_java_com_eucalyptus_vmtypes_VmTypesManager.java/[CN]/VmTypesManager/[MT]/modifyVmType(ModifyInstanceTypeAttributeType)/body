{
  final ModifyInstanceTypeAttributeResponseType reply=request.getReply();
  if (Contexts.lookup().isAdministrator()) {
    final Function<String,VmType> modifyFunc=new Function<String,VmType>(){
      @Override public VmType apply(      String vmTypeName){
        try {
          VmType vmType=VmTypes.lookup(vmTypeName);
          if (request.getReset()) {
            PredefinedTypes defaultVmType=PredefinedTypes.valueOf(vmTypeName.toUpperCase().replace(".",""));
            vmType.setCpu(defaultVmType.getCpu());
            vmType.setDisk(defaultVmType.getDisk());
            vmType.setMemory(defaultVmType.getMemory());
            vmType.setNetworkInterfaces(defaultVmType.getEthernetInterfaceLimit());
          }
 else {
            vmType.setCpu(MoreObjects.firstNonNull(request.getCpu(),vmType.getCpu()));
            vmType.setDisk(MoreObjects.firstNonNull(request.getDisk(),vmType.getDisk()));
            vmType.setMemory(MoreObjects.firstNonNull(request.getMemory(),vmType.getMemory()));
            vmType.setNetworkInterfaces(MoreObjects.firstNonNull(request.getNetworkInterfaces(),vmType.getNetworkInterfaces()));
          }
          VmTypes.update(vmType);
          return vmType;
        }
 catch (        NoSuchMetadataException ex) {
          throw Exceptions.toUndeclared(ex);
        }
      }
    }
;
    try {
      final VmType before=VmTypes.lookup(request.getName());
      if (!RestrictedTypes.filterPrivileged().apply(before)) {
        throw new EucalyptusCloudException("Authorization failed.");
      }
      final VmType after=Entities.asTransaction(modifyFunc).apply(request.getName());
      reply.setPreviousInstanceType(TypeMappers.transform(before,VmTypeDetails.class));
      reply.setInstanceType(TypeMappers.transform(after,VmTypeDetails.class));
    }
 catch (    NoSuchMetadataException ex) {
      throw new EucalyptusCloudException("Failed to lookup the requested instance type: " + request.getName(),ex);
    }
  }
 else {
    throw new EucalyptusCloudException("Authorization failed.");
  }
  return reply;
}
