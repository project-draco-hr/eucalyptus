{
  final String className=req.getParameter("className");
  final String methodName=req.getParameter("methodName");
  final String methodArgs=req.getParameter("methodArgs");
  final String sessionId=req.getParameter("sessionId");
  final String[] methodArgsArray;
  if (methodArgs == null) {
    methodArgsArray=new String[0];
  }
 else {
    methodArgsArray=methodArgs.split(",");
  }
  if (className == null || methodName == null || sessionId == null) {
    throw new ServletException("className, methodName, sessionId params must be present");
  }
  LOG.info(String.format("CommandServlet called, class:%s method:%s args:%s",className,methodName,methodArgs));
  try {
    if (EucalyptusWebBackendImpl.verifySession(sessionId) == null) {
      throw new ServletException("Invalid session id");
    }
  }
 catch (  SerializableException ex) {
    LOG.error(ex);
    throw new ServletException(ex);
  }
  Class[] params=new Class[methodArgsArray.length];
  for (int j=0; j < params.length; j++) {
    params[j]=String.class;
  }
  Method method=null;
  try {
    method=Class.forName(className).getDeclaredMethod(methodName,params);
  }
 catch (  Exception ex) {
    throw new ServletException(ex);
  }
  if (!method.isAnnotationPresent(ExposedCommand.class)) {
    throw new ServletException("Method lacks ExposedCommand annotation");
  }
  try {
    method.invoke(null,(Object[])methodArgsArray);
  }
 catch (  Exception ex) {
    LOG.error("Invocation failed of method" + method,ex);
    throw new ServletException(ex);
  }
  res.setStatus(HttpServletResponse.SC_OK);
}
