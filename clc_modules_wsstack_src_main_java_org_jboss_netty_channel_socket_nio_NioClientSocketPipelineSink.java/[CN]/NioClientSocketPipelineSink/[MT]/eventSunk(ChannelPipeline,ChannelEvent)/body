{
  if (e instanceof ChannelStateEvent) {
    ChannelStateEvent event=(ChannelStateEvent)e;
    NioClientSocketChannel channel=(NioClientSocketChannel)event.getChannel();
    ChannelFuture future=event.getFuture();
    ChannelState state=event.getState();
    Object value=event.getValue();
switch (state) {
case OPEN:
      if (Boolean.FALSE.equals(value)) {
        NioWorker.close(channel,future);
      }
    break;
case BOUND:
  if (value != null) {
    bind(channel,future,(SocketAddress)value);
  }
 else {
    NioWorker.close(channel,future);
  }
break;
case CONNECTED:
if (value != null) {
connect(channel,future,(SocketAddress)value);
}
 else {
NioWorker.close(channel,future);
}
break;
case INTEREST_OPS:
NioWorker.setInterestOps(channel,future,((Integer)value).intValue());
break;
}
}
 else if (e instanceof MessageEvent) {
MessageEvent event=(MessageEvent)e;
NioSocketChannel channel=(NioSocketChannel)event.getChannel();
boolean offered=channel.writeBuffer.offer(event);
assert offered;
NioWorker.write(channel,true);
}
}
