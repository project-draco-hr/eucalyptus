def __init__(self):
    self.config = ConfigLoader().getParser()
    if self.config.has_option('server', 'mockpath'):
        self.mockpath = self.config.get('server', 'mockpath')
    else:
        self.mockpath = 'mockdata'
    with open(os.path.join(self.mockpath, 'Zones.json')) as f:
        self.zones = json.load(f, cls=BotoJsonDecoder)
    with open(os.path.join(self.mockpath, 'Images.json')) as f:
        self.images = json.load(f, cls=BotoJsonDecoder)
    with open(os.path.join(self.mockpath, 'Instances.json')) as f:
        self.instances = json.load(f, cls=BotoJsonDecoder)
    with open(os.path.join(self.mockpath, 'Addresses.json')) as f:
        self.addresses = json.load(f, cls=BotoJsonDecoder)
    with open(os.path.join(self.mockpath, 'Keypairs.json')) as f:
        self.keypairs = json.load(f, cls=BotoJsonDecoder)
    with open(os.path.join(self.mockpath, 'Groups.json')) as f:
        self.groups = json.load(f, cls=BotoJsonDecoder)
    with open(os.path.join(self.mockpath, 'Volumes.json')) as f:
        self.volumes = json.load(f, cls=BotoJsonDecoder)
    with open(os.path.join(self.mockpath, 'Snapshots.json')) as f:
        self.snapshots = json.load(f, cls=BotoJsonDecoder)
    with open(os.path.join(self.mockpath, 'ConsoleOutput.json')) as f:
        self.consoleoutput = json.load(f, cls=BotoJsonDecoder)
