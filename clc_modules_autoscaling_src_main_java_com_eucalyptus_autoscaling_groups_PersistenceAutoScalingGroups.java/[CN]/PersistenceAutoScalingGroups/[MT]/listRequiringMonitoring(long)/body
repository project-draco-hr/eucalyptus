{
  int group=(int)((System.currentTimeMillis() / interval) % 6);
  final Collection<String> suffixes=Lists.newArrayList();
switch (group) {
case 0:
    suffixes.add("0");
  suffixes.add("1");
suffixes.add("2");
break;
case 1:
suffixes.add("3");
suffixes.add("4");
suffixes.add("5");
break;
case 2:
suffixes.add("6");
suffixes.add("7");
suffixes.add("8");
break;
case 3:
suffixes.add("9");
suffixes.add("a");
suffixes.add("b");
break;
case 4:
suffixes.add("c");
suffixes.add("d");
break;
default :
suffixes.add("e");
suffixes.add("f");
break;
}
final Junction likeAnyOf=Restrictions.disjunction();
for (final String suffix : suffixes) {
likeAnyOf.add(Restrictions.ilike("id","%" + suffix));
}
return persistenceSupport.listByExample(AutoScalingGroup.withOwner(null),Predicates.alwaysTrue(),likeAnyOf,Collections.<String,String>emptyMap());
}
