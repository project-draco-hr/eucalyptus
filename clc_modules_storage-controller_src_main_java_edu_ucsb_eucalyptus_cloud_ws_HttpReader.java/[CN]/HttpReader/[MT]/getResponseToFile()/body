{
  byte[] bytes=new byte[StorageProperties.TRANSFER_CHUNK_SIZE];
  FileOutputStream fileOutputStream=null;
  BufferedOutputStream bufferedOut=null;
  try {
    File outFile;
    if (compressed)     outFile=new File(tempPath + File.separator + file.getName()+ Hashes.getRandom(16)+ ".gz");
 else     outFile=file;
    assert(method != null);
    httpClient.executeMethod(method);
    InputStream httpIn;
    httpIn=method.getResponseBodyAsStream();
    int bytesRead;
    fileOutputStream=new FileOutputStream(outFile);
    bufferedOut=new BufferedOutputStream(fileOutputStream);
    while ((bytesRead=httpIn.read(bytes)) > 0) {
      bufferedOut.write(bytes,0,bytesRead);
    }
    bufferedOut.close();
    if (compressed) {
      try {
        Runtime rt=Runtime.getRuntime();
        Process proc=rt.exec(new String[]{"/bin/gunzip","-c",outFile.getAbsolutePath()});
        StreamConsumer error=new StreamConsumer(proc.getErrorStream());
        StreamConsumer output=new StreamConsumer(proc.getInputStream(),file);
        error.start();
        output.start();
        output.join();
        error.join();
      }
 catch (      Throwable t) {
        LOG.error(t);
      }
    }
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
  }
 finally {
    method.releaseConnection();
    if (bufferedOut != null) {
      try {
        bufferedOut.close();
      }
 catch (      IOException e) {
        LOG.error(e);
      }
    }
    if (fileOutputStream != null) {
      try {
        fileOutputStream.close();
      }
 catch (      IOException e) {
        LOG.error(e);
      }
    }
  }
}
