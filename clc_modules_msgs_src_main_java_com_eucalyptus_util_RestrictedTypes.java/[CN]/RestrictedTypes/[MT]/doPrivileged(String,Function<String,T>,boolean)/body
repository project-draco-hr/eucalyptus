{
  assertThat("Resolver function must be not null: " + identifier,resolverFunction,notNullValue());
  Context ctx=Contexts.lookup();
  if (ctx.hasAdministrativePrivileges()) {
    return resolverFunction.apply(identifier);
  }
 else {
    Class<? extends BaseMessage> msgType=ctx.getRequest().getClass();
    LOG.debug("Attempting to lookup " + identifier + " using lookup: "+ resolverFunction.getClass()+ " typed as "+ Classes.genericsToClasses(resolverFunction));
    Class<?> rscType=findResourceClass(resolverFunction);
    Ats ats=findPolicyAnnotations(rscType,msgType);
    PolicyVendor vendor=ats.get(PolicyVendor.class);
    PolicyResourceType type=ats.get(PolicyResourceType.class);
    String action=getIamActionByMessageType();
    User requestUser=ctx.getUser();
    T requestedObject;
    try {
      requestedObject=resolverFunction.apply(identifier);
      if (requestedObject == null) {
        throw new NoSuchElementException("Failed to lookup requested " + rscType.getCanonicalName() + " with id "+ identifier+ " using "+ resolverFunction.getClass());
      }
    }
 catch (    NoSuchElementException ex) {
      throw ex;
    }
catch (    PersistenceException ex) {
      Logs.extreme().error(ex,ex);
      LOG.error(ex);
      throw ex;
    }
catch (    Exception ex) {
      Logs.extreme().error(ex,ex);
      LOG.error(ex);
      throw new PersistenceException("Error occurred while attempting to lookup " + identifier + " using lookup: "+ resolverFunction.getClass()+ " typed as "+ rscType,ex);
    }
    Account owningAccount=null;
    if (!ignoreOwningAccount) {
      owningAccount=Principals.nobodyFullName().getAccountNumber().equals(requestedObject.getOwner().getAccountNumber()) ? null : Accounts.lookupAccountById(requestedObject.getOwner().getAccountNumber());
    }
    if (!Permissions.isAuthorized(vendor.value(),type.value(),identifier,owningAccount,action,requestUser)) {
      throw new AuthException("Not authorized to use " + type.value() + " identified by "+ identifier+ " as the user "+ UserFullName.getInstance(requestUser));
    }
    return requestedObject;
  }
}
