{
  List<Class<?>> lookupTypes=Classes.genericsToClasses(allocator);
  if (lookupTypes.isEmpty()) {
    throw new IllegalArgumentException("Failed to find required generic type for lookup " + allocator.getClass() + " so the policy type for looking up "+ allocator+ " cannot be determined.");
  }
  Class<?> rscType;
  try {
    rscType=Iterables.find(lookupTypes,new Predicate<Class<?>>(){
      @Override public boolean apply(      Class<?> arg0){
        return RestrictedType.class.isAssignableFrom(arg0);
      }
    }
);
  }
 catch (  NoSuchElementException ex1) {
    LOG.error(ex1,ex1);
    throw ex1;
  }
  return rscType;
}
