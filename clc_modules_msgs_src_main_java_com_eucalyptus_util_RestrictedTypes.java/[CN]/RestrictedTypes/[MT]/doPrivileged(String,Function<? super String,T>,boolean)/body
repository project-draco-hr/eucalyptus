{
  checkParam("Resolver function must be not null: " + identifier,resolverFunction,notNullValue());
  Context ctx=Contexts.lookup();
  if (ctx.hasAdministrativePrivileges()) {
    return resolverFunction.apply(identifier);
  }
 else {
    Class<? extends BaseMessage> msgType=ctx.getRequest().getClass();
    LOG.debug("Attempting to lookup " + identifier + " using lookup: "+ resolverFunction.getClass()+ " typed as "+ Classes.genericsToClasses(resolverFunction));
    Class<?> rscType=findResourceClass(resolverFunction);
    Ats ats=findPolicyAnnotations(rscType);
    PolicyVendor vendor=ats.get(PolicyVendor.class);
    PolicyResourceType type=ats.get(PolicyResourceType.class);
    String action=getIamActionByMessageType();
    String actionVendor=findPolicyVendor(msgType);
    AuthContextSupplier authContextSupplier=ctx.getAuthContext();
    User requestUser=ctx.getUser();
    Map<String,String> evaluatedKeys=ctx.evaluateKeys();
    T requestedObject;
    try {
      requestedObject=resolverFunction.apply(identifier);
      if (requestedObject == null) {
        throw new NoSuchElementException("Failed to lookup requested " + rscType.getCanonicalName() + " with id "+ identifier+ " using "+ resolverFunction.getClass());
      }
    }
 catch (    NoSuchElementException ex) {
      throw ex;
    }
catch (    PersistenceException ex) {
      Logs.extreme().error(ex,ex);
      LOG.error(ex);
      throw ex;
    }
catch (    Exception ex) {
      Logs.extreme().error(ex,ex);
      LOG.error(ex);
      throw new PersistenceException("Error occurred while attempting to lookup " + identifier + " using lookup: "+ resolverFunction.getClass()+ " typed as "+ rscType,ex);
    }
    final PolicyEvaluationContext policyEvaluationContext=PolicyEvaluationContext.get();
    final PrincipalType principalType;
    final String principalName;
    if (policyEvaluationContext.hasAttribute(principalTypeKey) && policyEvaluationContext.hasAttribute(principalNameKey)) {
      principalType=policyEvaluationContext.getAttribute(principalTypeKey);
      principalName=policyEvaluationContext.getAttribute(principalNameKey);
    }
 else {
      principalType=PrincipalType.AWS;
      principalName=Accounts.getUserArn(requestUser);
    }
    AccountFullName owningAccount=null;
    if (!ignoreOwningAccount) {
      owningAccount=Principals.nobodyFullName().getAccountNumber().equals(requestedObject.getOwner().getAccountNumber()) ? null : AccountFullName.getInstance(requestedObject.getOwner().getAccountNumber());
    }
    final String qualifiedAction=PolicySpec.qualifiedName(actionVendor,action);
    try (final PolicyResourceContext policyResourceContext=PolicyResourceContext.of(requestedObject,qualifiedAction)){
      if (!Permissions.isAuthorized(principalType,principalName,findPolicy(requestedObject,actionVendor,action),PolicySpec.qualifiedName(vendor.value(),type.value()),identifier,owningAccount,qualifiedAction,requestUser,authContextSupplier.get().getPolicies(),evaluatedKeys)) {
        throw new AuthException("Not authorized to use " + type.value() + " identified by "+ identifier+ " as the user "+ UserFullName.getInstance(requestUser));
      }
    }
     return requestedObject;
  }
}
