{
  signer=(signingKey == null ? signer : subjectDn);
  signingKey=(signingKey == null ? keys.getPrivate() : signingKey);
  LOG.debug(EventRecord.caller(DefaultCryptoProvider.class,EventType.GENERATE_CERTIFICATE,signer.toString(),subjectDn.toString()));
  X509V3CertificateGenerator certGen=new X509V3CertificateGenerator();
  certGen.setSerialNumber(BigInteger.valueOf(System.nanoTime()).shiftLeft(4).add(BigInteger.valueOf((long)Math.rint(Math.random() * 1000))));
  certGen.setIssuerDN(signer);
  certGen.addExtension(X509Extensions.BasicConstraints,true,new BasicConstraints(true));
  Calendar cal=Calendar.getInstance();
  certGen.setNotBefore(cal.getTime());
  cal.add(Calendar.YEAR,5);
  certGen.setNotAfter(cal.getTime());
  certGen.setSubjectDN(subjectDn);
  certGen.setPublicKey(keys.getPublic());
  certGen.setSignatureAlgorithm(KEY_SIGNING_ALGORITHM);
  try {
    X509Certificate cert=certGen.generate(signingKey,PROVIDER);
    cert.checkValidity();
    return cert;
  }
 catch (  Exception e) {
    LOG.fatal(e,e);
    System.exit(-3);
    return null;
  }
}
