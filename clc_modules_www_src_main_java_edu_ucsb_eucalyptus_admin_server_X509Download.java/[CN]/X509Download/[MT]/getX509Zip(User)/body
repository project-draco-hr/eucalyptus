{
  X509Certificate cloudCert=null;
  final X509Certificate x509;
  String userAccessKey=null;
  String userSecretKey=null;
  KeyPair keyPair=null;
  try {
    for (    AccessKey k : u.getKeys()) {
      if (k.isActive()) {
        userAccessKey=k.getId();
        userSecretKey=k.getKey();
      }
    }
    if (userAccessKey == null) {
      AccessKey k=u.addKey(Hmacs.generateSecretKey(u.getName()));
      userAccessKey=k.getId();
      userSecretKey=k.getKey();
    }
    keyPair=Certs.generateKeyPair();
    x509=Certs.generateCertificate(keyPair,u.getName());
    x509.checkValidity();
    u.addCertificate(x509);
    cloudCert=SystemCredentialProvider.getCredentialProvider(Eucalyptus.class).getCertificate();
  }
 catch (  Exception e) {
    LOG.fatal(e,e);
    throw e;
  }
  ByteArrayOutputStream byteOut=new ByteArrayOutputStream();
  ZipOutputStream zipOut=new ZipOutputStream(byteOut);
  String fingerPrint=Certs.getFingerPrint(keyPair.getPublic());
  if (fingerPrint != null) {
    String baseName=X509Download.NAME_SHORT + "-" + u.getName()+ "-"+ fingerPrint.replaceAll(":","").toLowerCase().substring(0,8);
    zipOut.setComment("To setup the environment run: source /path/to/eucarc");
    StringBuffer sb=new StringBuffer();
    BigInteger number=u.getNumber();
    String userNumber=null;
    if (number != null) {
      userNumber=number.toString();
    }
    sb.append("EUCA_KEY_DIR=$(dirname $(readlink -f ${BASH_SOURCE}))");
    try {
      sb.append("\nexport S3_URL=" + SystemConfiguration.getWalrusUrl());
    }
 catch (    Throwable e) {
      sb.append("\necho WARN:  Walrus URL is not configured.");
    }
    sb.append("\nexport AWS_SNS_URL=" + SystemConfiguration.getCloudUrl().replaceAll("/Eucalyptus","/Notifications"));
    sb.append("\nexport EC2_URL=" + SystemConfiguration.getCloudUrl());
    sb.append("\nexport EC2_PRIVATE_KEY=${EUCA_KEY_DIR}/" + baseName + "-pk.pem");
    sb.append("\nexport EC2_CERT=${EUCA_KEY_DIR}/" + baseName + "-cert.pem");
    sb.append("\nexport EC2_JVM_ARGS=-Djavax.net.ssl.trustStore=${EUCA_KEY_DIR}/jssecacerts");
    sb.append("\nexport EUCALYPTUS_CERT=${EUCA_KEY_DIR}/cloud-cert.pem");
    sb.append("\nexport EC2_ACCESS_KEY='" + userAccessKey + "'");
    sb.append("\nexport EC2_SECRET_KEY='" + userSecretKey + "'");
    if (userNumber != null) {
      sb.append("\n# This is a bogus value; Eucalyptus does not need this but client tools do.\nexport EC2_USER_ID='" + userNumber + "'");
      sb.append("\nalias ec2-bundle-image=\"ec2-bundle-image --cert ${EC2_CERT} --privatekey ${EC2_PRIVATE_KEY} --user " + userNumber + " --ec2cert ${EUCALYPTUS_CERT}\"");
    }
    sb.append("\nalias ec2-upload-bundle=\"ec2-upload-bundle -a ${EC2_ACCESS_KEY} -s ${EC2_SECRET_KEY} --url ${S3_URL} --ec2cert ${EUCALYPTUS_CERT}\"");
    sb.append("\n");
    zipOut.putNextEntry(new ZipEntry("eucarc"));
    zipOut.write(sb.toString().getBytes());
    zipOut.closeEntry();
    zipOut.putNextEntry(new ZipEntry("cloud-cert.pem"));
    zipOut.write(PEMFiles.getBytes(cloudCert));
    zipOut.closeEntry();
    zipOut.putNextEntry(new ZipEntry("jssecacerts"));
    KeyStore tempKs=KeyStore.getInstance("jks");
    tempKs.load(null);
    tempKs.setCertificateEntry("eucalyptus",cloudCert);
    ByteArrayOutputStream bos=new ByteArrayOutputStream();
    tempKs.store(bos,"changeit".toCharArray());
    zipOut.write(bos.toByteArray());
    zipOut.closeEntry();
    zipOut.putNextEntry(new ZipEntry(baseName + "-pk.pem"));
    zipOut.write(PEMFiles.getBytes(keyPair.getPrivate()));
    zipOut.closeEntry();
    zipOut.putNextEntry(new ZipEntry(baseName + "-cert.pem"));
    zipOut.write(PEMFiles.getBytes(x509));
    zipOut.closeEntry();
  }
  zipOut.close();
  return byteOut.toByteArray();
}
