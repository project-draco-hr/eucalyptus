{
  final ValueSaver newPasswordSaver=ValueCheckerFactory.createValueSaver();
  final ValueChecker passwordEqualityChecker=ValueCheckerFactory.createEqualityChecker(ValueCheckerFactory.PASSWORDS_NOT_MATCH,newPasswordSaver);
  final ValueSaver oldPasswordSaver=ValueCheckerFactory.createValueSaver();
  final ValueChecker passwordInequalityChecker=ValueCheckerFactory.createInequalityChecker(ValueCheckerFactory.PASSWORD_NOT_CHANGED,oldPasswordSaver);
  final InputView dialog=this.clientFactory.getInputView();
  dialog.setPresenter(this);
  dialog.display(FIRST_TIME_CAPTION,FIRST_TIME_SUBJECT,new ArrayList<InputField>(Arrays.asList(new InputField(){
    @Override public String getTitle(){
      return EMAIL_INPUT_TITLE;
    }
    @Override public ValueType getType(){
      return ValueType.TEXT;
    }
    @Override public ValueChecker getChecker(){
      return ValueCheckerFactory.createEmailChecker();
    }
  }
,new InputField(){
    @Override public String getTitle(){
      return OLD_PASSWORD_INPUT_TITLE;
    }
    @Override public ValueType getType(){
      return ValueType.PASSWORD;
    }
    @Override public ValueChecker getChecker(){
      return oldPasswordSaver;
    }
  }
,new InputField(){
    @Override public String getTitle(){
      return NEW_PASSWORD_INPUT_TITLE;
    }
    @Override public ValueType getType(){
      return ValueType.NEWPASSWORD;
    }
    @Override public ValueChecker getChecker(){
      return ValueCheckerFactory.checkerForAll(passwordInequalityChecker,ValueCheckerFactory.createPasswordChecker(),newPasswordSaver);
    }
  }
,new InputField(){
    @Override public String getTitle(){
      return NEW_PASSWORD2_INPUT_TITLE;
    }
    @Override public ValueType getType(){
      return ValueType.PASSWORD;
    }
    @Override public ValueChecker getChecker(){
      return passwordEqualityChecker;
    }
  }
)));
}
