{
  ArrayList<Grant> grants=accessControlList.getGrants();
  Grant foundGrant=null;
  List<Grant> addGrants=new ArrayList<>();
  globalRead=globalReadACP=false;
  globalWrite=globalWriteACP=false;
  if (grants.size() > 0) {
    for (    Grant grant : grants) {
      String permission=grant.getPermission();
      if (permission.equals(WalrusProperties.CannedACL.aws_exec_read.toString())) {
        globalRead=globalReadACP=false;
        globalWrite=globalWriteACP=false;
        foundGrant=grant;
      }
 else       if (permission.equals(WalrusProperties.CannedACL.public_read.toString())) {
        globalReadACP=false;
        globalRead=true;
        globalWrite=globalWriteACP=false;
        foundGrant=grant;
      }
 else       if (permission.equals(WalrusProperties.CannedACL.public_read_write.toString())) {
        globalReadACP=globalWriteACP=false;
        globalRead=globalWrite=true;
        foundGrant=grant;
      }
 else       if (permission.equals(WalrusProperties.CannedACL.authenticated_read.toString())) {
        globalRead=globalReadACP=false;
        globalWrite=globalWriteACP=false;
        addGrants.add(new Grant(new Grantee(new Group(WalrusProperties.AUTHENTICATED_USERS_GROUP)),WalrusProperties.Permission.READ.toString()));
        foundGrant=grant;
      }
 else       if (permission.equals(WalrusProperties.CannedACL.private_only.toString())) {
        globalRead=globalReadACP=globalWrite=globalWriteACP=false;
        foundGrant=grant;
      }
 else       if (permission.equals(WalrusProperties.CannedACL.bucket_owner_full_control.toString())) {
        String bucketOwnerName=null;
        try {
          bucketOwnerName=Accounts.lookupAccountById(bucketOwnerId).getName();
        }
 catch (        AuthException ex) {
          bucketOwnerName="";
        }
        addGrants.add(new Grant(new Grantee(new CanonicalUserType(bucketOwnerId,bucketOwnerName)),WalrusProperties.Permission.FULL_CONTROL.toString()));
        foundGrant=grant;
      }
 else       if (permission.equals(WalrusProperties.CannedACL.bucket_owner_read.toString())) {
        String bucketOwnerName=null;
        try {
          bucketOwnerName=Accounts.lookupAccountById(bucketOwnerId).getName();
        }
 catch (        AuthException ex) {
          bucketOwnerName="";
        }
        addGrants.add(new Grant(new Grantee(new CanonicalUserType(bucketOwnerId,bucketOwnerName)),WalrusProperties.Permission.READ.toString()));
        foundGrant=grant;
      }
 else       if (permission.equals(WalrusProperties.CannedACL.log_delivery_write.toString())) {
        addGrants.add(new Grant(new Grantee(new Group(WalrusProperties.LOGGING_GROUP)),WalrusProperties.Permission.WRITE.toString()));
        addGrants.add(new Grant(new Grantee(new Group(WalrusProperties.LOGGING_GROUP)),WalrusProperties.Permission.READ_ACP.toString()));
        addGrants.add(new Grant(new Grantee(new CanonicalUserType(ownerId,bucketName)),WalrusProperties.Permission.FULL_CONTROL.toString()));
        foundGrant=grant;
      }
 else       if (grant.getGrantee().getGroup() != null) {
        String groupUri=grant.getGrantee().getGroup().getUri();
        if (groupUri.equals(WalrusProperties.ALL_USERS_GROUP)) {
          if (permission.equals(WalrusProperties.Permission.FULL_CONTROL.toString()))           globalRead=globalReadACP=globalWrite=globalWriteACP=true;
 else           if (permission.equals(WalrusProperties.Permission.READ.toString()))           globalRead=true;
 else           if (permission.equals(WalrusProperties.Permission.READ_ACP.toString()))           globalReadACP=true;
 else           if (permission.equals(WalrusProperties.Permission.WRITE.toString()))           globalWrite=true;
 else           if (permission.equals(WalrusProperties.Permission.WRITE_ACP.toString()))           globalWriteACP=true;
          foundGrant=grant;
        }
      }
    }
  }
  if (foundGrant != null) {
    grants.remove(foundGrant);
    if (addGrants != null && addGrants.size() > 0) {
      for (      Grant addGrant : addGrants) {
        grants.add(addGrant);
      }
    }
  }
  GrantInfo.addGrants(ownerId,grantInfos,accessControlList);
}
