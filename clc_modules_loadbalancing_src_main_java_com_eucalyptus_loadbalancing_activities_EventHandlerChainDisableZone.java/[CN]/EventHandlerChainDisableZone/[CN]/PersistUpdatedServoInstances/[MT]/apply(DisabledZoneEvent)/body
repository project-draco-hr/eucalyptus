{
  LoadBalancer lb=null;
  try {
    lb=LoadBalancers.getLoadbalancer(evt.getContext(),evt.getLoadBalancer());
  }
 catch (  NoSuchElementException ex) {
    throw new EventHandlerException("Could not find the loadbalancer with name=" + evt.getLoadBalancer(),ex);
  }
catch (  Exception ex) {
    throw new EventHandlerException("Error while looking for loadbalancer with name=" + evt.getLoadBalancer(),ex);
  }
  retiredInstances=Lists.newArrayList();
  final List<LoadBalancerZoneCoreView> currentZones=Lists.newArrayList(lb.getZones());
  for (  final LoadBalancerZoneCoreView zoneView : currentZones) {
    if (evt.getZones().contains(zoneView.getName())) {
      LoadBalancerZone zone=null;
      try {
        zone=LoadBalancerZoneEntityTransform.INSTANCE.apply(zoneView);
      }
 catch (      final Exception ex) {
        LOG.error("unable to transform zone from the view",ex);
        continue;
      }
      for (      final LoadBalancerServoInstanceCoreView instanceView : zone.getServoInstances()) {
        LoadBalancerServoInstance instance=null;
        try {
          instance=LoadBalancerServoInstanceEntityTransform.INSTANCE.apply(instanceView);
        }
 catch (        final Exception ex) {
          LOG.error("unable to transfrom servo-instance from the view",ex);
          continue;
        }
        final EntityTransaction db=Entities.get(LoadBalancerServoInstance.class);
        try {
          final LoadBalancerServoInstance update=Entities.uniqueResult(instance);
          update.setState(LoadBalancerServoInstance.STATE.Retired);
          Entities.persist(update);
          db.commit();
          retiredInstances.add(update);
        }
 catch (        final NoSuchElementException ex) {
          db.rollback();
          LOG.warn("Failed to update the servo instance's state: no such instance found");
        }
catch (        final Exception ex) {
          db.rollback();
          LOG.warn("Failed to update the servo instance's state",ex);
        }
 finally {
          if (db.isActive())           db.rollback();
        }
      }
    }
  }
}
