{
  LoadBalancer lb=null;
  try {
    lb=LoadBalancers.getLoadbalancer(evt.getContext().getUserFullName(),evt.getLoadBalancer());
  }
 catch (  NoSuchElementException ex) {
    throw new EventHandlerException("Could not find the loadbalancer with name=" + evt.getLoadBalancer(),ex);
  }
catch (  Exception ex) {
    throw new EventHandlerException("Error while looking for loadbalancer with name=" + evt.getLoadBalancer(),ex);
  }
  final List<LoadBalancerZone> currentZones=Lists.newArrayList(Collections2.filter(lb.getZones(),new Predicate<LoadBalancerZone>(){
    @Override public boolean apply(    @Nullable LoadBalancerZone arg0){
      return arg0.getState().equals(LoadBalancerZone.STATE.InService);
    }
  }
));
  final List<String> availableZones=Lists.newArrayList(Collections2.transform(currentZones,new Function<LoadBalancerZone,String>(){
    @Override public String apply(    @Nullable LoadBalancerZone arg0){
      return arg0.getName();
    }
  }
));
  final List<String> unknownZones=Lists.newArrayList();
  for (  final String requested : evt.getZones()) {
    if (!availableZones.contains(requested)) {
      unknownZones.add(requested);
    }
  }
  for (  final String unknown : unknownZones) {
    evt.getZones().remove(unknown);
  }
}
