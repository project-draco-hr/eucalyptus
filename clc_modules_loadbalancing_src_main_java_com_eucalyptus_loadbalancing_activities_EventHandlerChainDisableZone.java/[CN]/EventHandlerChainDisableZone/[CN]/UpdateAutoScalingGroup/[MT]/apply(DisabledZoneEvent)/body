{
  LoadBalancer lb=null;
  try {
    lb=LoadBalancers.getLoadbalancer(evt.getContext().getUserFullName(),evt.getLoadBalancer());
  }
 catch (  NoSuchElementException ex) {
    throw new EventHandlerException("Could not find the loadbalancer with name=" + evt.getLoadBalancer(),ex);
  }
catch (  Exception ex) {
    throw new EventHandlerException("Error while looking for loadbalancer with name=" + evt.getLoadBalancer(),ex);
  }
  group=lb.getAutoScaleGroup();
  if (group == null) {
    LOG.warn(String.format("No autoscaling group found for %s-%s",evt.getContext().getUserFullName(),evt.getLoadBalancer()));
    return;
  }
 else {
    this.groupName=group.getName();
    final List<LoadBalancerZone> currentZones=Lists.newArrayList(Collections2.filter(lb.getZones(),new Predicate<LoadBalancerZone>(){
      @Override public boolean apply(      @Nullable LoadBalancerZone arg0){
        return arg0.getState().equals(LoadBalancerZone.STATE.InService);
      }
    }
));
    final List<String> availableZones=Lists.newArrayList(Collections2.transform(currentZones,new Function<LoadBalancerZone,String>(){
      @Override public String apply(      @Nullable LoadBalancerZone arg0){
        return arg0.getName();
      }
    }
));
    final List<String> updatedZones=Lists.newArrayList();
    updatedZones.addAll(availableZones);
    for (    final String req : evt.getZones()) {
      updatedZones.remove(req);
    }
    try {
      int capacityPerZone=Integer.parseInt(EventHandlerChainNew.LOADBALANCER_NUM_VM);
      if (capacityPerZone <= 0)       capacityPerZone=1;
      final int newCapacity=capacityPerZone * updatedZones.size();
      EucalyptusActivityTasks.getInstance().updateAutoScalingGroup(this.groupName,updatedZones,newCapacity);
      this.beforeUpdate=availableZones;
      this.afterUpdate=updatedZones;
      final EntityTransaction db=Entities.get(LoadBalancerAutoScalingGroup.class);
      try {
        final LoadBalancerAutoScalingGroup update=Entities.uniqueResult(group);
        update.setCapacity(newCapacity);
        Entities.persist(update);
        db.commit();
      }
 catch (      NoSuchElementException ex) {
        db.rollback();
        LOG.error("failed to find the autoscaling group record",ex);
      }
catch (      Exception ex) {
        db.rollback();
        LOG.error("failed to update the autoscaling group record",ex);
      }
    }
 catch (    final Exception ex) {
      throw new EventHandlerException("failed to update the autoscaling group",ex);
    }
  }
}
