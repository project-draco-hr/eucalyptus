{
  PutMetricDataResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  try {
    LOG.trace("put metric data called");
    checkActionPermission(PolicySpec.CLOUDWATCH_PUTMETRICDATA,ctx);
    final OwnerFullName ownerFullName=ctx.getUserFullName();
    final List<MetricDatum> metricData=validateMetricData(request.getMetricData());
    final String namespace=validateNamespace(request.getNamespace(),true);
    final Boolean isUserAccountAdmin=Principals.isSameUser(Principals.systemUser(),Wrappers.unwrap(Context.class,Contexts.lookup()).getUser());
    LOG.trace("Namespace=" + namespace);
    LOG.trace("metricData=" + metricData);
    MetricType metricType=getMetricTypeFromNamespace(namespace);
    if (metricType == MetricType.System && !isUserAccountAdmin) {
      throw new InvalidParameterValueException("The value AWS/ for parameter Namespace is invalid.");
    }
    MetricDataQueue.getInstance().insertMetricData(ownerFullName.getAccountNumber(),namespace,metricData,metricType);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}
