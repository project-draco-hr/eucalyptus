{
  GetMetricStatisticsResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  try {
    checkActionPermission(PolicySpec.CLOUDWATCH_GETMETRICSTATISTICS,ctx);
    final OwnerFullName ownerFullName=ctx.getUserFullName();
    Statistics statistics=validateStatistics(request.getStatistics());
    final String namespace=validateNamespace(request.getNamespace(),true);
    final String metricName=validateMetricName(request.getMetricName(),true);
    final Date startTime=MetricManager.stripSeconds(validateStartTime(request.getStartTime(),true));
    final Date endTime=MetricManager.stripSeconds(validateEndTime(request.getEndTime(),true));
    final Integer period=validatePeriod(request.getPeriod(),true);
    validateDateOrder(startTime,endTime,"StartTime","EndTime",true,true);
    validateNotTooManyDataPoints(startTime,endTime,period,1440L);
    final Units units=validateUnits(request.getUnit(),false);
    final Map<String,String> dimensionMap=TransformationFunctions.DimensionsToMap.INSTANCE.apply(validateDimensions(request.getDimensions()));
    Collection<MetricStatistics> metrics;
    metrics=MetricManager.getMetricStatistics(ownerFullName.getAccountNumber(),metricName,namespace,dimensionMap,getMetricTypeFromNamespace(namespace),units,startTime,endTime,period);
    reply.getGetMetricStatisticsResult().setLabel(metricName);
    ArrayList<Datapoint> datapoints=convertMetricStatisticsToDataoints(statistics,metrics);
    if (datapoints.size() > 0) {
      Datapoints datapointsReply=new Datapoints();
      datapointsReply.setMember(datapoints);
      reply.getGetMetricStatisticsResult().setDatapoints(datapointsReply);
    }
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}
