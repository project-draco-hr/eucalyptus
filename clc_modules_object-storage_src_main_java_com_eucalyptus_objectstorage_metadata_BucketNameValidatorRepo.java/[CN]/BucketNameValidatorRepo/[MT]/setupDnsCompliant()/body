{
  IteratingValidator<String> dnsCompliant=new IteratingValidator<String>();
  List<Validator<String>> checks=Lists.newArrayListWithExpectedSize(5);
  checks.add(extendedValidator);
  checks.add(new Validator<String>(){
    @Override public boolean check(    String bucketName){
      return bucketName.length() >= 3 && bucketName.length() <= 63;
    }
  }
);
  checks.add(new Validator<String>(){
    @Override public boolean check(    String bucketName){
      if (bucketName.charAt(0) == '.' || bucketName.charAt(bucketName.length() - 1) == '.') {
        return false;
      }
      return true;
    }
  }
);
  checks.add(new Validator<String>(){
    @Override public boolean check(    String value){
      List<String> labels;
      if (value.contains(".")) {
        StringTokenizer tokenizer=new StringTokenizer(value,".",true);
        labels=Lists.newArrayList();
        String lastTok="";
        while (tokenizer.hasMoreElements()) {
          String curTok=tokenizer.nextToken();
          if (!".".equals(curTok)) {
            labels.add(curTok);
          }
 else           if (".".equals(lastTok) && ".".equals(curTok)) {
            return false;
          }
          lastTok=curTok;
        }
      }
 else {
        labels=Lists.newArrayListWithExpectedSize(1);
        labels.add(value);
      }
      for (      String label : labels) {
        char[] asChars=label.toCharArray();
        if (!isLowerOrNumber(asChars[0]) || !isLowerOrNumber(asChars[asChars.length - 1])) {
          return false;
        }
        for (        char ch : asChars) {
          if (!(isLowerOrNumber(ch) || ch == '-')) {
            return false;
          }
        }
      }
      return true;
    }
  }
);
  checks.add(new Validator<String>(){
    @Override public boolean check(    String value){
      return !IP_MATCHER.matcher(value).matches();
    }
  }
);
  dnsCompliant.setValidators(checks);
  return dnsCompliant;
}
