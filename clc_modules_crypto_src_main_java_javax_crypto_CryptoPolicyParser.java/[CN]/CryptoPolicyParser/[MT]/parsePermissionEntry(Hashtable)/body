{
  CryptoPermissionEntry e=new CryptoPermissionEntry();
  match("Permission");
  e.cryptoPermission=match("permission type");
  if (e.cryptoPermission.equals("javax.crypto.CryptoAllPermission")) {
    e.alg=CryptoAllPermission.ALG_NAME;
    e.maxKeySize=Integer.MAX_VALUE;
    return e;
  }
  if (peek("\"")) {
    e.alg=match("quoted string").toUpperCase(ENGLISH);
  }
 else {
    if (peek("*")) {
      match("*");
      e.alg=CryptoPermission.ALG_NAME_WILDCARD;
    }
 else {
      throw new ParsingException(st.lineno(),"Missing the algorithm name");
    }
  }
  peekAndMatch(",");
  if (peek("\"")) {
    e.exemptionMechanism=match("quoted string").toUpperCase(ENGLISH);
  }
  peekAndMatch(",");
  if (!isConsistent(e.alg,e.exemptionMechanism,processedPermissions)) {
    throw new ParsingException(st.lineno(),"Inconsistent policy");
  }
  if (peek("number")) {
    e.maxKeySize=match();
  }
 else {
    if (peek("*")) {
      match("*");
      e.maxKeySize=Integer.MAX_VALUE;
    }
 else {
      if (!peek(";")) {
        throw new ParsingException(st.lineno(),"Missing the maximum " + "allowable key size");
      }
 else {
        e.maxKeySize=Integer.MAX_VALUE;
      }
    }
  }
  peekAndMatch(",");
  if (peek("\"")) {
    String algParamSpecClassName=match("quoted string");
    Vector paramsV=new Vector(1);
    while (peek(",")) {
      match(",");
      if (peek("number")) {
        paramsV.addElement(new Integer(match()));
      }
 else {
        if (peek("*")) {
          match("*");
          paramsV.addElement(new Integer(Integer.MAX_VALUE));
        }
 else {
          throw new ParsingException(st.lineno(),"Expecting an integer");
        }
      }
    }
    Integer[] params=new Integer[paramsV.size()];
    paramsV.copyInto(params);
    e.checkParam=true;
    e.algParamSpec=getInstance(algParamSpecClassName,params);
  }
  return e;
}
