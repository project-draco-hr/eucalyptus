{
  String value=null;
switch (lookahead) {
case StreamTokenizer.TT_NUMBER:
    throw new ParsingException(st.lineno(),expect,"number " + String.valueOf(st.nval));
case StreamTokenizer.TT_EOF:
  throw new ParsingException("expected " + expect + ", read end of file");
case StreamTokenizer.TT_WORD:
if (expect.equalsIgnoreCase(st.sval)) {
  lookahead=st.nextToken();
}
 else if (expect.equalsIgnoreCase("permission type")) {
  value=st.sval;
  lookahead=st.nextToken();
}
 else throw new ParsingException(st.lineno(),expect,st.sval);
break;
case '"':
if (expect.equalsIgnoreCase("quoted string")) {
value=st.sval;
lookahead=st.nextToken();
}
 else if (expect.equalsIgnoreCase("permission type")) {
value=st.sval;
lookahead=st.nextToken();
}
 else throw new ParsingException(st.lineno(),expect,st.sval);
break;
case ',':
if (expect.equals(",")) lookahead=st.nextToken();
 else throw new ParsingException(st.lineno(),expect,",");
break;
case '{':
if (expect.equals("{")) lookahead=st.nextToken();
 else throw new ParsingException(st.lineno(),expect,"{");
break;
case '}':
if (expect.equals("}")) lookahead=st.nextToken();
 else throw new ParsingException(st.lineno(),expect,"}");
break;
case ';':
if (expect.equals(";")) lookahead=st.nextToken();
 else throw new ParsingException(st.lineno(),expect,";");
break;
case '*':
if (expect.equals("*")) lookahead=st.nextToken();
 else throw new ParsingException(st.lineno(),expect,"*");
break;
default :
throw new ParsingException(st.lineno(),expect,new String(new char[]{(char)lookahead}));
}
return value;
}
