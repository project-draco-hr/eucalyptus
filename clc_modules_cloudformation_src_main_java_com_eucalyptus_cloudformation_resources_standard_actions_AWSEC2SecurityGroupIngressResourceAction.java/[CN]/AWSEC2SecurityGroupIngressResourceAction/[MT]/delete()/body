{
  if (info.getPhysicalResourceId() == null)   return;
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
  DescribeSecurityGroupsType describeSecurityGroupsType=new DescribeSecurityGroupsType();
  describeSecurityGroupsType.setEffectiveUserId(info.getEffectiveUserId());
  DescribeSecurityGroupsResponseType describeSecurityGroupsResponseType=AsyncRequests.<DescribeSecurityGroupsType,DescribeSecurityGroupsResponseType>sendSync(configuration,describeSecurityGroupsType);
  ArrayList<SecurityGroupItemType> securityGroupItemTypeArrayList=describeSecurityGroupsResponseType.getSecurityGroupInfo();
  Map<String,String> nameToIdMap=Maps.newHashMap();
  if (securityGroupItemTypeArrayList != null) {
    for (    SecurityGroupItemType securityGroupItemType : securityGroupItemTypeArrayList) {
      nameToIdMap.put(securityGroupItemType.getGroupName(),securityGroupItemType.getGroupId());
    }
  }
  RevokeSecurityGroupIngressType revokeSecurityGroupIngressType=new RevokeSecurityGroupIngressType();
  revokeSecurityGroupIngressType.setEffectiveUserId(getResourceInfo().getEffectiveUserId());
  String groupName=null;
  if (properties.getGroupName() != null && !properties.getGroupName().isEmpty()) {
    groupName=properties.getGroupName();
  }
  String groupId=null;
  if (properties.getGroupId() != null && !properties.getGroupId().isEmpty()) {
    groupId=properties.getGroupId();
  }
  if (groupName != null && !nameToIdMap.containsKey(groupName)) {
    return;
  }
  if (groupId != null && !nameToIdMap.containsValue(groupId)) {
    return;
  }
  if (groupId == null && groupName == null) {
    return;
  }
  if (groupName == null) {
    for (    String key : nameToIdMap.keySet()) {
      if (nameToIdMap.get(key).equals(groupId)) {
        groupName=key;
        break;
      }
    }
  }
  if (groupId == null) {
    groupId=nameToIdMap.get(groupName);
  }
  if (!nameToIdMap.get(groupName).equals(groupId)) {
    return;
  }
  revokeSecurityGroupIngressType.setGroupName(groupName);
  revokeSecurityGroupIngressType.setGroupId(groupId);
  revokeSecurityGroupIngressType.setGroupName(groupName);
  revokeSecurityGroupIngressType.setGroupId(groupId);
  int fromPort=-1;
  String ipProtocol=properties.getIpProtocol();
  try {
    fromPort=Integer.parseInt(properties.getFromPort());
  }
 catch (  Exception ignore) {
  }
  int toPort=-1;
  try {
    toPort=Integer.parseInt(properties.getToPort());
  }
 catch (  Exception ignore) {
  }
  String sourceSecurityGroupName=properties.getSourceSecurityGroupName();
  String sourceSecurityGroupOwnerId=properties.getSourceSecurityGroupOwnerId();
  if (sourceSecurityGroupOwnerId == null && sourceSecurityGroupName != null) {
    sourceSecurityGroupOwnerId=stackEntity.getAccountId();
  }
  String cidrIp=properties.getCidrIp();
  IpPermissionType ipPermissionType=new IpPermissionType(ipProtocol,fromPort,toPort);
  if (sourceSecurityGroupName != null) {
    ipPermissionType.setGroups(Lists.newArrayList(new UserIdGroupPairType(sourceSecurityGroupOwnerId,sourceSecurityGroupName,null)));
  }
  if (cidrIp != null) {
    ipPermissionType.setCidrIpRanges(Lists.newArrayList(cidrIp));
  }
  revokeSecurityGroupIngressType.setIpPermissions(Lists.newArrayList(ipPermissionType));
  RevokeSecurityGroupIngressResponseType revokeSecurityGroupIngressResponseType=AsyncRequests.<RevokeSecurityGroupIngressType,RevokeSecurityGroupIngressResponseType>sendSync(configuration,revokeSecurityGroupIngressType);
}
