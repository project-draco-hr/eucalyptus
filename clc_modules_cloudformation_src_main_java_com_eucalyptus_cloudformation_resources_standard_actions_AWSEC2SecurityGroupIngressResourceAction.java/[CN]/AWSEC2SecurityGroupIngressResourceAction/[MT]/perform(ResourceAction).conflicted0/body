{
  AWSEC2SecurityGroupIngressResourceAction action=(AWSEC2SecurityGroupIngressResourceAction)resourceAction;
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
  action.validateProperties();
  if (!Strings.isNullOrEmpty(action.properties.getGroupId())) {
    DescribeSecurityGroupsType describeSecurityGroupsType=MessageHelper.createMessage(DescribeSecurityGroupsType.class,action.info.getEffectiveUserId());
    describeSecurityGroupsType.setFilterSet(Lists.newArrayList(Filter.filter("group-id",action.properties.getGroupId())));
    DescribeSecurityGroupsResponseType describeSecurityGroupsResponseType=AsyncRequests.sendSync(configuration,describeSecurityGroupsType);
    ArrayList<SecurityGroupItemType> securityGroupItemTypeArrayList=describeSecurityGroupsResponseType.getSecurityGroupInfo();
    if (securityGroupItemTypeArrayList == null || securityGroupItemTypeArrayList.isEmpty()) {
      throw new ValidationErrorException("No such group with id '" + action.properties.getGroupId() + "'");
    }
  }
  if (!Strings.isNullOrEmpty(action.properties.getGroupName())) {
    DescribeSecurityGroupsType describeSecurityGroupsType=MessageHelper.createMessage(DescribeSecurityGroupsType.class,action.info.getEffectiveUserId());
    describeSecurityGroupsType.setSecurityGroupSet(Lists.newArrayList(action.properties.getGroupName()));
    describeSecurityGroupsType.setFilterSet(Lists.newArrayList(Filter.filter("group-name",action.properties.getGroupName())));
    DescribeSecurityGroupsResponseType describeSecurityGroupsResponseType=AsyncRequests.sendSync(configuration,describeSecurityGroupsType);
    ArrayList<SecurityGroupItemType> securityGroupItemTypeArrayList=describeSecurityGroupsResponseType.getSecurityGroupInfo();
    if (securityGroupItemTypeArrayList == null || securityGroupItemTypeArrayList.isEmpty()) {
      throw new ValidationErrorException("No such group with name '" + action.properties.getGroupName() + "'");
    }
    boolean foundNonVpc=false;
    for (    SecurityGroupItemType securityGroupItemType : securityGroupItemTypeArrayList) {
      if (Strings.isNullOrEmpty(securityGroupItemType.getVpcId())) {
        foundNonVpc=true;
        break;
      }
    }
    if (!foundNonVpc) {
      throw new ValidationErrorException("Invalid value '" + action.properties.getGroupName() + "' for groupName. "+ "You may not reference VPC security groups by name. Please use the corresponding id for this operation.");
    }
  }
  AuthorizeSecurityGroupIngressType authorizeSecurityGroupIngressType=MessageHelper.createMessage(AuthorizeSecurityGroupIngressType.class,action.info.getEffectiveUserId());
  if (!Strings.isNullOrEmpty(action.properties.getGroupId())) {
    authorizeSecurityGroupIngressType.setGroupId(action.properties.getGroupId());
  }
  if (!Strings.isNullOrEmpty(action.properties.getGroupName())) {
    authorizeSecurityGroupIngressType.setGroupName(action.properties.getGroupName());
  }
  IpPermissionType ipPermissionType=new IpPermissionType(action.properties.getIpProtocol(),action.properties.getFromPort(),action.properties.getToPort());
  if (!Strings.isNullOrEmpty(action.properties.getCidrIp())) {
    ipPermissionType.setCidrIpRanges(Lists.newArrayList(action.properties.getCidrIp()));
  }
  if (!Strings.isNullOrEmpty(action.properties.getSourceSecurityGroupId())) {
    ipPermissionType.setGroups(Lists.newArrayList(new UserIdGroupPairType(action.properties.getSourceSecurityGroupOwnerId(),null,action.properties.getSourceSecurityGroupId())));
  }
  if (!Strings.isNullOrEmpty(action.properties.getSourceSecurityGroupName())) {
    String sourceSecurityGroupOwnerId=action.properties.getSourceSecurityGroupOwnerId();
    if (Strings.isNullOrEmpty(sourceSecurityGroupOwnerId)) {
      sourceSecurityGroupOwnerId=action.stackEntity.getAccountId();
    }
    ipPermissionType.setGroups(Lists.newArrayList(new UserIdGroupPairType(sourceSecurityGroupOwnerId,action.properties.getSourceSecurityGroupName(),null)));
  }
  authorizeSecurityGroupIngressType.setIpPermissions(Lists.newArrayList(ipPermissionType));
  AuthorizeSecurityGroupIngressResponseType authorizeSecurityGroupIngressResponseType=AsyncRequests.<AuthorizeSecurityGroupIngressType,AuthorizeSecurityGroupIngressResponseType>sendSync(configuration,authorizeSecurityGroupIngressType);
  action.info.setPhysicalResourceId(action.info.getLogicalResourceId());
  action.info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(action.info.getPhysicalResourceId())));
  return action;
}
