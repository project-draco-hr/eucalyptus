{
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
switch (stepNum) {
case 0:
    validateProperties();
  if (!Strings.isNullOrEmpty(properties.getGroupId())) {
    DescribeSecurityGroupsType describeSecurityGroupsType=new DescribeSecurityGroupsType();
    describeSecurityGroupsType.setEffectiveUserId(info.getEffectiveUserId());
    describeSecurityGroupsType.setSecurityGroupIdSet(Lists.newArrayList(properties.getGroupId()));
    DescribeSecurityGroupsResponseType describeSecurityGroupsResponseType=AsyncRequests.<DescribeSecurityGroupsType,DescribeSecurityGroupsResponseType>sendSync(configuration,describeSecurityGroupsType);
    ArrayList<SecurityGroupItemType> securityGroupItemTypeArrayList=describeSecurityGroupsResponseType.getSecurityGroupInfo();
    if (securityGroupItemTypeArrayList == null || securityGroupItemTypeArrayList.isEmpty()) {
      throw new ValidationErrorException("No such group with id '" + properties.getGroupId() + "'");
    }
  }
if (!Strings.isNullOrEmpty(properties.getGroupName())) {
  DescribeSecurityGroupsType describeSecurityGroupsType=new DescribeSecurityGroupsType();
  describeSecurityGroupsType.setEffectiveUserId(info.getEffectiveUserId());
  describeSecurityGroupsType.setSecurityGroupSet(Lists.newArrayList(properties.getGroupName()));
  DescribeSecurityGroupsResponseType describeSecurityGroupsResponseType=AsyncRequests.<DescribeSecurityGroupsType,DescribeSecurityGroupsResponseType>sendSync(configuration,describeSecurityGroupsType);
  ArrayList<SecurityGroupItemType> securityGroupItemTypeArrayList=describeSecurityGroupsResponseType.getSecurityGroupInfo();
  if (securityGroupItemTypeArrayList == null || securityGroupItemTypeArrayList.isEmpty()) {
    throw new ValidationErrorException("No such group with name '" + properties.getGroupName() + "'");
  }
  boolean foundNonVpc=false;
  for (  SecurityGroupItemType securityGroupItemType : securityGroupItemTypeArrayList) {
    if (Strings.isNullOrEmpty(securityGroupItemType.getVpcId())) {
      foundNonVpc=true;
      break;
    }
  }
  if (!foundNonVpc) {
    throw new ValidationErrorException("Invalid value '" + properties.getGroupName() + "' for groupName. "+ "You may not reference VPC security groups by name. Please use the corresponding id for this operation.");
  }
}
AuthorizeSecurityGroupIngressType authorizeSecurityGroupIngressType=new AuthorizeSecurityGroupIngressType();
authorizeSecurityGroupIngressType.setEffectiveUserId(getResourceInfo().getEffectiveUserId());
if (!Strings.isNullOrEmpty(properties.getGroupId())) {
authorizeSecurityGroupIngressType.setGroupId(properties.getGroupId());
}
if (!Strings.isNullOrEmpty(properties.getGroupName())) {
authorizeSecurityGroupIngressType.setGroupName(properties.getGroupName());
}
IpPermissionType ipPermissionType=new IpPermissionType(properties.getIpProtocol(),properties.getFromPort(),properties.getToPort());
if (!Strings.isNullOrEmpty(properties.getCidrIp())) {
ipPermissionType.setCidrIpRanges(Lists.newArrayList(properties.getCidrIp()));
}
if (!Strings.isNullOrEmpty(properties.getSourceSecurityGroupId())) {
ipPermissionType.setGroups(Lists.newArrayList(new UserIdGroupPairType(properties.getSourceSecurityGroupOwnerId(),null,properties.getSourceSecurityGroupId())));
}
if (!Strings.isNullOrEmpty(properties.getSourceSecurityGroupName())) {
String sourceSecurityGroupOwnerId=properties.getSourceSecurityGroupOwnerId();
if (Strings.isNullOrEmpty(sourceSecurityGroupOwnerId)) {
sourceSecurityGroupOwnerId=stackEntity.getAccountId();
}
ipPermissionType.setGroups(Lists.newArrayList(new UserIdGroupPairType(sourceSecurityGroupOwnerId,properties.getSourceSecurityGroupName(),null)));
}
authorizeSecurityGroupIngressType.setIpPermissions(Lists.newArrayList(ipPermissionType));
AuthorizeSecurityGroupIngressResponseType authorizeSecurityGroupIngressResponseType=AsyncRequests.<AuthorizeSecurityGroupIngressType,AuthorizeSecurityGroupIngressResponseType>sendSync(configuration,authorizeSecurityGroupIngressType);
info.setPhysicalResourceId(info.getLogicalResourceId());
info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(info.getPhysicalResourceId())));
break;
default :
throw new IllegalStateException("Invalid step " + stepNum);
}
}
