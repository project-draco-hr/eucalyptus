{
  List<String> timedOutNatGateways=Collections.emptyList();
  try (final TransactionResource tx=Entities.transactionFor(NatGateway.class)){
    timedOutNatGateways=natGateways.list(null,Restrictions.and(Restrictions.or(Example.create(NatGateway.exampleWithState(NatGateway.State.failed)),Example.create(NatGateway.exampleWithState(NatGateway.State.deleted))),Restrictions.lt("lastUpdateTimestamp",new Date(System.currentTimeMillis() - NatGateways.EXPIRY_AGE))),Collections.<String,String>emptyMap(),Predicates.<NatGateway>alwaysTrue(),CloudMetadatas.<NatGateway>toDisplayName());
  }
 catch (  final Exception e) {
    logger.error("Error listing timed out NAT gateways",e);
  }
  for (  final String natGatewayId : timedOutNatGateways) {
    try (final TransactionResource tx=Entities.transactionFor(NatGateway.class)){
      final NatGateway natGateway=natGateways.lookupByName(null,natGatewayId,Functions.<NatGateway>identity());
      logger.info("Deleting NAT gateway " + natGateway.getDisplayName() + " with state "+ natGateway.getState());
      natGateways.delete(natGateway);
      tx.commit();
    }
 catch (    final VpcMetadataNotFoundException e) {
      logger.info("NAT gateway " + natGatewayId + " not found for deletion");
    }
catch (    final Exception e) {
      logger.error("Error deleting timed out NAT gateway " + natGatewayId,e);
    }
  }
}
