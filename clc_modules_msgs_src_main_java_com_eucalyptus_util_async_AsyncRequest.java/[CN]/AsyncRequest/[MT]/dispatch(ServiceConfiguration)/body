{
  Callable<CheckedListenableFuture<R>> call=new Callable<CheckedListenableFuture<R>>(){
    @Override public String toString(){
      return AsyncRequest.class.getSimpleName() + ":" + serviceConfig.getFullName()+ ":"+ AsyncRequest.this.getRequest().toSimpleString();
    }
    @Override public CheckedListenableFuture<R> call() throws Exception {
      try {
        Request<Q,R> execute=AsyncRequest.this.execute(serviceConfig);
        return execute.getResponse();
      }
 catch (      Exception ex) {
        AsyncRequest.this.result.setException(ex);
        Logs.extreme().error(ex,ex);
        throw ex;
      }
    }
  }
;
  try {
    try {
      this.getRequest().lookupAndSetCorrelationId();
    }
 catch (    final Exception ex) {
      ;
    }
    Future<CheckedListenableFuture<R>> res=Threads.enqueue(serviceConfig,call);
    return this.getResponse();
  }
 catch (  Exception ex1) {
    LOG.error(ex1);
    Logs.extreme().error(ex1,ex1);
    Future<CheckedListenableFuture<R>> res=Threads.lookup(Empyrean.class,AsyncRequest.class,serviceConfig.getFullName().toString()).limitTo(NUM_WORKERS).submit(call);
    return this.getResponse();
  }
}
