{
  try {
    Logger.getLogger(this.callback.getClass()).trace("initialize: endpoint " + config);
    try {
      this.callback.initialize(this.request);
    }
 catch (    Throwable e) {
      Logger.getLogger(this.callback.getClass()).error(e.getMessage(),e);
      RequestException ex=(e instanceof RequestException) ? (RequestException)e : new RequestInitializationException(this.callback.getClass().getSimpleName() + " failed: " + e.getMessage(),e,this.getRequest());
      this.result.setException(ex);
      throw ex;
    }
    Logger.getLogger(this.callback.getClass()).debug("fire: endpoint " + config);
    if (!this.handler.fire(config,this.request)) {
      if (this.requestResult.isDone()) {
        try {
          R r=this.requestResult.get(1,TimeUnit.MILLISECONDS);
          throw new RequestException("Request failed but produced a response: " + r,this.getRequest());
        }
 catch (        ExecutionException e) {
          if (e.getCause() != null && e.getCause() instanceof RequestException) {
            Logger.getLogger(this.callback.getClass()).error(e.getCause());
            throw (RequestException)e.getCause();
          }
 else {
            Logger.getLogger(this.callback.getClass()).error(e);
            throw new RequestException("Request failed due to: " + e.getMessage(),e,this.getRequest());
          }
        }
catch (        RequestException e) {
          Logger.getLogger(this.callback.getClass()).error(e);
          throw e;
        }
catch (        Throwable e) {
          Logger.getLogger(this.callback.getClass()).error(e);
          throw new RequestException("Request failed due to: " + e.getMessage(),e,this.getRequest());
        }
      }
 else {
        RequestException ex=new RequestException("Error occured attempting to fire the request.",this.getRequest());
        try {
          this.result.setException(ex);
        }
 catch (        Throwable t) {
        }
        throw ex;
      }
    }
  }
 catch (  RuntimeException ex) {
    LOG.error(ex,ex);
    throw ex;
  }
  return this;
}
