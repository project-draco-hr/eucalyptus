{
  super();
  this.response=new AsyncResponseFuture<R>();
  this.handler=new AsyncRequestHandler<Q,R>(this.response);
  this.callbackSequence=new CallbackListenerSequence<R>();
  this.callback=new TwiceChecked<Q,R>(){
    @Override public void fireException(    Throwable t){
      try {
        cb.fireException(t);
      }
 catch (      Throwable ex) {
        LOG.error(ex,ex);
      }
      try {
        AsyncRequest.this.callbackSequence.fireException(t);
      }
 catch (      Exception ex) {
        LOG.error(ex,ex);
      }
    }
    @Override public void fire(    R r){
      try {
        if (Logs.EXTREME) {
          LOG.debug(cb.getClass().getCanonicalName() + ".fire():\n" + r);
        }
        cb.fire(r);
        try {
          AsyncRequest.this.callbackSequence.fire(r);
        }
 catch (        Throwable ex) {
          LOG.error(ex,ex);
        }
      }
 catch (      RuntimeException ex) {
        LOG.error(ex,ex);
        AsyncRequest.this.callbackSequence.fireException(ex);
      }
catch (      Exception ex) {
        AsyncRequest.this.callbackSequence.fireException(ex);
      }
    }
    @Override public void initialize(    Q request) throws Exception {
      if (Logs.EXTREME) {
        LOG.debug(cb.getClass().getCanonicalName() + ".initialize():\n" + request);
      }
    }
  }
;
  Callbacks.addListenerHandler(response,this.callback);
}
