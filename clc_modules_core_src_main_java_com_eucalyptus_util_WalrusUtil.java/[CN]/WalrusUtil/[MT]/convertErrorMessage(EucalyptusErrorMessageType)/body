{
  EucalyptusMessage errMsg;
  Throwable ex=errorMessage.getException();
  if (ex instanceof NoSuchBucketException) {
    errMsg=new WalrusBucketErrorMessageType(((NoSuchBucketException)ex).getBucketName(),"NoSuchBucket","The specified bucket was not found",HttpResponseStatus.NOT_FOUND,errorMessage.getCorrelationId(),ipAddress);
    errMsg.setCorrelationId(errorMessage.getCorrelationId());
  }
 else   if (ex instanceof AccessDeniedException) {
    errMsg=new WalrusBucketErrorMessageType(((AccessDeniedException)ex).getBucketName(),"AccessDenied","Access Denied",HttpResponseStatus.FORBIDDEN,errorMessage.getCorrelationId(),ipAddress);
    errMsg.setCorrelationId(errorMessage.getCorrelationId());
  }
 else   if (ex instanceof NotAuthorizedException) {
    errMsg=new WalrusBucketErrorMessageType(((NotAuthorizedException)ex).getValue(),"Unauthorized","You are not authorized to perform this operation",HttpResponseStatus.UNUATHORIZED,errorMessage.getCorrelationId(),ipAddress);
    errMsg.setCorrelationId(errorMessage.getCorrelationId());
  }
 else   if (ex instanceof BucketAlreadyOwnedByYouException) {
    errMsg=new WalrusBucketErrorMessageType(((BucketAlreadyOwnedByYouException)ex).getBucketName(),"BucketAlreadyOwnedByYou","Your previous request to create the named bucket succeeded and you already own it.",HttpResponseStatus.CONFLICT,errorMessage.getCorrelationId(),ipAddress);
    errMsg.setCorrelationId(errorMessage.getCorrelationId());
  }
 else   if (ex instanceof BucketAlreadyExistsException) {
    errMsg=new WalrusBucketErrorMessageType(((BucketAlreadyExistsException)ex).getBucketName(),"BucketAlreadyExists","The requested bucket name is not available. The bucket namespace is shared by all users of the system. Please select a different name and try again.",HttpResponseStatus.CONFLICT,errorMessage.getCorrelationId(),ipAddress);
    errMsg.setCorrelationId(errorMessage.getCorrelationId());
  }
 else   if (ex instanceof BucketNotEmptyException) {
    errMsg=new WalrusBucketErrorMessageType(((BucketNotEmptyException)ex).getBucketName(),"BucketNotEmpty","The bucket you tried to delete is not empty.",HttpResponseStatus.CONFLICT,errorMessage.getCorrelationId(),ipAddress);
    errMsg.setCorrelationId(errorMessage.getCorrelationId());
  }
 else   if (ex instanceof PreconditionFailedException) {
    errMsg=new WalrusBucketErrorMessageType(((PreconditionFailedException)ex).getPrecondition(),"PreconditionFailed","At least one of the pre-conditions you specified did not hold.",HttpResponseStatus.PRECONDITION_FAILED,errorMessage.getCorrelationId(),ipAddress);
    errMsg.setCorrelationId(errorMessage.getCorrelationId());
  }
 else   if (ex instanceof NotModifiedException) {
    errMsg=new WalrusBucketErrorMessageType(((NotModifiedException)ex).getPrecondition(),"NotModified","Object Not Modified",HttpResponseStatus.NOT_MODIFIED,errorMessage.getCorrelationId(),ipAddress);
    errMsg.setCorrelationId(errorMessage.getCorrelationId());
  }
 else   if (ex instanceof TooManyBucketsException) {
    errMsg=new WalrusBucketErrorMessageType(((TooManyBucketsException)ex).getBucketName(),"TooManyBuckets","You have attempted to create more buckets than allowed.",HttpResponseStatus.BAD_REQUEST,errorMessage.getCorrelationId(),ipAddress);
    errMsg.setCorrelationId(errorMessage.getCorrelationId());
  }
 else   if (ex instanceof EntityTooLargeException) {
    errMsg=new WalrusBucketErrorMessageType(((EntityTooLargeException)ex).getEntityName(),"EntityTooLarge","Your proposed upload exceeds the maximum allowed object size.",HttpResponseStatus.BAD_REQUEST,errorMessage.getCorrelationId(),ipAddress);
    errMsg.setCorrelationId(errorMessage.getCorrelationId());
  }
 else   if (ex instanceof NoSuchEntityException) {
    errMsg=new WalrusBucketErrorMessageType(((NoSuchEntityException)ex).getBucketName(),"NoSuchEntity","The specified entity was not found",HttpResponseStatus.NOT_FOUND,errorMessage.getCorrelationId(),ipAddress);
    errMsg.setCorrelationId(errorMessage.getCorrelationId());
  }
 else   if (ex instanceof DecryptionFailedException) {
    errMsg=new WalrusBucketErrorMessageType(((DecryptionFailedException)ex).getValue(),"Decryption Failed","Fail",HttpResponseStatus.EXPECTATION_FAILED,errorMessage.getCorrelationId(),ipAddress);
    errMsg.setCorrelationId(errorMessage.getCorrelationId());
  }
 else   if (ex instanceof ImageAlreadyExistsException) {
    errMsg=new WalrusBucketErrorMessageType(((ImageAlreadyExistsException)ex).getValue(),"Image Already Exists","Fail",HttpResponseStatus.CONFLICT,errorMessage.getCorrelationId(),ipAddress);
    errMsg.setCorrelationId(errorMessage.getCorrelationId());
  }
 else   if (ex instanceof NotImplementedException) {
    errMsg=new WalrusBucketErrorMessageType(((NotImplementedException)ex).getValue(),"Not Implemented","NA",HttpResponseStatus.NOT_IMPLEMENTED,errorMessage.getCorrelationId(),ipAddress);
    errMsg.setCorrelationId(errorMessage.getCorrelationId());
  }
 else   if (ex instanceof InvalidRangeException) {
    errMsg=new WalrusBucketErrorMessageType(((InvalidRangeException)ex).getMessage(),"Invalid Range","The requested range cannot be satisfied.",HttpResponseStatus.REQUESTED_RANGE_NOT_SATISFIABLE,errorMessage.getCorrelationId(),ipAddress);
    errMsg.setCorrelationId(errorMessage.getCorrelationId());
  }
 else {
    errMsg=errorMessage;
  }
  return errMsg;
}
