{
  if (request.getImage().getDiskImageSet() == null || request.getImage().getDiskImageSet().size() <= 0)   throw new ImagingServiceException("Image detail for imported image is required");
  if (request.getImage().getConvertedImage() == null)   throw new ImagingServiceException("Image detail for converted image is required");
  for (  final ImportDiskImageDetail image : request.getImage().getDiskImageSet()) {
    final String format=image.getFormat();
    final String manifestUrl=image.getDownloadManifestUrl();
    final String imageId=image.getId();
    if (format == null || format.length() <= 0)     throw new ImagingServiceException("Image format is required");
    try {
      final IMAGE_FORMAT imgFormat=IMAGE_FORMAT.valueOf(format.toUpperCase());
    }
 catch (    final Exception ex) {
      throw new ImagingServiceException("Unsupported image format");
    }
    if (manifestUrl == null || manifestUrl.length() <= 0)     throw new ImagingServiceException("Import manifest url is required");
    if (imageId == null || imageId.length() <= 0)     throw new ImagingServiceException("Import image's id is required");
  }
  final ConvertedImageDetail converted=request.getImage().getConvertedImage();
  final String bucket=converted.getBucket();
  final String prefix=converted.getPrefix();
  final String arch=converted.getArchitecture();
  if (bucket == null || bucket.length() <= 0)   throw new ImagingServiceException("bucket name must be specified");
  if (prefix == null || prefix.length() <= 0)   throw new ImagingServiceException("prefix must be specified");
  if (arch == null || arch.length() <= 0)   throw new ImagingServiceException("architecture must be specified");
  DiskImagingTask transform=null;
  try {
    transform=TypeMappers.transform(request,DiskImagingTask.class);
  }
 catch (  final Exception ex) {
    if (ex.getCause() instanceof ImagingServiceException)     throw (ImagingServiceException)ex.getCause();
 else     throw new ImagingServiceException(ImagingServiceException.INTERNAL_SERVER_ERROR,"Failed to create DiskImagingTask",ex);
  }
  try (final TransactionResource db=Entities.transactionFor(DiskImagingTask.class)){
    try {
      Entities.persist(transform);
      db.commit();
    }
 catch (    final Exception ex) {
      throw new ImagingServiceException(ImagingServiceException.INTERNAL_SERVER_ERROR,"Failed to persist DiskImagingTask",ex);
    }
  }
   return transform;
}
