{
  final String availabilityZone=request.getAvailabilityZone();
  if (availabilityZone == null || availabilityZone.length() <= 0)   throw new ImagingServiceException("Availability zone is required");
 else {
    try {
      final List<String> clusters=ImagingServiceProperties.listConfiguredZones();
      if (!clusters.contains(availabilityZone))       throw new ImagingServiceException(String.format("The availability zone %s is not configured for import",availabilityZone));
    }
 catch (    final ImagingServiceException ex) {
      throw ex;
    }
catch (    final Exception ex) {
      throw new ImagingServiceException(ImagingServiceException.INTERNAL_SERVER_ERROR,"Failed to verify availability zone");
    }
  }
  final String format=request.getImage().getFormat();
  if (format == null || format.length() <= 0)   throw new ImagingServiceException("Image format is required");
  try {
    final IMAGE_FORMAT imgFormat=IMAGE_FORMAT.valueOf(format.toUpperCase());
  }
 catch (  final Exception ex) {
    throw new ImagingServiceException("Unsupported image format");
  }
  final String manifestUrl=request.getImage().getImportManifestUrl();
  if (manifestUrl == null || manifestUrl.length() <= 0)   throw new ImagingServiceException("Import manifest url is required");
  try {
    final int volumeSize=request.getVolume().getSize();
    final long imageBytes=request.getImage().getBytes();
    final long volumeSizeInBytes=(volumeSize * (long)Math.pow(1024,3));
    if (imageBytes > volumeSizeInBytes)     throw new ImagingServiceException("Requested volume size is not enough to hold the image");
  }
 catch (  final ImagingServiceException ex) {
    throw ex;
  }
catch (  final Exception ex) {
    throw new ImagingServiceException(ImagingServiceException.INTERNAL_SERVER_ERROR,"Failed to verify the requested volume size");
  }
  final ImportVolumeImagingTask transform=TypeMappers.transform(request,ImportVolumeImagingTask.class);
  try (final TransactionResource db=Entities.transactionFor(ImportVolumeImagingTask.class)){
    try {
      Entities.persist(transform);
      db.commit();
    }
 catch (    final Exception ex) {
      throw new ImagingServiceException(ImagingServiceException.INTERNAL_SERVER_ERROR,"Failed to persist VolumeImagingTask",ex);
    }
  }
   return transform;
}
