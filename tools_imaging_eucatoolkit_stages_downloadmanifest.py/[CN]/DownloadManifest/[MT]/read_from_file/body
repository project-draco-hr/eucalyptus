@classmethod
def read_from_file(cls, manifest_path, xsd=None, key_filename=None, sig_key_filename=None):
    "\n        Reads xml from local file path 'manifest_path' and attempts to\n        convert and validate the resulting DownloadManifest obj.\n        :param manifest_path: local file path to read manifest xml from\n        :param xsd: local file path to xsd used to validate xml\n        :param key_filename: optional path to key used to decrypt manifest\n                             fields/values.\n        :returns DownloadManifest obj.\n        "
    xsd_fileobj = None
    manifest_fileobj = None
    manifest_path = os.path.expanduser(os.path.abspath(manifest_path))
    if (not os.path.isfile(manifest_path)):
        raise ValueError("Manifest '{0}' file not accessible".format(manifest_path))
    if xsd:
        if (not isinstance(xsd, file)):
            xsd = open(xsd)
    try:
        manifest_fileobj = open(manifest_path)
        return cls._read_from_fileobj(manifest_fileobj, xsd=xsd, key_filename=key_filename, sig_key_filename=sig_key_filename)
    finally:
        if xsd_fileobj:
            xsd_fileobj.close()
        if manifest_fileobj:
            manifest_fileobj.close()
