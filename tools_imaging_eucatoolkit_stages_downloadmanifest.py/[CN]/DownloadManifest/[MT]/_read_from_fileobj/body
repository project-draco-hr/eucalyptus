@classmethod
def _read_from_fileobj(cls, manifest_fileobj, xsd=None, key_filename=None):
    if (xsd is not None):
        cls._validate_manifest(manifest_fileobj, xsd)
    xml = lxml.objectify.parse(manifest_fileobj).getroot()
    manifest = cls()
    manifest.version = xml.version
    manifest.file_format = str(xml.__getattr__('file-format')).strip()
    manifest.enc_key = str(xml.bundle.__getattr__('encrypted-key'))
    manifest.enc_iv = str(xml.bundle.__getattr__('encrypted-iv'))
    if key_filename:
        manifest.enc_key = cls._decrypt_hex_key(manifest.enc_key, key_filename=key_filename)
        manifest.enc_iv = cls._decrypt_hex_key(manifest.enc_iv, key_filename=key_filename)
    manifest.image_size = long(xml.image.size)
    partcount = xml.image.parts.get('count')
    manifest.signature = xml.signature
    manifest.signature_algorithm = xml.signature.get('algorithm')
    for part in xml.image.parts.iter(tag='part'):
        manifest.image_parts.append(None)
    for xml_part in xml.image.parts.iter(tag='part'):
        part_index = int(xml_part.get('index'))
        get_url = xml_part.__getattr__('get-url')
        manifest.image_parts[part_index] = DownloadPart(get_url=get_url, part_index=part_index)
    if (partcount is not None):
        manifest.part_count = int(partcount)
        if (len(manifest.image_parts) != manifest.part_count):
            raise ValueError('Part count {0} does not equal parts found:{1}'.format(len(manifest.image_parts)), manifest.part_count)
    else:
        manifest.part_count = len(manifest.image_parts)
    for (index, part) in enumerate(manifest.image_parts):
        if (part is None):
            raise ValueError('part {0} must not be None'.format(index))
    return manifest
