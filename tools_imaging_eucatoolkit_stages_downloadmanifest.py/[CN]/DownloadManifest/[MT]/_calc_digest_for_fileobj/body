@classmethod
def _calc_digest_for_fileobj(cls, file_obj, algorithm, chunk_size=None):
    "\n        Calculated and return the digest for the fileobj provided using the\n        hashlib 'alogrithm' provided.\n        :param file_obj: file like obj to read compute digest for\n        :param algorithm: string representing hashlib type(sha1, md5, etc)\n        :param chunksize: # of bytes to read/write per read()/write()\n        "
    chunk_size = (chunk_size or stages._chunk_size)
    digest = cls._get_digest_algorithm_from_string(algorithm)
    while True:
        chunk = file_obj.read(chunk_size)
        if (not chunk):
            break
        digest.update(chunk)
    return digest.hexdigest()
