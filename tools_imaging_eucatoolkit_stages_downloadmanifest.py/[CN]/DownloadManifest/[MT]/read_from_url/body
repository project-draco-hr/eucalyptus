@classmethod
def read_from_url(cls, manifest_url, chunk_size=None, xsd=None, key_filename=None, sig_key_filename=None):
    "\n        Reads xml at the provided 'manifest_url' and attempts to convert and\n        validate the resulting DownloadManifest.\n        :param manifest_url: URL to download the 'download manifest xml'\n        :param chunksize: # of bytes to read/write per read()/write()\n        :param xsd: local file path to xsd used to validate xml\n        :param key_filename: optional path to key used to decrypt manifest\n                             fields/values.\n        :returns DowloadManifest obj.\n        "
    manifest_url = str(manifest_url)
    chunk_size = (chunk_size or stages._chunk_size)
    fileobj = BytesIO()
    r = requests.get(manifest_url, stream=True)
    r.raise_for_status()
    for chunk in r.iter_content(chunk_size):
        fileobj.write(chunk)
    fileobj.flush()
    fileobj.seek(0)
    return cls._read_from_fileobj(manifest_fileobj=fileobj, xsd=xsd, key_filename=key_filename, sig_key_filename=sig_key_filename)
