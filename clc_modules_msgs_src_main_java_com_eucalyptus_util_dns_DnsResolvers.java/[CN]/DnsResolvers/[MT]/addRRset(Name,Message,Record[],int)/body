{
  Map<RequestType,Set<Record>> rrsets=Maps.newHashMap();
  for (  Record r : records) {
    RequestType type=RequestType.typeOf(r.getType());
    if (!rrsets.containsKey(type)) {
      Set<Record> rrset=Sets.newHashSet();
      rrsets.put(type,rrset);
    }
  }
  for (  RequestType type : rrsets.keySet()) {
    rrsets.get(type).addAll(Collections2.filter(Arrays.asList(records),type));
  }
  Predicate<Record> checkNewRecord=new Predicate<Record>(){
    @Override public boolean apply(    Record input){
      for (int s=1; s <= section; s++) {
        if (response.findRecord(input,s)) {
          return false;
        }
      }
      return true;
    }
  }
;
  if (rrsets.containsKey(RequestType.CNAME)) {
    for (    Record cnames : Iterables.filter(rrsets.remove(RequestType.CNAME),checkNewRecord)) {
      response.addRecord(cnames,section);
    }
  }
  for (  Entry<RequestType,Set<Record>> sectionRecords : rrsets.entrySet()) {
    for (    Record r : Iterables.filter(sectionRecords.getValue(),checkNewRecord)) {
      response.addRecord(r,section);
    }
  }
}
