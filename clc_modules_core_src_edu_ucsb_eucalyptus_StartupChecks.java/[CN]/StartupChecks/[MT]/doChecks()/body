{
  StartupChecks.checkDirectories();
  boolean userKs=false;
  boolean serviceKs=false;
  boolean wwwKs=false;
  try {
    userKs=UserKeyStore.getInstance().check();
    serviceKs=ServiceKeyStore.getInstance().check();
    wwwKs=EucaKeyStore.getInstance().check();
  }
 catch (  GeneralSecurityException e) {
    LOG.error(e,e);
  }
  boolean hasDb=StartupChecks.checkDatabase();
  if (!userKs || !serviceKs || !wwwKs) {
    try {
      StartupChecks.createKeyStores();
      userKs=UserKeyStore.getInstance().check();
      serviceKs=ServiceKeyStore.getInstance().check();
      wwwKs=EucaKeyStore.getInstance().check();
    }
 catch (    Exception e) {
      LOG.error(e,e);
      StartupChecks.fail("Error creating keystore instance.");
    }
  }
  if (!hasDb) {
    StartupChecks.createDb();
    hasDb=StartupChecks.checkDatabase();
  }
  if (!hasDb || !userKs || !serviceKs|| !wwwKs) {
    LOG.fatal(String.format(HEADER_FSTRING,"STARTUP FAILURE"));
    if (!hasDb)     LOG.fatal("Failed to initialize the database in: " + SubDirectory.DB);
    if (!userKs)     LOG.fatal("Failed to read the user keystore: " + UserKeyStore.getInstance().getFileName());
    if (!wwwKs)     LOG.fatal("Failed to read the www keystore: " + EucaKeyStore.getInstance().getFileName());
    if (!serviceKs)     LOG.fatal("Failed to read the services keystore: " + ServiceKeyStore.getInstance().getFileName());
    StartupChecks.fail("See errors messages above.");
  }
  EntityWrapper<UserGroupInfo> db3=new EntityWrapper<UserGroupInfo>();
  try {
    db3.getUnique(new UserGroupInfo("all"));
  }
 catch (  EucalyptusCloudException e) {
    db3.add(new UserGroupInfo("all"));
  }
 finally {
    db3.commit();
  }
  EntityWrapper<ImageInfo> db2=new EntityWrapper<ImageInfo>();
  List<ImageInfo> imageList=db2.query(new ImageInfo());
  for (  ImageInfo image : imageList) {
    if (image.getImageLocation().split("/").length != 2) {
      LOG.info("Image with invalid location, needs to be reregistered: " + image.getImageId());
      LOG.info("Removing entry for: " + image.getImageId());
      db2.delete(image);
    }
  }
  db2.commit();
  try {
    StartupChecks.importKeys(AbstractKeyStore.getGenericKeystore(_USER_KS,_KS_PASS,_KS_FORMAT),UserKeyStore.getInstance());
  }
 catch (  IOException e) {
  }
catch (  GeneralSecurityException e) {
    LOG.error(e);
    LOG.debug(e,e);
  }
  return true;
}
