def get_named_entity(self, pbs):
    '\n        Returns the decoded version of the character starting at index, or\n        None if no decoding is possible.\n        \n        Formats all are legal both with and without semi-colon, upper/lower\n        case:\n        \n        &aa;\n        &aaa;\n        &aaaa;\n        &aaaaa;\n        &aaaaaa;\n        &aaaaaaa;\n        \n        @param pbs: a PushBackString containing a named entity like &quot;\n        @return: the decoded version of the character starting at index, or\n        None if no decoding is possible.\n        '
    possible = ''
    len_to_go = min(len(pbs.remainder()), 7)
    for i in range(len_to_go):
        possible += pbs.next()
        entity1 = self.entity_names_to_values.get(possible, None)
        entity2 = self.entity_names_to_values.get(possible.lower(), None)
        entity = (entity1 or entity2)
        if (entity is not None):
            if pbs.peek(';'):
                pbs.next()
            return unichr(entity)
    return None
