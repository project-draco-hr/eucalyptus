{
  final ReportingInstanceEventStore eventStore=ReportingInstanceEventStore.getInstance();
  persistenceLock.writeLock().lock();
  try {
    Entities.asTransaction(ReportingInstanceUsageEvent.class,new Function<Collection<DatedInstanceEvent>,Void>(){
      @Override public Void apply(      final Collection<DatedInstanceEvent> datedInstanceEvents){
        for (        final DatedInstanceEvent datedEvent : datedInstanceEvents) {
          final InstanceEvent event=datedEvent.getInstanceEvent();
          eventStore.insertUsageEvent(event.getUuid(),datedEvent.getTimestamp(),event.getCumulativeNetworkIoMegs(),event.getCumulativeDiskIoMegs(),0);
          log.debug("Wrote instance usage for: " + event.getUuid());
        }
        return null;
      }
    }
).apply(recentUsageEvents.values());
    recentUsageEvents.clear();
  }
  finally {
    persistenceLock.writeLock().unlock();
  }
}
