{
  final Context ctx=Contexts.lookup();
  final AuthContextSupplier user=ctx.getAuthContext();
  if (!Permissions.perhapsAuthorized(PolicySpec.VENDOR_LOADBALANCING,getIamActionByMessageType(request),user)) {
    throw new LoadBalancingAuthorizationException("UnauthorizedOperation","You are not authorized to perform this operation.");
  }
  final String error=Iterables.getFirst(request.validate().values(),null);
  if (error != null) {
    throw new LoadBalancingClientException("InvalidConfigurationRequest",error);
  }
  try {
    final LoadBalancingBackendMessage backendRequest=(LoadBalancingBackendMessage)BaseMessages.deepCopy(request,getBackendMessageClass(request));
    if (backendRequest instanceof LoadBalancingServoBackendMessage) {
      final LoadBalancingServoBackendMessage servoOut=(LoadBalancingServoBackendMessage)backendRequest;
      final InetSocketAddress remoteAddr=((InetSocketAddress)ctx.getChannel().getRemoteAddress());
      final String remoteHost=remoteAddr.getAddress().getHostAddress();
      servoOut.setSourceIp(remoteHost);
    }
    final BaseMessage backendResponse=send(backendRequest);
    final LoadBalancingMessage response=(LoadBalancingMessage)BaseMessages.deepCopy(backendResponse,request.getReply().getClass());
    response.setCorrelationId(request.getCorrelationId());
    return response;
  }
 catch (  Exception e) {
    handleRemoteException(e);
    Exceptions.findAndRethrow(e,EucalyptusWebServiceException.class,EucalyptusCloudException.class);
    throw new EucalyptusCloudException(e);
  }
}
