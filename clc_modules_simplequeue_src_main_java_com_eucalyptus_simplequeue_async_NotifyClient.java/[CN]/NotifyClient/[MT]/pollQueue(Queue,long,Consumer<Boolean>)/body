{
  final Consumer<Boolean> consumer=Consumers.once(resultConsumer);
  final PollForNotificationType poll=new PollForNotificationType();
  poll.setChannel(queue.getArn());
  poll.setTimeout(timeout);
  if (Bootstrap.isShuttingDown()) {
    delayedPollFailure(1000L,consumer);
    return;
  }
  final ServiceConfiguration polledNotificationsConfiguration;
  try {
    polledNotificationsConfiguration=Topology.lookup(PolledNotifications.class);
  }
 catch (  final NoSuchElementException e) {
    delayedPollFailure(5000L,consumer);
    return;
  }
  final ListenableFuture<PollForNotificationResponseType> dispatchFuture=AsyncRequests.dispatch(polledNotificationsConfiguration,poll);
  dispatchFuture.addListener(new Runnable(){
    @Override public void run(){
      try {
        final PollForNotificationResponseType response=dispatchFuture.get();
        consumer.accept(Objects.firstNonNull(response.getNotified(),false));
      }
 catch (      final InterruptedException e) {
        logger.info("Interrupted while polling for task " + poll.getChannel(),e);
      }
catch (      final ExecutionException e) {
        if (Bootstrap.isShuttingDown()) {
          logger.info("Error polling for task " + poll.getChannel() + ": "+ Exceptions.getCauseMessage(e));
        }
 else {
          handleExecutionExceptionForPolling(e,poll);
        }
      }
catch (      final Exception e) {
        logger.error("Error polling for task " + poll.getChannel(),e);
      }
 finally {
        consumer.accept(false);
      }
    }
  }
);
}
