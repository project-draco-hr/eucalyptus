{
  final NotifyType notify=new NotifyType();
  notify.setChannel(queue.getArn());
  try {
    final ListenableFuture<NotifyResponseType> dispatchFuture=AsyncRequests.dispatch(Topology.lookup(PolledNotifications.class),notify);
    dispatchFuture.addListener(new Runnable(){
      @Override public void run(){
        try {
          dispatchFuture.get();
        }
 catch (        final InterruptedException e) {
          logger.info("Interrupted while sending notification for " + notify.getChannel(),e);
        }
catch (        final ExecutionException e) {
          logger.error("Error sending notification for " + notify.getChannel(),e);
        }
      }
    }
);
  }
 catch (  final Exception e) {
    logger.error("Error sending notification for " + notify.getChannel(),e);
  }
}
