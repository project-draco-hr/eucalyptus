{
  final PutInstanceImportTaskStatusResponseType reply=request.getReply();
  final Context context=Contexts.lookup();
  try {
    if (!(context.getUser().isSystemAdmin() || (context.isAdministrator() && Permissions.isAuthorized(VENDOR_IMAGINGSERVICE,EC2_RESOURCE_INSTANCE,"",null,IMAGINGSERVICE_PUTINSTANCEIMPORTTASKSTATUS,context.getAuthContext())))) {
      throw new ImagingServiceException(ImagingServiceException.DEFAULT_CODE,"Not authorized to put import task status.");
    }
  }
 catch (  final ImagingServiceException ex) {
    throw ex;
  }
catch (  final Exception ex) {
    throw new ImagingServiceException(ImagingServiceException.DEFAULT_CODE,"Not authorized to put import task status.");
  }
  try {
    final InetSocketAddress remoteAddr=((InetSocketAddress)context.getChannel().getRemoteAddress());
    final String remoteHost=remoteAddr.getAddress().getHostAddress();
    ImagingWorkers.verifyWorker(request.getInstanceId(),remoteHost);
  }
 catch (  final Exception ex) {
    LOG.warn("Failed to verify worker",ex);
    throw new ImagingServiceException(ImagingServiceException.DEFAULT_CODE,"Not authorized to put import task status.");
  }
  reply.setCancelled(false);
  try {
    final String taskId=request.getImportTaskId();
    final String volumeId=request.getVolumeId();
    if (taskId == null)     throw new Exception("Task id is null");
    ImagingTask imagingTask=null;
    try {
      imagingTask=ImagingTasks.lookup(taskId);
    }
 catch (    final Exception ex) {
      reply.setCancelled(true);
      throw new Exception("imaging task with " + taskId + " is not found");
    }
    final String instanceId=request.getInstanceId();
    if (instanceId != null) {
      ImagingWorkers.markUpdate(request.getInstanceId());
    }
    if (ImportTaskState.CONVERTING.equals(imagingTask.getState()) && instanceId.equals(imagingTask.getWorkerId())) {
      final WorkerTaskState workerState=WorkerTaskState.fromString(request.getStatus());
      if (WorkerTaskState.EXTANT.equals(workerState) || WorkerTaskState.DONE.equals(workerState)) {
        if (imagingTask instanceof VolumeImagingTask) {
          try {
            final long bytesConverted=request.getBytesConverted();
            if (bytesConverted > 0)             ImagingTasks.updateBytesConverted(taskId,volumeId,bytesConverted);
          }
 catch (          final Exception ex) {
            LOG.warn("Failed to update bytes converted(" + taskId + ")");
          }
        }
      }
switch (workerState) {
case EXTANT:
        ;
      break;
case DONE:
    if (imagingTask instanceof VolumeImagingTask) {
      try {
        ImagingTasks.updateVolumeStatus((VolumeImagingTask)imagingTask,volumeId,ImportTaskState.COMPLETED,null);
      }
 catch (      final Exception ex) {
        ImagingTasks.transitState(imagingTask,ImportTaskState.CONVERTING,ImportTaskState.FAILED,"Failed to update volume's state");
        LOG.error("Failed to update volume's state",ex);
        break;
      }
      try {
        if (imagingTask instanceof ImportVolumeImagingTask) {
          ImagingTasks.transitState(imagingTask,ImportTaskState.CONVERTING,ImportTaskState.COMPLETED,null);
        }
 else         if (ImagingTasks.isConversionDone((VolumeImagingTask)imagingTask)) {
          ImagingTasks.transitState(imagingTask,ImportTaskState.CONVERTING,ImportTaskState.INSTANTIATING,null);
        }
      }
 catch (      final Exception ex) {
        LOG.error("Failed to update imaging task's state to completed",ex);
      }
    }
 else     if (imagingTask instanceof DiskImagingTask) {
      ImagingTasks.transitState(imagingTask,ImportTaskState.CONVERTING,ImportTaskState.COMPLETED,null);
    }
  break;
case FAILED:
ImagingTasks.setState(imagingTask,ImportTaskState.FAILED,request.getStatusMessage());
break;
}
}
 else {
reply.setCancelled(true);
}
}
 catch (final Exception ex) {
LOG.warn("Failed to update the task's state",ex);
}
return reply;
}
