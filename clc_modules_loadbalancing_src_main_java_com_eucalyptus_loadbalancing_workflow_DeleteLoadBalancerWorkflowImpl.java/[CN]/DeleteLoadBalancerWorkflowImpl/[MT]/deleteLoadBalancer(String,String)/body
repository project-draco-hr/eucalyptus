{
  task=new TryCatchFinally(){
    @Override protected void doTry() throws Throwable {
      final Promise<Void> dns=client.deleteLoadBalancerDeactivateDns(accountId,loadbalancer);
      final Promise<Void> scalingGroup=client.deleteLoadBalancerDeleteScalingGroup(accountId,loadbalancer);
      final Promise<Void> instanceProfile=client.deleteLoadBalancerDeleteInstanceProfile(accountId,loadbalancer,scalingGroup);
      final Promise<Void> iam=client.deleteLoadBalancerDeleteIamRole(accountId,loadbalancer,instanceProfile);
      final Promise<Void> securityGroup=client.deleteLoadBalancerDeleteSecurityGroup(accountId,loadbalancer,scalingGroup);
    }
    @Override protected void doCatch(    Throwable e) throws Throwable {
      if (e instanceof CancellationException) {
        LOG.warn("Workflow for deleting ELB is cancelled");
        state=ElbWorkflowState.WORKFLOW_CANCELLED;
        return;
      }
      state=ElbWorkflowState.WORKFLOW_FAILED;
      LOG.error("Workflow for deleting ELB has failed",e);
    }
    @Override protected void doFinally() throws Throwable {
      if (state == ElbWorkflowState.WORKFLOW_RUNNING)       state=ElbWorkflowState.WORKFLOW_SUCCESS;
    }
  }
;
}
