{
  verifySession(session);
  System.out.println("New search: " + range);
  final int sortField=range.getSortField();
  final boolean ascending=range.isAscending();
  Collections.sort(DATA,new Comparator<SearchResultRow>(){
    @Override public int compare(    SearchResultRow r1,    SearchResultRow r2){
      if (r1 == r2) {
        return 0;
      }
      int diff=-1;
      if (r1 != null) {
        diff=(r2 != null) ? r1.getField(sortField).compareTo(r2.getField(sortField)) : 1;
      }
      return ascending ? diff : -diff;
    }
  }
);
  int resultLength=Math.min(range.getLength(),DATA.size() - range.getStart());
  SearchResult result=new SearchResult(DATA.size(),range.getStart(),resultLength);
  result.setDescs(FIELDS);
  result.setRows(DATA.subList(range.getStart(),range.getStart() + resultLength));
  for (  SearchResultRow row : result.getRows()) {
    System.out.println("Row: " + row);
  }
  return result;
}
