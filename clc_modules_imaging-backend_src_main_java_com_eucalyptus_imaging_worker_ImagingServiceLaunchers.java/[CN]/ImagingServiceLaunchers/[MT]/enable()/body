{
  if (!this.shouldEnable())   throw new EucalyptusCloudException("Imaging service is active or still shutting down");
  this.lockLauncher(launcherId);
  try {
    if (!Topology.isEnabled(CloudFormation.class))     throw new EucalyptusCloudException("CloudFormation is not enabled");
    if ("NULL".equals(ImagingServiceProperties.IMAGE))     throw new EucalyptusCloudException("You need to set 'services.imaging.worker.image'" + "before enabling the service");
    ServerCertificateMetadataType metadata=createAndUploadCertificate();
    LOG.debug("Created new certificate " + metadata.getServerCertificateName());
    String template=getInstance().loadTemplate("worker-cf-template.json");
    ArrayList<Parameter> params=new ArrayList<Parameter>();
    params.add(new Parameter("KeyName",ImagingServiceProperties.KEYNAME));
    params.add(new Parameter("CERTARN",metadata.getArn()));
    params.add(new Parameter("ImageId",ImagingServiceProperties.IMAGE));
    params.add(new Parameter("VmExpirationDays",ImagingServiceProperties.EXPIRATION_DAYS));
    params.add(new Parameter("InstanceType",ImagingServiceProperties.INSTANCE_TYPE));
    params.add(new Parameter("NtpServer",ImagingServiceProperties.NTP_SERVER));
    params.add(new Parameter("LogServer",ImagingServiceProperties.LOG_SERVER));
    params.add(new Parameter("LogServerPort",ImagingServiceProperties.LOG_SERVER_PORT));
    List<String> zones=ImagingServiceProperties.listConfiguredZones();
    params.add(new Parameter("NumberOfWorkers",Integer.toString(zones.size())));
    params.add(new Parameter("AvailabilityZones",Joiner.on(",").join(zones)));
    params.add(new Parameter("ImagingServiceUrl",String.format("imaging.%s",DNSProperties.DOMAIN)));
    params.add(new Parameter("EuareServiceUrl",String.format("euare.%s",DNSProperties.DOMAIN)));
    params.add(new Parameter("ComputeServiceUrl",String.format("compute.%s",DNSProperties.DOMAIN)));
    LOG.debug("Creating CF stack for the imaging worker");
    CloudFormationClient.getInstance().createStack(Accounts.lookupSystemAccountByAlias(AccountIdentifiers.IMAGING_SYSTEM_ACCOUNT).getUserId(),ImagingServiceProperties.IMAGING_WORKER_STACK_NAME,template,params);
    LOG.debug("Done creating CF stack for the imaging worker");
  }
 catch (  final Exception ex) {
    throw new EucalyptusCloudException(ex);
  }
 finally {
    this.releaseLauncher(launcherId);
  }
}
