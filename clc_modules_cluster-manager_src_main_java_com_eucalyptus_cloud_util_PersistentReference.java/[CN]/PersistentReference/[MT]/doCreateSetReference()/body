{
  final SetReference<T,R> ref=new SetReference<T,R>(){
    private volatile boolean finished=false;
    @Override public T set(    final R referer) throws ResourceAllocationException {
      this.checkFinished();
      final T ret=PersistentReference.this.doSetReferer(referer,Resource.State.PENDING,Resource.State.EXTANT);
      this.finished=true;
      return ret;
    }
    public T abort() throws ResourceAllocationException {
      this.checkFinished();
      final T ret=PersistentReference.this.doSetReferer(null,null,Resource.State.FREE);
      this.finished=true;
      return ret;
    }
    private void checkFinished() throws ResourceAllocationException {
      if (this.finished) {
        throw new ResourceAllocationException("Failed to set referer since this reference has already been set: " + PersistentReference.this.getDisplayName() + " to "+ PersistentReference.this.getReference()+ " and is currently in state "+ PersistentReference.this.getState());
      }
    }
    @SuppressWarnings("unchecked") @Override public T get(){
      return Entities.merge((T)PersistentReference.this);
    }
    public int compareTo(    final T o){
      return PersistentReference.this.compareTo(o);
    }
    @Override public T clear() throws ResourceAllocationException {
      return PersistentReference.this.doSetReferer(null,null,Resource.State.FREE);
    }
  }
;
  return ref;
}
