{
  Object result=super.bind(httpRequest);
  if (result instanceof QueueUrlGetterSetter && ((QueueUrlGetterSetter)result).getQueueUrl() == null) {
    String scheme=null;
    String userInfo=null;
    String host=null;
    int port=-1;
    String path=null;
    String query=null;
    String fragment=null;
    String hostAndPort=httpRequest.getHeader(HttpHeaders.Names.HOST);
    if (hostAndPort != null) {
      if (hostAndPort.contains(":")) {
        try {
          port=Integer.parseInt(hostAndPort.substring(hostAndPort.lastIndexOf(":") + 1));
        }
 catch (        NumberFormatException ex) {
          throw new BindingException("Invalid host/port number " + hostAndPort);
        }
        host=hostAndPort.substring(0,hostAndPort.lastIndexOf(":"));
      }
 else {
        host=hostAndPort;
      }
      if (channelPipeline.get(SslHandler.class) != null) {
        scheme="https";
      }
 else {
        scheme="http";
      }
    }
    path=httpRequest.getServicePath();
    try {
      ((QueueUrlGetterSetter)result).setQueueUrl(new URI(scheme,userInfo,host,port,path,query,fragment).toString());
    }
 catch (    URISyntaxException e) {
      throw new BindingException("Unable to bind queueUrl, values would be: scheme=" + scheme + ",userInfo="+ userInfo+ ",host="+ host+ ",port="+ port+ ",path="+ path+ ",query="+ query+ ",fragment="+ fragment);
    }
  }
  return result;
}
