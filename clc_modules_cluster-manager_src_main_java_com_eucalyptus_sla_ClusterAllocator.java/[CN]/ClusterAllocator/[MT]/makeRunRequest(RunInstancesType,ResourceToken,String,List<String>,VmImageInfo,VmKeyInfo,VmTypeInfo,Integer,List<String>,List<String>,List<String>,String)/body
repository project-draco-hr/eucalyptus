{
  List<String> macs=Lists.transform(instanceIds,new Function<String,String>(){
    @Override public String apply(    String instanceId){
      return VmInstances.getAsMAC(instanceId);
    }
  }
);
  VmRunType run=new VmRunType(rsvId,userData,childToken.getAmount(),imgInfo,vmInfo,keyInfo,instanceIds,macs,vlan,networkNames,netIndexes).regardingUserRequest(request);
  Request<VmRunType,VmRunResponseType> req=Callbacks.newClusterRequest(new VmRunCallback(run,childToken));
  if (!addrList.isEmpty()) {
    req.then(new Callback.Success<VmRunResponseType>(){
      @Override public void fire(      VmRunResponseType response){
        Iterator<String> addrs=addrList.iterator();
        for (        VmInfo vmInfo : response.getVms()) {
          Address addr=Addresses.getInstance().lookup(addrs.next());
          VmInstance vm=VmInstances.getInstance().lookup(vmInfo.getInstanceId());
          AddressCategory.assign(addr,vm).dispatch(addr.getCluster());
        }
      }
    }
);
  }
  return req;
}
