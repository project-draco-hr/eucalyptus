{
  final byte[] data;
  try {
    data=B64.standard.dec(publicKeyB64);
  }
 catch (  ArrayIndexOutOfBoundsException|StringIndexOutOfBoundsException|DecoderException e) {
    throw new GeneralSecurityException("Invalid key format (expected Base64)");
  }
  if (data.length < 64) {
    throw new InvalidKeyException("Data too short");
  }
  int length=Ints.fromBytes(data[0],data[1],data[2],data[3]);
  if (length != 7 || data[4] != 's' || data[5] != 's' || data[6] != 'h' || data[7] != '-' || data[8] != 'r' || data[9] != 's' || data[10] != 'a') {
    throw new InvalidKeyException("Not an RSA key");
  }
  int exponentLength=Ints.fromBytes(data[11],data[12],data[13],data[14]);
  if (exponentLength <= 0 || exponentLength > 4) {
    throw new InvalidKeyException("Invalid RSA exponent");
  }
  int modulusLength=Ints.fromBytes(data[15 + exponentLength],data[16 + exponentLength],data[17 + exponentLength],data[18 + exponentLength]);
  if (modulusLength <= 0 || modulusLength > 513 || data.length < 19 + exponentLength + modulusLength) {
    throw new InvalidKeyException("Invalid RSA modulus");
  }
  final BigInteger modulus=intFromBytes(data,19 + exponentLength,modulusLength);
  final BigInteger exponent=intFromBytes(data,15,exponentLength);
  final KeyFactory keyFactory=KeyFactory.getInstance("RSA");
  final RSAPublicKeySpec spec=new RSAPublicKeySpec(modulus,exponent);
  final PublicKey key=keyFactory.generatePublic(spec);
  return (RSAPublicKey)key;
}
