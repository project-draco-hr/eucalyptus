{
  String resourceName=(identifier == null ? "" : identifier);
  Context ctx=Contexts.lookup();
  if (ctx.hasAdministrativePrivileges()) {
    return true;
  }
 else {
    BaseMessage msg=ctx.getRequest();
    Ats ats=Ats.inClassHierarchy(msg);
    if (ats.has(PolicyVendor.class) && ats.has(PolicyAction.class) && ats.has(PolicyResourceType.class)) {
      PolicyVendor vendor=ats.get(PolicyVendor.class);
      PolicyResourceType resourceType=ats.get(PolicyResourceType.class);
      PolicyAction action=ats.get(PolicyAction.class);
      return Permissions.isAuthorized(vendor.value(),resourceType.value(),"",ctx.getAccount(),action.action(),ctx.getUser());
    }
 else     if (!ats.has(PolicyResourceType.class)) {
      String err="Malformed message definition:  missing @PolicyResourceType in request type hierarchy: " + msg.getClass().getCanonicalName();
      LOG.error(err);
      throw new RuntimeException(err);
    }
 else     if (!ats.has(PolicyVendor.class)) {
      String err="Malformed message definition:  missing @PolicyVendor in request type hierarchy: " + msg.getClass().getCanonicalName();
      LOG.error(err);
      throw new RuntimeException(err);
    }
 else     if (ats.has(PolicyVendor.class) && ats.has(PolicyResourceType.class)) {
      PolicyVendor vendor=ats.get(PolicyVendor.class);
      PolicyResourceType resourceType=ats.get(PolicyResourceType.class);
    }
 else     if (ats.has(PolicyVendor.class)) {
      PolicyVendor vendor=ats.get(PolicyVendor.class);
    }
 else     if (ats.has(PolicyAction.class)) {
    }
 else     if (ats.has(PolicyResourceType.class)) {
    }
 else {
      return false;
    }
  }
  return false;
}
