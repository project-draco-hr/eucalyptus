{
  return new Iterator<ReportingEventSupport>(){
    private static final int batchSize=100;
    private int offset=0;
    private final LinkedList<ReportingEventSupport> data=Lists.newLinkedList();
    @Override public boolean hasNext(){
      ensureData();
      return !data.isEmpty();
    }
    @Override public ReportingEventSupport next(){
      ensureData();
      return data.removeFirst();
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
    private void ensureData(){
      if (data.isEmpty()) {
        readNextBatch();
      }
    }
    private void readNextBatch(){
      final EntityTransaction transaction=Entities.get(eventClass);
      try {
        addToExportList(data,dependencies,includeDependencies,criteriaFor(eventClass,criterion).setFirstResult(offset).setMaxResults(batchSize).list());
      }
 catch (      Exception e) {
        log.error(e,e);
      }
 finally {
        offset+=batchSize;
        transaction.rollback();
      }
    }
  }
;
}
