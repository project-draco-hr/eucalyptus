{
  if (State.ENABLING.ordinal() > this.stateMachine.getState().ordinal()) {
    try {
      final CheckedListenableFuture<Cluster> result=Automata.sequenceTransitions(this,State.PENDING,State.AUTHENTICATING,State.STARTING,State.STARTING_NOTREADY,State.NOTREADY,State.DISABLED,State.ENABLING,State.ENABLING_RESOURCES,State.ENABLING_NET,State.ENABLING_VMS,State.ENABLING_ADDRS,State.ENABLING_VMS_PASS_TWO,State.ENABLING_ADDRS_PASS_TWO,State.ENABLED).call();
      RuntimeException fail=null;
      for (int i=0; i < Clusters.getConfiguration().getStartupSyncRetries(); i++) {
        try {
          result.get();
          fail=null;
          break;
        }
 catch (        Exception ex) {
          try {
            TimeUnit.SECONDS.sleep(1);
          }
 catch (          Exception ex1) {
            LOG.error(ex1,ex1);
          }
          fail=Exceptions.toUndeclared(ex);
        }
      }
      if (fail != null) {
        throw fail;
      }
    }
 catch (    final InterruptedException ex) {
      Thread.currentThread().interrupt();
    }
catch (    final Exception ex) {
      Logs.exhaust().debug(ex,ex);
      throw new ServiceRegistrationException("Failed to call enable() on cluster " + this.configuration + " because of: "+ ex.getMessage(),ex);
    }
  }
}
