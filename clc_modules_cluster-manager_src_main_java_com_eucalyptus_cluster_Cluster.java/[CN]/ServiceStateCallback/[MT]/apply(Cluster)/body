{
  final SubjectRemoteCallbackFactory<RemoteCallback,Cluster> factory=newSubjectMessageFactory(this.refresh,cluster);
  return new AbstractTransitionAction<Cluster>(){
    @Override public final void leave(    final Cluster parent,    final Callback.Completion transitionCallback){
      if (Hosts.isCoordinator()) {
        try {
          AsyncRequests.newRequest(factory.newInstance()).then(transitionCallback).sendSync(parent.getConfiguration());
        }
 catch (        final InterruptedException ex) {
          Thread.currentThread().interrupt();
          Exceptions.trace(ex);
          transitionCallback.fire();
        }
catch (        final Exception t) {
          if (!parent.swallowException(t)) {
            transitionCallback.fireException(t);
          }
 else {
            transitionCallback.fire();
          }
        }
      }
 else {
        transitionCallback.fire();
      }
    }
  }
;
}
