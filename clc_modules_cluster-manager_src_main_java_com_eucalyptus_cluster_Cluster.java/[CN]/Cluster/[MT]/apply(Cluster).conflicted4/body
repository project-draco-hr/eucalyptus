{
  final SubjectRemoteCallbackFactory<RemoteCallback,Cluster> factory=newSubjectMessageFactory(this.refresh,cluster);
  return new AbstractTransitionAction<Cluster>(){
    @Override public final void leave(    final Cluster parent,    final Callback.Completion transitionCallback){
      try {
        AsyncRequests.newRequest(factory.newInstance()).then(transitionCallback).sendSync(parent.getConfiguration());
      }
 catch (      final ExecutionException e) {
        if (e.getCause() instanceof FailedRequestException) {
          LOG.error(e.getCause().getMessage());
          parent.errors.add(e);
        }
 else         if ((e.getCause() instanceof ConnectionException) || (e.getCause() instanceof IOException)) {
          LOG.error(parent.getName() + ": Error communicating with cluster: " + e.getCause().getMessage());
          parent.errors.add(e);
        }
 else {
          LOG.error(e,e);
          parent.errors.add(e);
        }
      }
catch (      final InterruptedException e) {
        LOG.error(e,e);
        parent.errors.add(e);
      }
catch (      final Throwable e) {
        LOG.error(e,e);
        parent.errors.add(e);
      }
    }
  }
;
}
