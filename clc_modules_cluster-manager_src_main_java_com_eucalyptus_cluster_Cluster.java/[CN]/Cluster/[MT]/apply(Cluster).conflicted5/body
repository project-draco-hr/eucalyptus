{
  final SubjectRemoteCallbackFactory<RemoteCallback,Cluster> factory=newSubjectMessageFactory(this.refresh,cluster);
  return new AbstractTransitionAction<Cluster>(){
    @Override public final void leave(    final Cluster parent,    final Callback.Completion transitionCallback){
      try {
        AsyncRequests.newRequest(factory.newInstance()).dispatch(parent.getLogServiceConfiguration()).get();
        transitionCallback.fire();
      }
 catch (      final InterruptedException t) {
        Thread.currentThread().interrupt();
        transitionCallback.fireException(t);
      }
catch (      final Exception t) {
        if (!parent.swallowException(t)) {
          transitionCallback.fireException(t);
        }
 else {
          transitionCallback.fire();
        }
      }
    }
  }
;
}
