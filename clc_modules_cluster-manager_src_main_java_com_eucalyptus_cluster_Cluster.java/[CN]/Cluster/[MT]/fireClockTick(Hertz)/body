{
  try {
    if (!this.stateMachine.isBusy()) {
      Callable<CheckedListenableFuture<Cluster>> transition=null;
switch (this.stateMachine.getState()) {
case PENDING:
        if (tick.isAsserted(3l)) {
          transition=Automata.sequenceTransitions(this,State.PENDING,State.STARTING,State.STARTING_AUTHENTICATING,State.STARTING_NOTREADY,State.NOTREADY,State.DISABLED);
        }
      break;
case NOTREADY:
    if (tick.isAsserted(10l)) {
      transition=Automata.sequenceTransitions(this,State.NOTREADY,State.DISABLED);
    }
  break;
case DISABLED:
if (tick.isAsserted(10l)) {
  transition=Automata.sequenceTransitions(this,State.DISABLED,State.DISABLED);
}
break;
case ENABLED:
if (tick.isAsserted(10l) && Component.State.ENABLED.apply(this.configuration)) {
transition=Automata.sequenceTransitions(this,State.ENABLED,State.ENABLED_SERVICE_CHECK,State.ENABLED_ADDRS,State.ENABLED_RSC,State.ENABLED_NET,State.ENABLED_VMS,State.ENABLED);
}
 else if (Component.State.DISABLED.apply(this.configuration) || Component.State.NOTREADY.apply(this.configuration)) {
transition=Automata.sequenceTransitions(this,State.ENABLED,State.DISABLED);
}
break;
default :
break;
}
if (transition != null) {
Threads.lookup(ClusterController.class,Cluster.class).submit(transition);
}
}
}
 catch (final IllegalStateException ex) {
Exceptions.trace(ex);
}
catch (final Exception ex) {
LOG.error(ex,ex);
}
}
