{
  try {
    Component.State systemState;
    try {
      systemState=this.configuration.lookupState();
    }
 catch (    final NoSuchElementException ex1) {
      this.stop();
      return;
    }
    final boolean initialized=systemState.ordinal() > Component.State.LOADED.ordinal();
    if (!this.stateMachine.isBusy()) {
      Callable<CheckedListenableFuture<Cluster>> transition=null;
switch (this.stateMachine.getState()) {
case PENDING:
case AUTHENTICATING:
case STARTING:
        if (tick.isAsserted(Clusters.getConfiguration().getPendingInterval())) {
          transition=startingTransition();
        }
      break;
case NOTREADY:
    if (initialized && tick.isAsserted(Clusters.getConfiguration().getNotreadyInterval())) {
      transition=notreadyTransition();
    }
  break;
case DISABLED:
if (initialized && tick.isAsserted(Clusters.getConfiguration().getDisabledInterval()) && (Component.State.DISABLED.equals(systemState) || Component.State.NOTREADY.equals(systemState))) {
  transition=disabledTransition();
}
 else if (initialized && tick.isAsserted(Clusters.getConfiguration().getDisabledInterval()) && Component.State.ENABLED.equals(systemState)) {
  transition=enablingTransition();
}
break;
case ENABLED:
if (initialized && tick.isAsserted(Clusters.getConfiguration().getEnabledInterval()) && Component.State.ENABLED.equals(this.configuration.lookupState())) {
transition=enabledTransition();
}
 else if (initialized && tick.isAsserted(VmInstances.VOLATILE_STATE_INTERVAL_SEC) && Component.State.ENABLED.equals(this.configuration.lookupState())) {
Refresh.VOLATILE_INSTANCES.apply(this);
}
 else if ((initialized && Component.State.DISABLED.equals(this.configuration.lookupState())) || Component.State.NOTREADY.equals(this.configuration.lookupState())) {
transition=disableTransition();
}
break;
default :
break;
}
if (transition != null) {
try {
Threads.enqueue(this.configuration,transition).get();
Cluster.this.clearExceptions();
}
 catch (final Exception ex) {
LOG.error(ex,ex);
}
}
}
}
 catch (final Exception ex) {
LOG.error(ex,ex);
}
}
