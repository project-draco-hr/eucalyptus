{
  if (!State.ENABLED.equals(this.stateMachine.getState())) {
    try {
      final Callable<CheckedListenableFuture<Cluster>> transition=Automata.sequenceTransitions(this,State.PENDING,State.AUTHENTICATING,State.STARTING,State.STARTING_NOTREADY,State.NOTREADY,State.DISABLED,State.ENABLING,State.ENABLING_RESOURCES,State.ENABLING_NET,State.ENABLING_VMS,State.ENABLING_ADDRS,State.ENABLING_VMS_PASS_TWO,State.ENABLING_ADDRS_PASS_TWO,State.ENABLED);
      CheckedListenableFuture<Cluster> res=Threads.lookup(ClusterController.class,Cluster.class).submit(transition).get();
      Exception error=null;
      for (int i=0; i < Cluster.CLUSTER_STARTUP_SYNC_RETRIES; i++) {
        try {
          try {
            res.get();
            error=null;
            break;
          }
 catch (          Exception ex) {
            LOG.error(ex);
            error=ex;
          }
          TimeUnit.SECONDS.sleep(1);
        }
 catch (        InterruptedException ex) {
          Thread.currentThread().interrupt();
          LOG.error(ex,ex);
        }
catch (        Exception ex) {
          LOG.error(ex,ex);
          error=ex;
        }
      }
      if (error != null) {
        this.configuration.error(error);
        throw new ServiceRegistrationException("Failed to call enable() on cluster: " + this.configuration + " because of: "+ error.getMessage(),error);
      }
    }
 catch (    NoSuchElementException ex) {
      throw ex;
    }
catch (    Exception ex) {
      LOG.error(ex,ex);
      throw new ServiceRegistrationException("Failed to call enable() on cluster: " + this.configuration + " because of: "+ ex.getMessage(),ex);
    }
  }
}
