{
  if (!State.ENABLED.equals(this.stateMachine.getState())) {
    try {
      final Callable<CheckedListenableFuture<Cluster>> transition=Automata.sequenceTransitions(this,State.PENDING,State.AUTHENTICATING,State.STARTING,State.STARTING_NOTREADY,State.NOTREADY,State.DISABLED,State.ENABLING,State.ENABLING_RESOURCES,State.ENABLING_NET,State.ENABLING_VMS,State.ENABLING_ADDRS,State.ENABLING_VMS_PASS_TWO,State.ENABLING_ADDRS_PASS_TWO,State.ENABLED);
      try {
        CheckedListenableFuture<Cluster> res=Threads.lookup(ClusterController.class,Cluster.class).submit(transition).get();
        Exception error=null;
        for (int i=0; i < Cluster.CLUSTER_STARTUP_SYNC_RETRIES; i++) {
          try {
            try {
              res.get();
              error=null;
              break;
            }
 catch (            Exception ex) {
              LOG.error(ex);
              error=ex;
            }
            TimeUnit.SECONDS.sleep(1);
          }
 catch (          InterruptedException ex) {
            LOG.error(ex,ex);
          }
        }
        if (error != null) {
          this.configuration.error(error);
        }
      }
 catch (      InterruptedException ex1) {
        LOG.error(ex1,ex1);
      }
catch (      ExecutionException ex1) {
        LOG.error(ex1,ex1);
      }
    }
 catch (    NoSuchElementException ex) {
      throw ex;
    }
  }
}
