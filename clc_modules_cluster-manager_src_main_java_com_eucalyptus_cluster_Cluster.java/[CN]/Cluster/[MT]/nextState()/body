{
  try {
    if (this.stateMachine.isBusy()) {
      return;
    }
 else {
      Callable<CheckedListenableFuture<ServiceConfiguration>> transition=null;
switch (this.stateMachine.getState()) {
case PENDING:
case STARTING_AUTHENTICATING:
case STARTING_NOTREADY:
        transition=Automata.chainedTransition(this,State.PENDING,State.STARTING_AUTHENTICATING,State.STARTING_NOTREADY,State.NOTREADY);
      break;
case NOTREADY:
    transition=Automata.chainedTransition(this,State.NOTREADY,State.DISABLED);
case DISABLED:
  if (Component.State.ENABLED.apply(this.configuration)) {
    transition=Automata.chainedTransition(this,State.DISABLED,State.ENABLING);
  }
 else   if (Component.State.DISABLED.apply(this.configuration)) {
    transition=Automata.chainedTransition(this,State.DISABLED,State.DISABLED);
  }
case ENABLING:
case ENABLING_RESOURCES:
case ENABLING_NET:
case ENABLING_VMS:
case ENABLING_ADDRS:
case ENABLING_VMS_PASS_TWO:
case ENABLING_ADDRS_PASS_TWO:
transition=Automata.chainedTransition(this,State.ENABLING,State.ENABLING_RESOURCES,State.ENABLING_NET,State.ENABLING_VMS,State.ENABLING_ADDRS,State.ENABLING_VMS_PASS_TWO,State.ENABLING_ADDRS_PASS_TWO,State.ENABLED);
break;
case ENABLED:
if (Component.State.ENABLED.apply(this.configuration)) {
transition=Automata.chainedTransition(this,State.ENABLED,State.ENABLED_SERVICE_CHECK,State.ENABLED_ADDRS,State.ENABLED_RSC,State.ENABLED_NET,State.ENABLED_VMS);
}
 else if (Component.State.DISABLED.apply(this.configuration) || Component.State.NOTREADY.apply(this.configuration)) {
transition=Automata.chainedTransition(this,this.stateMachine.getState(),State.DISABLED);
}
case ENABLED_ADDRS:
case ENABLED_RSC:
case ENABLED_NET:
case ENABLED_VMS:
case ENABLED_SERVICE_CHECK:
if (Component.State.ENABLED.apply(this.configuration)) {
transition=Automata.chainedTransition(this,State.ENABLED,State.ENABLED_SERVICE_CHECK,State.ENABLED_ADDRS,State.ENABLED_RSC,State.ENABLED_NET,State.ENABLED_VMS);
}
break;
default :
break;
}
if (transition != null) {
Threads.lookup(ClusterController.class,Cluster.class).submit(transition).get();
}
}
}
 catch (IllegalStateException ex) {
Exceptions.trace(ex);
}
catch (Exception ex) {
LOG.error(ex,ex);
}
}
