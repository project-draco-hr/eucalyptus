{
  Clusters.getInstance().registerDisabled(this);
  this.configuration.lookupService().getEndpoint().start();
  ListenerRegistry.getInstance().register(ClockTick.class,this);
  ListenerRegistry.getInstance().register(Hertz.class,this);
  try {
    final Callable<CheckedListenableFuture<Cluster>> transition=Automata.sequenceTransitions(this,State.PENDING,State.STARTING,State.STARTING_AUTHENTICATING,State.STARTING_NOTREADY,State.NOTREADY);
    Threads.lookup(ClusterController.class,Cluster.class).submit(transition).get();
  }
 catch (  InterruptedException ex) {
    Thread.currentThread().interrupt();
    throw new ServiceRegistrationException(ex);
  }
catch (  ExecutionException ex) {
    throw new ServiceRegistrationException(ex.getCause());
  }
}
