{
  Clusters.getInstance().registerDisabled(this);
  this.configuration.lookupService().getEndpoint().start();
  final Callable<CheckedListenableFuture<Cluster>> transition=Automata.sequenceTransitions(Cluster.this,State.PENDING,State.AUTHENTICATING,State.STARTING,State.STARTING_NOTREADY,State.NOTREADY,State.DISABLED);
  Exception error=null;
  try {
    for (int i=0; i < Cluster.CLUSTER_STARTUP_SYNC_RETRIES; i++) {
      try {
        transition.call().get();
        break;
      }
 catch (      Exception ex) {
        LOG.error(ex);
        error=ex;
      }
      TimeUnit.SECONDS.sleep(1);
    }
  }
 catch (  InterruptedException ex) {
    LOG.error(ex,ex);
  }
 finally {
    ListenerRegistry.getInstance().register(ClockTick.class,Cluster.this);
    ListenerRegistry.getInstance().register(Hertz.class,Cluster.this);
  }
  if (error != null) {
    throw new ServiceRegistrationException(error);
  }
}
