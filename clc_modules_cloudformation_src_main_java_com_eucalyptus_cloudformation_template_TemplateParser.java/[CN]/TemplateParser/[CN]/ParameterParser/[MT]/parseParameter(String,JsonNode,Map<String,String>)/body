{
  validateParameterKeys(parameterJsonNode);
  ParameterType type=parseType(parameterJsonNode);
  String[] allowedValues=parseAllowedValues(parameterJsonNode);
  String allowedPattern=parseAllowedPattern(parameterName,parameterJsonNode,type);
  String constraintDescription=parseConstraintDescription(parameterName,parameterJsonNode);
  String description=parseDescription(parameterName,parameterJsonNode);
  Double maxLength=parseMaxLength(parameterName,parameterJsonNode,type);
  Double minLength=parseMinLength(parameterName,parameterJsonNode,type);
  if (maxLength != null && minLength != null && maxLength < minLength) {
    throw new ValidationErrorException("Template error: Parameter '" + parameterName + "' "+ ParameterKey.MinLength+ " must be less than "+ ParameterKey.MaxLength+ ".");
  }
  Double maxValue=parseMaxValue(parameterName,parameterJsonNode,type);
  Double minValue=parseMinValue(parameterName,parameterJsonNode,type);
  if (maxValue != null && minValue != null && maxValue < minValue) {
    throw new ValidationErrorException("Template error: Parameter '" + parameterName + "' "+ ParameterKey.MinValue+ " must be less than "+ ParameterKey.MaxValue+ ".");
  }
  String defaultValue=JsonHelper.getString(parameterJsonNode,ParameterKey.Default.toString());
  String userDefinedValue=userParameterMap.get(parameterName);
  boolean noEcho="true".equalsIgnoreCase(JsonHelper.getString(parameterJsonNode,ParameterKey.NoEcho.toString()));
  for (  String value : Lists.newArrayList(defaultValue,userDefinedValue)) {
    if (value != null) {
      checkAllowedValues(parameterName,value,allowedValues,constraintDescription);
    }
switch (type) {
case String:
      parseStringParameter(parameterName,value,allowedPattern,minLength,maxLength,constraintDescription);
    break;
case Number:
  parseNumberParameter(parameterName,value,minValue,maxValue,constraintDescription);
break;
case CommaDelimitedList:
break;
default :
throw new ValidationErrorException("Template format error: Unrecognized parameter type: " + type);
}
}
String stringValue=null;
if (defaultValue != null) stringValue=defaultValue;
if (userDefinedValue != null) stringValue=userDefinedValue;
JsonNode jsonValueNode=null;
if (stringValue != null) {
switch (type) {
case String:
jsonValueNode=new TextNode(stringValue);
break;
case Number:
jsonValueNode=new TextNode(stringValue);
break;
case CommaDelimitedList:
ArrayNode arrayNode=new ObjectMapper().createArrayNode();
StringTokenizer stok=new StringTokenizer(stringValue,",");
while (stok.hasMoreTokens()) {
arrayNode.add(stok.nextToken());
}
jsonValueNode=arrayNode;
break;
default :
throw new ValidationErrorException("Template format error: Unrecognized parameter type: " + type);
}
}
StackEntity.Parameter parameter=new StackEntity.Parameter();
parameter.setKey(parameterName);
parameter.setNoEcho(noEcho);
parameter.setJsonValue(JsonHelper.getStringFromJsonNode(jsonValueNode));
parameter.setStringValue(stringValue);
TemplateParameter templateParameter=new TemplateParameter();
templateParameter.setDescription(description);
templateParameter.setDefaultValue(defaultValue);
templateParameter.setNoEcho(noEcho);
templateParameter.setParameterKey(parameterName);
return new Parameter(parameter,templateParameter);
}
