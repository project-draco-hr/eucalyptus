{
  JsonNode parametersJsonNode=JsonHelper.checkObject(templateJsonNode,TemplateParser.TemplateSection.Parameters.toString());
  if (parametersJsonNode != null) {
    Map<String,String> userParameterMap=Maps.newHashMap();
    if (userParameters != null) {
      for (      com.eucalyptus.cloudformation.Parameter userParameter : userParameters) {
        userParameterMap.put(userParameter.getParameterKey(),userParameter.getParameterValue());
      }
    }
    List<Parameter> parameterList=Lists.newArrayList();
    for (    String parameterKey : Lists.newArrayList(parametersJsonNode.fieldNames())) {
      JsonNode parameterJsonNode=JsonHelper.checkObject(parametersJsonNode,parameterKey,"Any " + TemplateParser.TemplateSection.Parameters + " member must be a JSON object.");
      Parameter parameter=parseParameter(parameterKey,parameterJsonNode,userParameterMap);
      parameterList.add(parameter);
    }
    List<String> noValueParameters=Lists.newArrayList();
    if (parameterList.size() > Limits.MAX_PARAMETERS_PER_TEMPLATE) {
      throw new ValidationErrorException("Too many parameters in the template.  Max of " + Limits.MAX_PARAMETERS_PER_TEMPLATE + " allowed.");
    }
    for (    Parameter parameter : parameterList) {
      if (parameter.getParameter().getKey().length() > Limits.PARAMETER_NAME_MAX_LENGTH_CHARS) {
        throw new ValidationErrorException("Parameter " + parameter.getParameter().getKey() + " exceeds the maximum parameter name length of "+ Limits.PARAMETER_NAME_MAX_LENGTH_CHARS+ " characters.");
      }
      if (parameter.getParameter().getStringValue() != null && parameter.getParameter().getStringValue().getBytes().length > Limits.PARAMETER_VALUE_MAX_LENGTH_BYTES) {
        throw new ValidationErrorException("Parameter " + parameter.getParameter().getKey() + " exceeds the maximum parameter value length of "+ Limits.PARAMETER_VALUE_MAX_LENGTH_BYTES+ " bytes.");
      }
      template.getParameters().add(parameter.getParameter());
      template.getParameterDeclarations().add(parameter.getParameterDeclaration());
      if (parameter.getParameter().getStringValue() == null) {
        noValueParameters.add(parameter.getParameter().getKey());
      }
    }
    if (!noValueParameters.isEmpty() && !onlyEvaluateTemplate) {
      throw new ValidationErrorException("Parameters: " + noValueParameters + " must have values");
    }
    Set<String> userParamKeys=Sets.newHashSet();
    Set<String> templateParamKeys=Sets.newHashSet();
    if (userParameterMap != null) {
      userParamKeys.addAll(userParameterMap.keySet());
    }
    if (parametersJsonNode != null) {
      templateParamKeys.addAll(Sets.newHashSet(parametersJsonNode.fieldNames()));
    }
    userParamKeys.removeAll(templateParamKeys);
    if (!userParamKeys.isEmpty()) {
      throw new ValidationErrorException("Parameters: " + userParamKeys + " do not exist in the template");
    }
  }
}
