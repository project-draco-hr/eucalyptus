{
  JsonNode conditionsJsonNode=JSONHelper.checkObject(templateJsonNode,TemplateSection.Conditions.toString());
  if (conditionsJsonNode == null)   return;
  Set<String> conditionNames=Sets.newHashSet(conditionsJsonNode.fieldNames());
  DependencyManager conditionDependencyManager=template.getConditionDependencyManager();
  for (  String conditionName : conditionNames) {
    conditionDependencyManager.addNode(conditionName);
    Template.Condition condition=new Template.Condition();
    condition.setConditionName(conditionName);
    condition.setReady(false);
    template.getConditionMap().put(conditionName,condition);
  }
  Set<String> resourceReferences=Sets.newHashSet();
  Set<String> unresolvedConditionDependencies=Sets.newHashSet();
  for (  String conditionName : conditionNames) {
    JsonNode conditionJsonNode=JSONHelper.checkObject(conditionsJsonNode,conditionName,"Any " + TemplateSection.Conditions + " member must be a JSON object.");
    conditionDependencyCrawl(conditionName,conditionJsonNode,conditionDependencyManager,template,resourceReferences,unresolvedConditionDependencies);
    FunctionEvaluation.validateConditionSectionArgTypesWherePossible(conditionJsonNode);
  }
  if (resourceReferences != null && !resourceReferences.isEmpty()) {
    throw new ValidationErrorException("Template format error: Unresolved dependencies " + resourceReferences + ". Cannot reference resources in the Conditions block of the template");
  }
  if (unresolvedConditionDependencies != null && !resourceReferences.isEmpty()) {
    throw new ValidationErrorException("Template format error: Unresolved condition dependencies " + unresolvedConditionDependencies + " in the Conditions block of the template");
  }
  try {
    for (    String conditionName : conditionDependencyManager.dependencyList()) {
      JsonNode conditionJsonNode=conditionsJsonNode.get(conditionName);
      template.getConditionMap().get(conditionName).setConditionValue(FunctionEvaluation.evaluateFunctions(conditionJsonNode,template));
      template.getConditionMap().get(conditionName).setReady(true);
    }
  }
 catch (  CyclicDependencyException ex) {
    throw new ValidationErrorException("Template error: Found circular condition dependency: " + ex.getMessage());
  }
}
