{
  if (userParameters != null) {
    for (    Parameter userParameter : userParameters) {
      paramMap.put(userParameter.getParameterKey(),userParameter.getParameterValue());
    }
  }
  JSONObject parametersJSONObject=getJSONObject(templateJSONObject,TemplateSection.Parameters.toString(),"Template format error: Any Parameters member must be a JSON object.");
  if (parametersJSONObject != null) {
    Set<String> parameterKeys=(Set<String>)parametersJSONObject.keySet();
    Set<String> noValueParameters=Sets.newHashSet();
    for (    String parameterKey : parameterKeys) {
      Object parameterObject=parametersJSONObject.get(parameterKey);
      if (!(parameterObject instanceof JSONObject)) {
        throw new ValidationErrorException("Template format error: Any Parameters member must be a JSON object.");
      }
      JSONObject parameterJSONObject=(JSONObject)parameterObject;
      Set<String> tempParameterKeys=Sets.newHashSet((Set<String>)parameterJSONObject.keySet());
      for (      ValidParameterKey section : ValidParameterKey.values()) {
        tempParameterKeys.remove(section.toString());
      }
      if (!tempParameterKeys.isEmpty()) {
        throw new ValidationErrorException("Invalid template parameter property or properties " + tempParameterKeys.toString());
      }
      Template.Parameter parameter=new Template.Parameter();
      String typeStr=getString(parameterJSONObject,ValidParameterKey.Type.toString());
      if (typeStr == null) {
        throw new ValidationErrorException("Template format error: Every Parameters object must contain a Type member.");
      }
      Template.ParameterType parameterType=null;
      try {
        parameterType=Template.ParameterType.valueOf(typeStr);
      }
 catch (      Exception ex) {
        throw new ValidationErrorException("Template format error: Unrecognized parameter type: " + typeStr);
      }
      JSONArray allowedValuesJSONArray=getJSONArray(parameterJSONObject,ValidParameterKey.AllowedValues.toString());
      if (allowedValuesJSONArray != null) {
        String[] allowedValues=new String[allowedValuesJSONArray.size()];
        for (int index=0; index < allowedValues.length; index++) {
          Object allowedValueObject=allowedValuesJSONArray.get(index);
          if (allowedValueObject == null || !(allowedValueObject instanceof String)) {
            throw new ValidationErrorException("Template format error: Every AllowedValues value must be a string.");
          }
          allowedValues[index]=(String)allowedValueObject;
        }
        parameter.setAllowedValues(allowedValues);
      }
      parameter.setAllowedPattern(getString(parameterJSONObject,ValidParameterKey.AllowedPattern.toString()));
      String constraintDescription=getString(parameterJSONObject,ValidParameterKey.ConstraintDescription.toString());
      if (constraintDescription != null && constraintDescription.length() > 4000) {
        throw new ValidationErrorException("Template format error: ConstraintDescription must be no longer than 4000 characters.");
      }
      parameter.setConstraintDescription(constraintDescription);
      parameter.setDefaultValue(getString(parameterJSONObject,ValidParameterKey.Default.toString()));
      String description=getString(parameterJSONObject,ValidParameterKey.Description.toString());
      if (description != null && constraintDescription.length() > 4000) {
        throw new ValidationErrorException("Template format error: Description must be no longer than 4000 characters.");
      }
      parameter.setDescription(description);
      parameter.setMaxLength(getDouble(parameterJSONObject,ValidParameterKey.MaxLength.toString()));
      parameter.setMinLength(getDouble(parameterJSONObject,ValidParameterKey.MinLength.toString()));
      parameter.setMaxValue(getDouble(parameterJSONObject,ValidParameterKey.MaxValue.toString()));
      parameter.setMinValue(getDouble(parameterJSONObject,ValidParameterKey.MinValue.toString()));
      parameter.setDefaultValue(getString(parameterJSONObject,ValidParameterKey.Default.toString()));
      parameter.setNoEcho("true".equalsIgnoreCase(getString(parameterJSONObject,ValidParameterKey.NoEcho.toString())));
      parameter.setParameterKey(parameterKey);
      parameter.setType(parameterType);
      parameter.setParameterValue(paramMap.get(parameterKey) != null ? paramMap.get(parameterKey) : parameter.getDefaultValue());
      if (parameter.getParameterValue() == null) {
        noValueParameters.add(parameterKey);
        continue;
      }
      if (parameter.getAllowedValues() != null && !Arrays.asList(parameter.getAllowedValues()).contains(parameter.getParameterValue())) {
        throw new ValidationErrorException(parameter.getConstraintDescription() != null ? parameter.getConstraintDescription() : "Template error: Parameter '" + parameterKey + "' must be one of AllowedValues");
      }
switch (parameterType) {
case Number:
        parseNumberParameter(parameterKey,parameter);
      break;
case String:
    parseStringParameter(parameterKey,parameter);
  break;
case CommaDelimitedList:
parseCommaDelimitedListParameter(parameterKey,parameter);
break;
default :
throw new ValidationErrorException("Template format error: Unrecognized parameter type: " + typeStr);
}
template.addParameter(parameter);
if (!noValueParameters.isEmpty()) {
throw new ValidationErrorException("Parameters: " + noValueParameters + " must have values");
}
}
}
Set<String> userParamKeys=Sets.newHashSet();
Set<String> templateParamKeys=Sets.newHashSet();
if (userParameters != null) {
userParamKeys.addAll(paramMap.keySet());
}
if (parametersJSONObject != null) {
templateParamKeys.addAll((Set<String>)parametersJSONObject.keySet());
}
userParamKeys.removeAll(templateParamKeys);
if (!userParamKeys.isEmpty()) {
throw new ValidationErrorException("Parameters: " + userParamKeys + " do not exist in the template");
}
}
