{
  JSONObject resourcesJSONObject=getJSONObject(templateJSONObject,TemplateSection.Resources.toString(),"Template format error: Any Resources member must be a JSON object.");
  if (resourcesJSONObject == null || resourcesJSONObject.keySet().isEmpty()) {
    throw new ValidationErrorException("At least one Resources member must be defined.");
  }
  Set<String> resourceKeys=(Set<String>)resourcesJSONObject.keySet();
  for (  String resourceKey : resourceKeys) {
    Object resourceObject=resourcesJSONObject.get(resourceKey);
    if (!(resourceObject instanceof JSONObject)) {
      throw new ValidationErrorException("Template format error: Any Resources member must be a JSON object.");
    }
  }
  Set<String> commonParametersAndResources=Sets.intersection(resourceKeys,template.getReferenceMap().keySet());
  if (!commonParametersAndResources.isEmpty()) {
    throw new ValidationErrorException("Template error: all resources and parameters must have unique names. Common name(s):" + commonParametersAndResources);
  }
  for (  String resourceKey : resourceKeys) {
    Template.Reference reference=new Template.Reference();
    reference.setReady(false);
    reference.setReferenceName(resourceKey);
    reference.setReferenceValue(null);
    reference.setReferenceType(Template.ReferenceType.Resource);
    template.getReferenceMap().put(resourceKey,reference);
  }
  Table<String,String,Boolean> dependencies=HashBasedTable.create();
  for (  String resourceKey : resourceKeys) {
    List<String> resourceReferences=Lists.newArrayList();
    findResourceReferencesAndEvaluateOthers(resourceReferences,template,resourcesJSONObject.getJSONObject(resourceKey));
    for (    String reference : resourceReferences) {
      dependencies.put(reference,resourceKey,Boolean.TRUE);
    }
  }
  List<String> sortedResourceKeys=topologicallySortResources(resourceKeys,dependencies);
  for (  String key : sortedResourceKeys) {
    JSONObject resourceJSONObject=resourcesJSONObject.getJSONObject(key);
    String type=getString(resourceJSONObject,"Type");
    if (type == null) {
      throw new ValidationErrorException("Type is a required property of Resource");
    }
    if ("AWS::EC2::Instance".equals(type)) {
      AWSEC2Instance instance=new AWSEC2Instance();
      instance.setType(type);
      instance.setLogicalResourceId(key);
      if (resourceJSONObject.containsKey("Metadata") && resourceJSONObject.get("Metadata") instanceof JSONObject) {
        instance.setMetadataJSON(resourceJSONObject.getJSONObject("Metadata"));
      }
      if (resourceJSONObject.containsKey("Properties") && resourceJSONObject.get("Properties") instanceof JSONObject) {
        instance.setPropertiesJSON(resourceJSONObject.getJSONObject("Properties"));
      }
      template.getResourceList().add(instance);
    }
 else {
      throw new ValidationErrorException("Unsupported resource type " + type);
    }
  }
}
