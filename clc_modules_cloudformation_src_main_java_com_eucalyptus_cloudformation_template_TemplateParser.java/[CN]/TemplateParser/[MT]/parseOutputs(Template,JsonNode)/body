{
  Map<String,Boolean> conditionMap=template.getConditionMap();
  ArrayList<StackEntity.Output> outputs=template.getOutputs();
  JsonNode outputsJsonNode=JsonHelper.checkObject(templateJsonNode,TemplateSection.Outputs.toString());
  if (outputsJsonNode != null) {
    List<String> unresolvedResourceDependencies=Lists.newArrayList();
    List<String> outputKeys=Lists.newArrayList(outputsJsonNode.fieldNames());
    for (    String outputKey : outputKeys) {
      if (outputKey.length() > Limits.OUTPUT_NAME_MAX_LENGTH_CHARS) {
        throw new ValidationErrorException("Output " + outputKey + " name exceeds the maximum length of "+ Limits.OUTPUT_NAME_MAX_LENGTH_CHARS+ " characters");
      }
      JsonNode outputJsonNode=outputsJsonNode.get(outputKey);
      validateValidResourcesInOutputs(outputKey,outputJsonNode,template,unresolvedResourceDependencies);
      Set<String> tempOutputKeys=Sets.newHashSet(outputJsonNode.fieldNames());
      for (      OutputKey validOutputKey : OutputKey.values()) {
        tempOutputKeys.remove(validOutputKey.toString());
      }
      if (!tempOutputKeys.isEmpty()) {
        throw new ValidationErrorException("Invalid output property or properties " + tempOutputKeys);
      }
      String description=JsonHelper.getString(outputsJsonNode.get(outputKey),OutputKey.Description.toString());
      if (description != null && description.length() > 4000) {
        throw new ValidationErrorException("Template format error: " + OutputKey.Description + " must be no "+ "longer than 4000 characters.");
      }
      String conditionKey=JsonHelper.getString(outputJsonNode,OutputKey.Condition.toString());
      if (conditionKey != null) {
        if (!conditionMap.containsKey(conditionKey)) {
          throw new ValidationErrorException("Template format error: Condition " + conditionKey + "  is not defined.");
        }
      }
      if (!outputJsonNode.has(OutputKey.Value.toString())) {
        throw new ValidationErrorException("Every Outputs member must contain a Value object");
      }
      FunctionEvaluation.validateNonConditionSectionArgTypesWherePossible(outputsJsonNode.get(outputKey));
      StackEntity.Output output=new StackEntity.Output();
      output.setKey(outputKey);
      JsonNode outputValueNode=outputJsonNode.get(OutputKey.Value.toString());
      boolean match=false;
      for (      IntrinsicFunction intrinsicFunction : IntrinsicFunctions.values()) {
        IntrinsicFunction.MatchResult matchResult=intrinsicFunction.evaluateMatch(outputValueNode);
        if (matchResult.isMatch()) {
          match=true;
          break;
        }
      }
      if (!match) {
        if (outputValueNode.isObject()) {
          throw new ValidationErrorException("The Value field of every Outputs member must evaluate to a String and not a Map.");
        }
        if (outputValueNode.isArray()) {
          throw new ValidationErrorException("The Value field of every Outputs member must evaluate to a String and not a List.");
        }
      }
      output.setDescription(description);
      output.setJsonValue(JsonHelper.getStringFromJsonNode(outputJsonNode.get(OutputKey.Value.toString())));
      output.setReady(false);
      output.setAllowedByCondition(conditionMap.get(conditionKey) != Boolean.FALSE);
      outputs.add(output);
    }
    if (!unresolvedResourceDependencies.isEmpty()) {
      throw new ValidationErrorException("Template format error: Unresolved resource dependencies " + unresolvedResourceDependencies + " in the Outputs block of the template");
    }
    if (outputs.size() > Limits.MAX_OUTPUTS_PER_TEMPLATE) {
      throw new ValidationErrorException("Stack exceeds the maximum allowed number of outputs.(" + Limits.MAX_OUTPUTS_PER_TEMPLATE + ")");
    }
    template.setOutputs(outputs);
  }
}
