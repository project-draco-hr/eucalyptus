{
  JsonNode outputsJsonNode=JsonHelper.checkObject(templateJsonNode,TemplateSection.Outputs.toString());
  if (outputsJsonNode != null) {
    List<String> outputKeys=Lists.newArrayList(outputsJsonNode.fieldNames());
    for (    String outputKey : outputKeys) {
      JsonNode outputJsonNode=outputsJsonNode.get(outputKey);
      Set<String> tempOutputKeys=Sets.newHashSet(outputJsonNode.fieldNames());
      for (      OutputKey validOutputKey : OutputKey.values()) {
        tempOutputKeys.remove(validOutputKey.toString());
      }
      if (!tempOutputKeys.isEmpty()) {
        throw new ValidationErrorException("Invalid output property or properties " + tempOutputKeys);
      }
      String description=JsonHelper.getString(outputsJsonNode.get(outputKey),OutputKey.Description.toString());
      if (description != null && description.length() > 4000) {
        throw new ValidationErrorException("Template format error: " + OutputKey.Description + " must be no "+ "longer than 4000 characters.");
      }
      String conditionKey=JsonHelper.getString(outputJsonNode,OutputKey.Condition.toString());
      if (conditionKey != null) {
        if (!template.getConditionMap().containsKey(conditionKey)) {
          throw new ValidationErrorException("Template format error: Condition " + conditionKey + "  is not defined.");
        }
      }
      if (!outputJsonNode.has(OutputKey.Value.toString())) {
        throw new ValidationErrorException("Every Outputs member must contain a Value object");
      }
      FunctionEvaluation.validateNonConditionSectionArgTypesWherePossible(outputsJsonNode.get(outputKey));
      template.getOutputJsonMap().put(outputKey,JsonHelper.getStringFromJsonNode(outputsJsonNode.get(outputKey)));
    }
  }
}
