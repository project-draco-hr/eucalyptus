{
  Template template=new Template();
  template.setResourceInfoMap(Maps.<String,ResourceInfo>newLinkedHashMap());
  JsonNode templateJsonNode=null;
  try {
    templateJsonNode=objectMapper.readTree(templateBody);
  }
 catch (  IOException ex) {
    throw new ValidationErrorException(ex.getMessage());
  }
  if (!templateJsonNode.isObject()) {
    throw new ValidationErrorException("Template body is not a JSON object");
  }
  template.setTemplateBody(templateBody);
  addPseudoParameters(template,pseudoParameterValues);
  buildResourceMap(template,templateJsonNode);
  parseValidTopLevelKeys(templateJsonNode);
  parseVersion(template,templateJsonNode);
  parseMetadata(template,templateJsonNode);
  parseDescription(template,templateJsonNode);
  parseMappings(template,templateJsonNode);
  ParameterParser.parseParameters(template,templateJsonNode,userParameters,false);
  parseConditions(template,templateJsonNode,false,effectiveUserId);
  parseResources(template,templateJsonNode,false);
  List<String> requiredCapabilities=Lists.newArrayList();
  for (  ResourceInfo resourceInfo : template.getResourceInfoMap().values()) {
    if (resourceInfo.getRequiredCapabilities() != null) {
      requiredCapabilities.addAll(resourceInfo.getRequiredCapabilities());
    }
  }
  Set<String> missingRequiredCapabilities=Sets.newLinkedHashSet();
  if (!requiredCapabilities.isEmpty()) {
    for (    String requiredCapability : requiredCapabilities) {
      if (capabilities == null || !capabilities.contains(requiredCapability)) {
        missingRequiredCapabilities.add(requiredCapability);
      }
    }
  }
  if (!missingRequiredCapabilities.isEmpty()) {
    throw new InsufficientCapabilitiesException("Required capabilities:" + missingRequiredCapabilities);
  }
  parseOutputs(template,templateJsonNode);
  return template;
}
