{
  Set<String> tempParameterKeys=Sets.newHashSet(parameterJsonNode.fieldNames());
  for (  ParameterKey validParameterKey : ParameterKey.values()) {
    tempParameterKeys.remove(validParameterKey.toString());
  }
  if (!tempParameterKeys.isEmpty()) {
    throw new ValidationErrorException("Invalid template parameter property or properties " + tempParameterKeys);
  }
  TemplateParameter templateParameter=new TemplateParameter();
  String type=JsonHelper.getString(parameterJsonNode,ParameterKey.Type.toString());
  if (type == null) {
    throw new ValidationErrorException("Template format error: Every " + TemplateSection.Parameters + " object "+ "must contain a "+ ParameterKey.Type+ " member.");
  }
  ParameterType parameterType=null;
  try {
    parameterType=ParameterType.valueOf(type);
  }
 catch (  Exception ex) {
    throw new ValidationErrorException("Template format error: Unrecognized parameter type: " + type);
  }
  JsonNode allowedValuesJsonNode=JsonHelper.checkArray(parameterJsonNode,ParameterKey.AllowedValues.toString());
  if (allowedValuesJsonNode != null) {
    String[] allowedValues=new String[allowedValuesJsonNode.size()];
    for (int index=0; index < allowedValues.length; index++) {
      String errorMsg="Every " + ParameterKey.AllowedValues + "value must be a string.";
      String allowedValue=JsonHelper.getString(allowedValuesJsonNode,index,errorMsg);
      if (allowedValue == null) {
        throw new ValidationErrorException("Template format error: " + errorMsg);
      }
      allowedValues[index]=allowedValue;
    }
    templateParameter.setAllowedValues(allowedValues);
  }
  templateParameter.setAllowedPattern(JsonHelper.getString(parameterJsonNode,ParameterKey.AllowedPattern.toString()));
  String constraintDescription=JsonHelper.getString(parameterJsonNode,ParameterKey.ConstraintDescription.toString());
  if (constraintDescription != null && constraintDescription.length() > 4000) {
    throw new ValidationErrorException("Template format error: " + ParameterKey.ConstraintDescription + " must be no longer than 4000 characters.");
  }
  templateParameter.setConstraintDescription(constraintDescription);
  templateParameter.setDefaultValue(JsonHelper.getString(parameterJsonNode,ParameterKey.Default.toString()));
  String description=JsonHelper.getString(parameterJsonNode,ParameterKey.Description.toString());
  if (description != null && description.length() > 4000) {
    throw new ValidationErrorException("Template format error: " + ParameterKey.Description + " must be no "+ "longer than 4000 characters.");
  }
  templateParameter.setDescription(description);
  templateParameter.setMaxLength(JsonHelper.getDouble(parameterJsonNode,ParameterKey.MaxLength.toString()));
  templateParameter.setMinLength(JsonHelper.getDouble(parameterJsonNode,ParameterKey.MinLength.toString()));
  templateParameter.setMaxValue(JsonHelper.getDouble(parameterJsonNode,ParameterKey.MaxValue.toString()));
  templateParameter.setMinValue(JsonHelper.getDouble(parameterJsonNode,ParameterKey.MinValue.toString()));
  templateParameter.setDefaultValue(JsonHelper.getString(parameterJsonNode,ParameterKey.Default.toString()));
  templateParameter.setNoEcho("true".equalsIgnoreCase(JsonHelper.getString(parameterJsonNode,ParameterKey.NoEcho.toString())));
  templateParameter.setParameterKey(parameterName);
  templateParameter.setType(parameterType);
  templateParameter.setParameterValue(paramMap.get(parameterName) != null ? paramMap.get(parameterName) : templateParameter.getDefaultValue());
  if (templateParameter.getParameterValue() == null) {
    noValueParameters.add(parameterName);
    return;
  }
  if (templateParameter.getAllowedValues() != null && !Arrays.asList(templateParameter.getAllowedValues()).contains(templateParameter.getParameterValue())) {
    throw new ValidationErrorException(templateParameter.getConstraintDescription() != null ? templateParameter.getConstraintDescription() : "Template error: Parameter '" + parameterName + "' must be one of "+ ParameterKey.AllowedValues);
  }
  JsonNode referenceValue=null;
switch (parameterType) {
case Number:
    parseNumberParameter(parameterName,templateParameter);
  referenceValue=new TextNode(templateParameter.getParameterValue());
break;
case String:
parseStringParameter(parameterName,templateParameter);
referenceValue=new TextNode(templateParameter.getParameterValue());
break;
case CommaDelimitedList:
parseCommaDelimitedListParameter(parameterName,templateParameter);
referenceValue=objectMapper.createArrayNode();
StringTokenizer tokenizer=new StringTokenizer(templateParameter.getParameterValue(),",");
while (tokenizer.hasMoreTokens()) {
((ArrayNode)referenceValue).add(tokenizer.nextToken());
}
break;
default :
throw new ValidationErrorException("Template format error: Unrecognized parameter type: " + parameterType);
}
Parameter parameter=new Parameter();
parameter.setParameterKey(templateParameter.getParameterKey());
parameter.setParameterValue(templateParameter.isNoEcho() ? NO_ECHO_PARAMETER_VALUE : templateParameter.getParameterValue());
template.addParameter(parameter);
Template.Reference reference=new Template.Reference();
reference.setReady(true);
reference.setReferenceName(templateParameter.getParameterKey());
reference.setReferenceValueJson(JsonHelper.getStringFromJsonNode(referenceValue));
reference.setReferenceType(Template.ReferenceType.Parameter);
template.getReferenceMap().put(templateParameter.getParameterKey(),reference);
}
