{
  if (this.createdAutoScalingGroup != null) {
    final Set<String> instances=Sets.newHashSet();
    try {
      final DescribeAutoScalingGroupsResponseType resp=EucalyptusActivityTasks.getInstance().describeAutoScalingGroups(Lists.newArrayList(this.createdAutoScalingGroup));
      for (      final AutoScalingGroupType asg : resp.getDescribeAutoScalingGroupsResult().getAutoScalingGroups().getMember()) {
        if (asg.getInstances() != null) {
          for (          final Instance instance : asg.getInstances().getMember()) {
            instances.add(instance.getInstanceId());
          }
        }
      }
    }
 catch (    final Exception ex) {
      ;
    }
    try {
      EucalyptusActivityTasks.getInstance().updateAutoScalingGroup(this.createdAutoScalingGroup,null,0);
    }
 catch (    final Exception ex) {
      LOG.warn(String.format("Unable to set desired capacity for %s",this.createdAutoScalingGroup),ex);
    }
    boolean error=false;
    final int NUM_DELETE_ASG_RETRY=4;
    for (int i=0; i < NUM_DELETE_ASG_RETRY; i++) {
      try {
        EucalyptusActivityTasks.getInstance().deleteAutoScalingGroup(this.createdAutoScalingGroup,true);
        boolean asgFound=false;
        try {
          final DescribeAutoScalingGroupsResponseType resp=EucalyptusActivityTasks.getInstance().describeAutoScalingGroups(Lists.newArrayList(this.createdAutoScalingGroup));
          for (          final AutoScalingGroupType asg : resp.getDescribeAutoScalingGroupsResult().getAutoScalingGroups().getMember()) {
            if (this.createdAutoScalingGroup.equals(asg.getAutoScalingGroupName()))             asgFound=true;
          }
        }
 catch (        final Exception ex) {
          asgFound=false;
        }
        if (asgFound)         throw new Exception("Autoscaling group was not deleted");
        error=false;
      }
 catch (      final Exception ex) {
        error=true;
        LOG.warn(String.format("Failed to delete autoscale group (%d'th attempt): %s",(i + 1),this.createdAutoScalingGroup));
        try {
          long sleepMs=(i + 1) * 500;
          Thread.sleep(sleepMs);
        }
 catch (        final Exception ex2) {
          ;
        }
      }
      if (!error)       break;
    }
    if (error)     throw new ImagingServiceActionException("Failed to delete autoscaling group");
    do {
      final List<String> terminated=Lists.newArrayList();
      for (      final String instanceId : instances) {
        try {
          final List<RunningInstancesItemType> runningInstances=EucalyptusActivityTasks.getInstance().describeSystemInstances(Lists.newArrayList(instanceId));
          final String state=runningInstances.get(0).getStateName();
          if ("terminated".equals(state))           terminated.add(instanceId);
        }
 catch (        final Exception ex) {
          terminated.add(instanceId);
        }
      }
      for (      final String terminatedId : terminated) {
        instances.remove(terminatedId);
      }
      try {
        Thread.sleep(1000);
      }
 catch (      final Exception ex) {
        ;
      }
    }
 while (instances.size() > 0);
  }
}
