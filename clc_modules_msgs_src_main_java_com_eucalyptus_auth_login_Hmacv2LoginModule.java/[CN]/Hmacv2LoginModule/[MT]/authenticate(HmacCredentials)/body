{
  String sig=credentials.getSignature();
  checkForReplay(sig);
  AccessKey accessKey=lookupAccessKey(credentials);
  User user=accessKey.getUser();
  String secretKey=accessKey.getSecretKey();
  String canonicalString=this.makeSubjectString(credentials.getVerb(),credentials.getHeaderHost(),credentials.getServicePath(),credentials.getParameters());
  String canonicalStringWithPort=this.makeSubjectString(credentials.getVerb(),credentials.getHeaderHost() + ":" + credentials.getHeaderPort(),credentials.getServicePath(),credentials.getParameters());
  String canonicalStringWithAwsCliPath=this.makeSubjectString(credentials.getVerb(),credentials.getHeaderHost() + ":" + credentials.getHeaderPort(),convertForAwsCli(credentials.getServicePath()),credentials.getParameters());
  String computedSig=this.getSignature(secretKey,canonicalString,credentials.getSignatureMethod());
  String computedSigWithPort=this.getSignature(secretKey,canonicalStringWithPort,credentials.getSignatureMethod());
  String computedSigWithAwsCliPath=this.getSignature(secretKey,canonicalStringWithAwsCliPath,credentials.getSignatureMethod());
  if (!computedSig.equals(sig) && !computedSigWithPort.equals(sig) && !computedSigWithAwsCliPath.equals(sig)) {
    sig=sanitize(urldecode(sig));
    computedSig=this.getSignature(secretKey,canonicalString.replaceAll("\\+","%2B"),credentials.getSignatureMethod()).replaceAll("\\+"," ");
    computedSigWithPort=this.getSignature(secretKey,canonicalStringWithPort.replaceAll("\\+","%2B"),credentials.getSignatureMethod()).replaceAll("\\+"," ");
    computedSigWithAwsCliPath=this.getSignature(secretKey,canonicalStringWithAwsCliPath.replaceAll("\\+","%2B"),credentials.getSignatureMethod()).replaceAll("\\+"," ");
    if (!computedSig.equals(sig) && !computedSigWithPort.equals(sig) && !computedSigWithAwsCliPath.equals(sig)) {
      computedSig=this.getSignature(secretKey,canonicalString.replaceAll("\\+","%20"),credentials.getSignatureMethod()).replaceAll("\\+"," ");
      computedSigWithPort=this.getSignature(secretKey,canonicalStringWithPort.replaceAll("\\+","%20"),credentials.getSignatureMethod()).replaceAll("\\+"," ");
      computedSigWithAwsCliPath=this.getSignature(secretKey,canonicalStringWithAwsCliPath.replaceAll("\\+","%20"),credentials.getSignatureMethod()).replaceAll("\\+"," ");
      if (!computedSig.equals(sig) && !computedSigWithPort.equals(sig) && !computedSigWithAwsCliPath.equals(sig)) {
        computedSig=this.getSignature(secretKey,canonicalString.replaceAll("\\*","%2A"),credentials.getSignatureMethod()).replaceAll("\\+"," ");
        computedSigWithPort=this.getSignature(secretKey,canonicalStringWithPort.replaceAll("\\*","%2A"),credentials.getSignatureMethod()).replaceAll("\\+"," ");
        computedSigWithAwsCliPath=this.getSignature(secretKey,canonicalStringWithAwsCliPath.replaceAll("\\*","%2A"),credentials.getSignatureMethod()).replaceAll("\\+"," ");
        if (!computedSig.equals(sig) && !computedSigWithPort.equals(sig) && !computedSigWithAwsCliPath.equals(sig)) {
          return false;
        }
      }
    }
  }
  super.setCredential(credentials.getQueryIdCredential(AccessKeys.getKeyType(accessKey)));
  super.setPrincipal(user);
  return true;
}
