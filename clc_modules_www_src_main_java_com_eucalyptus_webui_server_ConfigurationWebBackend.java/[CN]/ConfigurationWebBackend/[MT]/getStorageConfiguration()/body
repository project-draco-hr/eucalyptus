{
  List<SearchResultRow> results=Lists.newArrayList();
  for (  final ServiceConfiguration cc : ServiceConfigurations.list(ClusterController.class)) {
    try {
      if (Internets.testLocal(cc.getHostName()) && !Components.lookup("storage").isEnabledLocally()) {
        results.add(createStorageConfiguration(STORAGE_TYPE,SC_DEFAULT_NAME,SC_DEFAULT_HOST,SC_DEFAULT_PORT,new ArrayList<ComponentProperty>()));
        continue;
      }
    }
 catch (    Exception e) {
      LOG.debug("Got an error while trying to retrieving storage controller configuration list",e);
    }
    StorageControllerConfiguration c;
    try {
      c=ServiceConfigurations.lookup(new StorageControllerConfiguration(){
{
          this.setName(cc.getName());
        }
      }
);
      List<ComponentProperty> properties=Lists.newArrayList();
      try {
        GetStorageConfigurationResponseType getStorageConfigResponse=sendForStorageInfo(cc,c);
        if (c.getName().equals(getStorageConfigResponse.getName())) {
          properties.addAll(getStorageConfigResponse.getStorageParams());
        }
 else {
          LOG.debug("Unexpected storage controller name: " + getStorageConfigResponse.getName(),new Exception());
          LOG.debug("Expected configuration for SC related to CC: " + LogUtil.dumpObject(c));
          LOG.debug("Received configuration for SC related to CC: " + LogUtil.dumpObject(getStorageConfigResponse));
        }
      }
 catch (      Throwable e) {
        LOG.debug("Got an error while trying to communicate with remote storage controller",e);
      }
      results.add(createStorageConfiguration(STORAGE_TYPE,c.getName(),c.getHostName(),c.getPort(),properties));
    }
 catch (    Exception e1) {
      results.add(createStorageConfiguration(STORAGE_TYPE,SC_DEFAULT_NAME,SC_DEFAULT_HOST,SC_DEFAULT_PORT,new ArrayList<ComponentProperty>()));
    }
  }
  return results;
}
