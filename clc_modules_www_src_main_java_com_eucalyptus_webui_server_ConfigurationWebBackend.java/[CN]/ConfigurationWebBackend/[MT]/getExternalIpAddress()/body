{
  String ipAddr=null;
  HttpClient httpClient=new HttpClient();
  String extraVersion=System.getProperty("euca.extra_version");
  HttpParams defaultParams=httpClient.getParams().getDefaults();
  httpClient.getParams().setParameter(HttpMethodParams.USER_AGENT,defaultParams.getParameter(HttpMethodParams.USER_AGENT) + " " + extraVersion);
  if (HttpServerBootstrapper.httpProxyHost != null && (HttpServerBootstrapper.httpProxyHost.length() > 0)) {
    String proxyHost=HttpServerBootstrapper.httpProxyHost;
    if (HttpServerBootstrapper.httpProxyPort != null && (HttpServerBootstrapper.httpProxyPort.length() > 0)) {
      int proxyPort=Integer.parseInt(HttpServerBootstrapper.httpProxyPort);
      httpClient.getHostConfiguration().setProxy(proxyHost,proxyPort);
    }
 else {
      httpClient.getHostConfiguration().setProxyHost(new ProxyHost(proxyHost));
    }
  }
  String whoamiUrl=WebProperties.getProperty(WebProperties.RIGHTSCALE_WHOAMI_URL,WebProperties.RIGHTSCALE_WHOAMI_URL_DEFAULT);
  GetMethod method=new GetMethod(whoamiUrl);
  Integer timeoutMs=new Integer(3 * 1000);
  method.getParams().setSoTimeout(timeoutMs);
  try {
    httpClient.executeMethod(method);
    String str="";
    InputStream in=method.getResponseBodyAsStream();
    byte[] readBytes=new byte[1024];
    int bytesRead=-1;
    while ((bytesRead=in.read(readBytes)) > 0) {
      str+=new String(readBytes,0,bytesRead);
    }
    Matcher matcher=Pattern.compile(".*your ip is (.*)").matcher(str);
    if (matcher.find()) {
      ipAddr=matcher.group(1);
    }
  }
 catch (  MalformedURLException e) {
    LOG.warn("Malformed URL exception: " + e.getMessage());
    LOG.debug(e,e);
  }
catch (  IOException e) {
    LOG.warn("I/O exception: " + e.getMessage());
    LOG.debug(e,e);
  }
 finally {
    method.releaseConnection();
  }
  return ipAddr;
}
