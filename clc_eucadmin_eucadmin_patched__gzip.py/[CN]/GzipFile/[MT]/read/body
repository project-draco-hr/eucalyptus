def read(self, size=(-1)):
    'Decompress up to bytes bytes from input.\n\n        Raise IOError.'
    if (self.mode != READ):
        import errno
        raise IOError(errno.EBADF, 'read() on write-only GzipFile object')
    if self._new_member:
        self._read_gzip_header(self.fileobj)
        self._new_member = False
    while ((size < 0) or (self.bufferlen < size)):
        if (size < 0):
            readsize = (65536 - self.bufferlen)
        else:
            readsize = (size - self.bufferlen)
        if (readsize > 65536):
            readsize = 32768
        elif (readsize > 32768):
            readsize = 16384
        elif (readsize > 16384):
            readsize = 8192
        elif (readsize > 8192):
            readsize = 4096
        elif (readsize > 4096):
            readsize = 2048
        else:
            readsize = 1024
        eof = self._read(readsize)
        if eof:
            break
    if (size < 0):
        size = self.bufferlen
    retdata = ''
    while ((size > 0) and self.buffer):
        decompdata = self.buffer[0]
        decomplen = len(decompdata)
        if ((size + self.pos) <= decomplen):
            tmpdata = decompdata[self.pos:(size + self.pos)]
            retdata += tmpdata
            self.bufferlen -= size
            self.pos += size
            break
        decomplen -= self.pos
        size -= decomplen
        self.bufferlen -= decomplen
        if (self.pos != 0):
            retdata += decompdata[self.pos:]
        else:
            retdata += decompdata
        self.pos = 0
        self.buffer.pop(0)
    self.offset += len(retdata)
    return retdata
