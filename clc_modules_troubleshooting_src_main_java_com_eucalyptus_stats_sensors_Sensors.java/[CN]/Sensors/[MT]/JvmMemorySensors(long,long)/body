{
  List<SensorEntry> memorySensors=Lists.newArrayList();
  LOG.info("Building JVM Memory Pool sensors with ttl " + ttl + "sec and polling interval "+ pollingInterval+ "sec");
  List<String> tags=Lists.newArrayList();
  tags.addAll(DEFAULT_MEM_POOL_TAGS);
  tags.add(pollingIntervalTag(pollingInterval));
  try {
    memorySensors.add(new SensorEntry(BaseStatsSensor.buildSensor(MEMORY_POOL_SENSOR_NAME,"JVM Memory usage for all pools in use",tags,ttl,JvmMemorySensor.POOL),pollingInterval));
  }
 catch (  Exception e) {
    LOG.error("Error loading memory pool sensor.");
    throw Exceptions.toUndeclared(e);
  }
  LOG.info("Building JVM Heap/Non-Heap Memory sensors with ttl " + ttl + "sec and polling interval "+ pollingInterval+ "sec");
  tags=Lists.newArrayList();
  tags.addAll(DEFAULT_MEM_HEAP_TAGS);
  tags.add(pollingIntervalTag(pollingInterval));
  try {
    memorySensors.add(new SensorEntry(BaseStatsSensor.buildSensor(MEMORY_GENERAL_SENSOR_NAME,"JVM Memory usage for heap/non-heap in use",tags,ttl,JvmMemorySensor.HEAP),pollingInterval));
  }
 catch (  Exception e) {
    LOG.error("Error loading memory pool sensor.");
    throw Exceptions.toUndeclared(e);
  }
  LOG.info("Building JVM GC sensors with ttl " + ttl + "sec and polling interval "+ pollingInterval+ "sec");
  tags=Lists.newArrayList();
  tags.addAll(DEFAULT_GC_TAGS);
  tags.add(pollingIntervalTag(pollingInterval));
  try {
    memorySensors.add(new SensorEntry(BaseStatsSensor.buildSensor(MEMORY_GC_SENSOR_NAME,"JVM GC stats for all GCs in use",tags,ttl,JvmMemorySensor.GC),pollingInterval));
  }
 catch (  Exception e) {
    LOG.error("Error loading GC sensor.");
    throw Exceptions.toUndeclared(e);
  }
  return memorySensors;
}
