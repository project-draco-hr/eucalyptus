{
  if (snapshotPointId != null) {
    throw new EucalyptusCloudException("Synchronous snapshot points not supported in DAS storage manager");
  }
  updateVolumeGroup();
  VolumeEntityWrapperManager volumeManager=new VolumeEntityWrapperManager();
  LVMVolumeInfo foundLVMVolumeInfo=volumeManager.getVolumeInfo(volumeId);
  ArrayList<String> returnValues=new ArrayList<String>();
  if (foundLVMVolumeInfo != null) {
    LVMVolumeInfo snapshotInfo=volumeManager.getVolumeInfo();
    snapshotInfo.setVolumeId(snapshotId);
    File snapshotDir=new File(DirectStorageInfo.getStorageInfo().getVolumesDir());
    snapshotDir.mkdirs();
    String lvName="lv-snap-" + Hashes.getRandom(4);
    String absoluteLVName=lvmRootDirectory + PATH_SEPARATOR + volumeGroup+ PATH_SEPARATOR+ foundLVMVolumeInfo.getLvName();
    int size=foundLVMVolumeInfo.getSize();
    volumeManager.finish();
    volumeManager=null;
    try {
      long absoluteSize;
      CommandOutput result=SystemUtil.runWithRawOutput(new String[]{EUCA_ROOT_WRAPPER,"blockdev","--getsize64",absoluteLVName});
      if (null != result && result.returnValue == 0 && StringUtils.isNotBlank(StringUtils.trim(result.output))) {
        try {
          absoluteSize=(Long.parseLong(StringUtils.trim(result.output)) / StorageProperties.MB);
        }
 catch (        NumberFormatException e) {
          LOG.debug("Failed to parse size of volume " + volumeId,e);
          absoluteSize=size * StorageProperties.KB;
        }
      }
 else {
        absoluteSize=size * StorageProperties.KB;
      }
      String returnValue=createSnapshotLogicalVolume(absoluteLVName,lvName,absoluteSize);
      if (returnValue.length() == 0) {
        throw new EucalyptusCloudException("Unable to create snapshot logical volume " + lvName + " for volume "+ lvName);
      }
      String snapRawFileName=DirectStorageInfo.getStorageInfo().getVolumesDir() + "/" + snapshotId;
      String absoluteSnapLVName=lvmRootDirectory + PATH_SEPARATOR + volumeGroup+ PATH_SEPARATOR+ lvName;
      duplicateLogicalVolume(absoluteSnapLVName,snapRawFileName);
      returnValue=removeLogicalVolume(absoluteSnapLVName);
      if (returnValue.length() == 0) {
        throw new EucalyptusCloudException("Unable to remove logical volume " + absoluteSnapLVName);
      }
      snapshotInfo.setLoFileName(snapRawFileName);
      snapshotInfo.setSize(size);
      volumeManager=new VolumeEntityWrapperManager();
      volumeManager.add(snapshotInfo);
      returnValues.add(snapRawFileName);
      returnValues.add(String.valueOf(size * WalrusProperties.G));
    }
 catch (    Exception ex) {
      if (volumeManager != null)       volumeManager.abort();
      String error="Unable to run command: " + ex.getMessage();
      LOG.error(error);
      throw new EucalyptusCloudException(error);
    }
  }
  volumeManager.finish();
  return returnValues;
}
