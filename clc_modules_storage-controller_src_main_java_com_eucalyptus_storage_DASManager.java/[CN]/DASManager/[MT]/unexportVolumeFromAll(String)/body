{
  Function<LVMVolumeInfo,Boolean> teardownExport=new Function<LVMVolumeInfo,Boolean>(){
    @Override public Boolean apply(    LVMVolumeInfo volumeInfo){
      LVMVolumeInfo volEntity=Entities.merge(volumeInfo);
      VolumeOpMonitor monitor=getMonitor(volEntity.getVolumeId());
synchronized (monitor) {
        try {
          LOG.info("Unexporting volume " + volEntity.getVolumeId());
          try {
            exportManager.cleanup(volEntity);
            volEntity.setStatus("available");
            LOG.info("Done cleaning up: " + volEntity.getVolumeId());
            return Boolean.TRUE;
          }
 catch (          EucalyptusCloudException ee) {
            LOG.error(ee,ee);
          }
        }
  finally {
          monitor.notifyAll();
        }
      }
      return Boolean.FALSE;
    }
  }
;
  VolumeEntityWrapperManager volumeManager=new VolumeEntityWrapperManager();
  LVMVolumeInfo foundLVMVolumeInfo=volumeManager.getVolumeInfo(volumeId);
  if (foundLVMVolumeInfo != null) {
    LOG.info("Unexporting volume " + volumeId + " from all clients");
    try {
      Entities.asTransaction(LVMVolumeInfo.class,teardownExport).apply(foundLVMVolumeInfo);
    }
 catch (    Exception e) {
      LOG.error("Failed to unexport volume " + volumeId);
      throw new EucalyptusCloudException("Failed to unexport volume " + volumeId);
    }
 finally {
      volumeManager.finish();
    }
  }
 else {
    volumeManager.abort();
    throw new EucalyptusCloudException("Unable to find volume: " + volumeId);
  }
}
