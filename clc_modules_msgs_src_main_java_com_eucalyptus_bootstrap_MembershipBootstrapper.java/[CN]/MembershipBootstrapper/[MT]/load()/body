{
  try {
    this.membershipGroupName=Eucalyptus.class.getSimpleName() + "-" + Hmacs.generateSystemToken(Eucalyptus.class.getSimpleName().getBytes());
    if (Components.lookup(Eucalyptus.class).isLocal()) {
      this.membershipChannel.setReceiver(new ReceiverAdapter(){
        public void viewAccepted(        final View newView){
          LOG.info("view: " + newView);
          Threads.lookup(Empyrean.class,MembershipBootstrapper.class).submit(new Runnable(){
            @Override public void run(){
              for (              final Address addr : newView.getMembers()) {
                if (!MembershipBootstrapper.this.membershipChannel.getAddress().equals(addr)) {
                  LOG.info("Sending to address=" + addr + " of type="+ addr.getClass());
                  try {
                    MembershipBootstrapper.this.membershipChannel.send(new Message(addr,null,Join.join(":",NetworkUtil.getAllAddresses())));
                  }
 catch (                  ChannelNotConnectedException ex) {
                    LOG.error(ex,ex);
                  }
catch (                  ChannelClosedException ex) {
                    LOG.error(ex,ex);
                  }
catch (                  SocketException ex) {
                    LOG.error(ex,ex);
                  }
                }
              }
            }
          }
);
        }
      }
);
      this.membershipChannel.connect(this.membershipGroupName);
      LOG.info("Started membership channel " + this.membershipGroupName);
    }
 else {
      final boolean[] done={false};
      final ReentrantLock lock=new ReentrantLock();
      final Condition isReady=lock.newCondition();
      this.membershipChannel.setReceiver(new ReceiverAdapter(){
        public void viewAccepted(        final View newView){
          LOG.info("view: " + newView);
        }
        public void receive(        Message msg){
          LOG.info(msg.getObject() + " [" + msg.getSrc()+ "]");
          lock.lock();
          try {
            String[] dbAddrs=((String)msg.getObject()).split(":");
            for (            String maybeDbAddr : dbAddrs) {
              try {
                if (NetworkUtil.testReachability(maybeDbAddr)) {
                  String host=maybeDbAddr;
                  for (                  Component c : Components.list()) {
                    if (c.getComponentId().isCloudLocal()) {
                      URI uri=c.getUri(host,c.getComponentId().getPort());
                      ServiceBuilder builder=c.getBuilder();
                      ServiceConfiguration config=builder.toConfiguration(uri);
                      c.loadService(config);
                    }
                  }
                  for (                  Bootstrap.Stage stage : Bootstrap.Stage.values()) {
                    stage.updateBootstrapDependencies();
                  }
                  break;
                }
              }
 catch (              ServiceRegistrationException ex) {
                LOG.error(ex,ex);
              }
catch (              Exception ex) {
                LOG.error(ex,ex);
              }
            }
            done[0]=true;
            isReady.signalAll();
          }
  finally {
            lock.unlock();
          }
        }
      }
);
      this.membershipChannel.connect(this.membershipGroupName);
      LOG.info("Started membership channel " + this.membershipGroupName);
      lock.lock();
      try {
        while (!done[0]) {
          LOG.warn("Blocking the bootstrap thread for testing.");
          isReady.await(100,TimeUnit.MILLISECONDS);
        }
      }
  finally {
        lock.unlock();
      }
    }
    return true;
  }
 catch (  Exception ex) {
    LOG.fatal(ex,ex);
    BootstrapException.throwFatal("Failed to connect membership channel because of " + ex.getMessage(),ex);
    return false;
  }
}
