{
  Calendar twoDaysAgo=Calendar.getInstance();
  twoDaysAgo.add(Calendar.HOUR,-48);
  VolumeInfo good=new VolumeInfo();
  good.setStatus(StorageProperties.Status.available.toString());
  good.setSize(new Integer(1));
  good.setUserName("unittestuser0");
  good.setVolumeId("vol-0000");
  good.setSnapshotId("snap-0000");
  good.setCreateTime(new Date());
  good.setZone("eucalyptus");
  VolumeInfo failOne=new VolumeInfo();
  failOne.setStatus(StorageProperties.Status.failed.toString());
  failOne.setSize(new Integer(1));
  failOne.setUserName("unittestuser0");
  failOne.setVolumeId("vol-0001");
  failOne.setSnapshotId("snap-0001");
  failOne.setCreateTime(new Date());
  failOne.setZone("eucalyptus");
  VolumeInfo failTwo=new VolumeInfo();
  failTwo.setStatus(StorageProperties.Status.failed.toString());
  failTwo.setSize(new Integer(1));
  failTwo.setUserName("unittestuser0");
  failTwo.setVolumeId("vol-0002");
  failTwo.setSnapshotId("snap-0002");
  failTwo.setCreateTime(new Date());
  failTwo.setZone("eucalyptus");
  failTwo.setDeletionTime(twoDaysAgo.getTime());
  try (TransactionResource tran=Entities.transactionFor(VolumeInfo.class)){
    good=Entities.persist(good);
    failOne=Entities.persist(failOne);
    failTwo=Entities.persist(failTwo);
    tran.commit();
  }
   final LogicalStorageManager storageManager=context.mock(LogicalStorageManager.class);
  context.checking(new Expectations(){
{
      oneOf(storageManager).cleanVolume(with(any(String.class)));
    }
  }
);
  FailedVolumeCleaner fvc=new FailedVolumeCleaner(storageManager);
  fvc.run();
  List<VolumeInfo> remaining;
  try (TransactionResource tran=Entities.transactionFor(VolumeInfo.class)){
    remaining=Entities.query(new VolumeInfo());
    tran.commit();
  }
   assertTrue("expected to have a result set querying the eucalyptus_storage persistence context",remaining != null);
  assertTrue("expected 3 VolumeInfos to still exist, but found " + remaining.size(),remaining.size() == 3);
  try (TransactionResource tran=Entities.transactionFor(VolumeInfo.class)){
    VolumeInfo example=new VolumeInfo();
    example.setStatus(StorageProperties.Status.failed.toString());
    remaining=Entities.query(example);
    tran.commit();
  }
   assertTrue("expected to have a result set querying the eucalyptus_storage persistence context for deleted volumeinfos",remaining != null);
  assertTrue("expected two VolumeInfos with failed status to exist but found " + remaining.size(),remaining.size() == 2);
  ExpiredVolumeCleaner evc=new ExpiredVolumeCleaner();
  evc.run();
  try (TransactionResource tran=Entities.transactionFor(VolumeInfo.class)){
    remaining=Entities.query(new VolumeInfo());
    tran.commit();
  }
   assertTrue("expected to have a result set querying the eucalyptus_storage persistence context",remaining != null);
  assertTrue("expected 2 VolumeInfos to still exist, but found " + remaining.size(),remaining.size() == 2);
  try (TransactionResource tran=Entities.transactionFor(VolumeInfo.class)){
    VolumeInfo example=new VolumeInfo();
    example.setStatus(StorageProperties.Status.failed.toString());
    remaining=Entities.query(example);
    tran.commit();
  }
   assertTrue("expected to have a result set querying the eucalyptus_storage persistence context",remaining != null);
  assertTrue("expected one VolumeInfo in failed state to exist, but found " + remaining.size(),remaining.size() == 1);
  assertTrue("expected a valid deletionTime but got null",remaining.get(0).getDeletionTime() != null);
  assertTrue("expected snapshot id to be snap-0001 but got " + remaining.get(0).getSnapshotId(),remaining.get(0).getSnapshotId().equals("snap-0001"));
}
