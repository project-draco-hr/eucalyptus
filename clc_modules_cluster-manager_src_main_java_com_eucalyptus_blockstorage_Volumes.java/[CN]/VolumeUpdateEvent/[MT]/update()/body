{
  final Multimap<String,String> partitionVolumeMap=HashMultimap.create();
  final EntityTransaction db=Entities.get(Volume.class);
  try {
    for (    final Volume v : Entities.query(Volume.named(null,null))) {
      partitionVolumeMap.put(v.getPartition(),v.getDisplayName());
    }
    db.rollback();
  }
 catch (  final Exception ex) {
    Logs.extreme().error(ex,ex);
    db.rollback();
  }
  Logs.extreme().debug("Volume state update: " + Joiner.on("\n").join(partitionVolumeMap.entries()));
  final EntityTransaction dbInstance=Entities.get(VmInstance.class);
  try {
    final List<VmInstance> vms=VmInstances.list(Predicates.alwaysTrue());
    dbInstance.rollback();
    for (    final String partition : partitionVolumeMap.keySet()) {
      try {
        final Map<String,StorageVolume> idStorageVolumeMap=updateVolumesInPartition(partition);
        for (        final String v : partitionVolumeMap.get(partition)) {
          try {
            final StorageVolume storageVolume=idStorageVolumeMap.get(v);
            volumeStateUpdate(v,storageVolume,vms);
          }
 catch (          final Exception ex) {
            LOG.error(ex);
            Logs.extreme().error(ex,ex);
          }
        }
      }
 catch (      final Exception ex) {
        LOG.error(ex);
        Logs.extreme().error(ex,ex);
      }
    }
  }
 catch (  Exception ex) {
    Logs.extreme().error(ex,ex);
    throw ex;
  }
 finally {
    if (dbInstance.isActive())     dbInstance.rollback();
  }
}
