{
  final String newId=Crypto.generateId(owner.getUniqueId(),ID_PREFIX);
  final Volume newVol=Transactions.save(Volume.create(sc,owner,snapId,newSize,newId),new Callback<Volume>(){
    @Override public void fire(    final Volume t){
      t.setState(State.GENERATING);
      try {
        final CreateStorageVolumeType req=new CreateStorageVolumeType(t.getDisplayName(),t.getSize(),snapId,null).regardingUserRequest(request);
        final CreateStorageVolumeResponseType ret=AsyncRequests.sendSync(sc,req);
        LOG.debug("Volume created: CreateStorageVolumeResponse: " + ret.getVolumeId() + " "+ ret.getStatus()+ " "+ ret.getSize()+ " "+ ret.getSnapshotId()+ " "+ ret.getCreateTime());
        fireCreateEvent(t);
      }
 catch (      final Exception ex) {
        LOG.error("Failed to create volume: " + t.toString(),ex);
        t.setState(State.FAIL);
        throw Exceptions.toUndeclared(ex);
      }
    }
  }
);
  return newVol;
}
