{
  if (currentSelected == null || currentSelected.size() != 1) {
    clientFactory.getShellView().getFooterView().showStatus(StatusType.ERROR,"Must select a single user to change password",FooterView.DEFAULT_STATUS_CLEAR_DELAY);
    return;
  }
  final String sessionUserId=this.clientFactory.getSessionData().getLoginUser().getUserId();
  final String selectedUserId=Iterables.get(currentSelected,0).getField(0);
  final ValueSaver oldPasswordSaver;
  final ValueChecker passwordInequalityChecker;
  if (sessionUserId.equals(selectedUserId)) {
    oldPasswordSaver=ValueCheckerFactory.createValueSaver();
    passwordInequalityChecker=ValueCheckerFactory.createInequalityChecker(ValueCheckerFactory.PASSWORD_NOT_CHANGED,oldPasswordSaver);
  }
 else {
    oldPasswordSaver=null;
    passwordInequalityChecker=null;
  }
  final ValueSaver newPasswordSaver=ValueCheckerFactory.createValueSaver();
  final ValueChecker passwordEqualityChecker=ValueCheckerFactory.createEqualityChecker(ValueCheckerFactory.PASSWORDS_NOT_MATCH,newPasswordSaver);
  final InputView dialog=this.clientFactory.getInputView();
  dialog.setPresenter(this);
  dialog.display(CHANGE_PASSWORD_CAPTION,CHANGE_PASSWORD_SUBJECT,new ArrayList<InputField>(Arrays.asList(new InputField(){
    @Override public String getTitle(){
      return OLD_PASSWORD_INPUT_TITLE;
    }
    @Override public ValueType getType(){
      return ValueType.PASSWORD;
    }
    @Override public ValueChecker getChecker(){
      return oldPasswordSaver;
    }
  }
,new InputField(){
    @Override public String getTitle(){
      return NEW_PASSWORD_INPUT_TITLE;
    }
    @Override public ValueType getType(){
      return ValueType.NEWPASSWORD;
    }
    @Override public ValueChecker getChecker(){
      return ValueCheckerFactory.checkerForAll(passwordInequalityChecker,ValueCheckerFactory.createPasswordChecker(),newPasswordSaver);
    }
  }
,new InputField(){
    @Override public String getTitle(){
      return NEW_PASSWORD2_INPUT_TITLE;
    }
    @Override public ValueType getType(){
      return ValueType.PASSWORD;
    }
    @Override public ValueChecker getChecker(){
      return passwordEqualityChecker;
    }
  }
)));
}
