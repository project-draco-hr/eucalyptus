{
  final SimpleTransitionListener<Component> loadTransition=new SimpleTransitionListener<Component>(){
    @Override public void leave(    Component parent,    Completion transitionCallback){
      ComponentState.this.details.clear();
      try {
        parent.getBootstrapper().load();
        transitionCallback.fire();
      }
 catch (      Throwable ex) {
        LOG.error(ex,ex);
        ComponentState.this.details.add(ex.getMessage());
        transitionCallback.fireException(ex);
      }
    }
  }
;
  final SimpleTransitionListener<Component> startTransition=new SimpleTransitionListener<Component>(){
    @Override public void leave(    Component parent,    Completion transitionCallback){
      ComponentState.this.details.clear();
      try {
        parent.getBootstrapper().start();
        parent.getBuilder().fireStart(parent.getLocalService().getServiceConfiguration());
        transitionCallback.fire();
      }
 catch (      Throwable ex) {
        LOG.error(ex,ex);
        ComponentState.this.details.add(ex.getMessage());
        transitionCallback.fireException(ex);
      }
    }
  }
;
  final SimpleTransitionListener<Component> enableTransition=new SimpleTransitionListener<Component>(){
    @Override public void leave(    Component parent,    Completion transitionCallback){
      ComponentState.this.details.clear();
      try {
        parent.getBootstrapper().enable();
        parent.getBuilder().fireEnable(parent.getLocalService().getServiceConfiguration());
        transitionCallback.fire();
      }
 catch (      Throwable ex) {
        LOG.error(ex,ex);
        ComponentState.this.details.add(ex.getMessage());
        transitionCallback.fireException(ex);
      }
    }
  }
;
  final SimpleTransitionListener<Component> disableTransition=new SimpleTransitionListener<Component>(){
    @Override public void leave(    Component parent,    Completion transitionCallback){
      ComponentState.this.details.clear();
      try {
        parent.getBootstrapper().disable();
        parent.getBuilder().fireDisable(parent.getLocalService().getServiceConfiguration());
        transitionCallback.fire();
      }
 catch (      Throwable ex) {
        LOG.error(ex,ex);
        ComponentState.this.details.add(ex.getMessage());
        transitionCallback.fireException(ex);
      }
    }
  }
;
  final SimpleTransitionListener<Component> stopTransition=new SimpleTransitionListener<Component>(){
    @Override public void leave(    Component parent,    Completion transitionCallback){
      ComponentState.this.details.clear();
      try {
        parent.getBootstrapper().stop();
        parent.getBuilder().fireStop(parent.getLocalService().getServiceConfiguration());
        transitionCallback.fire();
      }
 catch (      Throwable ex) {
        LOG.error(ex,ex);
        ComponentState.this.details.add(ex.getMessage());
        transitionCallback.fireException(ex);
      }
    }
  }
;
  final SimpleTransitionListener<Component> checkTransition=new SimpleTransitionListener<Component>(){
    @Override public void leave(    Component parent,    Completion transitionCallback){
      ComponentState.this.details.clear();
      try {
        parent.getBootstrapper().check();
        parent.getBuilder().fireCheck(parent.getLocalService().getServiceConfiguration());
        transitionCallback.fire();
      }
 catch (      Throwable ex) {
        LOG.error(ex,ex);
        ComponentState.this.details.add(ex.getMessage());
        transitionCallback.fireException(ex);
      }
    }
  }
;
  final SimpleTransitionListener<Component> destroyTransition=new SimpleTransitionListener<Component>(){
    @Override public void leave(    Component parent,    Completion transitionCallback){
      ComponentState.this.details.clear();
      try {
        parent.getBootstrapper().destroy();
        transitionCallback.fire();
      }
 catch (      Throwable ex) {
        LOG.error(ex,ex);
        ComponentState.this.details.add(ex.getMessage());
        transitionCallback.fireException(ex);
      }
    }
  }
;
  return new StateMachineBuilder<Component,State,Transition>(this.parent,State.PRIMORDIAL){
{
      on(Transition.INITIALIZING).from(State.PRIMORDIAL).to(State.INITIALIZED).error(State.BROKEN).noop();
      on(Transition.LOADING).from(State.INITIALIZED).to(State.LOADED).error(State.BROKEN).run(loadTransition);
      on(Transition.STARTING).from(State.LOADED).to(State.NOTREADY).error(State.BROKEN).run(startTransition);
      on(Transition.ENABLING).from(State.DISABLED).to(State.ENABLED).error(State.NOTREADY).run(enableTransition);
      on(Transition.DISABLING).from(State.ENABLED).to(State.DISABLED).error(State.NOTREADY).run(disableTransition);
      on(Transition.STOPPING).from(State.DISABLED).to(State.STOPPED).error(State.NOTREADY).run(stopTransition);
      on(Transition.DESTROYING).from(State.STOPPED).to(State.LOADED).error(State.BROKEN).run(destroyTransition);
      on(Transition.READY_CHECK).from(State.NOTREADY).to(State.DISABLED).error(State.NOTREADY).run(checkTransition);
      on(Transition.DISABLED_CHECK).from(State.DISABLED).to(State.DISABLED).error(State.NOTREADY).run(checkTransition);
      on(Transition.ENABLED_CHECK).from(State.DISABLED).to(State.DISABLED).error(State.NOTREADY).run(checkTransition);
    }
  }
.newAtomicState();
}
