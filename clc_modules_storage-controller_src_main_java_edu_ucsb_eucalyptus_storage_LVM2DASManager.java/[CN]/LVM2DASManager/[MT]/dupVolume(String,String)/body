{
  updateVolumeGroup();
  VolumeEntityWrapperManager volumeManager=new VolumeEntityWrapperManager();
  LVMVolumeInfo foundVolumeInfo=volumeManager.getVolumeInfo(volumeId);
  if (foundVolumeInfo != null) {
    String lvName="lv-" + Hashes.getRandom(4);
    LVMVolumeInfo lvmVolumeInfo=volumeManager.getVolumeInfo();
    File volumeFile=new File(StorageProperties.storageRootDirectory + PATH_SEPARATOR + foundVolumeInfo.getVolumeId());
    String rawFileName=StorageProperties.storageRootDirectory + "/" + dupVolumeId;
    int size=(int)(volumeFile.length() / StorageProperties.GB);
    try {
      createLogicalVolume(lvName,size);
      String absoluteLVName=lvmRootDirectory + PATH_SEPARATOR + volumeGroup+ PATH_SEPARATOR+ lvName;
      String absoluteVolumeLVName=lvmRootDirectory + PATH_SEPARATOR + volumeGroup+ PATH_SEPARATOR+ foundVolumeInfo.getLvName();
      duplicateLogicalVolume(absoluteVolumeLVName,absoluteLVName);
      lvmVolumeInfo.setVolumeId(dupVolumeId);
      lvmVolumeInfo.setLvName(lvName);
      lvmVolumeInfo.setStatus(StorageProperties.Status.available.toString());
      lvmVolumeInfo.setSize(size);
      volumeManager.add(lvmVolumeInfo);
      volumeManager.finish();
    }
 catch (    ExecutionException ex) {
      volumeManager.abort();
      String error="Unable to run command: " + ex.getMessage();
      LOG.error(error);
      throw new EucalyptusCloudException(error);
    }
  }
 else {
    volumeManager.abort();
    throw new EucalyptusCloudException("Could not dup volume " + volumeId);
  }
}
