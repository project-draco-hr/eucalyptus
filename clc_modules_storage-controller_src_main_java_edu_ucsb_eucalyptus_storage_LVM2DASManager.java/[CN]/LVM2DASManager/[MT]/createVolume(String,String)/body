{
  updateVolumeGroup();
  VolumeEntityWrapperManager volumeManager=new VolumeEntityWrapperManager();
  LVMVolumeInfo foundSnapshotInfo=volumeManager.getVolumeInfo(snapshotId);
  int size=-1;
  if (foundSnapshotInfo != null) {
    String status=foundSnapshotInfo.getStatus();
    if (status.equals(StorageProperties.Status.available.toString())) {
      String lvName="lv-" + Hashes.getRandom(4);
      LVMVolumeInfo lvmVolumeInfo=volumeManager.getVolumeInfo();
      try {
        File snapshotFile=new File(storageRootDirectory + PATH_SEPARATOR + foundSnapshotInfo.getVolumeId());
        assert(snapshotFile.exists());
        size=(int)(snapshotFile.length() / StorageProperties.GB);
        createLogicalVolume(lvName,size);
        String absoluteLVName=lvmRootDirectory + PATH_SEPARATOR + volumeGroup+ PATH_SEPARATOR+ lvName;
        duplicateLogicalVolume(foundSnapshotInfo.getLoFileName(),absoluteLVName);
        try {
          volumeManager.exportVolume(lvmVolumeInfo,volumeGroup,lvName);
        }
 catch (        EucalyptusCloudException ex) {
          String returnValue=removeLogicalVolume(absoluteLVName);
          throw ex;
        }
        lvmVolumeInfo.setVolumeId(volumeId);
        lvmVolumeInfo.setLvName(lvName);
        lvmVolumeInfo.setStatus(StorageProperties.Status.available.toString());
        lvmVolumeInfo.setSize(size);
        volumeManager.add(lvmVolumeInfo);
        volumeManager.finish();
      }
 catch (      ExecutionException ex) {
        volumeManager.abort();
        String error="Unable to run command: " + ex.getMessage();
        LOG.error(error);
        throw new EucalyptusCloudException(error);
      }
    }
  }
 else {
    volumeManager.abort();
    throw new EucalyptusCloudException("Unable to find snapshot: " + snapshotId);
  }
  return size;
}
