{
  try {
    Axis2Connector connector=(Axis2Connector)RegistryContext.getRegistry().lookupConnector("axis2");
    URI uriObj=new URI(uri);
    MuleEndpointURI endpointUri=new MuleEndpointURI(uri,null,null,null,null,null,uriObj);
    Map props=Key.getDefaultProperties();
    props.put(Key.NAMESPACE.getKey(),namespace);
    props.put(Key.TIMEOUT.getKey(),Integer.toString(timeout));
    props.put(Key.MEP.getKey(),Mep.OUT_IN.name());
    props.put(Key.MIN_IDLE.getKey(),Integer.toString(minIdle));
    props.put(Key.MAX_IDLE.getKey(),Integer.toString(maxIdle));
    props.put(Key.CACHE_HTTP_CLIENT.getKey(),Boolean.TRUE.toString());
    props.put(Key.WSSEC_POLICY.getKey(),BaseDirectory.CONF.toString() + File.separator + "cluster-policy.xml");
    DefaultOutboundEndpoint endpoint=new DefaultOutboundEndpoint(connector,endpointUri,null,null,null,props,null,null,false,null,false,false,0,null,null,null,null);
    return endpoint;
  }
 catch (  URISyntaxException e) {
    LOG.error(e,e);
    return null;
  }
}
