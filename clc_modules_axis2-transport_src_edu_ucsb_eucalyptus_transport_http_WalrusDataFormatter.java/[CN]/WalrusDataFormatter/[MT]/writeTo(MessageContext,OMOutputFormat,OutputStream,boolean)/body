{
  Integer status=(Integer)messageContext.getProperty(Axis2HttpWorker.HTTP_STATUS);
  if (status == null) {
    Boolean getType=(Boolean)messageContext.getProperty(WalrusProperties.STREAMING_HTTP_GET);
    assert(getType != null);
    if (getType.equals(Boolean.FALSE)) {
      try {
        outputStream.flush();
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
 else {
      String key=(String)messageContext.getProperty("GET_KEY");
      String randomKey=(String)messageContext.getProperty("GET_RANDOM_KEY");
      WalrusDataMessenger messenger=WalrusQueryDispatcher.getReadMessenger();
      LinkedBlockingQueue<WalrusDataMessage> getQueue=messenger.getQueue(key,randomKey);
      WalrusDataMessage dataMessage;
      try {
        while ((dataMessage=getQueue.take()) != null) {
          if (WalrusDataMessage.isStart(dataMessage)) {
          }
 else           if (WalrusDataMessage.isData(dataMessage)) {
            byte[] data=dataMessage.getPayload();
            for (            byte b : data) {
              try {
                outputStream.write(b);
              }
 catch (              IOException e) {
                e.printStackTrace();
                throw new AxisFault("An error occured while writing the request");
              }
            }
          }
 else           if (WalrusDataMessage.isEOF(dataMessage)) {
            try {
              outputStream.flush();
              messenger.removeQueue(key,randomKey);
              break;
            }
 catch (            IOException e) {
              e.printStackTrace();
              throw new AxisFault("An error occured while writing the request");
            }
          }
        }
      }
 catch (      InterruptedException ex) {
        ex.printStackTrace();
      }
    }
  }
}
