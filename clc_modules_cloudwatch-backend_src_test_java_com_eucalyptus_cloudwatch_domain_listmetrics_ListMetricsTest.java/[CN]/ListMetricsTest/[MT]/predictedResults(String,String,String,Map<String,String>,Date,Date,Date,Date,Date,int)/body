{
  boolean referencesAccountThis=false;
  boolean referencesAccountThat=false;
  if (end.equals(after) || start.equals(before)) {
    return 0;
  }
  if (middle.equals(after) && middle.equals(before)) {
    return 0;
  }
 else   if (middle.equals(after) && ((null == before) || end.equals(before))) {
    referencesAccountThat=true;
  }
 else   if (middle.equals(before) && ((null == after) || start.equals(after))) {
    referencesAccountThis=true;
  }
 else {
    ;
  }
  int twoChoiceDegreesOfFreedom=0;
  Collection<String> values=new HashSet<String>();
  if (metricName != null) {
    values.add(metricName);
  }
 else {
    twoChoiceDegreesOfFreedom++;
  }
  if (namespace != null) {
    values.add(namespace);
  }
 else {
    twoChoiceDegreesOfFreedom++;
  }
  if (accountId != null) {
    values.add(accountId);
  }
  int threeChoiceDegreesOfFreedom=n;
  if (dimensions != null) {
    values.addAll(dimensions.values());
    threeChoiceDegreesOfFreedom-=dimensions.size();
  }
  for (  String value : values) {
    if (value.endsWith("this")) {
      referencesAccountThis=true;
    }
    if (value.endsWith("that")) {
      referencesAccountThat=true;
    }
  }
  if (!referencesAccountThis && !referencesAccountThat && (accountId == null)) {
    twoChoiceDegreesOfFreedom++;
  }
  if (referencesAccountThis && referencesAccountThat) {
    return 0;
  }
 else {
    return intPow(2,twoChoiceDegreesOfFreedom) * intPow(3,threeChoiceDegreesOfFreedom);
  }
}
