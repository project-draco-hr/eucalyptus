{
  if (email == null || "".equals(email)) {
    throw new AuthException("Empty email address to search");
  }
  try (final TransactionResource tx=Entities.transactionFor(UserEntity.class)){
    final UserEntity match=(UserEntity)Entities.createCriteria(UserEntity.class).setCacheable(true).createAlias("info","i").add(Restrictions.eq("i." + CollectionPropertyNames.COLLECTION_ELEMENTS,email).ignoreCase()).setFetchMode("info",FetchMode.JOIN).setReadOnly(true).uniqueResult();
    if (match == null) {
      throw new AuthException(AuthException.NO_SUCH_USER);
    }
    boolean emailMatched=false;
    Map<String,String> info=match.getInfo();
    if (info != null) {
      for (      Map.Entry<String,String> entry : info.entrySet()) {
        if (entry.getKey() != null && EuareUser.EMAIL.equals(entry.getKey()) && entry.getValue() != null && email.equalsIgnoreCase(entry.getValue())) {
          emailMatched=true;
          break;
        }
      }
    }
    if (!emailMatched) {
      throw new AuthException(AuthException.NO_SUCH_USER);
    }
    return new DatabaseUserProxy(match);
  }
 catch (  AuthException e) {
    Debugging.logError(LOG,e,"Failed to find user by email address " + email);
    throw e;
  }
catch (  Exception e) {
    Debugging.logError(LOG,e,"Failed to find user by email address " + email);
    throw new AuthException(AuthException.NO_SUCH_USER,e);
  }
}
