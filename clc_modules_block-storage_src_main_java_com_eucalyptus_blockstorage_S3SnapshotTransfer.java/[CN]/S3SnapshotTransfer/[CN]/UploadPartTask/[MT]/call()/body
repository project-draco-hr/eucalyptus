{
  Boolean error=Boolean.FALSE;
  Boolean isLast=Boolean.FALSE;
  try {
    do {
      SnapshotPart part=null;
      try {
        part=partQueue.take();
      }
 catch (      InterruptedException ex) {
        error=Boolean.TRUE;
        LOG.error("Failed to upload snapshot " + snapshotId + " due to an retrieving parts from queue",ex);
        return null;
      }
      if (part != null) {
        if (part.getState().equals(SnapshotPartState.created) || part.getState().equals(SnapshotPartState.uploading) || part.getState().equals(SnapshotPartState.failed)) {
          isLast=part.getIsLast();
          try {
            PartETag partEtag=uploadPart(part);
            partETags.add(partEtag);
            progressCallback.updateUploadProgress(part.getInputFileBytesRead());
            try {
              part=part.updateStateUploaded(partEtag.getETag());
            }
 catch (            Exception e) {
              LOG.debug("Failed to update part status in DB. Moving on. " + part);
            }
            LOG.debug("Uploaded " + part);
          }
 catch (          Exception e) {
            error=Boolean.TRUE;
            try {
              part=part.updateStateFailed();
            }
 catch (            Throwable t) {
              LOG.debug("Failed to update part status in DB for " + part,t);
            }
            return null;
          }
        }
 else {
          LOG.warn("Not sure what to do with part in state " + part.getState() + ". Ignoring "+ part);
        }
      }
 else {
        error=Boolean.TRUE;
        LOG.warn("Null reference snapshot part found in queue for " + snapshotId + ". Aborting snapshot upload");
        return null;
      }
    }
 while (!isLast);
    return partETags;
  }
 catch (  Throwable t) {
    error=Boolean.TRUE;
    LOG.warn("Failed to process snapshot uplodad for " + snapshotId,t);
    return null;
  }
 finally {
    if (error && partQueue != null) {
      LOG.debug("Clearing part queue for " + snapshotId + " due to a previous error uploading");
      partQueue.clear();
    }
  }
}
