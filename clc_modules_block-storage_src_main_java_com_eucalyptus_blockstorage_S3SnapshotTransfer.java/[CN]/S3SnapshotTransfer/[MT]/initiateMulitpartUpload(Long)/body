{
  InitiateMultipartUploadResult initResponse=null;
  InitiateMultipartUploadRequest initRequest=new InitiateMultipartUploadRequest(bucketName,keyName);
  ObjectMetadata objectMetadata=new ObjectMetadata();
  Map<String,String> userMetadataMap=new HashMap<String,String>();
  userMetadataMap.put(UNCOMPRESSED_SIZE_KEY,String.valueOf(uncompressedSize));
  objectMetadata.setUserMetadata(userMetadataMap);
  initRequest.setObjectMetadata(objectMetadata);
  try {
    LOG.info("Inititating multipart upload: snapshotId=" + snapshotId + ", bucketName="+ bucketName+ ", keyName="+ keyName);
    initResponse=retryAfterRefresh(new Function<InitiateMultipartUploadRequest,InitiateMultipartUploadResult>(){
      @Override @Nullable public InitiateMultipartUploadResult apply(      @Nullable InitiateMultipartUploadRequest arg0){
        eucaS3Client.refreshEndpoint();
        return eucaS3Client.initiateMultipartUpload(arg0);
      }
    }
,initRequest,REFRESH_TOKEN_RETRIES);
  }
 catch (  Exception ex) {
    throw new SnapshotInitializeMpuException("Failed to initialize multipart upload part for snapshotId=" + snapshotId + ", bucketName="+ bucketName+ ", keyName="+ keyName,ex);
  }
  if (StringUtils.isBlank(initResponse.getUploadId())) {
    throw new SnapshotInitializeMpuException("Invalid upload ID for multipart upload part for snapshotId=" + snapshotId + ", bucketName="+ bucketName+ ", keyName="+ keyName);
  }
  return initResponse.getUploadId();
}
