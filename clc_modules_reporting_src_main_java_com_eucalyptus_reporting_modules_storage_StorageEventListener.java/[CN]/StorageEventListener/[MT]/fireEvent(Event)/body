{
  if (event instanceof StorageEvent) {
    StorageEvent storageEvent=(StorageEvent)event;
    ReportingAccountDao.getInstance().addUpdateAccount(storageEvent.getAccountId(),storageEvent.getAccountName());
    ReportingUserDao.getInstance().addUpdateUser(storageEvent.getOwnerId(),storageEvent.getOwnerName());
    long timeMillis=getCurrentTimeMillis();
    final StorageUsageLog usageLog=StorageUsageLog.getStorageUsageLog();
    EntityWrapper<StorageUsageSnapshot> entityWrapper=EntityWrapper.get(StorageUsageSnapshot.class);
    try {
      if (usageDataMap == null) {
        this.usageDataMap=usageLog.findLatestUsageData();
        LOG.info("Loaded usageDataMap");
      }
      StorageSummaryKey key=new StorageSummaryKey(storageEvent.getOwnerId(),storageEvent.getAccountId(),storageEvent.getClusterName(),storageEvent.getAvailabilityZone());
      StorageUsageData usageData;
      if (usageDataMap.containsKey(key)) {
        usageData=usageDataMap.get(key);
      }
 else {
        usageData=new StorageUsageData();
        usageDataMap.put(key,usageData);
      }
      long addAmountMegs=(storageEvent.isCreateOrDelete()) ? storageEvent.getSizeMegs() : -storageEvent.getSizeMegs();
      long addNum=(storageEvent.isCreateOrDelete()) ? 1 : -1;
      LOG.info("Receive event:" + storageEvent.toString() + " usageData:"+ usageData+ " addAmountMegs:"+ addAmountMegs+ " addNum:"+ addNum);
switch (storageEvent.getEventType()) {
case EbsSnapshot:
        Long newSnapshotsNum=addLong(usageData.getSnapshotsNum(),addNum);
      if (newSnapshotsNum != null && newSnapshotsNum.longValue() < 0) {
        throw new IllegalStateException("Snapshots num cannot be negative");
      }
    usageData.setSnapshotsNum(newSnapshotsNum);
  Long newSnapshotsMegs=addLong(usageData.getSnapshotsMegs(),addAmountMegs);
if (newSnapshotsMegs != null && newSnapshotsMegs.longValue() < 0) {
  throw new IllegalStateException("Snapshots megs cannot be negative");
}
usageData.setSnapshotsMegs(newSnapshotsMegs);
break;
case EbsVolume:
Long newVolumesNum=addLong(usageData.getVolumesNum(),addNum);
if (newVolumesNum != null && newVolumesNum.longValue() < 0) {
throw new IllegalStateException("Volumes num cannot be negative");
}
usageData.setVolumesNum(newVolumesNum);
Long newVolumesMegs=addLong(usageData.getVolumesMegs(),addAmountMegs);
if (newVolumesMegs != null && newVolumesMegs.longValue() < 0) {
throw new IllegalStateException("Volumes megs cannot be negative");
}
usageData.setVolumesMegs(newVolumesMegs);
break;
}
if ((timeMillis - lastAllSnapshotMs) > WRITE_INTERVAL_MS) {
LOG.info("Starting allSnapshot...");
for (StorageSummaryKey summaryKey : usageDataMap.keySet()) {
StorageSnapshotKey snapshotKey=new StorageSnapshotKey(summaryKey.getOwnerId(),summaryKey.getAccountId(),summaryKey.getClusterName(),summaryKey.getAvailabilityZone(),timeMillis);
StorageUsageSnapshot sus=new StorageUsageSnapshot(snapshotKey,usageDataMap.get(key));
sus.setAllSnapshot(true);
LOG.info("Storing as part of allSnapshot:" + sus);
entityWrapper.add(sus);
lastAllSnapshotMs=timeMillis;
}
LOG.info("Ending allSnapshot...");
}
 else {
StorageSnapshotKey snapshotKey=new StorageSnapshotKey(key.getOwnerId(),key.getAccountId(),key.getClusterName(),key.getAvailabilityZone(),timeMillis);
StorageUsageSnapshot sus=new StorageUsageSnapshot(snapshotKey,usageDataMap.get(key));
LOG.info("Storing:" + sus);
entityWrapper.add(sus);
}
entityWrapper.commit();
}
 catch (Exception ex) {
entityWrapper.rollback();
LOG.error(ex);
}
}
}
