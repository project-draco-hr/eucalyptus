{
  Context ctx=Contexts.lookup();
  String conversionTaskId=ResourceIdentifiers.generateString("import-emi");
  final DiskImageDetail imageDetails=request.getImage();
  final DiskImageVolume volumeDetails=request.getVolume();
  conversionTaskId=conversionTaskId.toLowerCase();
  ConversionTask conversionTask=new ConversionTask();
  conversionTask.setConversionTaskId(conversionTaskId);
  conversionTask.setExpirationTime(new Date(Dates.hoursFromNow(Integer.parseInt(ImagingServiceProperties.IMPORT_TASK_EXPIRATION_HOURS)).getTime()).toString());
  conversionTask.setState(ImportTaskState.NEW.getExternalTaskStateName());
  conversionTask.setStatusMessage("");
  final DiskImageVolumeDescription volumeImageDescription=new DiskImageVolumeDescription(){
{
      this.setSize(volumeDetails.getSize());
    }
  }
;
  final DiskImageDescription diskImageDescription=new DiskImageDescription(){
{
      String manifestUrl=imageDetails.getImportManifestUrl();
      this.setImportManifestUrl(manifestUrl);
      this.setFormat(imageDetails.getFormat());
      this.setSize(imageDetails.getBytes());
    }
  }
;
  ImportVolumeTaskDetails volumeTaskDetails=new ImportVolumeTaskDetails(){
{
      this.setAvailabilityZone(request.getAvailabilityZone());
      this.setBytesConverted(0L);
      this.setDescription(request.getDescription());
    }
  }
;
  volumeTaskDetails.setImage(diskImageDescription);
  volumeTaskDetails.setVolume(volumeImageDescription);
  conversionTask.setImportVolume(volumeTaskDetails);
  EmiConversionImagingTask task=create(ctx.getUserFullName(),conversionTask);
  try {
    String kernelId=null;
    String ramdiskId=null;
    String emiLocation=null;
    final List<ImageDetails> allEmis=EucalyptusActivityTasks.getInstance().describeImages(Lists.<String>newArrayList(),true);
    for (    final ImageDetails emi : allEmis) {
      if (imageDetails.getImportManifestUrl().endsWith(emi.getImageLocation())) {
        if ("hvm".equals(emi.getVirtualizationType())) {
          throw new ImagingServiceException("The requested image is hvm type; only paravirtualized format can be converted");
        }
        emiLocation=emi.getImageLocation();
        kernelId=emi.getKernelId();
        ramdiskId=emi.getRamdiskId();
      }
    }
    if (kernelId == null || ramdiskId == null)     throw new Exception("Kernel and ramdisk ID are not found");
    final List<ImageDetails> ekiList=EucalyptusActivityTasks.getInstance().describeImages(Lists.newArrayList(kernelId),true);
    final List<ImageDetails> eriList=EucalyptusActivityTasks.getInstance().describeImages(Lists.newArrayList(ramdiskId),true);
    if (ekiList == null || ekiList.size() <= 0)     throw new Exception("kernel " + kernelId + " is not found");
    if (eriList == null || eriList.size() <= 0)     throw new Exception("ramdisk " + ramdiskId + " is not found");
    final String ekiLocation=ekiList.get(0).getImageLocation();
    final String eriLocation=eriList.get(0).getImageLocation();
    final String servicePrefix=imageDetails.getImportManifestUrl().replace(emiLocation,"");
    task.setKernelManifestUrl(String.format("%s%s",servicePrefix,ekiLocation));
    task.setRamdiskManifestUrl(String.format("%s%s",servicePrefix,eriLocation));
  }
 catch (  final ImagingServiceException ex) {
    throw Exceptions.toUndeclared(ex);
  }
catch (  final Exception ex) {
    throw Exceptions.toUndeclared(new ImagingServiceException(ImagingServiceException.INTERNAL_SERVER_ERROR,"Unable to find the kernel and ramdisk of the requested EMI",ex));
  }
  return task;
}
