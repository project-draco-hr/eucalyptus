{
  if (!(Bootstrap.isFinished() && Topology.isEnabledLocally(Eucalyptus.class) && Topology.isEnabled(Eucalyptus.class)))   return;
  final List<LoadBalancerServoInstance> allInstances=Lists.newArrayList();
  final List<LoadBalancerServoInstance> stateOutdated=Lists.newArrayList();
  EntityTransaction db=Entities.get(LoadBalancerServoInstance.class);
  try {
    allInstances.addAll(Entities.query(LoadBalancerServoInstance.named()));
    db.commit();
  }
 catch (  final Exception ex) {
    db.rollback();
  }
 finally {
    if (db.isActive())     db.rollback();
  }
  final Date current=new Date(System.currentTimeMillis());
  for (  final LoadBalancerServoInstance se : allInstances) {
    final Date lastUpdate=se.getLastUpdateTimestamp();
    int elapsedSec=(int)((current.getTime() - lastUpdate.getTime()) / 1000.0);
    if (elapsedSec > CHECK_EVERY_SECONDS) {
      stateOutdated.add(se);
    }
  }
  db=Entities.get(LoadBalancerServoInstance.class);
  try {
    for (    final LoadBalancerServoInstance se : stateOutdated) {
      final LoadBalancerServoInstance update=Entities.uniqueResult(se);
      update.setLastUpdateTimestamp(current);
      Entities.persist(update);
    }
    db.commit();
  }
 catch (  final Exception ex) {
    db.rollback();
  }
 finally {
    if (db.isActive())     db.rollback();
  }
  for (  final LoadBalancerServoInstance instance : stateOutdated) {
    if (LoadBalancerServoInstance.STATE.InService.equals(instance.getState())) {
      if (!LoadBalancerServoInstance.DNS_STATE.Registered.equals(instance.getDnsState())) {
        String ipAddr=null;
        String privateIpAddr=null;
        if (instance.getAddress() == null) {
          try {
            List<RunningInstancesItemType> result=EucalyptusActivityTasks.getInstance().describeSystemInstances(Lists.newArrayList(instance.getInstanceId()));
            if (result != null && result.size() > 0) {
              ipAddr=result.get(0).getIpAddress();
              privateIpAddr=result.get(0).getPrivateIpAddress();
            }
          }
 catch (          Exception ex) {
            LOG.warn("failed to run describe-instances",ex);
            continue;
          }
          if (ipAddr == null || ipAddr.length() <= 0) {
            LOG.warn("no ipaddress found for instance " + instance.getInstanceId());
            continue;
          }
        }
 else {
          ipAddr=instance.getAddress();
          privateIpAddr=instance.getPrivateIp();
        }
        try {
          final String zone=instance.getDns().getZone();
          final String name=instance.getDns().getName();
          EucalyptusActivityTasks.getInstance().addARecord(zone,name,ipAddr);
        }
 catch (        Exception ex) {
          LOG.warn("failed to register new ipaddress with dns A record",ex);
          continue;
        }
        db=Entities.get(LoadBalancerServoInstance.class);
        try {
          final LoadBalancerServoInstance update=Entities.uniqueResult(instance);
          update.setAddress(ipAddr);
          if (privateIpAddr != null)           update.setPrivateIp(privateIpAddr);
          update.setDnsState(LoadBalancerServoInstance.DNS_STATE.Registered);
          Entities.persist(update);
          db.commit();
        }
 catch (        NoSuchElementException ex) {
          db.rollback();
          LOG.warn("failed to find the servo instance named " + instance.getInstanceId(),ex);
        }
catch (        Exception ex) {
          db.rollback();
          LOG.warn("failed to update servo instance's ip address",ex);
        }
 finally {
          if (db.isActive())           db.rollback();
        }
      }
    }
 else     if (LoadBalancerServoInstance.STATE.OutOfService.equals(instance.getState()) || LoadBalancerServoInstance.STATE.Error.equals(instance.getState())) {
      if (!LoadBalancerServoInstance.DNS_STATE.Deregistered.equals(instance.getDnsState())) {
        try {
          final String ipAddr=instance.getAddress();
          if (ipAddr == null)           continue;
          final String zone=instance.getDns().getZone();
          final String name=instance.getDns().getName();
          EucalyptusActivityTasks.getInstance().removeARecord(zone,name,ipAddr);
        }
 catch (        Exception ex) {
          LOG.warn("failed to remove IP address from the dns A record",ex);
          continue;
        }
        db=Entities.get(LoadBalancerServoInstance.class);
        try {
          final LoadBalancerServoInstance update=Entities.uniqueResult(instance);
          update.setDnsState(LoadBalancerServoInstance.DNS_STATE.Deregistered);
          Entities.persist(update);
          db.commit();
        }
 catch (        NoSuchElementException ex) {
          db.rollback();
          LOG.warn("failed to find the servo instance named " + instance.getInstanceId(),ex);
        }
catch (        Exception ex) {
          db.rollback();
          LOG.warn("failed to update servo instance's ip address",ex);
        }
 finally {
          if (db.isActive())           db.rollback();
        }
      }
    }
  }
}
