{
  if (this.progress < 100) {
    try {
      Entities.asTransaction(SnapshotInfo.class,new Function<String,SnapshotInfo>(){
        @Override public SnapshotInfo apply(        String arg0){
          SnapshotInfo snap=null;
          try {
            snap=Entities.uniqueResult(new SnapshotInfo(snapshot));
            if (StorageProperties.Status.pending.toString().equals(snap.getStatus()) || StorageProperties.Status.creating.toString().equals(snap.getStatus())) {
              if (snap.getProgress() != null) {
                try {
                  if (progress > Integer.valueOf(snap.getProgress())) {
                    snap.setProgress(String.valueOf(progress));
                  }
 else {
                  }
                }
 catch (                NumberFormatException e) {
                  LOG.debug("Encountered issue while parsing snapshot progress: " + snap.getProgress());
                  snap.setProgress(String.valueOf(progress));
                }
              }
 else {
                snap.setProgress(String.valueOf(progress));
              }
            }
 else {
              snap.setProgress(String.valueOf(progress));
            }
          }
 catch (          TransactionException|NoSuchElementException e) {
            LOG.debug("Could not find the SC database entity for " + snapshot + ". Skipping progress update");
          }
          return snap;
        }
      }
).apply(this.snapshot);
    }
 catch (    Exception e) {
      LOG.debug("Could not update snapshot progress in DB for " + snapshot + " to "+ lastProgress+ "% due to "+ e.getMessage());
    }
  }
 else {
  }
  return true;
}
