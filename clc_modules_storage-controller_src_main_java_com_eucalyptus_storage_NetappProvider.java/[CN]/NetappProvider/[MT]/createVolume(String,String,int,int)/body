{
  volumeId=sanitizeVolumeId(volumeId);
  snapshotId=sanitizeVolumeId(snapshotId);
  int sizeDiff=size - snapSize;
  if (volumeExists(snapshotId)) {
    try {
      createCloneAndWaitForCompletion(snapshotId,volumeId);
      if (sizeDiff > 0) {
        long vol_size=size * StorageProperties.GB;
        vol_size+=(vol_size * (NetappInfo.getStorageInfo().getSnapReserve() / 100)) + (vol_size * (StorageProperties.NETAPP_META_OVERHEAD / 1000));
        int sizeInMB=(int)(vol_size / StorageProperties.MB);
        NaElement request=makeRequest("volume-size","volume",volumeId,"new-size",sizeInMB + "m");
        NaElement reply=execCommand(request);
      }
    }
 catch (    EucalyptusCloudException e) {
      LOG.error("Unable to create volume: " + volumeId + " "+ e);
      NaElement request=makeRequest("volume-offline","name",volumeId);
      NaElement reply=execCommand(request);
      request=makeRequest("volume-destroy","name",volumeId);
      reply=execCommand(request);
      throw e;
    }
    try {
      String snapPercent=String.valueOf((int)(NetappInfo.getStorageInfo().getSnapReserve()));
      NaElement request=makeRequest("snapshot-set-reserve","percentage",snapPercent,"volume",volumeId);
      NaElement reply=execCommand(request);
      request=makeRequest("volume-list-info","volume",volumeId);
      reply=execCommand(request);
      String sizeTotal=null;
      List volStatus=reply.getChildByName("volumes").getChildren();
      for (Iterator i=volStatus.iterator(); i.hasNext(); ) {
        NaElement volumeInfo=(NaElement)i.next();
        sizeTotal=volumeInfo.getChildContent("size-total");
      }
      long volSizeTotal=Long.parseLong(sizeTotal);
      long lunSize=(long)((volSizeTotal) - (volSizeTotal * (StorageProperties.NETAPP_META_OVERHEAD / 1000)));
      if (sizeDiff > 0) {
        request=makeRequest("lun-resize","path","/vol/" + volumeId + "/lun1","size",String.valueOf(lunSize));
        reply=execCommand(request);
      }
      request=makeRequest("lun-online","path","/vol/" + volumeId + "/lun1");
      reply=execCommand(request);
      return getTargetIqn();
    }
 catch (    EucalyptusCloudException e) {
      LOG.error("Unable to create lun for volume: " + volumeId);
      NaElement request=makeRequest("volume-offline","name",volumeId);
      NaElement reply=execCommand(request);
      request=makeRequest("volume-destroy","name",volumeId);
      reply=execCommand(request);
      throw e;
    }
  }
 else {
    throw new EucalyptusCloudException("Snapshot " + snapshotId + " not found");
  }
}
