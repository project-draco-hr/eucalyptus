{
  volumeId=sanitizeVolumeId(volumeId);
  if (volumeExists(volumeId)) {
    throw new EucalyptusCloudException("Volume already exists: " + volumeId);
  }
  int sizeInMB;
  try {
    long vol_size=size * StorageProperties.GB;
    vol_size+=(vol_size * (NetappInfo.getStorageInfo().getSnapReserve() / 100)) + (vol_size * (StorageProperties.NETAPP_META_OVERHEAD / 1000));
    sizeInMB=(int)(vol_size / StorageProperties.MB);
    NaElement request=makeRequest("volume-create","containing-aggr-name",NetappInfo.getStorageInfo().getAggregate(),"volume",volumeId,"size",sizeInMB + "m");
    NaElement reply=execCommand(request);
  }
 catch (  EucalyptusCloudException e) {
    throw new EucalyptusCloudException("Unable to create volume: " + volumeId + " "+ e);
  }
  try {
    String snapPercent=String.valueOf(NetappInfo.getStorageInfo().getSnapReserve());
    NaElement request=makeRequest("snapshot-set-reserve","percentage",snapPercent,"volume",volumeId);
    NaElement reply=execCommand(request);
    request=makeRequest("volume-list-info","volume",volumeId);
    reply=execCommand(request);
    String sizeAvailable=null;
    List volStatus=reply.getChildByName("volumes").getChildren();
    for (Iterator i=volStatus.iterator(); i.hasNext(); ) {
      NaElement volumeInfo=(NaElement)i.next();
      sizeAvailable=volumeInfo.getChildContent("size-available");
    }
    long volSizeAvailable=Long.parseLong(sizeAvailable);
    long lunSize=(long)((volSizeAvailable) - (volSizeAvailable * (StorageProperties.NETAPP_META_OVERHEAD / 1000)));
    request=makeRequest("lun-create-by-size","ostype","linux","path","/vol/" + volumeId + "/lun1","size",String.valueOf(lunSize));
    reply=execCommand(request);
    return getTargetIqn();
  }
 catch (  EucalyptusCloudException e) {
    LOG.error("Unable to create lun for volume: " + volumeId);
    NaElement request=makeRequest("volume-offline","name",volumeId);
    NaElement reply=execCommand(request);
    request=makeRequest("volume-destroy","name",volumeId);
    reply=execCommand(request);
    throw e;
  }
}
