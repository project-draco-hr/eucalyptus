{
  final String principalElement=JsonUtils.checkBinaryOption(statement,PolicySpec.PRINCIPAL,PolicySpec.NOTPRINCIPAL,attachmentType.isPrincipalRequired());
  final boolean notPrincipal=PolicySpec.NOTPRINCIPAL.equals(principalElement);
  if (PolicySpec.ALL_PRINCIPALS.equals(statement.get(principalElement))) {
    return new PolicyPrincipal(notPrincipal,PrincipalType.AWS,Sets.newHashSet(PolicySpec.ALL_PRINCIPALS));
  }
  final JSONObject principal=JsonUtils.getByType(JSONObject.class,statement,principalElement);
  if (principal == null)   return null;
  String principalType=null;
  for (  final PrincipalType type : PrincipalType.values()) {
    if (principal.containsKey(type.name())) {
      if (principalType != null) {
        throw new JSONException("Element " + principalType + " and "+ type.name()+ " can not be both present");
      }
      principalType=type.name();
    }
  }
  if (principalType == null) {
    throw new JSONException("One of element " + (Joiner.on(" or ").join(PrincipalType.values())) + " is required");
  }
  final List<String> values=JsonUtils.parseStringOrStringList(principal,principalType);
  if (values.size() < 1 && attachmentType.isPrincipalRequired()) {
    throw new JSONException("Empty principal values");
  }
  if (values.size() > 0 && !attachmentType.isPrincipalRequired()) {
    throw new JSONException("Policy document should not specify a principal.");
  }
  return new PolicyPrincipal(notPrincipal,PrincipalType.valueOf(principalType),Sets.newHashSet(values));
}
