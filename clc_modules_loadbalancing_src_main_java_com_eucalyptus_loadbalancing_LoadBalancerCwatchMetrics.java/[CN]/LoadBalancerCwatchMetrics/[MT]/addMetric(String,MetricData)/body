{
  final EntityTransaction db=Entities.get(LoadBalancerServoInstance.class);
  LoadBalancerZoneCoreView lbZone=null;
  try {
    LoadBalancerServoInstance servo=Entities.uniqueResult(LoadBalancerServoInstance.named(servoId));
    lbZone=servo.getAvailabilityZone();
    db.commit();
  }
 catch (  NoSuchElementException ex) {
    db.rollback();
    throw Exceptions.toUndeclared("Failed to find the servo instance " + servoId);
  }
catch (  Exception ex) {
    db.rollback();
    throw Exceptions.toUndeclared("database error while querying " + servoId);
  }
 finally {
    if (db.isActive())     db.rollback();
  }
  LoadBalancerZone zone=null;
  LoadBalancerCoreView lb=null;
  try {
    zone=LoadBalancerZoneEntityTransform.INSTANCE.apply(lbZone);
    lb=zone.getLoadbalancer();
  }
 catch (  final Exception ex) {
    return;
  }
  final String userId=lb.getOwnerUserId();
  final String lbName=lb.getDisplayName();
  final String zoneName=lbZone.getName();
  ElbDimension dim=new ElbDimension(userId,lbName,zoneName);
synchronized (lock) {
    if (!metricsMap.containsKey(dim))     metricsMap.put(dim,new ElbAggregate(lbName,zoneName));
    metricsMap.get(dim).addMetric(metric);
  }
  try {
    maybeReport(userId);
  }
 catch (  Exception ex) {
    LOG.error(String.format("Failed to report cloudwatch metrics: %s-%s",lb.getOwnerUserName(),lb.getDisplayName()));
  }
}
