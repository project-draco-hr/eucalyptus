{
  try (final TransactionResource db=Entities.transactionFor(GroupEntity.class)){
    final long groups=Entities.count(GroupEntity.class).join(GroupEntity_.account).whereEqual(AccountEntity_.name,accountName).uniqueResult();
    final long roles=Entities.count(RoleEntity.class).join(RoleEntity_.account).whereEqual(AccountEntity_.name,accountName).uniqueResult();
    final long profiles=Entities.count(InstanceProfileEntity.class).join(InstanceProfileEntity_.account).whereEqual(AccountEntity_.name,accountName).uniqueResult();
    final long providers=Entities.count(OpenIdProviderEntity.class).join(OpenIdProviderEntity_.account).whereEqual(AccountEntity_.name,accountName).uniqueResult();
    return roles + groups + profiles+ providers == 0;
  }
 catch (  Exception e) {
    throw new AuthException("Error checking if account is empty",e);
  }
}
