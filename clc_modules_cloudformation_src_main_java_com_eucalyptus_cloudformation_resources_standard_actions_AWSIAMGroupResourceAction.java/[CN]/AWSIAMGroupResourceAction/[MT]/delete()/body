{
  if (info.getPhysicalResourceId() == null)   return;
  ServiceConfiguration configuration=Topology.lookup(Euare.class);
  boolean foundGroup=false;
  ListGroupsType listGroupsType=new ListGroupsType();
  listGroupsType.setEffectiveUserId(info.getEffectiveUserId());
  ListGroupsResponseType listGroupsResponseType=AsyncRequests.<ListGroupsType,ListGroupsResponseType>sendSync(configuration,listGroupsType);
  if (listGroupsResponseType != null && listGroupsResponseType.getListGroupsResult() != null && listGroupsResponseType.getListGroupsResult().getGroups() != null && listGroupsResponseType.getListGroupsResult().getGroups().getMemberList() != null) {
    for (    GroupType groupType : listGroupsResponseType.getListGroupsResult().getGroups().getMemberList()) {
      if (groupType.getGroupName().equals(info.getPhysicalResourceId())) {
        foundGroup=true;
        break;
      }
    }
  }
  if (!foundGroup)   return;
  if (properties.getPolicies() != null) {
    for (    EmbeddedIAMPolicy policy : properties.getPolicies()) {
      DeleteGroupPolicyType deleteGroupPolicyType=new DeleteGroupPolicyType();
      deleteGroupPolicyType.setGroupName(info.getPhysicalResourceId());
      deleteGroupPolicyType.setPolicyName(policy.getPolicyName());
      deleteGroupPolicyType.setEffectiveUserId(info.getEffectiveUserId());
      AsyncRequests.<DeleteGroupPolicyType,DeleteGroupPolicyResponseType>sendSync(configuration,deleteGroupPolicyType);
    }
  }
  DeleteGroupType deleteGroupType=new DeleteGroupType();
  deleteGroupType.setGroupName(info.getPhysicalResourceId());
  deleteGroupType.setEffectiveUserId(info.getEffectiveUserId());
  AsyncRequests.<DeleteGroupType,DeleteGroupResponseType>sendSync(configuration,deleteGroupType);
}
