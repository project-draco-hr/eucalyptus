{
  ServiceConfiguration configuration=Topology.lookup(Euare.class);
switch (stepNum) {
case 0:
    String groupName=getDefaultPhysicalResourceId();
  CreateGroupType createGroupType=new CreateGroupType();
createGroupType.setEffectiveUserId(info.getEffectiveUserId());
createGroupType.setGroupName(groupName);
createGroupType.setPath(properties.getPath());
CreateGroupResponseType createGroupResponseType=AsyncRequests.<CreateGroupType,CreateGroupResponseType>sendSync(configuration,createGroupType);
String arn=createGroupResponseType.getCreateGroupResult().getGroup().getArn();
info.setPhysicalResourceId(groupName);
info.setArn(JsonHelper.getStringFromJsonNode(new TextNode(arn)));
info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(info.getPhysicalResourceId())));
break;
case 1:
if (properties.getPolicies() != null) {
for (EmbeddedIAMPolicy policy : properties.getPolicies()) {
PutGroupPolicyType putGroupPolicyType=new PutGroupPolicyType();
putGroupPolicyType.setGroupName(info.getPhysicalResourceId());
putGroupPolicyType.setPolicyName(policy.getPolicyName());
putGroupPolicyType.setPolicyDocument(policy.getPolicyDocument().toString());
putGroupPolicyType.setEffectiveUserId(info.getEffectiveUserId());
AsyncRequests.<PutGroupPolicyType,PutGroupPolicyResponseType>sendSync(configuration,putGroupPolicyType);
}
}
break;
default :
throw new IllegalStateException("Invalid step " + stepNum);
}
}
