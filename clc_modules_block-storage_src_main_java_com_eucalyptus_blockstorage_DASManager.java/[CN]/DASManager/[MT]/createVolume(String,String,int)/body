{
  updateVolumeGroup();
  try (VolumeMetadataManager volumeManager=new VolumeMetadataManager()){
    LVMVolumeInfo foundSnapshotInfo=volumeManager.getVolumeInfo(snapshotId);
    if (foundSnapshotInfo != null) {
      String status=foundSnapshotInfo.getStatus();
      if (status.equals(StorageProperties.Status.available.toString())) {
        String lvName=generateLVName(volumeId);
        LVMVolumeInfo lvmVolumeInfo=volumeManager.getVolumeInfo();
        String snapId=foundSnapshotInfo.getVolumeId();
        String loFileName=foundSnapshotInfo.getLoFileName();
        volumeManager.finish();
        try {
          File snapshotFile=new File(DirectStorageInfo.getStorageInfo().getVolumesDir() + PATH_SEPARATOR + snapId);
          assert(snapshotFile.exists());
          long absoluteSize;
          if (size <= 0 || size == foundSnapshotInfo.getSize()) {
            absoluteSize=snapshotFile.length() / StorageProperties.MB;
            size=(int)(absoluteSize / StorageProperties.KB);
          }
 else {
            absoluteSize=size * StorageProperties.KB;
          }
          createLogicalVolume(volumeId,lvName,absoluteSize);
          String absoluteLVName=lvmRootDirectory + PATH_SEPARATOR + volumeGroup+ PATH_SEPARATOR+ lvName;
          duplicateLogicalVolume(loFileName,absoluteLVName);
          lvmVolumeInfo.setVolumeId(volumeId);
          lvmVolumeInfo.setVgName(volumeGroup);
          lvmVolumeInfo.setLvName(lvName);
          lvmVolumeInfo.setStatus(StorageProperties.Status.available.toString());
          lvmVolumeInfo.setSize(size);
          try (VolumeMetadataManager nestedVolumeManager=new VolumeMetadataManager()){
            nestedVolumeManager.add(lvmVolumeInfo);
            nestedVolumeManager.finish();
          }
         }
 catch (        EucalyptusCloudException ex) {
          String error="Unable to run command: " + ex.getMessage();
          LOG.error(error);
          throw new EucalyptusCloudException(error);
        }
      }
    }
 else {
      throw new EucalyptusCloudException("Unable to find snapshot: " + snapshotId);
    }
    return size;
  }
 }
