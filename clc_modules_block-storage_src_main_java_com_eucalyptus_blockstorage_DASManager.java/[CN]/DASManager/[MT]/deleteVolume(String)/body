{
  updateVolumeGroup();
  LVMVolumeInfo foundLVMVolumeInfo=null;
{
    try (final VolumeMetadataManager volumeManager=new VolumeMetadataManager()){
      foundLVMVolumeInfo=volumeManager.getVolumeInfo(volumeId);
      volumeManager.finish();
    }
   }
  if (foundLVMVolumeInfo != null) {
    boolean isReadyForDelete=false;
    int retryCount=0;
    VolumeOpMonitor monitor=getMonitor(foundLVMVolumeInfo.getVolumeId());
    do {
      LOG.debug("Trying to lock volume for export detection and deletion " + volumeId);
synchronized (monitor) {
        try (final VolumeMetadataManager volumeManager=new VolumeMetadataManager()){
          foundLVMVolumeInfo=volumeManager.getVolumeInfo(volumeId);
          if (exportManager.isExported(foundLVMVolumeInfo)) {
            LOG.error("Cannot delete volume " + volumeId + " because it is currently exported");
            volumeManager.finish();
          }
 else {
            LOG.debug("Volume " + volumeId + " is prepped for deletion");
            isReadyForDelete=true;
            LOG.info("Deleting volume " + volumeId);
            String lvName=foundLVMVolumeInfo.getLvName();
            String absoluteLVName=lvmRootDirectory + PATH_SEPARATOR + volumeGroup+ PATH_SEPARATOR+ lvName;
            String returnValue="";
            for (int i=0; i < 5; ++i) {
              returnValue=LVMWrapper.removeLogicalVolume(absoluteLVName);
              if (returnValue.length() != 0) {
                if (returnValue.contains("successfully removed")) {
                  break;
                }
              }
              try {
                Thread.sleep(500);
              }
 catch (              InterruptedException e) {
                LOG.error(e);
                break;
              }
            }
            if (returnValue.length() == 0) {
              throw new EucalyptusCloudException("Unable to remove logical volume " + absoluteLVName);
            }
            volumeManager.remove(foundLVMVolumeInfo);
            volumeManager.finish();
            break;
          }
        }
 catch (        Exception e) {
          LOG.warn("Error cleaning up volume " + volumeId,e);
        }
        LOG.debug("Lap: " + retryCount++);
      }
      if (!isReadyForDelete) {
        try {
          Thread.sleep(10000);
        }
 catch (        InterruptedException e) {
          throw new EucalyptusCloudException("Thread interrupted. Failing volume delete for volume " + volumeId);
        }
      }
    }
 while (!isReadyForDelete && retryCount < 20);
    removeMonitor(volumeId);
    if (!isReadyForDelete) {
      LOG.error("All attempts to cleanup volume " + volumeId + " failed");
      throw new EucalyptusCloudException("Unable to delete volume: " + volumeId + ". All attempts to cleanup the volume failed");
    }
  }
 else {
    throw new EucalyptusCloudException("Unable to find volume: " + volumeId);
  }
}
