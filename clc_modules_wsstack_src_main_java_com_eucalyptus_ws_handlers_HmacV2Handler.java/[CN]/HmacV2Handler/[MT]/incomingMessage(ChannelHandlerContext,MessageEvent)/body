{
  if (event.getMessage() instanceof MappingHttpRequest) {
    MappingHttpRequest httpRequest=(MappingHttpRequest)event.getMessage();
    Map<String,String> parameters=httpRequest.getParameters();
    if (!parameters.containsKey(SecurityParameter.AWSAccessKeyId.toString()))     throw new AuthenticationException("Missing required parameter: " + SecurityParameter.AWSAccessKeyId);
    if (!parameters.containsKey(SecurityParameter.Signature.toString()))     throw new AuthenticationException("Missing required parameter: " + SecurityParameter.Signature);
    String sig=parameters.remove(SecurityParameter.Signature.toString());
    String queryId=parameters.get(SecurityParameter.AWSAccessKeyId.toString());
    String verb=httpRequest.getMethod().getName();
    String addr=httpRequest.getServicePath();
    String headerHost=httpRequest.getHeader("Host");
    String headerPort="8773";
    if (headerHost != null && headerHost.contains(":")) {
      String[] hostTokens=headerHost.split(":");
      headerHost=hostTokens[0];
      if (hostTokens.length > 1 && hostTokens[1] != null && !"".equals(hostTokens[1])) {
        headerPort=hostTokens[1];
      }
    }
    String secretKey;
    try {
      secretKey=Credentials.Users.getSecretKey(queryId);
    }
 catch (    Exception e) {
      throw new AuthenticationException("User authentication failed.");
    }
    String sigVersionString=parameters.get(RequiredQueryParams.SignatureVersion.toString());
    if (sigVersionString != null) {
      int sigVersion=Integer.parseInt(sigVersionString);
      if (sigVersion == 1) {
        String canonicalString=HmacUtils.makeSubjectString(parameters);
        LOG.info("VERSION1-STRING:        " + canonicalString);
        String computedSig=HmacUtils.getSignature(secretKey,canonicalString,Hashes.Mac.HmacSHA1);
        LOG.info("VERSION1-SHA1:        " + computedSig + " -- "+ sig);
        if (!computedSig.equals(sig))         throw new AuthenticationException("User authentication failed.");
      }
 else       if (sigVersion == 2) {
        String canonicalString=HmacUtils.makeV2SubjectString(verb,headerHost,addr,parameters);
        String canonicalStringWithPort=HmacUtils.makeV2SubjectString(verb,headerHost + ":" + headerPort,addr,parameters);
        String computedSig=HmacUtils.getSignature(secretKey,canonicalString,Hashes.Mac.HmacSHA256);
        String computedSigWithPort=HmacUtils.getSignature(secretKey,canonicalStringWithPort,Hashes.Mac.HmacSHA256);
        LOG.info("VERSION2-STRING:        " + canonicalString);
        LOG.info("VERSION2-SHA256:        " + computedSig + " -- "+ sig);
        LOG.info("VERSION2-STRING-PORT:        " + canonicalString);
        LOG.info("VERSION2-SHA256-PORT: " + computedSigWithPort + " -- "+ sig);
        if (!computedSig.equals(sig) && !computedSigWithPort.equals(sig))         throw new AuthenticationException("User authentication failed.");
      }
    }
    String userName=Credentials.Users.getUserName(queryId);
    User user=Credentials.getUser(userName);
    httpRequest.setUser(user);
    parameters.remove(RequiredQueryParams.SignatureVersion.toString());
    parameters.remove("SignatureMethod");
    parameters.remove(SecurityParameter.AWSAccessKeyId.toString());
  }
}
