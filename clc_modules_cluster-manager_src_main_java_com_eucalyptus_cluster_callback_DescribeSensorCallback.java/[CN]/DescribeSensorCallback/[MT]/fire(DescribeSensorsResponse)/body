{
  try {
    final Set<Double> uniqueValues=new HashSet<Double>();
    final Iterable<String> uuidList=Iterables.transform(VmInstances.list(VmState.RUNNING),VmInstances.toInstanceUuid());
    for (    final SensorsResourceType sensorData : msg.getSensorsResources()) {
      if (!RESOURCE_TYPE_INSTANCE.equals(sensorData.getResourceType()) || !Iterables.contains(uuidList,sensorData.getResourceUuid()))       continue;
      for (      final MetricsResourceType metricType : sensorData.getMetrics()) {
        for (        final MetricCounterType counterType : metricType.getCounters()) {
          for (          final MetricDimensionsType dimensionType : counterType.getDimensions()) {
            final List<MetricDimensionsValuesType> values=Lists.newArrayList(dimensionType.getValues());
            Collections.sort(values,Ordering.natural().onResultOf(GetTimestamp.INSTANCE));
            Collections.reverse(values);
            for (            MetricDimensionsValuesType theValue : values) {
              final Double usageValue=theValue.getValue();
              if (!uniqueValues.add(usageValue) && counterType.getType().equalsIgnoreCase(CounterName.summation.toString()))               continue;
              final Long usageTimestamp=theValue.getTimestamp().getTime();
              final long sequenceNumber=counterType.getSequenceNum();
              fireUsageEvent(new Supplier<InstanceUsageEvent>(){
                @Override public InstanceUsageEvent get(){
                  return new InstanceUsageEvent(sensorData.getResourceUuid(),sensorData.getResourceName(),metricType.getMetricName(),sequenceNumber,dimensionType.getDimensionName(),usageValue,usageTimestamp);
                }
              }
);
            }
          }
        }
      }
    }
  }
 catch (  Exception ex) {
    LOG.debug("Unable to fire describe sensors call back",ex);
  }
}
