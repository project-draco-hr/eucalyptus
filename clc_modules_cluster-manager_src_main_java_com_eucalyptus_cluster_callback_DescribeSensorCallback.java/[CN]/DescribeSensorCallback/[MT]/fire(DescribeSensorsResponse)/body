{
  try {
    final Iterable<String> uuidList=Iterables.transform(VmInstances.list(VmState.RUNNING),VmInstances.toInstanceUuid());
    for (    final SensorsResourceType sensorData : msg.getSensorsResources()) {
      if (!RESOURCE_TYPE_INSTANCE.equals(sensorData.getResourceType()) || !Iterables.contains(uuidList,sensorData.getResourceUuid()))       continue;
      for (      final MetricsResourceType metricType : sensorData.getMetrics()) {
        for (        final MetricCounterType counterType : metricType.getCounters()) {
          for (          final MetricDimensionsType dimensionType : counterType.getDimensions()) {
            Double value=null;
            long valueTimestamp=0;
            for (            final MetricDimensionsValuesType valueType : dimensionType.getValues()) {
              if (valueType.getTimestamp() != null && (valueTimestamp == 0 || valueTimestamp < valueType.getTimestamp().getTime())) {
                valueTimestamp=valueType.getTimestamp().getTime();
                value=valueType.getValue();
              }
            }
            if (value != null) {
              final Double usageValue=value;
              final Long usageTimestamp=valueTimestamp;
              fireUsageEvent(new Supplier<InstanceUsageEvent>(){
                @Override public InstanceUsageEvent get(){
                  return new InstanceUsageEvent(sensorData.getResourceUuid(),sensorData.getResourceName(),metricType.getMetricName(),counterType.getSequenceNum(),dimensionType.getDimensionName(),usageValue,usageTimestamp);
                }
              }
);
            }
          }
        }
      }
    }
  }
 catch (  Exception ex) {
    LOG.debug("Unable to fire describe sensors call back",ex);
  }
}
