{
  final DescribeServicesResponseType reply=request.getReply();
  final List<Predicate<ServiceConfiguration>> filters=new ArrayList<Predicate<ServiceConfiguration>>(){
{
      this.add(Filters.publicService());
      if (request.getByPartition() != null) {
        this.add(Filters.partition(request.getByPartition()));
      }
      if (request.getByState() != null) {
        this.add(Filters.state(Component.State.valueOf(request.getByState().toUpperCase())));
      }
    }
  }
;
  final Predicate<Component> componentFilter=(Predicate<Component>)(request.getByServiceType() != null ? Filters.componentType(ComponentIds.lookup(request.getByServiceType().toLowerCase())) : Predicates.alwaysTrue());
  final Predicate<ServiceConfiguration> configPredicate=Predicates.and(filters);
  final Collection<ServiceConfiguration> replyConfigs=Lists.newArrayList();
  for (  final Component comp : Iterables.filter(Components.list(),componentFilter)) {
    replyConfigs.addAll(Collections2.filter(comp.services(),configPredicate));
  }
  final ImmutableList<ServiceConfiguration> sortedReplyConfigs=ServiceOrderings.defaultOrdering().immutableSortedCopy(replyConfigs);
  final Collection<ServiceStatusType> replyStatuses=Collections2.transform(sortedReplyConfigs,ServiceConfigurations.asServiceStatus(false,false));
  reply.getServiceStatuses().addAll(replyStatuses);
  return reply;
}
