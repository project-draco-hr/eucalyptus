{
  processFiles();
  if (!BindingFileSearch.INSTANCE.check()) {
    try {
      InternalSoapBindingGenerator gen=new InternalSoapBindingGenerator();
      gen.getOutFile().delete();
      BindingFileSearch.reset(Utility.getClassPaths());
      Iterables.all(BindingFileSearch.BINDING_LIST,BindingFileSearch.INSTANCE);
      for (      Class genBindClass : BindingFileSearch.BINDING_CLASS_MAP.values()) {
        if (BINDING_DEBUG) {
          LOG.info("Generating binding: " + genBindClass);
        }
        gen.processClass(genBindClass);
      }
      gen.close();
      BINDING_LIST.add(gen.getOutFile().toURI());
      BindingFileSearch.reset(Utility.getClassPaths());
      Map<URI,BindingDefinition> bindingDefs=Maps.newHashMap();
      for (      URI binding : BINDING_LIST) {
        String shortPath=binding.toURL().getPath().replaceAll(".*!/","");
        String sname=Utility.bindingFromFileName(shortPath);
        BindingDefinition def=Utility.loadBinding(binding.toASCIIString(),sname,binding.toURL().openStream(),binding.toURL(),true);
        bindingDefs.put(binding,def);
      }
      for (      Entry<URI,BindingDefinition> def : bindingDefs.entrySet()) {
        try {
          LOG.info("Compiling binding: " + def.getKey());
          def.getValue().generateCode(BindingFileSearch.BINDING_DEBUG,BindingFileSearch.BINDING_DEBUG);
        }
 catch (        RuntimeException e) {
          throw new JiBXException("\n*** Error during code generation for file '" + def.getKey() + "' -\n this may be due to an error in "+ "your binding or classpath, or to an error in the "+ "JiBX code ***\n",e);
        }
      }
      ClassFile[][] lists=MungedClass.fixDispositions();
      for (      BindingDefinition def : bindingDefs.values()) {
        def.addClassList(lists[0],lists[1]);
      }
      MungedClass.writeChanges();
      ClassFile[] adds=lists[0];
      int addcount=adds.length;
      LOG.info("\nWrote " + addcount + " files");
      if (BindingFileSearch.BINDING_DEBUG) {
        ClassFile[] keeps=lists[1];
        LOG.info("\nKept " + keeps.length + " files unchanged:");
        for (int i=0; i < keeps.length; i++) {
          LOG.info(" " + keeps[i].getName());
        }
        ClassFile[] dels=lists[2];
        LOG.info("\nDeleted " + dels.length + " files:");
        for (int i=0; i < dels.length; i++) {
          LOG.info(" " + dels[i].getName());
        }
      }
      BindingFileSearch.INSTANCE.store();
    }
 catch (    Exception ex) {
      LOG.error(ex,ex);
      System.exit(1);
      throw new Error("Failed to prepare the system while trying to compile bindings: " + ex.getMessage(),ex);
    }
    System.exit(1);
  }
}
