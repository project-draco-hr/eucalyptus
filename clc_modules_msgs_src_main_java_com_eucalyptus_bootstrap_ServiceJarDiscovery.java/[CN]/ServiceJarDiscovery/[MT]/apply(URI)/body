{
  try {
    String shortPath=input.toURL().getPath().replaceAll(".*!/","");
    String sname=Utility.bindingFromFileName(shortPath);
    ValidationContext vctx=BindingElement.newValidationContext();
    BindingElement root=BindingElement.validateBinding(input.toASCIIString(),input.toURL(),input.toURL().openStream(),vctx);
    Predicate<BindingElement> writeFile=new Predicate<BindingElement>(){
      @SuppressWarnings("unchecked") @Override public boolean apply(      BindingElement input){
        for (        ElementBase child : (List<ElementBase>)input.topChildren()) {
          try {
            if (child instanceof MappingElement) {
              MappingElementBase mapping=(MappingElementBase)child;
              ClassFile classFile=mapping.getHandledClass().getClassFile();
              String classFileName=classFile.getName().replace(".","/") + ".class";
              InputSupplier<InputStream> classSupplier=Resources.newInputStreamSupplier(ClassLoader.getSystemResource(classFileName));
              File destClassFile=SubDirectory.CLASSCACHE.getChildFile(classFileName);
              if (!destClassFile.exists()) {
                Files.createParentDirs(destClassFile);
                Files.copy(classSupplier,destClassFile);
              }
              ClassFile cf=ClassFile.getClassFile(classFile.getName());
              Logs.extreme().debug("Caching: " + classFile.getName() + " => "+ destClassFile.getAbsolutePath());
            }
 else             if (child instanceof IncludeElement) {
              IncludeElement includeElement=(IncludeElement)child;
              BindingElement bind=includeElement.getBinding();
              if (bind != null) {
                this.apply(bind);
              }
 else {
                Files.write(BINDING_EMPTY.getBytes(),SubDirectory.CLASSCACHE.getChildFile(includeElement.getIncludePath().replace("classpath:","")));
              }
            }
          }
 catch (          Exception ex) {
            LOG.error(ex,ex);
          }
        }
        return true;
      }
    }
;
    if (!writeFile.apply(root)) {
      writeFile.apply(root);
    }
    return true;
  }
 catch (  Exception ex) {
    throw Exceptions.toUndeclared(ex);
  }
}
