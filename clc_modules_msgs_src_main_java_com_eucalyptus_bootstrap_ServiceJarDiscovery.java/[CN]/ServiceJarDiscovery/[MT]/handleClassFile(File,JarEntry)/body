{
  final String classGuess=j.getName().replaceAll("/",".").replaceAll("\\.class.{0,1}","");
  try {
    final Class candidate=ClassLoader.getSystemClassLoader().loadClass(classGuess);
    classList.put(candidate,f.getAbsolutePath());
    if (ServiceJarDiscovery.class.isAssignableFrom(candidate) && !ServiceJarDiscovery.class.equals(candidate)) {
      try {
        final ServiceJarDiscovery discover=(ServiceJarDiscovery)candidate.newInstance();
        discovery.add(discover);
      }
 catch (      final Exception e) {
        LOG.fatal(e,e);
        throw new RuntimeException(e);
      }
    }
 else     if (Ats.from(candidate).has(Bootstrap.Discovery.class) && Predicate.class.isAssignableFrom(candidate)) {
      try {
        final Bootstrap.Discovery annote=Ats.from(candidate).get(Bootstrap.Discovery.class);
        @SuppressWarnings({"rawtypes","unchecked"}) final Predicate<Class> instance=(Predicate<Class>)Classes.builder(candidate).newInstance();
        final ServiceJarDiscovery discover=new ServiceJarDiscovery(){
          @Override public boolean processClass(          Class discoveryCandidate) throws Exception {
            boolean classFiltered=annote.value().length != 0 ? Iterables.any(Arrays.asList(annote.value()),Classes.assignableTo(discoveryCandidate)) : true;
            if (classFiltered) {
              boolean annotationFiltered=annote.annotations().length != 0 ? Iterables.any(Arrays.asList(annote.annotations()),Ats.from(discoveryCandidate)) : true;
              if (annotationFiltered) {
                return instance.apply(discoveryCandidate);
              }
 else {
                return false;
              }
            }
 else {
              return false;
            }
          }
          @Override public Double getPriority(){
            return annote.priority();
          }
        }
;
        discovery.add(discover);
      }
 catch (      final Exception e) {
        LOG.fatal(e,e);
        throw new RuntimeException(e);
      }
    }
  }
 catch (  final ClassNotFoundException e) {
    LOG.debug(e,e);
  }
}
