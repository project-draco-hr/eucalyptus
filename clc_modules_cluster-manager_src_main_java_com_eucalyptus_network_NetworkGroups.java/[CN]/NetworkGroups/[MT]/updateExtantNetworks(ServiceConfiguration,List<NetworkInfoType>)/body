{
  ActiveTags.INSTANCE.update(cluster,activeNetworks);
  for (  NetworkInfoType activeNetInfo : activeNetworks) {
    EntityTransaction tx=Entities.get(NetworkGroup.class);
    try {
      NetworkGroup net=NetworkGroups.lookupByNaturalId(activeNetInfo.getUuid());
      if (net.hasExtantNetwork()) {
        ExtantNetwork exNet=net.extantNetwork();
        if (Reference.State.PENDING.equals(exNet.getState())) {
          LOG.debug("Found PENDING extant network for " + net.getFullName() + " updating to EXTANT.");
          exNet.setState(Reference.State.EXTANT);
        }
 else {
          LOG.debug("Found " + exNet.getState() + " extant network for "+ net.getFullName()+ ": skipped.");
        }
      }
 else {
        LOG.warn("Failed to find extant network for " + net.getFullName());
      }
      tx.commit();
    }
 catch (    Exception ex) {
      LOG.debug(ex);
      Logs.extreme().error(ex,ex);
    }
 finally {
      if (tx.isActive())       tx.rollback();
    }
  }
  try {
    final List<NetworkGroup> groups=NetworkGroups.lookupAll(null,null);
    for (    NetworkGroup net : groups) {
      final EntityTransaction tx=Entities.get(NetworkGroup.class);
      try {
        net=Entities.merge(net);
        if (net.hasExtantNetwork()) {
          ExtantNetwork exNet=net.getExtantNetwork();
          Integer exNetTag=exNet.getTag();
          if (!ActiveTags.INSTANCE.isActive(exNetTag)) {
            if (Reference.State.EXTANT.equals(exNet.getState())) {
              exNet.setState(Reference.State.RELEASING);
            }
 else             if (Reference.State.PENDING.equals(exNet.getState()) && exNet.lastUpdateMillis() > 60L * 1000 * NetworkGroups.NETWORK_TAG_PENDING_TIMEOUT) {
              exNet.setState(Reference.State.RELEASING);
            }
 else             if (Reference.State.RELEASING.equals(exNet.getState())) {
              exNet.teardown();
              Entities.delete(exNet);
              net.setExtantNetwork(null);
            }
          }
        }
        tx.commit();
      }
 catch (      final Exception ex) {
        LOG.debug(ex);
        Logs.extreme().error(ex,ex);
      }
 finally {
        if (tx.isActive())         tx.rollback();
      }
    }
  }
 catch (  MetadataException ex) {
    LOG.error(ex);
  }
}
