{
  DeleteObjectResponseType reply=(DeleteObjectResponseType)request.getReply();
  String bucketName=request.getBucket();
  String objectKey=request.getKey();
  Context ctx=Contexts.lookup();
  Account account=ctx.getAccount();
  EntityWrapper<BucketInfo> db=EntityWrapper.get(BucketInfo.class);
  BucketInfo bucketInfos=new BucketInfo(bucketName);
  List<BucketInfo> bucketList=db.query(bucketInfos);
  if (bucketList.size() > 0) {
    BucketInfo bucketInfo=bucketList.get(0);
    BucketLogData logData=bucketInfo.getLoggingEnabled() ? request.getLogData() : null;
    if (ctx.hasAdministrativePrivileges() || (bucketInfo.canWrite(account.getAccountNumber()) && (bucketInfo.isGlobalWrite() || Lookups.checkPrivilege(PolicySpec.S3_DELETEOBJECT,PolicySpec.VENDOR_S3,PolicySpec.S3_RESOURCE_BUCKET,bucketInfo.getBucketName(),null)))) {
      EntityWrapper<ObjectInfo> dbObject=db.recast(ObjectInfo.class);
      if (bucketInfo.isVersioningEnabled()) {
        ObjectInfo searchDeletedObjectInfo=new ObjectInfo(bucketName,objectKey);
        searchDeletedObjectInfo.setDeleted(true);
        try {
          dbObject.getUnique(searchDeletedObjectInfo);
          db.rollback();
          throw new NoSuchEntityException(objectKey,logData);
        }
 catch (        NoSuchEntityException ex) {
          throw ex;
        }
catch (        EucalyptusCloudException ex) {
          ObjectInfo searchObjectInfo=new ObjectInfo(bucketName,objectKey);
          searchObjectInfo.setLast(true);
          List<ObjectInfo> objectInfos=dbObject.query(searchObjectInfo);
          for (          ObjectInfo objInfo : objectInfos) {
            objInfo.setLast(false);
          }
          ObjectInfo deleteMarker=new ObjectInfo(bucketName,objectKey);
          deleteMarker.setDeleted(true);
          deleteMarker.setLast(true);
          deleteMarker.setOwnerId(account.getAccountNumber());
          deleteMarker.setLastModified(new Date());
          deleteMarker.setVersionId(UUID.randomUUID().toString().replaceAll("-",""));
          dbObject.add(deleteMarker);
          reply.setCode("200");
          reply.setDescription("OK");
        }
      }
 else {
        ObjectInfo searchObjectInfo=new ObjectInfo(bucketName,objectKey);
        searchObjectInfo.setLast(true);
        searchObjectInfo.setDeleted(false);
        List<ObjectInfo> objectInfos=dbObject.query(searchObjectInfo);
        if (objectInfos.size() > 0) {
          if (objectInfos.size() > 1) {
            db.rollback();
            throw new EucalyptusCloudException("More than one object set to 'last' found");
          }
          ObjectInfo lastObject=objectInfos.get(0);
          if (lastObject.getVersionId().equals(WalrusProperties.NULL_VERSION_ID)) {
            ObjectInfo nullObject=lastObject;
            dbObject.delete(nullObject);
            String objectName=nullObject.getObjectName();
            for (            GrantInfo grantInfo : nullObject.getGrants()) {
              db.delete(grantInfo);
            }
            Long size=nullObject.getSize();
            boolean success=false;
            int retryCount=0;
            do {
              try {
                decrementBucketSize(bucketName,size);
                success=true;
              }
 catch (              NoSuchBucketException ex) {
                db.rollback();
                throw ex;
              }
catch (              RollbackException ex) {
                retryCount++;
                LOG.trace("retrying update: " + bucketName);
              }
catch (              EucalyptusCloudException ex) {
                db.rollback();
                throw ex;
              }
            }
 while (!success && (retryCount < 5));
            ObjectDeleter objectDeleter=new ObjectDeleter(bucketName,objectName,size,ctx.getUser().getName(),ctx.getUser().getUserId(),ctx.getAccount().getName(),ctx.getAccount().getAccountNumber());
            Threads.lookup(Walrus.class,WalrusManager.ObjectDeleter.class).limitTo(10).submit(objectDeleter);
          }
 else {
            if (bucketInfo.isVersioningSuspended()) {
              lastObject.setLast(false);
            }
 else {
              db.rollback();
              throw new EucalyptusCloudException("Non 'null' versioned object found in a versioning disabled bucket, not sure how to proceed with delete.");
            }
          }
          reply.setCode("200");
          reply.setDescription("OK");
          if (logData != null) {
            updateLogData(bucketInfo,logData);
            reply.setLogData(logData);
          }
          if (bucketInfo.isVersioningSuspended()) {
            ObjectInfo deleteMarker=new ObjectInfo(bucketName,objectKey);
            deleteMarker.setDeleted(true);
            deleteMarker.setLast(true);
            deleteMarker.setOwnerId(account.getAccountNumber());
            deleteMarker.setLastModified(new Date());
            deleteMarker.setVersionId(UUID.randomUUID().toString().replaceAll("-",""));
            dbObject.add(deleteMarker);
          }
        }
 else {
          throw new NoSuchEntityException(objectKey,logData);
        }
      }
    }
 else {
      db.rollback();
      throw new AccessDeniedException("Bucket",bucketName,logData);
    }
  }
 else {
    db.rollback();
    throw new NoSuchBucketException(bucketName);
  }
  db.commit();
  return reply;
}
