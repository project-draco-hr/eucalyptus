{
  PutObjectResponseType reply=(PutObjectResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  Account account=ctx.getAccount();
  String bucketName=request.getBucket();
  String objectKey=request.getKey();
  Long oldBucketSize=0L;
  String md5="";
  Date lastModified=null;
  AccessControlListType accessControlList=request.getAccessControlList();
  if (accessControlList == null) {
    accessControlList=new AccessControlListType();
  }
  String key=bucketName + "." + objectKey;
  String randomKey=request.getRandomKey();
  WalrusDataMessenger messenger=WalrusRESTBinding.getWriteMessenger();
  EntityWrapper<BucketInfo> db=EntityWrapper.get(BucketInfo.class);
  BucketInfo bucketInfo=new BucketInfo(bucketName);
  List<BucketInfo> bucketList=db.query(bucketInfo);
  if (bucketList.size() > 0) {
    BucketInfo bucket=bucketList.get(0);
    BucketLogData logData=bucket.getLoggingEnabled() ? request.getLogData() : null;
    long objSize=0;
    try {
      objSize=Long.valueOf(request.getContentLength());
    }
 catch (    NumberFormatException e) {
      LOG.error("Invalid content length " + request.getContentLength());
      objSize=1L;
    }
    if (ctx.hasAdministrativePrivileges() || (bucket.canWrite(account.getAccountNumber()) && Lookups.checkPrivilege(PolicySpec.S3_PUTOBJECT,PolicySpec.VENDOR_S3,PolicySpec.S3_RESOURCE_BUCKET,bucketName,bucket.getOwnerId()) && Lookups.checkPrivilege(PolicySpec.S3_PUTOBJECT,PolicySpec.VENDOR_S3,PolicySpec.S3_RESOURCE_OBJECT,PolicySpec.objectFullName(bucketName,objectKey),bucket.getOwnerId())&& Permissions.canAllocate(PolicySpec.S3_RESOURCE_BUCKET,PolicySpec.VENDOR_S3,bucketName,PolicySpec.S3_PUTOBJECT,ctx.getUser(),objSize))) {
      if (logData != null)       reply.setLogData(logData);
      String objectName;
      String versionId;
      ObjectInfo objectInfo=null;
      if (bucket.isVersioningEnabled()) {
        objectInfo=new ObjectInfo(bucketName,objectKey);
        objectInfo.setOwnerId(account.getAccountNumber());
        List<GrantInfo> grantInfos=new ArrayList<GrantInfo>();
        objectInfo.addGrants(account.getAccountNumber(),grantInfos,accessControlList);
        objectInfo.setGrants(grantInfos);
        objectName=UUID.randomUUID().toString();
        objectInfo.setObjectName(objectName);
        objectInfo.setSize(0L);
        versionId=UUID.randomUUID().toString().replaceAll("-","");
      }
 else {
        versionId=WalrusProperties.NULL_VERSION_ID;
        ObjectInfo searchObject=new ObjectInfo(bucketName,objectKey);
        searchObject.setVersionId(versionId);
        EntityWrapper<ObjectInfo> dbObject=db.recast(ObjectInfo.class);
        try {
          ObjectInfo foundObject=dbObject.getUnique(searchObject);
          if (!foundObject.canWrite(account.getAccountNumber())) {
            db.rollback();
            messenger.removeQueue(key,randomKey);
            throw new AccessDeniedException("Key",objectKey,logData);
          }
          objectName=foundObject.getObjectName();
        }
 catch (        AccessDeniedException ex) {
          throw ex;
        }
catch (        EucalyptusCloudException ex) {
          objectInfo=new ObjectInfo(bucketName,objectKey);
          objectInfo.setOwnerId(account.getAccountNumber());
          List<GrantInfo> grantInfos=new ArrayList<GrantInfo>();
          objectInfo.addGrants(account.getAccountNumber(),grantInfos,accessControlList);
          objectInfo.setGrants(grantInfos);
          objectName=UUID.randomUUID().toString();
          objectInfo.setObjectName(objectName);
          objectInfo.setSize(0L);
        }
      }
      db.commit();
      WalrusDataQueue<WalrusDataMessage> putQueue=messenger.getQueue(key,randomKey);
      try {
        WalrusDataMessage dataMessage;
        String tempObjectName=objectName;
        MessageDigest digest=null;
        long size=0;
        FileIO fileIO=null;
        while ((dataMessage=putQueue.take()) != null) {
          if (putQueue.getInterrupted()) {
            if (WalrusDataMessage.isEOF(dataMessage)) {
              WalrusMonitor monitor=messenger.getMonitor(key);
              if (monitor.getLastModified() == null) {
synchronized (monitor) {
                  monitor.wait();
                }
              }
              lastModified=monitor.getLastModified();
              md5=monitor.getMd5();
              if (fileIO != null)               fileIO.finish();
              ObjectDeleter objectDeleter=new ObjectDeleter(bucketName,tempObjectName,-1L,ctx);
              objectDeleter.start();
              LOG.info("Transfer interrupted: " + key);
              messenger.removeQueue(key,randomKey);
              break;
            }
            continue;
          }
          if (WalrusDataMessage.isStart(dataMessage)) {
            tempObjectName=UUID.randomUUID().toString();
            digest=Digest.MD5.get();
            try {
              fileIO=storageManager.prepareForWrite(bucketName,tempObjectName);
            }
 catch (            Exception ex) {
              messenger.removeQueue(key,randomKey);
              throw new EucalyptusCloudException(ex);
            }
          }
 else           if (WalrusDataMessage.isEOF(dataMessage)) {
            try {
              if (fileIO != null)               fileIO.finish();
              storageManager.renameObject(bucketName,tempObjectName,objectName);
            }
 catch (            IOException ex) {
              LOG.error(ex);
              messenger.removeQueue(key,randomKey);
              throw new EucalyptusCloudException(objectKey);
            }
            if (digest != null)             md5=Hashes.bytesToHex(digest.digest());
            lastModified=new Date();
            ObjectInfo searchObject=new ObjectInfo(bucketName,objectKey);
            searchObject.setVersionId(versionId);
            EntityWrapper<ObjectInfo> dbObject=EntityWrapper.get(ObjectInfo.class);
            List<ObjectInfo> objectInfos=dbObject.query(new ObjectInfo(bucketName,objectKey));
            for (            ObjectInfo objInfo : objectInfos) {
              objInfo.setLast(false);
            }
            ObjectInfo foundObject;
            try {
              foundObject=dbObject.getUnique(searchObject);
              if (ctx.hasAdministrativePrivileges() || foundObject.canWriteACP(account.getAccountNumber())) {
                List<GrantInfo> grantInfos=new ArrayList<GrantInfo>();
                foundObject.addGrants(account.getAccountNumber(),grantInfos,accessControlList);
                foundObject.setGrants(grantInfos);
              }
              if (WalrusProperties.enableTorrents) {
                EntityWrapper<TorrentInfo> dbTorrent=dbObject.recast(TorrentInfo.class);
                TorrentInfo torrentInfo=new TorrentInfo(bucketName,objectKey);
                List<TorrentInfo> torrentInfos=dbTorrent.query(torrentInfo);
                if (torrentInfos.size() > 0) {
                  TorrentInfo foundTorrentInfo=torrentInfos.get(0);
                  TorrentClient torrentClient=Torrents.getClient(bucketName + objectKey);
                  if (torrentClient != null) {
                    torrentClient.bye();
                  }
                  dbTorrent.delete(foundTorrentInfo);
                }
              }
 else {
                LOG.warn("Bittorrent support has been disabled. Please check pre-requisites");
              }
            }
 catch (            EucalyptusCloudException ex) {
              if (objectInfo != null) {
                foundObject=objectInfo;
              }
 else {
                db.rollback();
                throw new EucalyptusCloudException("Unable to update object: " + bucketName + "/"+ objectKey);
              }
            }
            foundObject.setVersionId(versionId);
            foundObject.replaceMetaData(request.getMetaData());
            foundObject.setEtag(md5);
            foundObject.setSize(size);
            foundObject.setLastModified(lastModified);
            foundObject.setStorageClass("STANDARD");
            foundObject.setContentType(request.getContentType());
            foundObject.setContentDisposition(request.getContentDisposition());
            foundObject.setLast(true);
            foundObject.setDeleted(false);
            reply.setSize(size);
            ObjectInfo deleteMarker=new ObjectInfo(bucketName,objectKey);
            deleteMarker.setDeleted(true);
            try {
              ObjectInfo foundDeleteMarker=dbObject.getUnique(deleteMarker);
              dbObject.delete(foundDeleteMarker);
            }
 catch (            EucalyptusCloudException ex) {
              LOG.trace("No delete marker found for: " + bucketName + "/"+ objectKey);
            }
            if (bucket.isVersioningEnabled()) {
              reply.setVersionId(versionId);
            }
            EntityWrapper<BucketInfo> dbBucket=dbObject.recast(BucketInfo.class);
            try {
              bucket=dbBucket.getUnique(new BucketInfo(bucketName));
            }
 catch (            EucalyptusCloudException e) {
              LOG.error(e);
              dbObject.rollback();
              throw new NoSuchBucketException(bucketName);
            }
            Long bucketSize=bucket.getBucketSize();
            long newSize=bucketSize + oldBucketSize + size;
            if (WalrusProperties.shouldEnforceUsageLimits && !Contexts.lookup().hasAdministrativePrivileges()) {
              if (newSize > (WalrusInfo.getWalrusInfo().getStorageMaxBucketSizeInMB() * WalrusProperties.M)) {
                messenger.removeQueue(key,randomKey);
                dbObject.rollback();
                throw new EntityTooLargeException("Key",objectKey);
              }
            }
            bucket.setBucketSize(newSize);
            if (WalrusProperties.trackUsageStatistics) {
              walrusStatistics.updateBytesIn(size);
              walrusStatistics.updateSpaceUsed(size);
            }
            if (logData != null) {
              logData.setObjectSize(size);
              updateLogData(bucket,logData);
            }
            if (objectInfo != null)             dbObject.add(foundObject);
            dbObject.commit();
            if (logData != null) {
              logData.setTurnAroundTime(Long.parseLong(new String(dataMessage.getPayload())));
            }
            WalrusMonitor monitor=messenger.getMonitor(key);
synchronized (monitor) {
              monitor.setLastModified(lastModified);
              monitor.setMd5(md5);
              monitor.notifyAll();
            }
            messenger.removeMonitor(key);
            messenger.removeQueue(key,randomKey);
            LOG.info("Transfer complete: " + key);
            QueueSender queueSender=QueueFactory.getInstance().getSender(QueueIdentifier.S3);
            queueSender.send(new S3Event(true,size / WalrusProperties.M,ctx.getUser().getName(),ctx.getAccount().getName()));
            break;
          }
 else {
            assert(WalrusDataMessage.isData(dataMessage));
            byte[] data=dataMessage.getPayload();
            try {
              if (fileIO != null)               fileIO.write(data);
            }
 catch (            IOException ex) {
              LOG.error(ex);
            }
            size+=data.length;
            if (digest != null)             digest.update(data);
          }
        }
      }
 catch (      InterruptedException ex) {
        LOG.error(ex,ex);
        messenger.removeQueue(key,randomKey);
        throw new EucalyptusCloudException("Transfer interrupted: " + key + "."+ randomKey);
      }
    }
 else {
      db.rollback();
      messenger.removeQueue(key,randomKey);
      throw new AccessDeniedException("Bucket",bucketName,logData);
    }
  }
 else {
    db.rollback();
    messenger.removeQueue(key,randomKey);
    throw new NoSuchBucketException(bucketName);
  }
  reply.setEtag(md5);
  reply.setLastModified(DateUtils.format(lastModified.getTime(),DateUtils.ISO8601_DATETIME_PATTERN) + ".000Z");
  return reply;
}
