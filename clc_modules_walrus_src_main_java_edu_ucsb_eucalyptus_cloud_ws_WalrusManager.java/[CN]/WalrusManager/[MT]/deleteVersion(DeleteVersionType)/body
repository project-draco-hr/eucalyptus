{
  DeleteVersionResponseType reply=(DeleteVersionResponseType)request.getReply();
  String bucketName=request.getBucket();
  String objectKey=request.getKey();
  Context ctx=Contexts.lookup();
  Account account=ctx.getAccount();
  EntityWrapper<BucketInfo> db=EntityWrapper.get(BucketInfo.class);
  BucketInfo bucketInfos=new BucketInfo(bucketName);
  List<BucketInfo> bucketList=db.queryEscape(bucketInfos);
  if (bucketList.size() > 0) {
    BucketInfo bucketInfo=bucketList.get(0);
    BucketLogData logData=bucketInfo.getLoggingEnabled() ? request.getLogData() : null;
    ObjectInfo foundObject=null;
    EntityWrapper<ObjectInfo> dbObject=db.recast(ObjectInfo.class);
    ObjectInfo searchObjectInfo=new ObjectInfo(bucketName,objectKey);
    if (request.getVersionid() == null) {
      db.rollback();
      throw new EucalyptusCloudException("versionId is null");
    }
    searchObjectInfo.setVersionId(request.getVersionid());
    List<ObjectInfo> objectInfos=dbObject.queryEscape(searchObjectInfo);
    if (objectInfos.size() > 0) {
      foundObject=objectInfos.get(0);
    }
    if (foundObject != null) {
      if (ctx.hasAdministrativePrivileges() || ((bucketInfo.isVersioningSuspended() && bucketInfo.getOwnerId().equals(ctx.getUser().getUserId())) || (bucketInfo.isVersioningEnabled() && Lookups.checkPrivilege(PolicySpec.S3_DELETEOBJECTVERSION,PolicySpec.VENDOR_S3,PolicySpec.S3_RESOURCE_OBJECT,PolicySpec.objectFullName(bucketName,objectKey),foundObject.getOwnerId())))) {
        dbObject.delete(foundObject);
        if (!foundObject.getDeleted()) {
          String objectName=foundObject.getObjectName();
          for (          GrantInfo grantInfo : foundObject.getGrants()) {
            db.delete(grantInfo);
          }
          Long size=foundObject.getSize();
          boolean success=false;
          int retryCount=0;
          do {
            try {
              decrementBucketSize(bucketName,size);
              success=true;
            }
 catch (            NoSuchBucketException ex) {
              db.rollback();
              throw ex;
            }
catch (            RollbackException ex) {
              retryCount++;
              LOG.trace("retrying update: " + bucketName);
            }
catch (            EucalyptusCloudException ex) {
              db.rollback();
              throw ex;
            }
          }
 while (!success && (retryCount < 5));
          ObjectDeleter objectDeleter=new ObjectDeleter(bucketName,objectName,size,ctx.getUser().getName(),ctx.getUser().getUserId(),ctx.getAccount().getName(),ctx.getAccount().getAccountNumber());
          Threads.lookup(Walrus.class,WalrusManager.ObjectDeleter.class).limitTo(10).submit(objectDeleter);
        }
        reply.setCode("200");
        reply.setDescription("OK");
        if (logData != null) {
          updateLogData(bucketInfo,logData);
          reply.setLogData(logData);
        }
      }
 else {
        db.rollback();
        throw new AccessDeniedException("Key",objectKey,logData);
      }
    }
 else {
      db.rollback();
      throw new NoSuchEntityException(objectKey,logData);
    }
  }
 else {
    db.rollback();
    throw new NoSuchBucketException(bucketName);
  }
  db.commit();
  return reply;
}
