{
  CreateBucketResponseType reply=(CreateBucketResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  Account account=ctx.getAccount();
  String bucketName=request.getBucket();
  String locationConstraint=request.getLocationConstraint();
  if (account == null) {
    throw new AccessDeniedException("Bucket",bucketName);
  }
  AccessControlListType accessControlList=request.getAccessControlList();
  if (accessControlList == null) {
    accessControlList=new AccessControlListType();
  }
  if (!checkBucketName(bucketName))   throw new InvalidBucketNameException(bucketName);
  EntityWrapper<BucketInfo> db=EntityWrapper.get(BucketInfo.class);
  if (WalrusProperties.shouldEnforceUsageLimits && !Contexts.lookup().hasAdministrativePrivileges()) {
    BucketInfo searchBucket=new BucketInfo();
    searchBucket.setOwnerId(account.getAccountNumber());
    List<BucketInfo> bucketList=db.query(searchBucket);
    if (bucketList.size() >= WalrusInfo.getWalrusInfo().getStorageMaxBucketsPerUser()) {
      db.rollback();
      throw new TooManyBucketsException(bucketName);
    }
  }
  BucketInfo bucketInfo=new BucketInfo(bucketName);
  List<BucketInfo> bucketList=db.query(bucketInfo);
  if (bucketList.size() > 0) {
    if (bucketList.get(0).getOwnerId().equals(account.getAccountNumber())) {
      db.rollback();
      throw new BucketAlreadyOwnedByYouException(bucketName);
    }
    db.rollback();
    throw new BucketAlreadyExistsException(bucketName);
  }
 else   if (ctx.hasAdministrativePrivileges() || (Permissions.isAuthorized(PolicySpec.VENDOR_S3,PolicySpec.S3_RESOURCE_BUCKET,"",ctx.getAccount(),PolicySpec.S3_CREATEBUCKET,ctx.getUser()) && Permissions.canAllocate(PolicySpec.VENDOR_S3,PolicySpec.S3_RESOURCE_BUCKET,"",PolicySpec.S3_CREATEBUCKET,ctx.getUser(),1L))) {
    BucketInfo bucket=new BucketInfo(account.getAccountNumber(),ctx.getUser().getUserId(),bucketName,new Date());
    ArrayList<GrantInfo> grantInfos=new ArrayList<GrantInfo>();
    bucket.addGrants(account.getAccountNumber(),grantInfos,accessControlList);
    bucket.setGrants(grantInfos);
    bucket.setBucketSize(0L);
    bucket.setLoggingEnabled(false);
    bucket.setVersioning(WalrusProperties.VersioningStatus.Disabled.toString());
    bucket.setHidden(false);
    if (locationConstraint != null)     bucket.setLocation(locationConstraint);
 else     bucket.setLocation("US");
    db.add(bucket);
    try {
      storageManager.createBucket(bucketName);
      if (WalrusProperties.trackUsageStatistics)       walrusStatistics.incrementBucketCount();
      db.commit();
    }
 catch (    IOException ex) {
      LOG.error(ex);
      db.rollback();
      throw new EucalyptusCloudException("Unable to create bucket: " + bucketName);
    }
  }
  if (WalrusProperties.enableVirtualHosting) {
    if (checkDNSNaming(bucketName)) {
      UpdateARecordType updateARecord=new UpdateARecordType();
      updateARecord.setUserId(account.getAccountNumber());
      URI walrusUri;
      String address=null;
      try {
        walrusUri=new URI(SystemConfiguration.getWalrusUrl());
        address=walrusUri.getHost();
      }
 catch (      URISyntaxException e) {
        throw new EucalyptusCloudException("Could not get Walrus URL");
      }
      String zone=WalrusProperties.WALRUS_SUBDOMAIN + ".";
      updateARecord.setAddress(address);
      updateARecord.setName(bucketName + "." + zone);
      updateARecord.setTtl(604800);
      updateARecord.setZone(zone);
      try {
        ServiceDispatcher.lookupSingle(Components.lookup("dns")).send(updateARecord);
        LOG.info("Mapping " + updateARecord.getName() + " to "+ address);
      }
 catch (      Exception ex) {
        LOG.error("Could not update DNS record",ex);
      }
    }
 else {
      LOG.error("Bucket: " + bucketName + " fails to meet DNS requirements. Unable to create DNS mapping.");
    }
  }
  reply.setBucket(bucketName);
  return reply;
}
