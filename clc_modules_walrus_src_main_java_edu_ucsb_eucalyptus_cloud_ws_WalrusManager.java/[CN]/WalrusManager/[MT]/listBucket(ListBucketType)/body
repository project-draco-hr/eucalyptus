{
  ListBucketResponseType reply=(ListBucketResponseType)request.getReply();
  String bucketName=request.getBucket();
  Context ctx=Contexts.lookup();
  Account account=ctx.getAccount();
  String prefix=request.getPrefix();
  if (prefix == null)   prefix="";
  String marker=request.getMarker();
  int maxKeys=-1;
  String maxKeysString=request.getMaxKeys();
  if (maxKeysString != null)   maxKeys=Integer.parseInt(maxKeysString);
 else   maxKeys=WalrusProperties.MAX_KEYS;
  String delimiter=request.getDelimiter();
  EntityWrapper<BucketInfo> db=EntityWrapper.get(BucketInfo.class);
  BucketInfo bucketInfo=new BucketInfo(bucketName);
  bucketInfo.setHidden(false);
  List<BucketInfo> bucketList=db.query(bucketInfo);
  ArrayList<PrefixEntry> prefixes=new ArrayList<PrefixEntry>();
  if (bucketList.size() > 0) {
    BucketInfo bucket=bucketList.get(0);
    BucketLogData logData=bucket.getLoggingEnabled() ? request.getLogData() : null;
    if (ctx.hasAdministrativePrivileges() || (bucket.canRead(account.getAccountNumber()) && Lookups.checkPrivilege(PolicySpec.S3_LISTBUCKET,PolicySpec.S3_RESOURCE_BUCKET,bucketName,bucket.getOwnerId()))) {
      if (logData != null) {
        updateLogData(bucket,logData);
        reply.setLogData(logData);
      }
      if (Contexts.lookup().hasAdministrativePrivileges()) {
        EntityWrapper<WalrusSnapshotInfo> dbSnap=db.recast(WalrusSnapshotInfo.class);
        WalrusSnapshotInfo walrusSnapInfo=new WalrusSnapshotInfo();
        walrusSnapInfo.setSnapshotBucket(bucketName);
        List<WalrusSnapshotInfo> walrusSnaps=dbSnap.query(walrusSnapInfo);
        if (walrusSnaps.size() > 0) {
          db.rollback();
          throw new NoSuchBucketException(bucketName);
        }
      }
      reply.setName(bucketName);
      reply.setIsTruncated(false);
      if (maxKeys >= 0)       reply.setMaxKeys(maxKeys);
      reply.setPrefix(prefix);
      reply.setMarker(marker);
      if (delimiter != null)       reply.setDelimiter(delimiter);
      EntityWrapper<ObjectInfo> dbObject=db.recast(ObjectInfo.class);
      ObjectInfo searchObjectInfo=new ObjectInfo();
      searchObjectInfo.setBucketName(bucketName);
      searchObjectInfo.setDeleted(false);
      searchObjectInfo.setLast(true);
      List<ObjectInfo> objectInfos=dbObject.query(searchObjectInfo);
      if (objectInfos.size() > 0) {
        int howManyProcessed=0;
        if (marker != null || objectInfos.size() < maxKeys)         Collections.sort(objectInfos);
        ArrayList<ListEntry> contents=new ArrayList<ListEntry>();
        for (        ObjectInfo objectInfo : objectInfos) {
          String objectKey=objectInfo.getObjectKey();
          if (marker != null) {
            if (objectKey.compareTo(marker) <= 0)             continue;
          }
          if (prefix != null) {
            if (!objectKey.startsWith(prefix)) {
              continue;
            }
 else {
              if (delimiter != null) {
                String[] parts=objectKey.substring(prefix.length()).split(delimiter);
                if (parts.length > 1) {
                  String prefixString=parts[0] + delimiter;
                  boolean foundPrefix=false;
                  for (                  PrefixEntry prefixEntry : prefixes) {
                    if (prefixEntry.getPrefix().equals(prefixString)) {
                      foundPrefix=true;
                      break;
                    }
                  }
                  if (!foundPrefix) {
                    prefixes.add(new PrefixEntry(prefixString));
                    if (maxKeys >= 0) {
                      if (howManyProcessed++ >= maxKeys) {
                        reply.setIsTruncated(true);
                        break;
                      }
                    }
                  }
                  continue;
                }
              }
            }
          }
          if (maxKeys >= 0) {
            if (howManyProcessed++ >= maxKeys) {
              reply.setIsTruncated(true);
              break;
            }
          }
          ListEntry listEntry=new ListEntry();
          listEntry.setKey(objectKey);
          listEntry.setEtag(objectInfo.getEtag());
          listEntry.setLastModified(DateUtils.format(objectInfo.getLastModified().getTime(),DateUtils.ISO8601_DATETIME_PATTERN) + ".000Z");
          listEntry.setStorageClass(objectInfo.getStorageClass());
          String displayName=objectInfo.getOwnerId();
          try {
            listEntry.setOwner(new CanonicalUserType(Accounts.lookupAccountById(displayName).getName(),displayName));
          }
 catch (          AuthException e) {
            db.rollback();
            throw new AccessDeniedException("Bucket",bucketName,logData);
          }
          ArrayList<MetaDataEntry> metaData=new ArrayList<MetaDataEntry>();
          objectInfo.returnMetaData(metaData);
          reply.setMetaData(metaData);
          listEntry.setSize(objectInfo.getSize());
          listEntry.setStorageClass(objectInfo.getStorageClass());
          contents.add(listEntry);
        }
        reply.setContents(contents);
        if (prefixes.size() > 0) {
          reply.setCommonPrefixes(prefixes);
        }
      }
    }
 else {
      db.rollback();
      throw new AccessDeniedException("Bucket",bucketName,logData);
    }
  }
 else {
    db.rollback();
    throw new NoSuchBucketException(bucketName);
  }
  db.commit();
  return reply;
}
