{
  SetRESTObjectAccessControlPolicyResponseType reply=(SetRESTObjectAccessControlPolicyResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  Account account=ctx.getAccount();
  AccessControlPolicyType accessControlPolicy=request.getAccessControlPolicy();
  if (accessControlPolicy == null) {
    throw new AccessDeniedException("Key",request.getKey());
  }
  AccessControlListType accessControlList=accessControlPolicy.getAccessControlList();
  String bucketName=request.getBucket();
  String objectKey=request.getKey();
  EntityWrapper<BucketInfo> db=WalrusControl.getEntityWrapper();
  BucketInfo bucketInfo=new BucketInfo(bucketName);
  List<BucketInfo> bucketList=db.query(bucketInfo);
  if (bucketList.size() > 0) {
    BucketInfo bucket=bucketList.get(0);
    BucketLogData logData=bucket.getLoggingEnabled() ? request.getLogData() : null;
    EntityWrapper<ObjectInfo> dbObject=db.recast(ObjectInfo.class);
    ObjectInfo searchObjectInfo=new ObjectInfo(bucketName,objectKey);
    if (bucket.isVersioningEnabled()) {
      if (request.getVersionId() == null)       searchObjectInfo.setLast(true);
    }
    String versionId=request.getVersionId() != null ? request.getVersionId() : WalrusProperties.NULL_VERSION_ID;
    searchObjectInfo.setVersionId(versionId);
    searchObjectInfo.setDeleted(false);
    List<ObjectInfo> objectInfos=dbObject.query(searchObjectInfo);
    if (objectInfos.size() > 0) {
      ObjectInfo objectInfo=objectInfos.get(0);
      if (!ctx.hasAdministrativePrivileges() && !(objectInfo.canWriteACP(account.getId()) && Lookups.checkPrivilege(PolicySpec.S3_PUTOBJECTACL,PolicySpec.S3_RESOURCE_OBJECT,PolicySpec.objectFullName(bucketName,objectKey),objectInfo.getOwnerId()))) {
        db.rollback();
        throw new AccessDeniedException("Key",objectKey,logData);
      }
      List<GrantInfo> grantInfos=new ArrayList<GrantInfo>();
      objectInfo.resetGlobalGrants();
      objectInfo.addGrants(objectInfo.getOwnerId(),grantInfos,accessControlList);
      objectInfo.setGrants(grantInfos);
      if (WalrusProperties.enableTorrents) {
        if (!objectInfo.isGlobalRead()) {
          EntityWrapper<TorrentInfo> dbTorrent=db.recast(TorrentInfo.class);
          TorrentInfo torrentInfo=new TorrentInfo(bucketName,objectKey);
          List<TorrentInfo> torrentInfos=dbTorrent.query(torrentInfo);
          if (torrentInfos.size() > 0) {
            TorrentInfo foundTorrentInfo=torrentInfos.get(0);
            TorrentClient torrentClient=Torrents.getClient(bucketName + objectKey);
            if (torrentClient != null) {
              torrentClient.bye();
            }
            dbTorrent.delete(foundTorrentInfo);
          }
        }
      }
 else {
        LOG.warn("Bittorrent support has been disabled. Please check pre-requisites");
      }
      if (logData != null) {
        updateLogData(bucket,logData);
        logData.setObjectSize(objectInfo.getSize());
        reply.setLogData(logData);
      }
      reply.setCode("204");
      reply.setDescription("OK");
    }
 else {
      db.rollback();
      throw new NoSuchEntityException(objectKey,logData);
    }
  }
 else {
    db.rollback();
    throw new NoSuchBucketException(bucketName);
  }
  db.commit();
  return reply;
}
