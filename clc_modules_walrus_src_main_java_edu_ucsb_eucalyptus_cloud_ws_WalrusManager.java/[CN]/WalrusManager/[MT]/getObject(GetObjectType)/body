{
  GetObjectResponseType reply=(GetObjectResponseType)request.getReply();
  String bucketName=request.getBucket();
  String objectKey=request.getKey();
  String userId=request.getUserId();
  Boolean deleteAfterGet=request.getDeleteAfterGet();
  if (deleteAfterGet == null)   deleteAfterGet=false;
  Boolean getTorrent=request.getGetTorrent();
  if (getTorrent == null)   getTorrent=false;
  Boolean getMetaData=request.getGetMetaData();
  if (getMetaData == null)   getMetaData=false;
  EntityWrapper<BucketInfo> db=WalrusControl.getEntityWrapper();
  BucketInfo bucketInfo=new BucketInfo(bucketName);
  List<BucketInfo> bucketList=db.query(bucketInfo);
  if (bucketList.size() > 0) {
    BucketInfo bucket=bucketList.get(0);
    BucketLogData logData=bucket.getLoggingEnabled() ? request.getLogData() : null;
    EntityWrapper<ObjectInfo> dbObject=db.recast(ObjectInfo.class);
    ObjectInfo searchObjectInfo=new ObjectInfo(bucketName,objectKey);
    List<ObjectInfo> objectInfos=dbObject.query(searchObjectInfo);
    if (objectInfos.size() > 0) {
      ObjectInfo objectInfo=objectInfos.get(0);
      if (objectInfo.canRead(userId)) {
        String objectName=objectInfo.getObjectName();
        DefaultHttpResponse httpResponse=new DefaultHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.OK);
        if (getMetaData) {
          List<MetaDataInfo> metaDataInfos=objectInfo.getMetaData();
          for (          MetaDataInfo metaDataInfo : metaDataInfos) {
            httpResponse.addHeader(WalrusProperties.AMZ_META_HEADER_PREFIX + metaDataInfo.getName(),metaDataInfo.getValue());
          }
        }
        if (getTorrent) {
          if (objectInfo.isGlobalRead()) {
            if (!WalrusProperties.enableTorrents) {
              LOG.warn("Bittorrent support has been disabled. Please check pre-requisites");
              throw new EucalyptusCloudException("Torrents disabled");
            }
            EntityWrapper<TorrentInfo> dbTorrent=WalrusControl.getEntityWrapper();
            TorrentInfo torrentInfo=new TorrentInfo(bucketName,objectKey);
            TorrentInfo foundTorrentInfo;
            String absoluteObjectPath=storageManager.getObjectPath(bucketName,objectName);
            try {
              foundTorrentInfo=dbTorrent.getUnique(torrentInfo);
            }
 catch (            EucalyptusCloudException ex) {
              String torrentFile=objectName + ".torrent";
              String torrentFilePath=storageManager.getObjectPath(bucketName,torrentFile);
              TorrentCreator torrentCreator=new TorrentCreator(absoluteObjectPath,objectKey,objectName,torrentFilePath,WalrusProperties.getTrackerUrl());
              try {
                torrentCreator.create();
              }
 catch (              Exception e) {
                LOG.error(e);
                throw new EucalyptusCloudException("could not create torrent file " + torrentFile);
              }
              torrentInfo.setTorrentFile(torrentFile);
              dbTorrent.add(torrentInfo);
              foundTorrentInfo=torrentInfo;
            }
            dbTorrent.commit();
            String torrentFile=foundTorrentInfo.getTorrentFile();
            String torrentFilePath=storageManager.getObjectPath(bucketName,torrentFile);
            TorrentClient torrentClient=new TorrentClient(torrentFilePath,absoluteObjectPath);
            Torrents.addClient(bucketName + objectKey,torrentClient);
            torrentClient.start();
            String key=bucketName + "." + objectKey;
            String randomKey=key + "." + Hashes.getRandom(10);
            request.setRandomKey(randomKey);
            File torrent=new File(torrentFilePath);
            if (torrent.exists()) {
              Date lastModified=objectInfo.getLastModified();
              db.commit();
              long torrentLength=torrent.length();
              storageManager.sendObject(request.getChannel(),httpResponse,bucketName,torrentFile,torrentLength,null,DateUtils.format(lastModified.getTime(),DateUtils.ISO8601_DATETIME_PATTERN) + ".000Z","application/x-bittorrent","attachment; filename=" + objectKey + ".torrent;",request.getIsCompressed());
              if (WalrusProperties.trackUsageStatistics) {
                walrusStatistics.updateBytesOut(torrentLength);
              }
              if (logData != null) {
                updateLogData(bucket,logData);
                logData.setObjectSize(torrentLength);
                reply.setLogData(logData);
              }
              return null;
            }
 else {
              db.rollback();
              String errorString="Could not get torrent file " + torrentFilePath;
              LOG.error(errorString);
              throw new EucalyptusCloudException(errorString);
            }
          }
 else {
            db.rollback();
            throw new AccessDeniedException("Key",objectKey,logData);
          }
        }
        Date lastModified=objectInfo.getLastModified();
        Long size=objectInfo.getSize();
        String etag=objectInfo.getEtag();
        String contentType=objectInfo.getContentType();
        String contentDisposition=objectInfo.getContentDisposition();
        db.commit();
        if (request.getGetData()) {
          if (request.getInlineData()) {
            try {
              byte[] bytes=new byte[102400];
              int bytesRead=0;
              String base64Data="";
              while ((bytesRead=storageManager.readObject(bucketName,objectName,bytes,bytesRead)) > 0) {
                base64Data+=new String(bytes,0,bytesRead);
              }
              reply.setBase64Data(base64Data);
            }
 catch (            IOException ex) {
              db.rollback();
              LOG.error(ex);
              throw new EucalyptusCloudException("Unable to read object: " + bucketName + "/"+ objectName);
            }
          }
 else {
            if (WalrusProperties.trackUsageStatistics) {
              walrusStatistics.updateBytesOut(objectInfo.getSize());
            }
            storageManager.sendObject(request.getChannel(),httpResponse,bucketName,objectName,size,etag,DateUtils.format(lastModified.getTime(),DateUtils.ISO8601_DATETIME_PATTERN) + ".000Z",contentType,contentDisposition,request.getIsCompressed());
            return null;
          }
        }
 else {
          storageManager.sendHeaders(request.getChannel(),httpResponse,size,etag,DateUtils.format(lastModified.getTime(),DateUtils.ISO8601_DATETIME_PATTERN) + ".000Z",contentType,contentDisposition);
          return null;
        }
        reply.setEtag(etag);
        reply.setLastModified(DateUtils.format(lastModified,DateUtils.ISO8601_DATETIME_PATTERN) + ".000Z");
        reply.setSize(size);
        reply.setContentType(contentType);
        reply.setContentDisposition(contentDisposition);
        Status status=new Status();
        status.setCode(200);
        status.setDescription("OK");
        reply.setStatus(status);
        return reply;
      }
 else {
        db.rollback();
        throw new AccessDeniedException("Key",objectKey,logData);
      }
    }
 else {
      db.rollback();
      throw new NoSuchEntityException(objectKey,logData);
    }
  }
 else {
    db.rollback();
    throw new NoSuchBucketException(bucketName);
  }
}
