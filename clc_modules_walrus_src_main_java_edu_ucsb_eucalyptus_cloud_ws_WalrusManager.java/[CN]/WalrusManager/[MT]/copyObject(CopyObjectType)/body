{
  CopyObjectResponseType reply=(CopyObjectResponseType)request.getReply();
  User user=Contexts.lookup().getUser();
  String userId=Contexts.lookup().getUserFullName().getUserId();
  String sourceBucket=request.getSourceBucket();
  String sourceKey=request.getSourceObject();
  String sourceVersionId=request.getSourceVersionId();
  String destinationBucket=request.getDestinationBucket();
  String destinationKey=request.getDestinationObject();
  String metadataDirective=request.getMetadataDirective();
  AccessControlListType accessControlList=request.getAccessControlList();
  String copyIfMatch=request.getCopySourceIfMatch();
  String copyIfNoneMatch=request.getCopySourceIfNoneMatch();
  Date copyIfUnmodifiedSince=request.getCopySourceIfUnmodifiedSince();
  Date copyIfModifiedSince=request.getCopySourceIfModifiedSince();
  if (metadataDirective == null)   metadataDirective="COPY";
  EntityWrapper<BucketInfo> db=WalrusControl.getEntityWrapper();
  BucketInfo bucketInfo=new BucketInfo(sourceBucket);
  List<BucketInfo> bucketList=db.query(bucketInfo);
  if (bucketList.size() > 0) {
    EntityWrapper<ObjectInfo> dbObject=db.recast(ObjectInfo.class);
    ObjectInfo searchObjectInfo=new ObjectInfo(sourceBucket,sourceKey);
    searchObjectInfo.setVersionId(sourceVersionId);
    if (sourceVersionId == null)     searchObjectInfo.setLast(true);
    List<ObjectInfo> objectInfos=dbObject.query(searchObjectInfo);
    if (objectInfos.size() > 0) {
      ObjectInfo sourceObjectInfo=objectInfos.get(0);
      if (sourceObjectInfo.canRead(user)) {
        if (copyIfMatch != null) {
          if (!copyIfMatch.equals(sourceObjectInfo.getEtag())) {
            db.rollback();
            throw new PreconditionFailedException(sourceKey + " CopySourceIfMatch: " + copyIfMatch);
          }
        }
        if (copyIfNoneMatch != null) {
          if (copyIfNoneMatch.equals(sourceObjectInfo.getEtag())) {
            db.rollback();
            throw new PreconditionFailedException(sourceKey + " CopySourceIfNoneMatch: " + copyIfNoneMatch);
          }
        }
        if (copyIfUnmodifiedSince != null) {
          long unmodifiedTime=copyIfUnmodifiedSince.getTime();
          long objectTime=sourceObjectInfo.getLastModified().getTime();
          if (unmodifiedTime < objectTime) {
            db.rollback();
            throw new PreconditionFailedException(sourceKey + " CopySourceIfUnmodifiedSince: " + copyIfUnmodifiedSince.toString());
          }
        }
        if (copyIfModifiedSince != null) {
          long modifiedTime=copyIfModifiedSince.getTime();
          long objectTime=sourceObjectInfo.getLastModified().getTime();
          if (modifiedTime > objectTime) {
            db.rollback();
            throw new PreconditionFailedException(sourceKey + " CopySourceIfModifiedSince: " + copyIfModifiedSince.toString());
          }
        }
        BucketInfo destinationBucketInfo=new BucketInfo(destinationBucket);
        List<BucketInfo> destinationBuckets=db.query(destinationBucketInfo);
        if (destinationBuckets.size() > 0) {
          BucketInfo foundDestinationBucketInfo=destinationBuckets.get(0);
          if (foundDestinationBucketInfo.canWrite(userId)) {
            String destinationVersionId=sourceVersionId;
            ObjectInfo destinationObjectInfo=null;
            String destinationObjectName;
            ObjectInfo destSearchObjectInfo=new ObjectInfo(destinationBucket,destinationKey);
            if (foundDestinationBucketInfo.isVersioningEnabled()) {
              if (sourceVersionId != null)               destinationVersionId=sourceVersionId;
 else               destinationVersionId=UUID.randomUUID().toString().replaceAll("-","");
            }
 else {
              destinationVersionId=WalrusProperties.NULL_VERSION_ID;
            }
            destSearchObjectInfo.setVersionId(destinationVersionId);
            List<ObjectInfo> destinationObjectInfos=dbObject.query(destSearchObjectInfo);
            if (destinationObjectInfos.size() > 0) {
              destinationObjectInfo=destinationObjectInfos.get(0);
              if (!destinationObjectInfo.canWrite(userId)) {
                db.rollback();
                throw new AccessDeniedException("Key",destinationKey);
              }
            }
            boolean addNew=false;
            if (destinationObjectInfo == null) {
              addNew=true;
              destinationObjectInfo=new ObjectInfo();
              List<GrantInfo> grantInfos=new ArrayList<GrantInfo>();
              destinationObjectInfo.setBucketName(destinationBucket);
              destinationObjectInfo.setObjectKey(destinationKey);
              destinationObjectInfo.addGrants(userId,grantInfos,accessControlList);
              destinationObjectInfo.setGrants(grantInfos);
              destinationObjectInfo.setObjectName(UUID.randomUUID().toString());
            }
 else {
              if (destinationObjectInfo.canWriteACP(userId)) {
                List<GrantInfo> grantInfos=new ArrayList<GrantInfo>();
                destinationObjectInfo.addGrants(userId,grantInfos,accessControlList);
                destinationObjectInfo.setGrants(grantInfos);
              }
            }
            destinationObjectInfo.setSize(sourceObjectInfo.getSize());
            destinationObjectInfo.setStorageClass(sourceObjectInfo.getStorageClass());
            destinationObjectInfo.setOwnerId(sourceObjectInfo.getOwnerId());
            destinationObjectInfo.setContentType(sourceObjectInfo.getContentType());
            destinationObjectInfo.setContentDisposition(sourceObjectInfo.getContentDisposition());
            String etag=sourceObjectInfo.getEtag();
            Date lastModified=sourceObjectInfo.getLastModified();
            destinationObjectInfo.setEtag(etag);
            destinationObjectInfo.setLastModified(lastModified);
            destinationObjectInfo.setVersionId(destinationVersionId);
            destinationObjectInfo.setLast(true);
            destinationObjectInfo.setDeleted(false);
            if (!metadataDirective.equals("REPLACE")) {
              destinationObjectInfo.setMetaData(sourceObjectInfo.cloneMetaData());
            }
 else {
              List<MetaDataEntry> metaData=request.getMetaData();
              if (metaData != null)               destinationObjectInfo.replaceMetaData(metaData);
            }
            String sourceObjectName=sourceObjectInfo.getObjectName();
            destinationObjectName=destinationObjectInfo.getObjectName();
            try {
              storageManager.copyObject(sourceBucket,sourceObjectName,destinationBucket,destinationObjectName);
              if (WalrusProperties.trackUsageStatistics)               walrusStatistics.updateSpaceUsed(sourceObjectInfo.getSize());
            }
 catch (            Exception ex) {
              LOG.error(ex);
              db.rollback();
              throw new EucalyptusCloudException("Could not rename " + sourceObjectName + " to "+ destinationObjectName);
            }
            if (addNew)             dbObject.add(destinationObjectInfo);
            ObjectInfo deleteMarker=new ObjectInfo(destinationBucket,destinationKey);
            deleteMarker.setDeleted(true);
            try {
              ObjectInfo foundDeleteMarker=dbObject.getUnique(deleteMarker);
              dbObject.delete(foundDeleteMarker);
            }
 catch (            EucalyptusCloudException ex) {
              LOG.trace("No delete marker found for: " + destinationBucket + "/"+ destinationKey);
            }
            reply.setEtag(etag);
            reply.setLastModified(DateUtils.format(lastModified.getTime(),DateUtils.ISO8601_DATETIME_PATTERN) + ".000Z");
            if (foundDestinationBucketInfo.isVersioningEnabled()) {
              reply.setCopySourceVersionId(sourceVersionId);
              reply.setVersionId(destinationVersionId);
            }
            db.commit();
            return reply;
          }
 else {
            db.rollback();
            throw new AccessDeniedException("Bucket",destinationBucket);
          }
        }
 else {
          db.rollback();
          throw new NoSuchBucketException(destinationBucket);
        }
      }
 else {
        db.rollback();
        throw new AccessDeniedException("Key",sourceKey);
      }
    }
 else {
      db.rollback();
      throw new NoSuchEntityException(sourceKey);
    }
  }
 else {
    db.rollback();
    throw new NoSuchBucketException(sourceBucket);
  }
}
