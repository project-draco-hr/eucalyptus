{
  GetBucketLoggingStatusResponseType reply=(GetBucketLoggingStatusResponseType)request.getReply();
  String bucket=request.getBucket();
  Context ctx=Contexts.lookup();
  EntityWrapper<BucketInfo> db=EntityWrapper.get(BucketInfo.class);
  try {
    BucketInfo bucketInfo=db.getUniqueEscape(new BucketInfo(bucket));
    if (ctx.hasAdministrativePrivileges() || Lookups.checkPrivilege(PolicySpec.S3_GETBUCKETLOGGING,PolicySpec.VENDOR_S3,PolicySpec.S3_RESOURCE_BUCKET,bucket,bucketInfo.getOwnerId())) {
      if (bucketInfo.getLoggingEnabled()) {
        String targetBucket=bucketInfo.getTargetBucket();
        ArrayList<Grant> grants=new ArrayList<Grant>();
        try {
          BucketInfo targetBucketInfo=db.getUniqueEscape(new BucketInfo(targetBucket));
          List<GrantInfo> grantInfos=targetBucketInfo.getGrants();
          addGrants(grants,grantInfos);
        }
 catch (        EucalyptusCloudException ex) {
          db.rollback();
          throw new InvalidTargetBucketForLoggingException(targetBucket);
        }
        LoggingEnabled loggingEnabled=new LoggingEnabled();
        loggingEnabled.setTargetBucket(bucketInfo.getTargetBucket());
        loggingEnabled.setTargetPrefix(bucketInfo.getTargetPrefix());
        TargetGrants targetGrants=new TargetGrants();
        targetGrants.setGrants(grants);
        loggingEnabled.setTargetGrants(targetGrants);
        reply.setLoggingEnabled(loggingEnabled);
      }
    }
 else {
      LOG.error("Not authorized to get bucket logging status by " + ctx.getUserFullName());
      db.rollback();
      throw new AccessDeniedException("Bucket",bucketInfo.getBucketName());
    }
  }
 catch (  EucalyptusCloudException ex) {
    db.rollback();
    throw new NoSuchBucketException(bucket);
  }
  db.commit();
  return reply;
}
