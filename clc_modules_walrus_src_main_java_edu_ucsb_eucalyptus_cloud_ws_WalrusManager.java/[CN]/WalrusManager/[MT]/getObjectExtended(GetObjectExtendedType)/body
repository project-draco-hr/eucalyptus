{
  GetObjectExtendedResponseType reply=(GetObjectExtendedResponseType)request.getReply();
  Date ifModifiedSince=request.getIfModifiedSince();
  Date ifUnmodifiedSince=request.getIfUnmodifiedSince();
  String ifMatch=request.getIfMatch();
  String ifNoneMatch=request.getIfNoneMatch();
  boolean returnCompleteObjectOnFailure=request.getReturnCompleteObjectOnConditionFailure();
  String bucketName=request.getBucket();
  String objectKey=request.getKey();
  Context ctx=Contexts.lookup();
  Account account=ctx.getAccount();
  Status status=new Status();
  Boolean getData=request.getGetData();
  if (getData == null) {
    getData=false;
  }
  EntityWrapper<BucketInfo> db=EntityWrapper.get(BucketInfo.class);
  BucketInfo bucketInfo=new BucketInfo(bucketName);
  List<BucketInfo> bucketList=db.query(bucketInfo);
  if (bucketList.size() > 0) {
    BucketInfo bucket=bucketList.get(0);
    BucketLogData logData=bucket.getLoggingEnabled() ? request.getLogData() : null;
    boolean versioning=false;
    if (bucket.isVersioningEnabled()) {
      versioning=true;
    }
    EntityWrapper<ObjectInfo> dbObject=db.recast(ObjectInfo.class);
    ObjectInfo searchObjectInfo=new ObjectInfo(bucketName,objectKey);
    List<ObjectInfo> objectInfos=dbObject.query(searchObjectInfo);
    if (objectInfos.size() > 0) {
      ObjectInfo objectInfo=objectInfos.get(0);
      if (ctx.hasAdministrativePrivileges() || (objectInfo.canRead(account.getAccountNumber()) && (objectInfo.isGlobalRead() || Lookups.checkPrivilege(PolicySpec.S3_GETOBJECT,PolicySpec.VENDOR_S3,PolicySpec.S3_RESOURCE_OBJECT,PolicySpec.objectFullName(bucketName,objectKey),null)))) {
        String etag=objectInfo.getEtag();
        String objectName=objectInfo.getObjectName();
        Long byteRangeStart=request.getByteRangeStart();
        Long byteRangeEnd=request.getByteRangeEnd();
        DefaultHttpResponse httpResponse=null;
        if (byteRangeStart != null || byteRangeEnd != null) {
          httpResponse=new DefaultHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.PARTIAL_CONTENT);
        }
 else {
          httpResponse=new DefaultHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.OK);
        }
        if (byteRangeStart == null) {
          byteRangeStart=0L;
        }
        if (byteRangeEnd == null) {
          byteRangeEnd=-1L;
        }
        if (byteRangeEnd == -1)         byteRangeEnd=objectInfo.getSize() - 1;
        if ((byteRangeStart > objectInfo.getSize()) || (byteRangeStart > byteRangeEnd) || ((byteRangeEnd + 1) > objectInfo.getSize())|| (byteRangeStart < 0 || byteRangeEnd < 0)) {
          throw new InvalidRangeException("Range: " + byteRangeStart + "-"+ byteRangeEnd+ "object: "+ bucketName+ "/"+ objectKey);
        }
        if (ifMatch != null) {
          if (!ifMatch.equals(etag) && !returnCompleteObjectOnFailure) {
            db.rollback();
            throw new PreconditionFailedException(objectKey + " etag: " + etag);
          }
        }
        if (ifNoneMatch != null) {
          if (ifNoneMatch.equals(etag) && !returnCompleteObjectOnFailure) {
            db.rollback();
            throw new NotModifiedException(objectKey + " ETag: " + etag);
          }
        }
        Date lastModified=objectInfo.getLastModified();
        if (ifModifiedSince != null) {
          if ((ifModifiedSince.getTime() >= lastModified.getTime()) && !returnCompleteObjectOnFailure) {
            db.rollback();
            throw new NotModifiedException(objectKey + " LastModified: " + lastModified.toString());
          }
        }
        if (ifUnmodifiedSince != null) {
          if ((ifUnmodifiedSince.getTime() < lastModified.getTime()) && !returnCompleteObjectOnFailure) {
            db.rollback();
            throw new PreconditionFailedException(objectKey + " lastModified: " + lastModified.toString());
          }
        }
        if (request.getGetMetaData()) {
          List<MetaDataInfo> metaDataInfos=objectInfo.getMetaData();
          for (          MetaDataInfo metaDataInfo : metaDataInfos) {
            httpResponse.addHeader(WalrusProperties.AMZ_META_HEADER_PREFIX + metaDataInfo.getName(),metaDataInfo.getValue());
          }
        }
        Long size=objectInfo.getSize();
        String contentType=objectInfo.getContentType();
        String contentDisposition=objectInfo.getContentDisposition();
        db.commit();
        if (logData != null) {
          updateLogData(bucket,logData);
          logData.setObjectSize(size);
        }
        String versionId=null;
        if (versioning) {
          versionId=objectInfo.getVersionId() != null ? objectInfo.getVersionId() : WalrusProperties.NULL_VERSION_ID;
        }
        if (request.getGetData()) {
          if (WalrusProperties.trackUsageStatistics) {
            walrusStatistics.updateBytesOut(size);
          }
          storageManager.sendObject(request,httpResponse,bucketName,objectName,byteRangeStart,byteRangeEnd + 1,size,etag,DateUtils.format(lastModified.getTime(),DateUtils.ISO8601_DATETIME_PATTERN + ".000Z"),contentType,contentDisposition,request.getIsCompressed(),versionId,logData);
          return null;
        }
 else {
          storageManager.sendHeaders(request,httpResponse,size,etag,DateUtils.format(lastModified.getTime(),DateUtils.ISO8601_DATETIME_PATTERN + ".000Z"),contentType,contentDisposition,versionId,logData);
          return null;
        }
      }
 else {
        db.rollback();
        if (getData) {
          throw new AccessDeniedException("Key",objectKey,logData);
        }
 else {
          throw new HeadAccessDeniedException("Key",objectKey,logData);
        }
      }
    }
 else {
      db.rollback();
      if (getData) {
        throw new NoSuchEntityException(objectKey);
      }
 else {
        throw new HeadNoSuchEntityException(objectKey);
      }
    }
  }
 else {
    db.rollback();
    if (getData) {
      throw new NoSuchBucketException(bucketName);
    }
 else {
      throw new HeadNoSuchBucketException(bucketName);
    }
  }
}
