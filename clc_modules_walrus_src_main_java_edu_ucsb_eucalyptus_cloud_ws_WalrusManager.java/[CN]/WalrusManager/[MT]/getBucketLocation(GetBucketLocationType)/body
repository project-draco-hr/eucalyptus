{
  GetBucketLocationResponseType reply=(GetBucketLocationResponseType)request.getReply();
  String bucketName=request.getBucket();
  Context ctx=Contexts.lookup();
  Account account=ctx.getAccount();
  EntityWrapper<BucketInfo> db=EntityWrapper.get(BucketInfo.class);
  BucketInfo bucketInfo=new BucketInfo(bucketName);
  List<BucketInfo> bucketList=db.query(bucketInfo);
  if (bucketList.size() > 0) {
    BucketInfo bucket=bucketList.get(0);
    BucketLogData logData=bucket.getLoggingEnabled() ? request.getLogData() : null;
    if (ctx.hasAdministrativePrivileges() || (bucket.canRead(account.getAccountNumber()) && Lookups.checkPrivilege(PolicySpec.S3_GETBUCKETLOCATION,PolicySpec.S3_RESOURCE_BUCKET,bucketName,bucket.getOwnerId()))) {
      if (logData != null) {
        updateLogData(bucket,logData);
        reply.setLogData(logData);
      }
      String location=bucket.getLocation();
      if (location == null) {
        location="NotSupported";
      }
      reply.setLocationConstraint(location);
    }
 else {
      db.rollback();
      throw new AccessDeniedException("Bucket",bucketName,logData);
    }
  }
 else {
    db.rollback();
    throw new NoSuchBucketException(bucketName);
  }
  db.commit();
  return reply;
}
