{
  Ats classAts=Ats.from(c);
  Ats fieldAts=Ats.from(field);
  if (classAts.has(ConfigurableClass.class) && fieldAts.has(ConfigurableField.class)) {
    ConfigurableClass classAnnote=classAts.get(ConfigurableClass.class);
    ConfigurableField annote=fieldAts.get(ConfigurableField.class);
    String description=annote.description();
    String defaultValue=annote.initial();
    String fqPrefix=classAnnote.root();
    String fq=fqPrefix + "." + field.getName().toLowerCase();
    String alias=classAnnote.alias();
    PropertyTypeParser p=PropertyTypeParser.get(field.getType());
    ConfigurableProperty entry=null;
    Class<? extends PropertyChangeListener> changeListenerClass=annote.changeListener();
    PropertyChangeListener changeListener=PropertyChangeListeners.getListenerFromClass(changeListenerClass);
    int modifiers=field.getModifiers();
    if (Modifier.isPublic(modifiers) && Modifier.isStatic(modifiers)) {
      boolean readOnly=Modifier.isFinal(modifiers) || annote.readonly();
      entry=new StaticPropertyEntry(c,fqPrefix,field,description,defaultValue,p,readOnly,annote.displayName(),annote.type(),alias,changeListener);
      return entry;
    }
  }
  return null;
}
