{
  if (errors != null && Hosts.isCoordinator() && Bootstrap.isFinished() && !Databases.isVolatile()) {
    try {
      final EntityTransaction db=Entities.get(CheckException.class);
      try {
        List<CheckException> list=Entities.query(new CheckException(parent.getFullName().toString()));
        for (        CheckException old : list) {
          Logs.extreme().debug("Purging fault: " + old,old);
          Entities.delete(old);
        }
        db.commit();
      }
 catch (      final Exception ex) {
        LOG.error("Failed to persist error information for: " + errors,ex);
        db.rollback();
      }
      for (      final CheckException e : errors) {
        final EntityTransaction db2=Entities.get(CheckException.class);
        try {
          Entities.persist(e);
          db2.commit();
        }
 catch (        final Exception ex) {
          LOG.error("Failed to persist error information for: " + errors,ex);
          db2.rollback();
        }
      }
    }
 catch (    Exception ex) {
      LOG.error("Faults: error in processing previous error: " + errors);
      Logs.extreme().error(ex,ex);
    }
  }
}
