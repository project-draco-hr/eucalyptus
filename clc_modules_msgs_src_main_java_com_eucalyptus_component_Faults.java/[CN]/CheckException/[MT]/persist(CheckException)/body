{
  if (errors != null && Bootstrap.isFinished() && !Databases.isVolatile() && Hosts.isCoordinator()) {
    try {
      for (      final CheckException e : errors) {
        final EntityTransaction db=Entities.get(CheckException.class);
        try {
          List<CheckException> list=Entities.query(new CheckException(e.getServiceName()));
          for (          CheckException old : list) {
            LOG.debug("Purging fault: " + old.getMessage());
            Logs.extreme().debug("Purging fault: " + old,old);
            Entities.delete(old);
          }
          Entities.persist(e);
          db.commit();
        }
 catch (        final Exception ex) {
          LOG.error("Failed to persist error information for: " + errors,ex);
          db.rollback();
          final EntityTransaction db2=Entities.get(CheckException.class);
          try {
            Entities.persist(e);
            db2.commit();
          }
 catch (          final Exception ex2) {
            LOG.error("Failed to persist error information for: " + errors,ex2);
            db2.rollback();
          }
        }
      }
    }
 catch (    Exception ex) {
      LOG.error("Faults: error in processing previous error: " + errors);
      Logs.extreme().error(ex,ex);
    }
  }
}
