{
  LOG.trace(this.getClass().getSimpleName() + "[outgoing]: " + e);
  if (e instanceof MessageEvent) {
    final MessageEvent msge=(MessageEvent)e;
    if (msge.getMessage() instanceof NullPayload) {
      msge.getFuture().cancel();
    }
 else     if (msge.getMessage() instanceof HttpResponse) {
      ctx.sendDownstream(e);
    }
 else     if (msge.getMessage() instanceof IsData) {
      ctx.sendDownstream(e);
    }
 else     if (msge.getMessage() instanceof EucalyptusMessage) {
      final MappingHttpMessage request=this.requestLocal.get(ctx.getChannel());
      EucalyptusMessage reply=(EucalyptusMessage)((MessageEvent)e).getMessage();
      if (reply == null) {
        LOG.warn("Received a null response for request: " + request.getMessageString());
        reply=new EucalyptusErrorMessageType(this.getClass().getSimpleName(),(EucalyptusMessage)request.getMessage(),"Received a NULL reply");
      }
      LOG.info(EventRecord.create(Component.eucalyptus,reply.getUserId(),reply.getCorrelationId(),EventType.MSG_SERVICED,reply.getClass().getSimpleName()));
      if (reply instanceof WalrusDataGetResponseType) {
        if (reply instanceof GetObjectResponseType) {
          final GetObjectResponseType getObjectResponse=(GetObjectResponseType)reply;
          LOG.debug(getObjectResponse);
          if (getObjectResponse.getBase64Data() == null) {
            e.getFuture().cancel();
          }
        }
 else {
          e.getFuture().cancel();
        }
      }
 else {
        final MappingHttpResponse response=new MappingHttpResponse(request.getProtocolVersion());
        final DownstreamMessageEvent newEvent=new DownstreamMessageEvent(ctx.getChannel(),e.getFuture(),response,null);
        response.setMessage(reply);
        e=newEvent;
      }
    }
 else {
      e.getFuture().cancel();
      LOG.debug("Non-specific type being written to the channel. Not dropping this message causes breakage.");
    }
  }
  if (e.getFuture().isCancelled()) {
    LOG.debug("Cancelling send on : " + LogUtil.dumpObject(e));
  }
 else {
    ctx.sendDownstream(e);
  }
}
