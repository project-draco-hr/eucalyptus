{
  LOG.trace(this.getClass().getSimpleName() + "[incoming]: " + e);
  if (e instanceof ExceptionEvent) {
    this.exceptionCaught(ctx,(ExceptionEvent)e);
  }
 else   if (e instanceof MessageEvent) {
    this.startTime.compareAndSet(0l,System.currentTimeMillis());
    final MessageEvent event=(MessageEvent)e;
    if (event.getMessage() instanceof MappingHttpMessage) {
      final MappingHttpMessage request=(MappingHttpMessage)event.getMessage();
      final User user=request.getUser();
      this.requestLocal.set(ctx.getChannel(),request);
      final EucalyptusMessage msg=(EucalyptusMessage)request.getMessage();
      final String userAgent=request.getHeader(HttpHeaders.Names.USER_AGENT);
      if (msg.getCorrelationId() == null) {
        msg.setCorrelationId(UUID.randomUUID().toString());
      }
      if ((userAgent != null) && userAgent.matches(".*EucalyptusAdminAccess") && msg.getClass().getSimpleName().startsWith("Describe")) {
        msg.setEffectiveUserId(msg.getUserId());
      }
 else       if ((user != null) && (this.msgReceiver == null)) {
        msg.setUserId(user.getUserName());
        msg.setEffectiveUserId(user.getIsAdministrator() ? Component.eucalyptus.name() : user.getUserName());
      }
      LOG.trace(EventRecord.here(Component.eucalyptus,EventType.MSG_RECEIVED,msg.getClass().getSimpleName()));
      ReplyQueue.addReplyListener(msg.getCorrelationId(),ctx);
      if (this.msgReceiver == null) {
        Messaging.dispatch("vm://RequestQueue",msg);
      }
 else       if ((user == null) || ((user != null) && user.getIsAdministrator())) {
        try {
          final MuleMessage reply=this.msgReceiver.routeMessage(new DefaultMuleMessage(msg),true);
          if (reply != null) {
            ReplyQueue.handle(this.msgReceiver.getService().getName(),reply,msg);
          }
 else {
            ReplyQueue.removeReplyListener(msg.getCorrelationId());
            ctx.getChannel().write(new MappingHttpResponse(request.getProtocolVersion(),HttpResponseStatus.INTERNAL_SERVER_ERROR)).addListener(ChannelFutureListener.CLOSE);
          }
        }
 catch (        Exception e1) {
          LOG.error(e1,e1);
          EucalyptusErrorMessageType errMsg=new EucalyptusErrorMessageType(this.msgReceiver.getService().getName(),msg,(e1.getCause() != null ? e1.getCause() : e1).getMessage());
          errMsg.setCorrelationId(msg.getCorrelationId());
          errMsg.setException(e1.getCause() != null ? e1.getCause() : e1);
          new ReplyQueue().handle(errMsg);
        }
      }
 else {
        ctx.getChannel().write(new MappingHttpResponse(request.getProtocolVersion(),HttpResponseStatus.FORBIDDEN));
      }
    }
 else     if (e instanceof IdleStateEvent) {
      LOG.warn("Closing idle connection: " + e);
      e.getFuture().addListener(ChannelFutureListener.CLOSE);
      ctx.sendUpstream(e);
    }
  }
}
