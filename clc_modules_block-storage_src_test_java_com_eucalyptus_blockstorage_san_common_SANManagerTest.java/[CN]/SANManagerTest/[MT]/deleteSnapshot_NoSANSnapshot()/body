{
  final String volId="foo";
  final String iqn="foo-iqn";
  final SANVolumeInfo existing=new SANVolumeInfo(volId).withSanVolumeId("fooprefix" + volId + "foosuffix");
  existing.setIqn(iqn);
  try (TransactionResource tran=Entities.transactionFor(SANVolumeInfo.class)){
    Entities.persist(existing);
    tran.commit();
  }
   final SANProvider sanProvider=context.mock(SANProvider.class);
  context.checking(new Expectations(){
{
      oneOf(sanProvider).deleteVolume(existing.getSanVolumeId(),iqn);
      will(returnValue(Boolean.FALSE));
      oneOf(sanProvider).snapshotExists(existing.getSanVolumeId(),iqn);
      will(returnValue(Boolean.FALSE));
    }
  }
);
  SANManager test=new SANManager(sanProvider);
  test.deleteSnapshot(volId);
  try (TransactionResource tran=Entities.transactionFor(SANVolumeInfo.class)){
    List<SANVolumeInfo> results=Entities.query(new SANVolumeInfo());
    assertTrue("expected no SANVolumeInfos to exist",results == null || results.size() == 0);
  }
 }
