{
  log.debug("GENERATING REPORT ART");
  EntityWrapper wrapper=EntityWrapper.get(ReportingVolumeCreateEvent.class);
  Iterator iter=wrapper.scanWithNativeQuery("scanVolumeCreateEvents");
  Map<String,VolumeArtEntity> volumeEntities=new HashMap<String,VolumeArtEntity>();
  while (iter.hasNext()) {
    ReportingVolumeCreateEvent createEvent=(ReportingVolumeCreateEvent)iter.next();
    if (!report.getZones().containsKey(createEvent.getAvailabilityZone())) {
      report.getZones().put(createEvent.getAvailabilityZone(),new AvailabilityZoneArtEntity());
    }
    AvailabilityZoneArtEntity zone=report.getZones().get(createEvent.getAvailabilityZone());
    ReportingUser reportingUser=ReportingUserDao.getInstance().getReportingUser(createEvent.getUserId());
    if (reportingUser == null) {
      log.error("No user corresponding to event:" + createEvent.getUserId());
    }
    ReportingAccount reportingAccount=ReportingAccountDao.getInstance().getReportingAccount(reportingUser.getAccountId());
    if (reportingAccount == null) {
      log.error("No account corresponding to user:" + reportingUser.getAccountId());
    }
    if (!zone.getAccounts().containsKey(reportingAccount.getName())) {
      zone.getAccounts().put(reportingAccount.getName(),new AccountArtEntity());
    }
    AccountArtEntity account=zone.getAccounts().get(reportingAccount.getName());
    if (!account.getUsers().containsKey(reportingUser.getName())) {
      account.getUsers().put(reportingUser.getName(),new UserArtEntity());
    }
    UserArtEntity user=account.getUsers().get(reportingUser.getName());
    VolumeArtEntity volume=new VolumeArtEntity(createEvent.getVolumeId());
    user.getVolumes().put(createEvent.getUuid(),volume);
    volumeEntities.put(createEvent.getUuid(),volume);
  }
  iter=wrapper.scanWithNativeQuery("scanVolumeSnapshotCreateEvents");
  Map<String,VolumeSnapshotUsageArtEntity> snapshotEntities=new HashMap<String,VolumeSnapshotUsageArtEntity>();
  Map<String,Long> snapshotStartTimes=new HashMap<String,Long>();
  while (iter.hasNext()) {
    ReportingVolumeSnapshotCreateEvent createEvent=(ReportingVolumeSnapshotCreateEvent)iter.next();
    if (createEvent.getTimestampMs() > report.getEndMs())     continue;
    VolumeSnapshotUsageArtEntity usage=new VolumeSnapshotUsageArtEntity();
    usage.setSizeGB(createEvent.getSizeGB());
    usage.setSnapshotNum(1);
    usage.setGBSecs(createEvent.getSizeGB() * (report.getEndMs() - createEvent.getTimestampMs()));
    VolumeArtEntity volume=volumeEntities.get(createEvent.getVolumeUuid());
    volume.getSnapshotUsage().put(createEvent.getVolumeSnapshotId(),usage);
    snapshotEntities.put(createEvent.getUuid(),usage);
    snapshotStartTimes.put(createEvent.getUuid(),createEvent.getTimestampMs());
  }
  iter=wrapper.scanWithNativeQuery("scanVolumeSnapshotDeleteEvents");
  while (iter.hasNext()) {
    ReportingVolumeSnapshotCreateEvent deleteEvent=(ReportingVolumeSnapshotCreateEvent)iter.next();
    if (snapshotEntities.containsKey(deleteEvent.getUuid())) {
      VolumeSnapshotUsageArtEntity snap=snapshotEntities.get(deleteEvent.getUuid());
      long startTimeMs=snapshotStartTimes.get(deleteEvent.getUuid()).longValue();
      long duration=DurationCalculator.boundDuration(report.getBeginMs(),report.getEndMs(),startTimeMs,deleteEvent.getTimestampMs());
      snap.setSizeGB(snap.getSizeGB() * duration);
    }
  }
  for (  String zoneName : report.getZones().keySet()) {
    AvailabilityZoneArtEntity zone=report.getZones().get(zoneName);
    for (    String accountName : zone.getAccounts().keySet()) {
      AccountArtEntity account=zone.getAccounts().get(accountName);
      for (      String userName : account.getUsers().keySet()) {
        UserArtEntity user=account.getUsers().get(userName);
        for (        String volumeUuid : user.getVolumes().keySet()) {
          VolumeArtEntity volume=user.getVolumes().get(volumeUuid);
          for (          String snapId : volume.getSnapshotUsage().keySet()) {
            VolumeSnapshotUsageArtEntity snap=volume.getSnapshotUsage().get(snapId);
            updateUsageTotals(volume.getSnapshotTotals(),snap);
            updateUsageTotals(user.getUsageTotals().getSnapshotTotals(),snap);
            updateUsageTotals(account.getUsageTotals().getSnapshotTotals(),snap);
            updateUsageTotals(zone.getUsageTotals().getSnapshotTotals(),snap);
          }
        }
      }
    }
  }
  return report;
}
