def _download_parts_to_fileobj(self, manifest, dest_fileobj):
    "\n        Attempts to iterate through all parts contained in 'manifest' and\n        download and concatenate each part to 'dest_fileobj'. If the\n        manifest contains the intended image size, and the resulting bytes\n        downloaded does not match this size, ValueError is raised.\n        :param manifest: downloadmanifest obj\n        :param dest_fileobj: file like object to write downloaded parts to\n        :returns bytes downloaded\n        "
    bytes = 0
    for part_index in xrange(0, manifest.part_count):
        part = manifest.get_part_by_index(part_index)
        self.log.debug(('Downloading part#:' + str(part.part_index)))
        bytes += (part.download(dest_fileobj=dest_fileobj) or 0)
        self.log.debug(((((('Wrote bytes:' + str(bytes)) + '/') + str(manifest.download_image_size)) + ', digest:') + str(part.written_digest)))
        if self.args.reportprogress:
            stages.report_status(('"bytes_downloaded":%d' % bytes))
    if (manifest.download_image_size is not None):
        if (bytes != manifest.download_image_size):
            raise ValueError('Bytes Downloaded:"{0}" does not equal manifest image size:"{1}"'.format(bytes, manifest.download_image_size))
    return bytes
