def main(self):
    manifest = self.args.manifest
    if self.args.dumpmanifest:
        print str(manifest)
        os.sys.exit(0)
    self.log.debug(('\nMANIFEST:' + str(manifest)))
    dest_file = self.args.destination
    dest_file_name = self.args.destination
    bytes = 0
    try:
        expected_size = manifest.download_image_size
        if (dest_file == '-'):
            dest_file_name = '<stdout>'
            dest_fileobj = os.fdopen(os.dup(os.sys.stdout.fileno()), 'w')
        else:
            dest_file_name = str(dest_file)
            dest_fileobj = open(dest_file, 'w')
        if (manifest.file_format == 'BUNDLE'):
            expected_size = manifest.unbundled_image_size
            if (not self.args.privatekey):
                raise ArgumentError(self.args.privatekey, 'Bundle type needs privatekey -k')
            bytes = self._download_to_unbundlestream(dest_fileobj=dest_fileobj, manifest=manifest)
        else:
            with dest_fileobj:
                bytes = self._download_parts_to_fileobj(manifest=manifest, dest_fileobj=dest_fileobj)
        self.log.debug('Downloaded bytes:"{0}"'.format(str(bytes)))
        self.log.debug(('manifest download image size:' + str(manifest.download_image_size)))
        self.log.debug(('manifest unbundled size:' + str(manifest.unbundled_image_size)))
        if (dest_file != '-'):
            self._validate_written_image_size(expected_size=expected_size, filepath=dest_file)
            self.log.info('Download Image wrote "{0}" bytes to: {1}'.format(str(bytes), str(dest_file_name)))
        else:
            self.log.debug('Download Image wrote "{0}" bytes to: {1}'.format(str(bytes), str(dest_file_name)))
    except Exception as E:
        if self.args.reportprogress:
            stages.report_error(str(E))
        else:
            raise E
