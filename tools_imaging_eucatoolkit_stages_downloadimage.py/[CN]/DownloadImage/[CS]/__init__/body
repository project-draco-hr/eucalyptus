def __init__(self, **kwargs):
    parser = argparse.ArgumentParser(description='Download parts from manifest')
    parser.add_argument('-m', '--manifest', dest='manifest', required=True, help="Path to 'download-manifest. Use '-' to read\n                            manifest from stdin")
    parser.add_argument('-d', '--dest', dest='destination', required=True, help="Destination path to write image to.\n                            Use '-' for stdout.")
    parser.add_argument('-k', '--privatekey', dest='privatekey', help='file containing the private key to decrypt\n                            the bundle with.')
    parser.add_argument('-c', '--cloudcert', dest='cloudcert', help='file containing the cloud cert used\n                            to verify manifest signature.')
    parser.add_argument('-x', '--xsd', dest='xsd', default=None, help="Path to 'download-manifest xsd used\n                            to validate manfiest xml.")
    parser.add_argument('--toolspath', dest='toolspath', default=None, help='Local path to euca2ools.')
    parser.add_argument('--maxbytes', dest='maxbytes', default=0, help='Maximum bytes allowed to be written to the\n                            destination.')
    parser.add_argument('--euca_prefix', dest='euca_prefix', default=None, help='Path to eucalyptus install.\n                            ie: /opt/eucalyptus/')
    parser.add_argument('--debug', dest='debug', default=False, action='store_true', help='Enable debug to a log file')
    parser.add_argument('--logfile', dest='logfile', default=None, help='log file path to write to')
    parser.add_argument('--loglevel', dest='loglevel', default='INFO', help='log level for output')
    parser.add_argument('--dumpmanifest', dest='dumpmanifest', action='store_true', default=False, help='Get and show manifest then exit')
    parser.add_argument('--reportprogress', dest='reportprogress', default=False, action='store_true', help='Output progress information to stderr')
    if (not kwargs):
        arg_list = sys.argv[1:]
    else:
        arg_list = []
    self.parser = parser
    for kwarg in kwargs:
        for key in parser._option_string_actions:
            if (parser._option_string_actions[key].dest == str(kwarg)):
                option = parser._option_string_actions[key]
                arg_value = [option.option_strings[0]]
                if (not option.const):
                    arg_value.append(kwargs[kwarg])
                arg_list.extend(arg_value)
    self.args = parser.parse_args(arg_list)
    if (self.args.destination == '-'):
        force_stderr = True
    else:
        force_stderr = False
    self.log = stages.get_logger(self.args.loglevel, logfile=self.args.logfile, force_stderr=force_stderr, debug=self.args.debug)
    self.log.debug(('Parsed Args: ' + str(self.args)))
    self._setup()
