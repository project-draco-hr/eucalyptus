{
  Optional<Address> addressOptional=Optional.absent();
  final Function<AddressI,String> addressExtractor=Strings.startsWith(Address.ID_PREFIX_ALLOC).apply(input) ? allocation() : Strings.startsWith(Address.ID_PREFIX_ASSOC).apply(input) ? association() : null;
  if (addressExtractor != null) {
    addressOptional=Iterables.tryFind(AddressRegistry.getInstance().listValues(),CollectionUtils.propertyPredicate(input,addressExtractor));
  }
 else   try {
    addressOptional=Optional.of(AddressRegistry.getInstance().lookup(input));
  }
 catch (  NoSuchElementException e) {
  }
  if (!addressOptional.isPresent()) {
    throw new NoSuchElementException("Address not found (" + input + ")");
  }
  return addressOptional.get();
}
