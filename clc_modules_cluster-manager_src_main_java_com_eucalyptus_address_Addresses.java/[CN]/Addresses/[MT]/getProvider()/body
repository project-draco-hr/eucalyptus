{
  final boolean hasAddressing=Iterables.all(Clusters.getInstance().listValues(),new Predicate<Cluster>(){
    @Override public boolean apply(    Cluster arg0){
      return arg0.getState().isAddressingInitialized() && arg0.getState().hasPublicAddressing();
    }
  }
);
  Class<? extends AbstractSystemAddressManager> newManager=null;
  if (!hasAddressing) {
    newManager=NullSystemAddressManager.class;
  }
 else   if (AddressingConfiguration.getInstance().getDoDynamicPublicAddresses()) {
    newManager=DynamicSystemAddressManager.class;
  }
 else {
    newManager=StaticSystemAddressManager.class;
  }
  if (Addresses.systemAddressManager == null) {
    systemAddressManager=Classes.newInstance(newManager);
  }
 else   if (!newManager.equals(systemAddressManager.getClass())) {
    final AbstractSystemAddressManager oldMgr=systemAddressManager;
    systemAddressManager=Classes.newInstance(newManager);
    systemAddressManager.inheritReservedAddresses(oldMgr.getReservedAddresses());
  }
 else {
    return systemAddressManager;
  }
  LOG.info("Setting the address manager to be: " + newManager.getSimpleName());
  return systemAddressManager;
}
