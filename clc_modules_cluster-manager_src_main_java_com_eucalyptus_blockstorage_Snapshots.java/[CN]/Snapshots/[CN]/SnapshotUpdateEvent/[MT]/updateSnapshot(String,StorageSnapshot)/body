{
  try {
    final Function<String,Snapshot> updateSnapshot=new Function<String,Snapshot>(){
      public Snapshot apply(      final String input){
        try {
          Snapshot entity=Entities.uniqueResult(Snapshot.named(null,input));
          StringBuilder buf=new StringBuilder();
          buf.append("SnapshotStateUpdate: ").append(entity.getPartition()).append(" ").append(input).append(" ").append(entity.getParentVolume()).append(" ").append(entity.getState()).append(" ").append(entity.getProgress()).append(" ");
          if (storageSnapshot != null) {
            if (storageSnapshot.getStatus() != null) {
              boolean wasGenerating=entity.getState().equals(State.GENERATING);
              entity.setMappedState(storageSnapshot.getStatus());
              if (wasGenerating && entity.getState().equals(State.EXTANT)) {
                try {
                  final Volume volume=Transactions.find(Volume.named(null,storageSnapshot.getVolumeId()));
                  final String volumeUuid=volume.getNaturalId();
                  ListenerRegistry.getInstance().fireEvent(SnapShotEvent.with(SnapShotEvent.forSnapShotCreate(entity.getVolumeSize(),volumeUuid,entity.getParentVolume()),entity.getNaturalId(),entity.getDisplayName(),entity.getOwnerUserId()));
                }
 catch (                final Throwable e) {
                  LOG.error("Error inserting/creating reporting event for snapshot creation of snapshot: " + entity.getDisplayName(),e);
                }
              }
            }
            if (!State.EXTANT.equals(entity.getState()) && storageSnapshot.getProgress() != null) {
              entity.setProgress(storageSnapshot.getProgress());
            }
 else             if (State.EXTANT.equals(entity.getState())) {
              entity.setProgress("100%");
            }
 else             if (State.GENERATING.equals(entity.getState())) {
              if (entity.getProgress() == null) {
                entity.setProgress("0%");
              }
            }
            buf.append(" storage-snapshot ").append(storageSnapshot.getStatus()).append("=>").append(entity.getState()).append(" ").append(storageSnapshot.getProgress()).append(" ");
          }
 else           if (SNAPSHOT_TIMEOUT_STATES.contains(entity.getState()) && entity.lastUpdateMillis() > SNAPSHOT_STATE_TIMEOUT) {
            Entities.delete(entity);
          }
 else {
            if (State.EXTANT.equals(entity.getState())) {
              entity.setProgress("100%");
            }
 else             if (State.GENERATING.equals(entity.getState())) {
              if (entity.getProgress() == null) {
                entity.setProgress("0%");
              }
            }
          }
          LOG.debug(buf.toString());
          return entity;
        }
 catch (        TransactionException ex) {
          throw Exceptions.toUndeclared(ex);
        }
      }
    }
;
    try {
      Entities.asTransaction(Snapshot.class,updateSnapshot).apply(snapshotId);
    }
 catch (    Exception ex) {
      LOG.error(ex);
      Logs.extreme().error(ex,ex);
    }
  }
 catch (  Exception ex) {
    LOG.error(ex);
    Logs.extreme().error(ex,ex);
  }
}
