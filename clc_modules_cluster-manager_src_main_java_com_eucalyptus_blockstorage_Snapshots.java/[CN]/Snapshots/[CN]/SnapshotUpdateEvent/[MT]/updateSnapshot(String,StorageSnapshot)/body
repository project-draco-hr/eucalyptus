{
  try {
    final Function<String,Snapshot> updateSnapshot=new Function<String,Snapshot>(){
      public Snapshot apply(      final String input){
        try {
          Snapshot entity=Entities.uniqueResult(Snapshot.named(null,input));
          StringBuilder buf=new StringBuilder();
          buf.append("SnapshotStateUpdate: ").append(entity.getPartition()).append(" ").append(input).append(" ").append(entity.getParentVolume()).append(" ").append(entity.getState()).append(" ").append(entity.getProgress()).append(" ");
          if (storageSnapshot != null && !State.EXTANT.equals(entity.getState())) {
            entity.setMappedState(storageSnapshot.getStatus());
            if (storageSnapshot.getProgress() != null) {
              entity.setProgress(storageSnapshot.getProgress());
            }
            buf.append("\nSnapshotStateUpdate: ").append(entity.getPartition()).append(" ").append(input).append(" storage-snapshot ").append(storageSnapshot.getVolumeId()).append(" ").append(storageSnapshot.getStatus()).append("=>").append(entity.getState()).append(storageSnapshot.getProgress()).append(" ");
          }
 else           if (State.GENERATING.equals(entity.getState()) && entity.lastUpdateMillis() > SNAPSHOT_STATE_TIMEOUT) {
            Entities.delete(entity);
          }
          LOG.debug(buf.toString());
          return entity;
        }
 catch (        TransactionException ex) {
          throw Exceptions.toUndeclared(ex);
        }
      }
    }
;
    try {
      Entities.asTransaction(Snapshot.class,updateSnapshot).apply(snapshotId);
    }
 catch (    Exception ex) {
      LOG.error(ex);
      Logs.extreme().error(ex,ex);
    }
  }
 catch (  Exception ex) {
    LOG.error(ex);
    Logs.extreme().error(ex,ex);
  }
}
