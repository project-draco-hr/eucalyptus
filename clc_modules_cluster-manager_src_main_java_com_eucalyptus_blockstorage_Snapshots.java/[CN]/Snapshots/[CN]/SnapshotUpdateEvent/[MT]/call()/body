{
  try {
    try {
      Multimap<String,String> snapshots=ArrayListMultimap.create();
      for (      Snapshot s : Snapshots.list()) {
        snapshots.put(s.getPartition(),s.getDisplayName());
      }
      for (      final String partition : snapshots.keySet()) {
        ServiceConfiguration sc=Topology.lookup(Storage.class,Partitions.lookupByName(partition));
        DescribeStorageSnapshotsType scRequest=new DescribeStorageSnapshotsType();
        DescribeStorageSnapshotsResponseType snapshotInfo=AsyncRequests.sendSync(sc,scRequest);
        final Map<String,StorageSnapshot> storageSnapshots=Maps.newHashMap();
        for (        final StorageSnapshot storageSnapshot : snapshotInfo.getSnapshotSet()) {
          storageSnapshots.put(storageSnapshot.getSnapshotId(),storageSnapshot);
        }
        for (        String snapshotId : snapshots.get(partition)) {
          final StorageSnapshot storageSnapshot=storageSnapshots.get(snapshotId);
          try {
            final Function<String,Snapshot> updateSnapshot=new Function<String,Snapshot>(){
              public Snapshot apply(              final String input){
                try {
                  Snapshot entity=Entities.uniqueResult(Snapshot.named(null,input));
                  StringBuilder buf=new StringBuilder();
                  buf.append("SnapshotStateUpdate: ").append(entity.getPartition()).append(" ").append(input).append(" ").append(entity.getParentVolume()).append(" ").append(entity.getState()).append(" ").append(entity.getProgress()).append(" ");
                  if (storageSnapshot != null && !State.EXTANT.equals(entity.getState())) {
                    entity.setMappedState(storageSnapshot.getStatus());
                    if (storageSnapshot.getProgress() != null) {
                      entity.setProgress(storageSnapshot.getProgress());
                    }
                  }
                  buf.append("\nSnapshotStateUpdate: ").append(entity.getPartition()).append(" ").append(input).append(" storage-snapshot ").append(storageSnapshot.getVolumeId()).append(" ").append(storageSnapshot.getStatus()).append("=>").append(entity.getState()).append(storageSnapshot.getProgress()).append(" ");
                  LOG.debug(buf.toString());
                  return entity;
                }
 catch (                TransactionException ex) {
                  throw Exceptions.toUndeclared(ex);
                }
              }
            }
;
            try {
              Entities.asTransaction(Snapshot.class,updateSnapshot).apply(snapshotId);
            }
 catch (            Exception ex) {
              LOG.error(ex);
              Logs.extreme().error(ex,ex);
            }
          }
 catch (          Exception ex) {
            LOG.error(ex);
            Logs.extreme().error(ex,ex);
          }
        }
      }
    }
 catch (    Exception ex) {
      LOG.error(ex);
      Logs.extreme().error(ex,ex);
    }
  }
  finally {
    ready.set(true);
  }
  return true;
}
