{
  final Record query=request.getQuery();
  try {
    final Name name=query.getName();
    final Name hostName=name.relativize(LoadBalancerDomainName.getLoadBalancerSubdomain());
    final Optional<LoadBalancerDomainName> domainName=LoadBalancerDomainName.findMatching(hostName);
    if (domainName.isPresent()) {
      final Pair<String,String> accountNamePair=domainName.get().toScopedLoadBalancerName(hostName);
      final Set<String> ips=Sets.newTreeSet();
      try (final TransactionResource tx=Entities.transactionFor(LoadBalancer.class)){
        final LoadBalancer loadBalancer=LoadBalancers.getLoadbalancer(accountNamePair.getLeft(),accountNamePair.getRight());
        final Predicate<LoadBalancerServoInstanceCoreView> canResolve=new Predicate<LoadBalancerServoInstanceCoreView>(){
          @Override public boolean apply(          LoadBalancerServoInstanceCoreView arg0){
            return arg0.canResolveDns();
          }
        }
;
        final List<LoadBalancerServoInstanceCoreView> servos=Lists.newArrayList();
        for (        final LoadBalancerAutoScalingGroupCoreView group : loadBalancer.getAutoScaleGroups()) {
          servos.addAll(INSTANCE.apply(group).getServos());
        }
        final Function<LoadBalancerServoInstanceCoreView,String> ipExtractor=loadBalancer.getScheme() == LoadBalancer.Scheme.Internal ? LoadBalancerServoInstanceCoreView.privateIp() : LoadBalancerServoInstanceCoreView.address();
        Iterables.addAll(ips,Iterables.transform(Collections2.filter(servos,canResolve),ipExtractor));
      }
       final List<Record> records=Lists.newArrayList();
      for (      String ip : ips) {
        final InetAddress inetAddress=InetAddresses.forString(ip);
        records.add(DomainNameRecords.addressRecord(name,inetAddress,LoadBalancerDnsRecord.getLoadbalancerTTL()));
      }
      if (DnsResolvers.RequestType.A.apply(query))       return DnsResponse.forName(name).answer(records);
 else       return DnsResponse.forName(name).answer(Lists.<Record>newArrayList());
    }
  }
 catch (  Exception ex) {
    logger.debug(ex);
  }
  return DnsResponse.forName(query.getName()).nxdomain();
}
