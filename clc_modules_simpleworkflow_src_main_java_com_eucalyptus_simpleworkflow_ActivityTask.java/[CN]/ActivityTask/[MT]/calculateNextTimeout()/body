{
  final Iterable<Pair<String,Optional<Long>>> taggedTimeouts=Iterables.filter(Lists.newArrayList(Pair.ropair("SCHEDULE_TO_CLOSE",toTimeout(getCreationTimestamp(),getScheduleToCloseTimeout())),Pair.ropair("SCHEDULE_TO_START",toTimeout(getCreationTimestamp(),getScheduleToStartTimeout())),getState() == State.Active ? Pair.ropair("START_TO_CLOSE",toTimeout(getStartedTimestamp(),getStartToCloseTimeout())) : null,getState() == State.Active ? Pair.ropair("HEARTBEAT",toTimeout(getLastUpdateTimestamp(),getHeartbeatTimeout())) : null),Predicates.notNull());
  final Function<Pair<String,Optional<Long>>,Long> timeExtractor=Functions.compose(CollectionUtils.<Long>optionalOrNull(),Pair.<String,Optional<Long>>right());
  final Long timeout=CollectionUtils.reduce(CollectionUtils.fluent(taggedTimeouts).transform(timeExtractor).filter(Predicates.notNull()),Long.MAX_VALUE,CollectionUtils.lmin());
  final String tag=Iterables.tryFind(taggedTimeouts,CollectionUtils.propertyPredicate(timeout,timeExtractor)).transform(Pair.<String,Optional<Long>>left()).or("SCHEDULE_TO_CLOSE");
  return timeout == Long.MAX_VALUE ? null : Pair.pair(tag,new Date(timeout));
}
