{
  ImageMetadata.Architecture imageArch=ImageMetadata.Architecture.x86_64;
  ImageMetadata.Platform imagePlatform=ImageMetadata.Platform.linux;
  if (ImageMetadata.Platform.windows.name().equals(eki)) {
    imagePlatform=ImageMetadata.Platform.windows;
    eki=null;
  }
  final BlockDeviceMappingItemType rootBlockDevice=Iterables.find(blockDeviceMappings,findEbsRoot(rootDeviceName));
  final String snapshotId=rootBlockDevice.getEbs().getSnapshotId();
  Snapshot snap;
  try {
    snap=Transactions.one(Snapshot.named(userFullName.asAccountFullName(),snapshotId),RestrictedTypes.filterPrivileged(),Functions.<Snapshot>identity());
  }
 catch (  NoSuchElementException ex) {
    throw new EucalyptusCloudException("Failed to create image from specified block device mapping: " + rootBlockDevice + " because of: Snapshot not found "+ snapshotId);
  }
catch (  TransactionExecutionException ex) {
    throw new EucalyptusCloudException("Failed to create image from specified block device mapping: " + rootBlockDevice + " because of: "+ ex.getMessage());
  }
catch (  ExecutionException ex) {
    LOG.error(ex,ex);
    throw new EucalyptusCloudException("Failed to create image from specified block device mapping: " + rootBlockDevice + " because of: "+ ex.getMessage());
  }
  final Integer suppliedVolumeSize=rootBlockDevice.getEbs().getVolumeSize() != null ? rootBlockDevice.getEbs().getVolumeSize() : snap.getVolumeSize();
  final Long imageSizeBytes=suppliedVolumeSize * 1024l * 1024l* 1024l;
  final Boolean targetDeleteOnTermination=Boolean.TRUE.equals(rootBlockDevice.getEbs().getDeleteOnTermination());
  final String imageId=Crypto.generateId(snapshotId,ImageMetadata.Type.machine.getTypePrefix());
  BlockStorageImageInfo ret=new BlockStorageImageInfo(userFullName,imageId,imageName,imageDescription,imageSizeBytes,imageArch,imagePlatform,eki,eri,snap.getDisplayName(),targetDeleteOnTermination,rootDeviceName);
  final EntityTransaction tx=Entities.get(BlockStorageImageInfo.class);
  try {
    ret=Entities.merge(ret);
    ret.getDeviceMappings().addAll(Lists.transform(blockDeviceMappings,Images.deviceMappingGenerator(ret,suppliedVolumeSize)));
    ret.setState(ImageMetadata.State.available);
    tx.commit();
    LOG.info("Registering image pk=" + ret.getDisplayName() + " ownerId="+ userFullName);
  }
 catch (  Exception e) {
    throw new EucalyptusCloudException("Failed to register image using snapshot: " + snapshotId + " because of: "+ e.getMessage(),e);
  }
 finally {
    if (tx.isActive())     tx.rollback();
  }
  return ret;
}
