{
  ArrayList<BlockDeviceMappingItemType> resultedBdms=new ArrayList<>();
  if (bdms != null) {
    Set<String> deviceNames=Sets.newHashSet();
    boolean ephemeralAlreadyPresent=false;
    int ephemeralCount=0;
    for (    final BlockDeviceMappingItemType bdm : bdms) {
      checkParam(bdm,notNullValue());
      checkParam(bdm.getDeviceName(),notNullValue());
      if (!deviceNames.add(bdm.getDeviceName().replace("/dev/",""))) {
        throw new MetadataException(bdm.getDeviceName() + " is assigned multiple times");
      }
      if (DeviceMappingValidationOption.SkipExtraEphemeral.present(options) && StringUtils.isNotBlank(bdm.getVirtualName())) {
        if (!ephemeralAlreadyPresent) {
          ephemeralAlreadyPresent=true;
        }
 else {
          continue;
        }
      }
      resultedBdms.add(bdm);
    }
    final Set<String> fullDeviceNames=Sets.newHashSet();
    for (    final String name : deviceNames) {
      fullDeviceNames.add(String.format("/dev/%s",name));
    }
    deviceNames=fullDeviceNames;
    for (    final BlockDeviceMappingItemType bdm : resultedBdms) {
      if (!bdm.getDeviceName().matches("(/dev/)?([svh]|xv)d[a-z]([1-9])*")) {
        throw new MetadataException("Device name " + bdm.getDeviceName() + " is invalid");
      }
 else       if (bdm.getDeviceName().matches(".*\\d\\Z") && !(DeviceMappingValidationOption.AllowDevSda1.present(options) && DEFAULT_PARTITIONED_ROOT_DEVICE.equals(bdm.getDeviceName()) && !deviceNames.contains(DEFAULT_ROOT_DEVICE))) {
        throw new MetadataException(bdm.getDeviceName() + " is not supported. Device name cannot be a partition");
      }
 else       if (bdm.getNoDevice() != null && bdm.getNoDevice()) {
        if (!DeviceMappingValidationOption.AllowSuppressMapping.present(options)) {
          throw new MetadataException("Block device mapping for " + bdm.getDeviceName() + " cannot be suppressed");
        }
      }
 else       if (StringUtils.isNotBlank(bdm.getVirtualName())) {
        if (!bdm.getVirtualName().matches("ephemeral[0123]")) {
          throw new MetadataException("Virtual device name must be of the form ephemeral[0123]. Fix the mapping for " + bdm.getDeviceName());
        }
        if (!DeviceMappingValidationOption.SkipExtraEphemeral.present(options)) {
          ephemeralCount++;
          if (ephemeralCount > 1) {
            throw new MetadataException("Only one ephemeral device is supported. More than one ephemeral device mappings found");
          }
        }
      }
 else       if (null != bdm.getEbs()) {
        if (!DeviceMappingValidationOption.AllowEbsMapping.present(options)) {
          throw new MetadataException("Ebs block device mappings are not supported");
        }
        final EbsDeviceMapping ebsInfo=bdm.getEbs();
        if (ebsInfo.getSnapshotId() != null) {
          final Snapshot snap;
          try {
            snap=Transactions.find(Snapshot.named(null,ResourceIdentifiers.tryNormalize().apply(ebsInfo.getSnapshotId())));
          }
 catch (          Exception ex) {
            LOG.error("Failed to find snapshot " + ebsInfo.getSnapshotId(),ex);
            throw new MetadataException("Unable to find snapshot " + ebsInfo.getSnapshotId() + " in the block device mapping for "+ bdm.getDeviceName());
          }
          if (ebsInfo.getVolumeSize() != null && ebsInfo.getVolumeSize() < snap.getVolumeSize()) {
            throw new MetadataException("Size of the volume cannot be smaller than the source snapshot for " + bdm.getDeviceName());
          }
        }
 else         if (ebsInfo.getVolumeSize() != null && ebsInfo.getVolumeSize() == 0) {
          throw new MetadataException("Volume size for " + bdm.getDeviceName() + " cannot be 0");
        }
      }
 else {
        throw new MetadataException("Incorrectly constructed block device mapping for " + bdm.getDeviceName() + " . Refer to documentation");
      }
    }
  }
  return resultedBdms;
}
