{
  try {
    if (!Internets.testGoodAddress(host)) {
      throw new EucalyptusCloudException("Components cannot be registered using local, link-local, or multicast addresses.");
    }
  }
 catch (  EucalyptusCloudException e) {
    throw new ServiceRegistrationException(e.getMessage(),e);
  }
catch (  Exception e) {
    throw new ServiceRegistrationException("Service registration failed: " + e.getMessage(),e);
  }
  ServiceConfiguration existingName=null;
  try {
    existingName=ServiceConfigurations.lookupByName(this.getComponentId().getClass(),name);
  }
 catch (  PersistenceException ex1) {
    LOG.trace("Failed to find existing component registration for name: " + name);
  }
  Partition partitionAnnotation=Ats.from(this.getComponentId()).get(Partition.class);
  boolean manyToOne=partitionAnnotation != null && partitionAnnotation.manyToOne();
  try {
    if (ServiceConfigurations.listPartition(this.getComponentId().getClass(),partition).size() >= 2 && !manyToOne) {
      throw new ServiceRegistrationException("Unable to register more than two services in a partition for component type: " + this.getComponentId().getName());
    }
  }
 catch (  PersistenceException ex1) {
    LOG.trace("Failed to find existing component registration for partition name: " + partition);
  }
  ServiceConfiguration existingHost=null;
  try {
    existingHost=ServiceConfigurations.lookupByHost(this.getComponentId().getClass(),host);
  }
 catch (  PersistenceException ex1) {
    LOG.trace("Failed to find existing component registration for host: " + host);
  }
  if (existingName != null && existingHost != null) {
    return false;
  }
 else   if (existingName == null && existingHost == null) {
    return true;
  }
 else   if (existingName != null) {
    throw new ServiceRegistrationException("Component with name=" + name + " already exists with host="+ existingName.getHostName());
  }
 else   if (!manyToOne && existingHost != null) {
    throw new ServiceRegistrationException("Component with host=" + host + " already exists with name="+ existingHost.getName());
  }
 else {
    throw new ServiceRegistrationException("BUG: This is a logical impossibility.");
  }
}
