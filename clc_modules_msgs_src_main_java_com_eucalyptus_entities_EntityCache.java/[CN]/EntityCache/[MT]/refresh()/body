{
  final Collection<Pair<String,Integer>> currentKeys=loadVersionMap();
  cache.keySet().retainAll(currentKeys);
  currentKeys.removeAll(cache.keySet());
  for (  final List<Pair<String,Integer>> keyBatch : Iterables.partition(currentKeys,batchSize)) {
    try (final TransactionResource db=Entities.readOnlyDistinctTransactionFor(example)){
      final Criteria criteria=Entities.createCriteria(example.getClass()).add(Example.create(example)).add(criterion).setFetchSize(batchSize).add(Restrictions.in("id",Lists.newArrayList(Iterables.transform(keyBatch,Pair.<String,Integer>left()))));
      for (      final String path : eagerAssociationPaths)       criteria.setFetchMode(path,FetchMode.JOIN);
      for (      final String path : lazyAssociationPaths)       criteria.setFetchMode(path,FetchMode.SELECT);
      final List<E> entities=(List<E>)criteria.list();
      for (      final E entity : entities) {
        cache.put(Pair.pair(getId(entity),entity.getVersion()),transformFunction.apply(entity));
      }
    }
   }
}
