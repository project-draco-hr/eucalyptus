{
  PutObjectResponseType reply=(PutObjectResponseType)request.getReply();
  String userId=request.getUserId();
  String bucketName=request.getBucket();
  String objectKey=request.getKey();
  Long oldBucketSize=0L;
  String md5="";
  Date lastModified=null;
  AccessControlListType accessControlList=request.getAccessControlList();
  if (accessControlList == null) {
    accessControlList=new AccessControlListType();
  }
  EntityWrapper<BucketInfo> db=new EntityWrapper<BucketInfo>();
  BucketInfo bucketInfo=new BucketInfo(bucketName);
  List<BucketInfo> bucketList=db.query(bucketInfo);
  if (bucketList.size() > 0) {
    BucketInfo bucket=bucketList.get(0);
    if (bucket.canWrite(userId)) {
      ObjectInfo foundObject=null;
      EntityWrapper<ObjectInfo> dbObject=db.recast(ObjectInfo.class);
      ObjectInfo searchObject=new ObjectInfo();
      searchObject.setBucketName(bucketName);
      List<ObjectInfo> objectInfos=dbObject.query(searchObject);
      for (      ObjectInfo objectInfo : objectInfos) {
        if (objectInfo.getObjectKey().equals(objectKey)) {
          if (!objectInfo.canWrite(userId)) {
            db.rollback();
            throw new AccessDeniedException(objectKey);
          }
          foundObject=objectInfo;
          oldBucketSize=-foundObject.getSize();
          break;
        }
      }
      String objectName;
      if (foundObject == null) {
        foundObject=new ObjectInfo(bucketName,objectKey);
        foundObject.setOwnerId(userId);
        List<GrantInfo> grantInfos=new ArrayList<GrantInfo>();
        foundObject.addGrants(userId,grantInfos,accessControlList);
        foundObject.setGrants(grantInfos);
        objectName=objectKey.replaceAll("/","-") + Hashes.getRandom(4);
        foundObject.setObjectName(objectName);
        dbObject.add(foundObject);
      }
 else {
        if (foundObject.canWriteACP(userId)) {
          List<GrantInfo> grantInfos=new ArrayList<GrantInfo>();
          foundObject.addGrants(userId,grantInfos,accessControlList);
          foundObject.setGrants(grantInfos);
        }
        objectName=foundObject.getObjectName();
        if (WalrusProperties.enableTorrents) {
          EntityWrapper<TorrentInfo> dbTorrent=db.recast(TorrentInfo.class);
          TorrentInfo torrentInfo=new TorrentInfo(bucketName,objectKey);
          List<TorrentInfo> torrentInfos=dbTorrent.query(torrentInfo);
          if (torrentInfos.size() > 0) {
            TorrentInfo foundTorrentInfo=torrentInfos.get(0);
            TorrentClient torrentClient=Torrents.getClient(bucketName + objectKey);
            if (torrentClient != null) {
              torrentClient.bye();
            }
            dbTorrent.delete(foundTorrentInfo);
          }
        }
 else {
          LOG.warn("Bittorrent support has been disabled. Please check pre-requisites");
        }
      }
      foundObject.setObjectKey(objectKey);
      foundObject.replaceMetaData(request.getMetaData());
      String randomKey=request.getRandomKey();
      WalrusDataMessenger messenger=WalrusQueryDispatcher.getWriteMessenger();
      String key=bucketName + "." + objectKey;
      LinkedBlockingQueue<WalrusDataMessage> putQueue=messenger.getQueue(key,randomKey);
      try {
        WalrusDataMessage dataMessage;
        String tempObjectName=objectName;
        MessageDigest digest=null;
        long size=0;
        FileIO fileIO=null;
        while ((dataMessage=putQueue.take()) != null) {
          if (WalrusDataMessage.isStart(dataMessage)) {
            tempObjectName=objectName + "." + Hashes.getRandom(12);
            digest=Hashes.Digest.MD5.get();
            try {
              fileIO=storageManager.prepareForWrite(bucketName,tempObjectName);
            }
 catch (            Exception ex) {
              throw new EucalyptusCloudException(ex);
            }
          }
 else           if (WalrusDataMessage.isEOF(dataMessage)) {
            try {
              storageManager.renameObject(bucketName,tempObjectName,objectName);
            }
 catch (            IOException ex) {
              LOG.error(ex);
              db.rollback();
              throw new EucalyptusCloudException(objectKey);
            }
            md5=Hashes.bytesToHex(digest.digest());
            lastModified=new Date();
            foundObject.setEtag(md5);
            foundObject.setSize(size);
            foundObject.setLastModified(lastModified);
            foundObject.setStorageClass("STANDARD");
            foundObject.setContentType(request.getContentType());
            foundObject.setContentDisposition(request.getContentDisposition());
            reply.setSize(size);
            if (WalrusProperties.shouldEnforceUsageLimits && !request.isAdministrator()) {
              Long bucketSize=bucket.getBucketSize();
              long newSize=bucketSize + oldBucketSize + size;
              if (newSize > WalrusProperties.MAX_BUCKET_SIZE) {
                db.rollback();
                throw new EntityTooLargeException(objectKey);
              }
              bucket.setBucketSize(newSize);
            }
            db.commit();
            fileIO.finish();
            WalrusMonitor monitor=messenger.getMonitor(key);
synchronized (monitor) {
              monitor.setLastModified(lastModified);
              monitor.setMd5(md5);
              monitor.notifyAll();
            }
            messenger.removeQueue(key,randomKey);
            messenger.removeMonitor(key);
            LOG.info("Transfer complete: " + key);
            break;
          }
 else           if (WalrusDataMessage.isInterrupted(dataMessage)) {
            WalrusMonitor monitor=messenger.getMonitor(key);
synchronized (monitor) {
              monitor.wait();
              lastModified=monitor.getLastModified();
              md5=monitor.getMd5();
            }
            try {
              fileIO.finish();
              storageManager.deleteObject(bucketName,tempObjectName);
            }
 catch (            IOException ex) {
              LOG.error(ex);
            }
            db.rollback();
            LOG.info("Transfer interrupted: " + key);
            break;
          }
 else {
            assert(WalrusDataMessage.isData(dataMessage));
            byte[] data=dataMessage.getPayload();
            try {
              fileIO.write(data);
            }
 catch (            IOException ex) {
              LOG.error(ex);
            }
            size+=data.length;
            digest.update(data);
          }
        }
      }
 catch (      InterruptedException ex) {
        LOG.error(ex,ex);
        throw new EucalyptusCloudException();
      }
    }
 else {
      db.rollback();
      throw new AccessDeniedException(bucketName);
    }
  }
 else {
    db.rollback();
    throw new NoSuchBucketException(bucketName);
  }
  reply.setEtag(md5);
  reply.setLastModified(DateUtils.format(lastModified.getTime(),DateUtils.ISO8601_DATETIME_PATTERN) + ".000Z");
  return reply;
}
