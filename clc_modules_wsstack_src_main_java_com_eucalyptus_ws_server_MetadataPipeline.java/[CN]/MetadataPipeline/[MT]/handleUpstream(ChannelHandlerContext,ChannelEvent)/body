{
  if (e instanceof MessageEvent && ((MessageEvent)e).getMessage() instanceof MappingHttpRequest) {
    MappingHttpRequest request=(MappingHttpRequest)((MessageEvent)e).getMessage();
    String newUri=null;
    String uri=request.getUri();
    InetSocketAddress remoteAddr=((InetSocketAddress)ctx.getChannel().getRemoteAddress());
    String remoteHost=remoteAddr.getAddress().getHostAddress();
    if (uri.startsWith("/latest/")) {
      newUri=uri.replaceAll("/latest[/]+",remoteHost + ":");
    }
 else     if (uri.startsWith("/1.0/")) {
      newUri=uri.replaceAll("/1.0[/]+",remoteHost + ":");
    }
 else {
      newUri=uri.replaceAll("/\\d\\d\\d\\d-\\d\\d-\\d\\d[/]+",remoteHost + ":");
    }
    LOG.trace("Trying to get metadata: " + newUri);
    Object reply="".getBytes();
    Exception replyEx=null;
    if (uri.equals("/") || uri.isEmpty()) {
      reply=Joiner.on('\n').join(VERSION).getBytes(Charsets.UTF_8);
    }
 else {
      try {
        if (Bootstrap.isShuttingDown()) {
          reply="System shutting down".getBytes();
        }
 else         if (!Bootstrap.isFinished()) {
          reply="System is still starting up".getBytes();
        }
 else {
          reply=ServiceContext.send("VmMetadata",newUri);
        }
      }
 catch (      Exception e1) {
        Logs.extreme().debug(e1,e1);
        replyEx=e1;
      }
 finally {
        Contexts.clear(request.getCorrelationId());
      }
    }
    Logs.extreme().debug("VmMetadata reply info: " + reply + " "+ replyEx);
    HttpResponse response=null;
    if (replyEx != null || reply == null || reply instanceof NullPayload) {
      response=new DefaultHttpResponse(request.getProtocolVersion(),HttpResponseStatus.NOT_FOUND);
      String errorMessage=String.format(ERROR_STRING,newUri.replaceAll(remoteHost + ":",""),replyEx != null && Logs.isDebug() ? Exceptions.string(replyEx) : "");
      response.setHeader(HttpHeaders.Names.CONTENT_TYPE,"text/plain");
      ChannelBuffer buffer=null;
      if (replyEx != null && !(replyEx instanceof NoSuchElementException)) {
        buffer=ChannelBuffers.wrappedBuffer(errorMessage.getBytes());
        response.setContent(buffer);
      }
 else {
        buffer=ChannelBuffers.wrappedBuffer(errorMessage.getBytes());
        response.setContent(buffer);
      }
      response.addHeader(HttpHeaders.Names.CONTENT_LENGTH,Integer.toString(buffer.readableBytes()));
    }
 else {
      response=new DefaultHttpResponse(request.getProtocolVersion(),HttpResponseStatus.OK);
      response.setHeader(HttpHeaders.Names.CONTENT_TYPE,"text/plain");
      ChannelBuffer buffer=ChannelBuffers.wrappedBuffer((byte[])reply);
      response.setContent(buffer);
      response.addHeader(HttpHeaders.Names.CONTENT_LENGTH,Integer.toString(buffer.readableBytes()));
    }
    ctx.getChannel().write(response).addListener(ChannelFutureListener.CLOSE);
  }
 else {
    ctx.sendUpstream(e);
  }
}
