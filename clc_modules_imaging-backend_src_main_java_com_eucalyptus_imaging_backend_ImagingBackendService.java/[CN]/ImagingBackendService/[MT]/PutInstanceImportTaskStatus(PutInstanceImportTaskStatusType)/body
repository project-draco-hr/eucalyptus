{
  final PutInstanceImportTaskStatusResponseType reply=request.getReply();
  final Context context=Contexts.lookup();
  try {
    if (!(context.getUser().isSystemAdmin() || (context.isAdministrator() && Permissions.isAuthorized(VENDOR_IMAGINGSERVICE,EC2_RESOURCE_INSTANCE,"",null,IMAGINGSERVICE_PUTINSTANCEIMPORTTASKSTATUS,context.getAuthContext())))) {
      throw new ImagingServiceException(ImagingServiceException.DEFAULT_CODE,"Not authorized to put import task status.");
    }
  }
 catch (  final ImagingServiceException ex) {
    throw ex;
  }
catch (  final Exception ex) {
    throw new ImagingServiceException(ImagingServiceException.DEFAULT_CODE,"Not authorized to put import task status.");
  }
  try {
    final String remoteHost=request.getSourceIp();
    ImagingWorkers.verifyWorker(request.getInstanceId(),remoteHost);
  }
 catch (  final Exception ex) {
    LOG.warn("Failed to verify worker",ex);
    throw new ImagingServiceException(ImagingServiceException.DEFAULT_CODE,"Not authorized to put import task status.");
  }
  reply.setCancelled(false);
  try {
    final String taskId=request.getImportTaskId();
    final String volumeId=request.getVolumeId();
    if (taskId == null)     throw new Exception("Task id is null");
    ImagingTask imagingTask=null;
    try {
      imagingTask=ImagingTasks.lookup(taskId);
    }
 catch (    final Exception ex) {
      reply.setCancelled(true);
      throw new Exception("imaging task with " + taskId + " is not found");
    }
    final String instanceId=request.getInstanceId();
    if (instanceId != null) {
      ImagingWorkers.markUpdate(request.getInstanceId());
    }
    if (ImportTaskState.CONVERTING.equals(imagingTask.getState()) && instanceId.equals(imagingTask.getWorkerId())) {
      final WorkerTaskState workerState=WorkerTaskState.fromString(request.getStatus());
      if (WorkerTaskState.EXTANT.equals(workerState) || WorkerTaskState.DONE.equals(workerState)) {
        if (imagingTask instanceof VolumeImagingTask) {
          try {
            final long bytesConverted=request.getBytesConverted();
            if (bytesConverted > 0)             ImagingTasks.updateBytesConverted(taskId,volumeId,bytesConverted);
          }
 catch (          final Exception ex) {
            LOG.warn("Failed to update bytes converted(" + taskId + ")");
          }
        }
      }
switch (workerState) {
case EXTANT:
        if (imagingTask.isTimedOut()) {
          try {
            if (imagingTask.getTimeoutCount() < MAX_TIMEOUT_AND_RETRY) {
              LOG.warn(String.format("Imaging import task %s has timed out; will retry later",imagingTask.getDisplayName()));
              ImagingTasks.timeoutTask(taskId);
              ImagingTasks.killAndRerunTask(taskId);
            }
 else {
              LOG.warn(String.format("Imaging import task %s has timed out and failed",imagingTask.getDisplayName()));
              ImagingTasks.setState(imagingTask,ImportTaskState.FAILED,ImportTaskState.STATE_MSG_CONVERSION_TIMEOUT);
            }
          }
 catch (          final Exception ex) {
            LOG.error("Failed to handle timed-out task",ex);
            ImagingTasks.setState(imagingTask,ImportTaskState.FAILED,ImportTaskState.STATE_MSG_CONVERSION_TIMEOUT);
          }
 finally {
            reply.setCancelled(true);
          }
        }
      break;
case DONE:
    if (imagingTask instanceof VolumeImagingTask) {
      try {
        ImagingTasks.updateVolumeStatus((VolumeImagingTask)imagingTask,volumeId,ImportTaskState.COMPLETED,null);
        Ec2Client.getInstance().deleteTags(null,Lists.newArrayList(volumeId),Lists.newArrayList(ImagingTaskStateManager.VOLUME_STATUS_TAG));
      }
 catch (      final Exception ex) {
        ImagingTasks.transitState(imagingTask,ImportTaskState.CONVERTING,ImportTaskState.FAILED,ImportTaskState.STATE_MSG_FAILED_UNEXPECTED);
        LOG.error("Failed to update volume's state",ex);
        break;
      }
      try {
        if (imagingTask instanceof ImportVolumeImagingTask) {
          ImagingTasks.transitState(imagingTask,ImportTaskState.CONVERTING,ImportTaskState.COMPLETED,ImportTaskState.STATE_MSG_DONE);
        }
 else         if (ImagingTasks.isConversionDone((VolumeImagingTask)imagingTask)) {
          ImagingTasks.transitState(imagingTask,ImportTaskState.CONVERTING,ImportTaskState.INSTANTIATING,ImportTaskState.STATE_MSG_LAUNCHING_INSTANCE);
        }
      }
 catch (      final Exception ex) {
        LOG.error("Failed to update imaging task's state to completed",ex);
      }
    }
 else     if (imagingTask instanceof DiskImagingTask) {
      ImagingTasks.transitState(imagingTask,ImportTaskState.CONVERTING,ImportTaskState.COMPLETED,ImportTaskState.STATE_MSG_DONE);
    }
  break;
case FAILED:
String stateMsg=ImportTaskState.STATE_MSG_CONVERSION_FAILED;
if (request.getMessage() != null) stateMsg=request.getMessage();
ImagingTasks.setState(imagingTask,ImportTaskState.FAILED,stateMsg);
LOG.warn(String.format("Worker reported failed conversion: %s-%s",stateMsg,request.getErrorCode() != null ? request.getErrorCode() : "no error code"));
final String errorCode=request.getErrorCode();
if (errorCode != null && errorCode.length() > 0 && ImagingWorkers.isFatalError(errorCode)) {
LOG.warn(String.format("A task %s experienced fatal error. Worker instance %s is being retired",request.getImportTaskId(),request.getInstanceId()));
ImagingWorkers.retireWorker(request.getInstanceId());
}
if (imagingTask instanceof DiskImagingTask) {
String conversionTaskId=((DiskImagingTask)imagingTask).getTask().getConversionTaskId();
String imageId=null;
for (ImageInfo imageInfo : ImageConversionManager.getPartitionedImages()) {
if (imageInfo instanceof MachineImageInfo) {
if (conversionTaskId.equals(((MachineImageInfo)imageInfo).getImageConversionId())) {
imageId=imageInfo.getDisplayName();
break;
}
}
}
ImagingSupport.terminateInstancesWaitingImageConversion(imageId);
}
break;
}
}
 else {
reply.setCancelled(true);
}
}
 catch (final Exception ex) {
LOG.warn("Failed to update the task's state",ex);
}
if (reply.getCancelled() != null && reply.getCancelled().booleanValue()) {
LOG.warn(String.format("Imaging task %s has been cancelled",request.getImportTaskId()));
}
return reply;
}
