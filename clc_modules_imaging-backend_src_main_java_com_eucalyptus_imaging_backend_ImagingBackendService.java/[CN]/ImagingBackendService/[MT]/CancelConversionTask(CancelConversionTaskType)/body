{
  final CancelConversionTaskResponseType reply=request.getReply();
  Context ctx=Contexts.lookup();
  try {
    if (!(ctx.getUser().isSystemAdmin())) {
      throw new ImagingServiceException(ImagingServiceException.DEFAULT_CODE,"Not authorized to cancel conversion tasks.");
    }
  }
 catch (  final ImagingServiceException ex) {
    throw ex;
  }
catch (  final Exception ex) {
    throw new ImagingServiceException(ImagingServiceException.DEFAULT_CODE,"Not authorized to cancel conversion tasks.");
  }
  try {
    final ImagingTask task=ImagingTasks.lookup(request.getConversionTaskId());
    final ImportTaskState state=task.getState();
    if (state.equals(ImportTaskState.NEW) || state.equals(ImportTaskState.PENDING) || state.equals(ImportTaskState.CONVERTING)|| state.equals(ImportTaskState.INSTANTIATING)) {
      ImagingTasks.setState(AccountFullName.getInstance(Contexts.lookup().getAccountNumber()),request.getConversionTaskId(),ImportTaskState.CANCELLING,ImportTaskState.STATE_MSG_USER_CANCELLATION);
    }
    reply.set_return(true);
  }
 catch (  final NoSuchElementException ex) {
    throw new ImagingServiceException("No task with id=" + request.getConversionTaskId() + " is found");
  }
catch (  final Exception ex) {
    throw new ImagingServiceException(ImagingServiceException.INTERNAL_SERVER_ERROR,"Failed to cancel conversion task",ex);
  }
  return reply;
}
