{
  try {
    RandomAccessFile raf=new RandomAccessFile(new File(getObjectPath(bucketName,objectName)),"r");
    httpResponse.addHeader(HttpHeaders.Names.CONTENT_TYPE,contentType != null ? contentType : "binary/octet-stream");
    if (etag != null)     httpResponse.addHeader(HttpHeaders.Names.ETAG,etag);
    httpResponse.addHeader(HttpHeaders.Names.LAST_MODIFIED,lastModified);
    if (contentDisposition != null)     httpResponse.addHeader("Content-Disposition",contentDisposition);
    ChunkedInput file;
    isCompressed=isCompressed == null ? false : isCompressed;
    if (isCompressed) {
      file=new CompressedChunkedFile(raf,start,end,(int)Math.min((end - start),8192));
    }
 else {
      file=new ChunkedDataFile(raf,start,end,(int)Math.min((end - start),8192));
      httpResponse.addHeader(HttpHeaders.Names.CONTENT_LENGTH,String.valueOf((end - start)));
    }
    httpResponse.addHeader("Content-Range",start + "-" + end+ "/"+ size);
    if (logData != null) {
      logData.setTurnAroundTime(System.currentTimeMillis() - logData.getTurnAroundTime());
      logData.setBytesSent(size);
    }
    channel.write(httpResponse);
    if (logData != null) {
      channel.write(file).addListener(new ChannelFutureListener(){
        @Override public void operationComplete(        ChannelFuture future) throws Exception {
          logData.setTotalTime(System.currentTimeMillis() - logData.getTotalTime());
          WalrusBucketLogger.getInstance().addLogEntry(logData);
        }
      }
);
    }
 else {
      channel.write(file);
    }
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
  }
}
