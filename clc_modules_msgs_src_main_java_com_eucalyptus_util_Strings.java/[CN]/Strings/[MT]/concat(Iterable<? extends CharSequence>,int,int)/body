{
  final int sequencesLength=end - start;
  return new CharSequence(){
    @Override public int length(){
      return sequencesLength;
    }
    @Override public char charAt(    final int index){
      if (index < 0 || index >= length()) {
        throw new IndexOutOfBoundsException(String.valueOf(index));
      }
      int adjustedIndex=start + index;
      for (      final CharSequence sequence : sequences) {
        if (adjustedIndex < sequence.length()) {
          return sequence.charAt(adjustedIndex);
        }
 else {
          adjustedIndex-=sequence.length();
        }
      }
      throw new IndexOutOfBoundsException(String.valueOf(index));
    }
    @Override public CharSequence subSequence(    final int start,    final int end){
      return concat(Collections.singleton(this),start,end);
    }
    @Nonnull @Override public String toString(){
      return new StringBuilder(this).toString();
    }
  }
;
}
