{
  if (LogLevels.EXTREME) {
    LOG.trace(LogUtil.dumpObject(channelEvent));
  }
  if (channelEvent instanceof MessageEvent) {
    final MessageEvent msgEvent=(MessageEvent)channelEvent;
    try {
      this.incomingMessage(ctx,msgEvent);
      ctx.sendUpstream(channelEvent);
    }
 catch (    LoginException e) {
      LOG.error(e,e);
      if (msgEvent.getMessage() instanceof MappingHttpRequest) {
        MappingHttpResponse httpMessage=new MappingHttpResponse(((HttpRequest)msgEvent.getMessage()).getProtocolVersion(),HttpResponseStatus.FORBIDDEN);
        ByteArrayOutputStream byteOut=new ByteArrayOutputStream();
        httpMessage.getSoapEnvelope().serialize(byteOut);
        ChannelBuffer buffer=ChannelBuffers.wrappedBuffer(byteOut.toByteArray());
        httpMessage.addHeader(HttpHeaders.Names.CONTENT_LENGTH,String.valueOf(buffer.readableBytes()));
        httpMessage.addHeader(HttpHeaders.Names.CONTENT_TYPE,"text/xml; charset=UTF-8");
        httpMessage.setContent(buffer);
        Channels.write(ctx.getChannel(),e);
        throw e;
      }
 else {
        throw new WebServicesException(e.getMessage(),HttpResponseStatus.FORBIDDEN);
      }
    }
catch (    Throwable e) {
      LOG.error(e,e);
      throw new WebServicesException(e.getMessage(),HttpResponseStatus.BAD_REQUEST);
    }
  }
 else {
    ctx.sendUpstream(channelEvent);
  }
}
