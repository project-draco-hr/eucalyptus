{
  AWSCloudWatchAlarmResourceAction oldAction=(AWSCloudWatchAlarmResourceAction)oldResourceAction;
  AWSCloudWatchAlarmResourceAction newAction=(AWSCloudWatchAlarmResourceAction)newResourceAction;
  ServiceConfiguration configuration=Topology.lookup(CloudWatch.class);
  PutMetricAlarmType putMetricAlarmType=MessageHelper.createMessage(PutMetricAlarmType.class,oldAction.info.getEffectiveUserId());
  putMetricAlarmType.setActionsEnabled(newAction.properties.getActionsEnabled() == null ? Boolean.TRUE : newAction.properties.getActionsEnabled());
  if (newAction.properties.getAlarmActions() != null) {
    ResourceList alarmActions=new ResourceList();
    ArrayList<String> alarmActionsMember=Lists.newArrayList(newAction.properties.getAlarmActions());
    alarmActions.setMember(alarmActionsMember);
    putMetricAlarmType.setAlarmActions(alarmActions);
  }
  putMetricAlarmType.setAlarmDescription(newAction.properties.getAlarmDescription());
  putMetricAlarmType.setAlarmName(oldAction.info.getPhysicalResourceId());
  putMetricAlarmType.setComparisonOperator(newAction.properties.getComparisonOperator());
  if (newAction.properties.getDimensions() != null) {
    Dimensions dimensions=new Dimensions();
    ArrayList<Dimension> dimensionsMember=Lists.newArrayList();
    for (    CloudWatchMetricDimension cloudWatchMetricDimension : newAction.properties.getDimensions()) {
      Dimension dimension=new Dimension();
      dimension.setName(cloudWatchMetricDimension.getName());
      dimension.setValue(cloudWatchMetricDimension.getValue());
      dimensionsMember.add(dimension);
    }
    dimensions.setMember(dimensionsMember);
    putMetricAlarmType.setDimensions(dimensions);
  }
  putMetricAlarmType.setEvaluationPeriods(newAction.properties.getEvaluationPeriods());
  if (newAction.properties.getInsufficientDataActions() != null) {
    ResourceList insufficientDataActions=new ResourceList();
    ArrayList<String> insufficientDataActionsMember=Lists.newArrayList(newAction.properties.getInsufficientDataActions());
    insufficientDataActions.setMember(insufficientDataActionsMember);
    putMetricAlarmType.setInsufficientDataActions(insufficientDataActions);
  }
  putMetricAlarmType.setMetricName(newAction.properties.getMetricName());
  putMetricAlarmType.setNamespace(newAction.properties.getNamespace());
  if (newAction.properties.getOkActions() != null) {
    ResourceList okActions=new ResourceList();
    ArrayList<String> okActionsMember=Lists.newArrayList(newAction.properties.getOkActions());
    okActions.setMember(okActionsMember);
    putMetricAlarmType.setOkActions(okActions);
  }
  putMetricAlarmType.setPeriod(newAction.properties.getPeriod());
  putMetricAlarmType.setStatistic(newAction.properties.getStatistic());
  putMetricAlarmType.setThreshold(newAction.properties.getThreshold());
  putMetricAlarmType.setUnit(newAction.properties.getUnit());
  AsyncRequests.<PutMetricAlarmType,PutMetricAlarmResponseType>sendSync(configuration,putMetricAlarmType);
  return newAction;
}
