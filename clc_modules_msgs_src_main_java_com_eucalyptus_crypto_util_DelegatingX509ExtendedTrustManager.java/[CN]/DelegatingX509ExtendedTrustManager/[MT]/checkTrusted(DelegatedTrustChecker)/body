{
  if (!enabled.get()) {
    throw new CertificateException("Delegates disabled");
  }
  final Optional<CertificateException> resultException=CollectionUtils.reduce(delegates,Optional.of(new CertificateException("No delegates")),new Function<Optional<CertificateException>,Function<X509ExtendedTrustManager,Optional<CertificateException>>>(){
    @Override public Function<X509ExtendedTrustManager,Optional<CertificateException>> apply(    final Optional<CertificateException> previousException){
      return new Function<X509ExtendedTrustManager,Optional<CertificateException>>(){
        @Override public Optional<CertificateException> apply(        final X509ExtendedTrustManager trustManager){
          Optional<CertificateException> resultException=Optional.absent();
          if (previousException.isPresent()) {
            try {
              checker.checkTrusted(trustManager);
            }
 catch (            final CertificateException e) {
              resultException=Optional.of(e);
            }
          }
          return resultException;
        }
      }
;
    }
  }
);
  if (resultException.isPresent()) {
    throw resultException.get();
  }
}
