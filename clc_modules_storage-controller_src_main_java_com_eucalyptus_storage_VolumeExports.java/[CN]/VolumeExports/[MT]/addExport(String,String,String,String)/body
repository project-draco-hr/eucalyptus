{
  final VolumeToken requestToken=new VolumeToken(volumeId);
  requestToken.setToken(token);
  Function<VolumeToken,VolumeToken> checkToken=new Function<VolumeToken,VolumeToken>(){
    @Override public VolumeToken apply(    VolumeToken reqToken){
      VolumeToken tok=null;
      EntityTransaction db=Entities.get(VolumeToken.class);
      try {
        tok=Entities.uniqueResult(reqToken);
        Entities.merge(tok);
        VolumeExportRecord record=new VolumeExportRecord();
        record.setToken(tok);
        record.setHostIp(ip);
        record.setHostIqn(iqn);
        tok.addExportRecord(new VolumeExportRecord(volumeId,tok,ip,iqn));
        Entities.persist(record);
        return tok;
      }
 catch (      TransactionException e) {
        LOG.error("Volume Export: " + volumeId + " Transaction error. Rolling back");
      }
catch (      NoSuchElementException e) {
        LOG.error("Invalid Token received for volume " + volumeId);
      }
 finally {
        if (db.isActive()) {
          db.rollback();
        }
      }
      return tok;
    }
  }
;
  try {
    Entities.asTransaction(VolumeToken.class,checkToken).apply(requestToken);
    return true;
  }
 catch (  Exception e) {
    return false;
  }
}
