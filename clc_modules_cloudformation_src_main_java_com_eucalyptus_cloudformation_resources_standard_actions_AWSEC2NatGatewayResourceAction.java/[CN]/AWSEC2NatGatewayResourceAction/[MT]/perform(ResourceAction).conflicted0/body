{
  AWSEC2NatGatewayResourceAction action=(AWSEC2NatGatewayResourceAction)resourceAction;
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
  DescribeNatGatewaysType describeNatGatewaysType=MessageHelper.createMessage(DescribeNatGatewaysType.class,action.info.getEffectiveUserId());
  describeNatGatewaysType.getFilterSet().add(Filter.filter("nat-gateway-id",action.info.getPhysicalResourceId()));
  DescribeNatGatewaysResponseType describeNatGatewaysResponseType;
  try {
    describeNatGatewaysResponseType=AsyncRequests.sendSync(configuration,describeNatGatewaysType);
  }
 catch (  final Exception e) {
    throw new ValidationErrorException("Error describing nat gateway " + action.info.getPhysicalResourceId() + ":"+ asWebServiceErrorMessage(e,e.getMessage()));
  }
  if (describeNatGatewaysResponseType.getNatGatewaySet() == null || describeNatGatewaysResponseType.getNatGatewaySet().getItem() == null || describeNatGatewaysResponseType.getNatGatewaySet().getItem().size() == 0) {
    throw new RetryAfterConditionCheckFailedException("Nat gateway " + action.info.getPhysicalResourceId() + " not yet available");
  }
  if (!"available".equals(describeNatGatewaysResponseType.getNatGatewaySet().getItem().get(0).getState())) {
    throw new RetryAfterConditionCheckFailedException("Nat gateway " + action.info.getPhysicalResourceId() + " not yet available");
  }
  return action;
}
