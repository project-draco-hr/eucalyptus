{
  Bucket bucket=getBucketAndCheckAuthorization(request);
  ListBucketResponseType reply=request.getReply();
  int maxKeys=1000;
  try {
    if (!Strings.isNullOrEmpty(request.getMaxKeys())) {
      maxKeys=Integer.parseInt(request.getMaxKeys());
    }
  }
 catch (  NumberFormatException e) {
    LOG.error("Failed to parse maxKeys from request properly: " + request.getMaxKeys(),e);
    throw new InvalidArgumentException("MaxKeys");
  }
  reply.setMaxKeys(maxKeys);
  reply.setName(request.getBucket());
  reply.setDelimiter(request.getDelimiter());
  reply.setMarker(request.getMarker());
  reply.setPrefix(request.getPrefix());
  reply.setIsTruncated(false);
  PaginatedResult<ObjectEntity> result;
  try {
    result=ObjectMetadataManagers.getInstance().listPaginated(bucket,maxKeys,request.getPrefix(),request.getDelimiter(),request.getMarker());
  }
 catch (  Exception e) {
    LOG.error("Error getting object listing for bucket: " + request.getBucket(),e);
    throw new InternalErrorException(request.getBucket());
  }
  if (result != null) {
    reply.setContents(new ArrayList<ListEntry>());
    for (    ObjectEntity obj : result.getEntityList()) {
      reply.getContents().add(obj.toListEntry());
    }
    if (result.getCommonPrefixes() != null && result.getCommonPrefixes().size() > 0) {
      reply.setCommonPrefixesList(new ArrayList<CommonPrefixesEntry>());
      for (      String s : result.getCommonPrefixes()) {
        reply.getCommonPrefixesList().add(new CommonPrefixesEntry(s));
      }
    }
    reply.setIsTruncated(result.isTruncated);
    if (result.isTruncated) {
      if (result.getLastEntry() instanceof ObjectEntity) {
        reply.setNextMarker(((ObjectEntity)result.getLastEntry()).getObjectKey());
      }
 else {
        reply.setNextMarker((result.getLastEntry() != null ? result.getLastEntry().toString() : ""));
      }
    }
  }
 else {
  }
  setCorsInfo(request,reply,bucket);
  return reply;
}
