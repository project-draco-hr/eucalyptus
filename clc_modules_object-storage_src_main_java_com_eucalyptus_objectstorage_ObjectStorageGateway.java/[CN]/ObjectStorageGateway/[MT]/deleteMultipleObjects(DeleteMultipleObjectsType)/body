{
  logRequest(request);
  String bucketName=request.getBucket();
  ensureBucketExists(bucketName);
  DeleteMultipleObjectsMessage message=request.getDelete();
  boolean quiet=message.getQuiet() == null ? false : message.getQuiet().booleanValue();
  DeleteMultipleObjectsResponseType reply=request.getReply();
  DeleteMultipleObjectsMessageReply deleted=new DeleteMultipleObjectsMessageReply();
  deleted.setDeleted(Lists.<DeleteMultipleObjectsEntryVersioned>newArrayList());
  deleted.setErrors(Lists.<DeleteMultipleObjectsError>newArrayList());
  reply.setDeleteResult(deleted);
  if (message.getObjects() != null) {
    for (    DeleteMultipleObjectsEntry entry : message.getObjects()) {
      DeleteMultipleObjectsEntryVersioned response=null;
      DeleteMultipleObjectsError error=null;
      String key=entry.getKey();
      String versionId=StringUtils.isNotBlank(entry.getVersionId()) ? entry.getVersionId() : null;
      if (versionId != null) {
        try {
          DeleteVersionType delVerRequest=new DeleteVersionType();
          delVerRequest.setBucket(bucketName);
          delVerRequest.setKey(key);
          delVerRequest.setVersionId(versionId);
          delVerRequest.setCorrelationId(request.getCorrelationId());
          delVerRequest.setEffectiveUserId(request.getEffectiveUserId());
          DeleteVersionResponseType delVerResponse=deleteVersion(delVerRequest);
          if (!quiet) {
            response=new DeleteMultipleObjectsEntryVersioned();
            response.setKey(key);
            response.setVersionId(versionId);
            if (delVerResponse.getIsDeleteMarker() != null && delVerResponse.getIsDeleteMarker()) {
              response.setDeleteMarker(delVerResponse.getIsDeleteMarker());
              response.setDeleteMarkerVersionId(delVerResponse.getVersionId());
            }
          }
        }
 catch (        S3Exception e) {
          error=new DeleteMultipleObjectsError();
          error.setKey(key);
          error.setVersionId(versionId);
          error.setCode(DeleteMultipleObjectsErrorCode.AccessDenied.toString().equals(e.getCode()) ? DeleteMultipleObjectsErrorCode.AccessDenied : DeleteMultipleObjectsErrorCode.InternalError);
          error.setMessage(e.getMessage());
        }
      }
 else {
        try {
          DeleteObjectType delObjRequest=new DeleteObjectType();
          delObjRequest.setBucket(bucketName);
          delObjRequest.setKey(key);
          delObjRequest.setCorrelationId(request.getCorrelationId());
          delObjRequest.setEffectiveUserId(request.getEffectiveUserId());
          DeleteObjectResponseType delObjResponse=deleteObject(delObjRequest);
          if (!quiet) {
            response=new DeleteMultipleObjectsEntryVersioned();
            response.setKey(key);
            if (delObjResponse.getIsDeleteMarker() != null && delObjResponse.getIsDeleteMarker()) {
              response.setDeleteMarker(delObjResponse.getIsDeleteMarker());
              response.setDeleteMarkerVersionId(delObjResponse.getVersionId());
            }
          }
        }
 catch (        S3Exception e) {
          error=new DeleteMultipleObjectsError();
          error.setKey(key);
          error.setCode(DeleteMultipleObjectsErrorCode.AccessDenied.toString().equals(e.getCode()) ? DeleteMultipleObjectsErrorCode.AccessDenied : DeleteMultipleObjectsErrorCode.InternalError);
          error.setMessage(e.getMessage());
        }
      }
      if (error != null) {
        deleted.getErrors().add(error);
      }
 else       if (response != null) {
        deleted.getDeleted().add(response);
      }
 else {
      }
    }
  }
  return reply;
}
