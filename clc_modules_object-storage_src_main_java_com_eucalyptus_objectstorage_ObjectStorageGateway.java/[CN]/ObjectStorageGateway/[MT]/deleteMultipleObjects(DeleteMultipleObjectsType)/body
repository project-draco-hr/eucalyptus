{
  logRequest(request);
  DeleteMultipleObjectsResponseType reply=request.getReply();
  DeleteMultipleObjectsMessageReply deleted=new DeleteMultipleObjectsMessageReply();
  deleted.setDeleted(Lists.<DeleteMultipleObjectsEntryVersioned>newArrayList());
  deleted.setErrors(Lists.<DeleteMultipleObjectsError>newArrayList());
  reply.setDeleteResult(deleted);
  DeleteMultipleObjectsMessage message=request.getDelete();
  Bucket bucket=ensureBucketExists(request.getBucket());
  boolean quiet=message.getQuiet() == null ? false : message.getQuiet().booleanValue();
  reply.setQuiet(new Boolean(quiet));
  if (quiet) {
    reply.setStatus(HttpResponseStatus.NO_CONTENT);
    reply.setStatusMessage("No Content");
  }
  if (message.getObjects() != null) {
    for (    DeleteMultipleObjectsEntry entry : message.getObjects()) {
      DeleteMultipleObjectsEntryVersioned response=null;
      DeleteMultipleObjectsError error=null;
      String versionId=entry.getVersionId() != null && !"".equals(entry.getVersionId().trim()) ? entry.getVersionId() : null;
      String key=entry.getKey();
      ObjectEntity object=null;
      String keyFullName=bucket.getBucketName() + "/" + key+ (versionId == null ? "" : "?versionId=" + versionId);
      try {
        object=ObjectMetadataManagers.getInstance().lookupObject(bucket,key,versionId);
      }
 catch (      NoSuchEntityException|NoSuchElementException e) {
      }
catch (      Exception e) {
        if (!quiet) {
          LOG.error("Error getting metadata for " + keyFullName);
          error=generateDeleteError(key,versionId,DeleteMultipleObjectsErrorCode.InternalError,"Internal Error");
        }
      }
      if (object != null && error == null && !OsgAuthorizationHandler.getInstance().operationAllowed(request,bucket,object,0)) {
        error=generateDeleteError(key,versionId,DeleteMultipleObjectsErrorCode.AccessDenied,"Access Denied");
      }
      if (error == null) {
        try {
          ObjectEntity responseEntity=null;
          User currentUser=Contexts.lookup().getUser();
          if (object != null) {
            responseEntity=OsgObjectFactory.getFactory().logicallyDeleteObject(ospClient,object,currentUser);
            try {
              fireObjectUsageEvent(S3ObjectEvent.S3ObjectAction.OBJECTDELETE,bucket.getBucketName(),key,versionId,Contexts.lookup().getUser().getUserId(),object.getSize());
            }
 catch (            Exception e) {
              LOG.warn("caught exception while attempting to fire reporting event, exception message - " + e.getMessage());
            }
          }
          response=new DeleteMultipleObjectsEntryVersioned();
          response.setKey(key);
          response.setVersionId(versionId);
          if (responseEntity != null && responseEntity.getIsDeleteMarker() != null && responseEntity.getIsDeleteMarker().booleanValue()) {
            response.setDeleteMarker(Boolean.TRUE);
            response.setDeleteMarkerVersionId(responseEntity.getVersionId());
          }
        }
 catch (        Exception e) {
          error=generateDeleteError(key,versionId,DeleteMultipleObjectsErrorCode.InternalError,"Internal Error");
        }
      }
      if (!quiet) {
        if (error != null) {
          deleted.getErrors().add(error);
        }
 else {
          deleted.getDeleted().add(response);
        }
      }
    }
  }
  return reply;
}
