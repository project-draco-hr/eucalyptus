{
  InitiateMultipartUploadResponseType reply=(InitiateMultipartUploadResponseType)request.getReply();
  logRequest(request);
  Bucket bucket=null;
  try {
    bucket=BucketManagers.getInstance().get(request.getBucket(),false,null);
  }
 catch (  NoSuchElementException e) {
    throw new NoSuchBucketException(request.getBucket());
  }
catch (  Exception e) {
    throw new InternalErrorException();
  }
  String versionId=null;
  try {
    versionId=BucketManagers.getInstance().getVersionId(bucket);
  }
 catch (  Exception e2) {
    LOG.error("Error generating version Id string by bucket " + bucket.getBucketName(),e2);
    throw new InternalErrorException(request.getBucket() + "/" + request.getKey());
  }
  User requestUser=Contexts.lookup().getUser();
  ObjectEntity objectEntity=new ObjectEntity();
  try {
    objectEntity.initializeForCreate(request.getBucket(),request.getKey(),versionId,request.getCorrelationId(),0,requestUser);
  }
 catch (  Exception e) {
    LOG.error("Error initializing entity for persisting object metadata for " + request.getBucket() + "/"+ request.getKey());
    throw new InternalErrorException(request.getBucket() + "/" + request.getKey());
  }
  if (OSGAuthorizationHandler.getInstance().operationAllowed(request,bucket,objectEntity,0)) {
    AccessControlPolicy acp=new AccessControlPolicy();
    acp.setAccessControlList(request.getAccessControlList());
    try {
      acp=AclUtils.processNewResourcePolicy(requestUser,acp,bucket.getOwnerCanonicalId());
    }
 catch (    Exception e) {
      LOG.error("Error processing ACL for put object " + objectEntity.getResourceFullName(),e);
      throw new MalformedACLErrorException(objectEntity.getResourceFullName());
    }
    try {
      objectEntity.setAcl(acp);
    }
 catch (    Exception e) {
      LOG.error("Error encountered setting object ACP for " + objectEntity.getResourceFullName() + " . Failing put operation",e);
      throw new InternalErrorException(request.getBucket() + "/" + request.getKey());
    }
    final String fullObjectKey=objectEntity.getObjectUuid();
    request.setKey(fullObjectKey);
    try {
      ObjectManagers.getInstance().createPending(bucket,objectEntity);
    }
 catch (    Exception e) {
      throw new InternalErrorException(request.getBucket() + "/" + request.getKey());
    }
    InitiateMultipartUploadResponseType response=ospClient.initiateMultipartUpload(request);
    objectEntity.setUploadId(response.getUploadId());
    try {
      ObjectManagers.getInstance().updateObject(bucket,objectEntity);
    }
 catch (    Exception e) {
      throw new InternalErrorException(request.getBucket() + "/" + request.getKey());
    }
    return response;
  }
 else {
    throw new AccessDeniedException(request.getBucket() + "/" + request.getKey());
  }
}
