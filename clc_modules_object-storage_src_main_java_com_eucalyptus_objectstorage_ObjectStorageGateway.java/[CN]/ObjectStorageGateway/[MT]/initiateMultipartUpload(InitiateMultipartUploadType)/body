{
  logRequest(request);
  Bucket bucket=null;
  try {
    bucket=BucketMetadataManagers.getInstance().lookupExtantBucket(request.getBucket());
  }
 catch (  NoSuchEntityException|NoSuchElementException e) {
    throw new NoSuchBucketException(request.getBucket());
  }
catch (  Exception e) {
    throw new InternalErrorException();
  }
  User requestUser=getRequestUser(request);
  ObjectEntity objectEntity;
  try {
    objectEntity=ObjectEntity.newInitializedForCreate(bucket,request.getKey(),0,requestUser);
  }
 catch (  Exception e) {
    LOG.error("Error initializing entity for persisting object metadata for " + request.getBucket() + "/"+ request.getKey());
    throw new InternalErrorException(request.getBucket() + "/" + request.getKey());
  }
  if (OsgAuthorizationHandler.getInstance().operationAllowed(request,bucket,objectEntity,0)) {
    try {
      AccessControlPolicy acp=getFullAcp(request.getAccessControlList(),requestUser,bucket.getOwnerCanonicalId());
      objectEntity.setAcl(acp);
      final String fullObjectKey=objectEntity.getObjectUuid();
      final String originalBucket=request.getBucket();
      final String originalKey=request.getKey();
      request.setKey(fullObjectKey);
      request.setBucket(bucket.getBucketUuid());
      objectEntity=ObjectMetadataManagers.getInstance().initiateCreation(objectEntity);
      InitiateMultipartUploadResponseType response=ospClient.initiateMultipartUpload(request);
      objectEntity.setUploadId(response.getUploadId());
      response.setKey(originalKey);
      response.setBucket(originalBucket);
      ObjectMetadataManagers.getInstance().finalizeMultipartInit(objectEntity,new Date(),response.getUploadId());
      return response;
    }
 catch (    S3Exception e) {
      throw e;
    }
catch (    Exception e) {
      throw new InternalErrorException(request.getBucket() + "/" + request.getKey());
    }
  }
 else {
    throw new AccessDeniedException(request.getBucket() + "/" + request.getKey());
  }
}
