{
  CompleteMultipartUploadResponseType reply=(CompleteMultipartUploadResponseType)request.getReply();
  logRequest(request);
  Bucket bucket=null;
  try {
    bucket=BucketManagers.getInstance().get(request.getBucket(),false,null);
  }
 catch (  NoSuchElementException e) {
    throw new NoSuchBucketException(request.getBucket());
  }
catch (  Exception e) {
    throw new InternalErrorException();
  }
  String versionId=null;
  try {
    versionId=BucketManagers.getInstance().getVersionId(bucket);
  }
 catch (  Exception e2) {
    LOG.error("Error generating version Id string by bucket " + bucket.getBucketName(),e2);
    throw new InternalErrorException(request.getBucket() + "/" + request.getKey());
  }
  long objectSize=0L;
  try {
    objectSize=ObjectManagers.getInstance().getUploadSize(bucket,request.getKey(),request.getUploadId());
  }
 catch (  Exception e) {
    throw new InternalErrorException("Cannot get size for uploaded parts for: " + bucket.getBucketName() + "/"+ request.getKey());
  }
  User requestUser=Contexts.lookup().getUser();
  ObjectEntity objectEntity=new ObjectEntity();
  try {
    objectEntity.initializeForCreate(request.getBucket(),request.getKey(),versionId,request.getCorrelationId(),objectSize,requestUser);
  }
 catch (  Exception e) {
    LOG.error("Error initializing entity for persisting object metadata for " + request.getBucket() + "/"+ request.getKey());
    throw new InternalErrorException(request.getBucket() + "/" + request.getKey());
  }
  long newBucketSize=bucket.getBucketSize() == null ? 0 : bucket.getBucketSize();
  if (OSGAuthorizationHandler.getInstance().operationAllowed(request,bucket,objectEntity,newBucketSize)) {
    final String fullObjectKey=objectEntity.getObjectUuid();
    request.setKey(fullObjectKey);
    try {
      CompleteMultipartUploadResponseType response=ObjectManagers.getInstance().create(bucket,objectEntity,new CallableWithRollback<CompleteMultipartUploadResponseType,Boolean>(){
        @Override public CompleteMultipartUploadResponseType call() throws S3Exception, Exception {
          return ospClient.completeMultipartUpload(request);
        }
        @Override public Boolean rollback(        CompleteMultipartUploadResponseType arg) throws Exception {
          DeleteObjectType deleteRequest=new DeleteObjectType();
          deleteRequest.setBucket(request.getBucket());
          deleteRequest.setKey(fullObjectKey);
          DeleteObjectResponseType resp=ospClient.deleteObject(deleteRequest);
          if (resp != null) {
            return true;
          }
 else {
            return false;
          }
        }
      }
);
      return response;
    }
 catch (    Exception e) {
      if (e instanceof S3Exception) {
        LOG.error("Got exception completing upload for " + objectEntity.getResourceFullName() + " with uuid: "+ objectEntity.getObjectUuid(),e);
        throw (S3Exception)e;
      }
 else {
        LOG.error("Got exception completing upload for " + objectEntity.getResourceFullName() + " with uuid: "+ objectEntity.getObjectUuid(),e);
        throw new InternalErrorException(objectEntity.getResourceFullName());
      }
    }
  }
 else {
    throw new AccessDeniedException(request.getBucket() + "/" + request.getKey());
  }
}
