{
  logRequest(request);
  User requestUser=Contexts.lookup().getUser();
  final Bucket srcBucket=ensureBucketExists(request.getSourceBucket());
  final ObjectEntity srcObject;
  try {
    srcObject=ObjectMetadataManagers.getInstance().lookupObject(srcBucket,request.getSourceObject(),request.getSourceVersionId());
  }
 catch (  NoSuchElementException e) {
    throw new NoSuchKeyException(request.getSourceBucket() + "/" + request.getSourceObject());
  }
catch (  Exception e) {
    throw new InternalErrorException(request.getSourceBucket());
  }
  if (OsgAuthorizationHandler.getInstance().operationAllowed(request,srcBucket,srcObject,0)) {
    CopyObjectResponseType reply=request.getReply();
    Bucket destBucket=ensureBucketExists(request.getDestinationBucket());
    String destinationKey=request.getDestinationObject();
    String metadataDirective=request.getMetadataDirective();
    String copyIfMatch=request.getCopySourceIfMatch();
    String copyIfNoneMatch=request.getCopySourceIfNoneMatch();
    Date copyIfUnmodifiedSince=request.getCopySourceIfUnmodifiedSince();
    Date copyIfModifiedSince=request.getCopySourceIfModifiedSince();
    if (metadataDirective == null || "".equals(metadataDirective)) {
      metadataDirective="COPY";
    }
    long newBucketSize=(destBucket.getBucketSize() == null ? 0l : destBucket.getBucketSize().longValue()) + srcObject.getSize().longValue();
    ObjectEntity destObject=null;
    Long origDestObjectSize=null;
    try {
      destObject=ObjectMetadataManagers.getInstance().lookupObject(destBucket,destinationKey,null);
      origDestObjectSize=destObject.getSize();
    }
 catch (    NoSuchElementException nse) {
    }
catch (    Exception e) {
      LOG.error("exception occurred while checking if destination object in bucket " + destBucket.getBucketName() + " with key "+ destinationKey+ " already exists",e);
      throw new InternalErrorException(destBucket.getBucketName() + "/" + destinationKey);
    }
    try {
      if (destObject == null || (destBucket.getVersioning() != null && destBucket.getVersioning() == ObjectStorageProperties.VersioningStatus.Enabled)) {
        destObject=ObjectEntity.newInitializedForCreate(destBucket,destinationKey,srcObject.getSize().longValue(),requestUser);
      }
    }
 catch (    Exception e) {
      LOG.error("Error initializing entity for persisting object metadata for " + destBucket.getBucketName() + "/"+ request.getDestinationObject());
      throw new InternalErrorException(destBucket.getBucketName() + "/" + destinationKey);
    }
    if (OsgAuthorizationHandler.getInstance().operationAllowed(request,destBucket,destObject,newBucketSize)) {
      if (copyIfMatch != null) {
        if (!copyIfMatch.equals(srcObject.geteTag())) {
          throw new PreconditionFailedException(srcObject.getObjectKey() + " CopySourceIfMatch: " + copyIfMatch);
        }
      }
      if (copyIfNoneMatch != null) {
        if (copyIfNoneMatch.equals(srcObject.geteTag())) {
          throw new PreconditionFailedException(srcObject.getObjectKey() + " CopySourceIfNoneMatch: " + copyIfNoneMatch);
        }
      }
      if (copyIfUnmodifiedSince != null) {
        long unmodifiedTime=copyIfUnmodifiedSince.getTime();
        long objectTime=srcObject.getObjectModifiedTimestamp().getTime();
        if (unmodifiedTime < objectTime) {
          throw new PreconditionFailedException(srcObject.getObjectKey() + " CopySourceIfUnmodifiedSince: " + copyIfUnmodifiedSince.toString());
        }
      }
      if (copyIfModifiedSince != null) {
        long modifiedTime=copyIfModifiedSince.getTime();
        long objectTime=srcObject.getObjectModifiedTimestamp().getTime();
        if (modifiedTime > objectTime) {
          throw new PreconditionFailedException(srcObject.getObjectKey() + " CopySourceIfModifiedSince: " + copyIfModifiedSince.toString());
        }
      }
      try {
        String requestUserCanonicalId=requestUser.getAccount() != null ? requestUser.getAccount().getCanonicalId() : null;
        AccessControlPolicy acp=getFullAcp(AclUtils.expandCannedAcl(request.getAccessControlList(),requestUserCanonicalId,requestUserCanonicalId),requestUser,requestUserCanonicalId);
        destObject.setAcl(acp);
      }
 catch (      Exception e) {
        LOG.warn("encountered an exception while constructing access control policy to set on " + destBucket.getBucketName() + "/"+ destObject.getObjectKey(),e);
        throw new InternalErrorException(destBucket.getBucketName() + "/" + destObject.getObjectKey()+ "?acl");
      }
      destObject.setSize(srcObject.getSize());
      destObject.setStorageClass(srcObject.getStorageClass());
      String etag=srcObject.geteTag();
      destObject.seteTag(etag);
      destObject.setIsLatest(Boolean.TRUE);
      if (destBucket.getVersioning() == ObjectStorageProperties.VersioningStatus.Enabled) {
        reply.setCopySourceVersionId(srcObject.getVersionId());
        reply.setVersionId(destObject.getVersionId());
      }
      String sourceObjUuid=srcObject.getObjectUuid();
      String sourceBckUuid=srcBucket.getBucketUuid();
      String destObjUuid=destObject.getObjectUuid();
      String destBckUuid=destBucket.getBucketUuid();
      request.setSourceObject(sourceObjUuid);
      request.setSourceBucket(sourceBckUuid);
      request.setSourceVersionId(ObjectStorageProperties.NULL_VERSION_ID);
      request.setDestinationObject(destObjUuid);
      request.setDestinationBucket(destBckUuid);
      try {
        ObjectEntity objectEntity=OsgObjectFactory.getFactory().copyObject(ospClient,destObject,request,requestUser,metadataDirective);
        reply.setLastModified(DateFormatter.dateToListingFormattedString(objectEntity.getObjectModifiedTimestamp()));
        reply.setEtag(objectEntity.geteTag());
        try {
          if (!(destBucket.getBucketName().equals(srcBucket.getBucketName()) && destObject.getObjectKey().equals(srcObject.getObjectKey()))) {
            fireObjectCreationEvent(destBucket.getBucketName(),destObject.getObjectKey(),destObject.getVersionId(),requestUser.getUserId(),destObject.getSize(),origDestObjectSize);
          }
        }
 catch (        Exception ex) {
          LOG.debug("Failed to fire reporting event for OSG COPY object operation",ex);
        }
      }
 catch (      Exception ex) {
        LOG.warn("CorrelationId: " + Contexts.lookup().getCorrelationId() + " Responding to client with 500 InternalError because of:",ex);
        throw new InternalErrorException("Could not copy " + srcBucket.getBucketName() + "/"+ srcObject.getObjectKey()+ " to "+ destBucket.getBucketName()+ "/"+ destObject.getObjectKey(),ex);
      }
      request.setSourceObject(srcObject.getObjectKey());
      request.setSourceVersionId(srcObject.getVersionId());
      request.setDestinationObject(destinationKey);
      request.setSourceBucket(srcBucket.getBucketName());
      request.setDestinationBucket(destBucket.getBucketName());
      return reply;
    }
 else {
      throw new AccessDeniedException(destBucket.getBucketName() + "/" + destinationKey);
    }
  }
 else {
    throw new AccessDeniedException(srcBucket.getBucketName());
  }
}
