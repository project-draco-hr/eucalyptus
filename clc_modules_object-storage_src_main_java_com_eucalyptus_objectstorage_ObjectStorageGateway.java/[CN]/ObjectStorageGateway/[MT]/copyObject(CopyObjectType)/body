{
  logRequest(request);
  String sourceBucket=request.getSourceBucket();
  String sourceKey=request.getSourceObject();
  String sourceVersionId=request.getSourceVersionId();
  User requestUser=Contexts.lookup().getUser();
  final Bucket srcBucket=ensureBucketExists(sourceBucket);
  final ObjectEntity srcObject;
  try {
    srcObject=ObjectMetadataManagers.getInstance().lookupObject(srcBucket,sourceKey,sourceVersionId);
  }
 catch (  NoSuchElementException e) {
    throw new NoSuchKeyException(sourceBucket + "/" + sourceKey);
  }
catch (  Exception e) {
    throw new InternalErrorException(sourceBucket);
  }
  if (OsgAuthorizationHandler.getInstance().operationAllowed(request.getGetObjectRequest(),srcBucket,srcObject,0)) {
    CopyObjectResponseType reply=request.getReply();
    String destinationBucket=request.getDestinationBucket();
    String destinationKey=request.getDestinationObject();
    Bucket destBucket=ensureBucketExists(destinationBucket);
    ObjectEntity destObject;
    try {
      destObject=ObjectEntity.newInitializedForCreate(destBucket,destinationKey,srcObject.getSize().longValue(),requestUser);
    }
 catch (    Exception e) {
      LOG.error("Error initializing entity for persisting object metadata for " + destinationBucket + "/"+ destinationKey);
      throw new InternalErrorException(destinationBucket + "/" + destinationKey);
    }
    if (OsgAuthorizationHandler.getInstance().operationAllowed(request.getPutObjectRequest(),destBucket,destObject,srcObject.getSize().longValue())) {
      String metadataDirective=request.getMetadataDirective();
      String copyIfMatch=request.getCopySourceIfMatch();
      String copyIfNoneMatch=request.getCopySourceIfNoneMatch();
      Date copyIfUnmodifiedSince=request.getCopySourceIfUnmodifiedSince();
      Date copyIfModifiedSince=request.getCopySourceIfModifiedSince();
      boolean updateMetadataOnly=false;
      if (Strings.isNullOrEmpty(metadataDirective)) {
        metadataDirective=MetadataDirective.COPY.toString();
      }
 else {
        try {
          metadataDirective=(MetadataDirective.valueOf(metadataDirective)).toString();
        }
 catch (        IllegalArgumentException e) {
          throw new InvalidArgumentException(ObjectStorageProperties.METADATA_DIRECTIVE,"Unknown metadata directive: " + metadataDirective);
        }
      }
      if (sourceBucket.equals(destinationBucket) && sourceKey.equals(destinationKey) && Strings.isNullOrEmpty(request.getSourceVersionId())) {
        if (MetadataDirective.REPLACE.toString().equals(metadataDirective)) {
          updateMetadataOnly=true;
        }
 else {
          throw new InvalidRequestException(destinationBucket + "/" + destinationKey,"This copy request is illegal because it is trying to copy an object to itself without changing the " + "object's metadata, storage class, website redirect location or encryption attributes.");
        }
      }
      Map<String,String> modded=null;
      if (MetadataDirective.REPLACE.toString().equals(metadataDirective)) {
        if (request.getCopiedHeaders() != null && !request.getCopiedHeaders().isEmpty()) {
          modded=Maps.newHashMap(request.getCopiedHeaders());
        }
 else {
          modded=Maps.newHashMap();
        }
      }
 else {
        modded=srcObject.getStoredHeaders();
      }
      destObject.setStoredHeaders(modded);
      if (copyIfMatch != null) {
        if (!copyIfMatch.equals(srcObject.geteTag())) {
          throw new PreconditionFailedException(sourceKey + " CopySourceIfMatch: " + copyIfMatch);
        }
      }
      if (copyIfNoneMatch != null) {
        if (copyIfNoneMatch.equals(srcObject.geteTag())) {
          throw new PreconditionFailedException(sourceKey + " CopySourceIfNoneMatch: " + copyIfNoneMatch);
        }
      }
      if (copyIfUnmodifiedSince != null) {
        if (copyIfUnmodifiedSince.getTime() < srcObject.getObjectModifiedTimestamp().getTime()) {
          throw new PreconditionFailedException(sourceKey + " CopySourceIfUnmodifiedSince: " + copyIfUnmodifiedSince.toString());
        }
      }
      if (copyIfModifiedSince != null) {
        if (copyIfModifiedSince.getTime() > srcObject.getObjectModifiedTimestamp().getTime()) {
          throw new PreconditionFailedException(sourceKey + " CopySourceIfModifiedSince: " + copyIfModifiedSince.toString());
        }
      }
      try {
        String requestUserCanonicalId=requestUser.getAccount() != null ? requestUser.getAccount().getCanonicalId() : null;
        AccessControlPolicy acp=getFullAcp(AclUtils.expandCannedAcl(request.getAccessControlList(),destBucket.getOwnerCanonicalId(),requestUserCanonicalId),requestUser,destBucket.getOwnerCanonicalId());
        destObject.setAcl(acp);
      }
 catch (      Exception e) {
        LOG.warn("Encountered an exception while constructing access control policy to set on " + destinationBucket + "/"+ destinationKey,e);
        throw new InternalErrorException(destinationBucket + "/" + destinationKey+ "?acl");
      }
      destObject.setSize(srcObject.getSize());
      destObject.setStorageClass(srcObject.getStorageClass());
      destObject.seteTag(srcObject.geteTag());
      destObject.setIsLatest(Boolean.TRUE);
      request.setSourceObject(srcObject.getObjectUuid());
      request.setSourceBucket(srcBucket.getBucketUuid());
      request.setSourceVersionId(ObjectStorageProperties.NULL_VERSION_ID);
      request.setDestinationObject(destObject.getObjectUuid());
      request.setDestinationBucket(destBucket.getBucketUuid());
      try {
        ObjectEntity objectEntity=OsgObjectFactory.getFactory().copyObject(ospClient,destObject,request,requestUser,metadataDirective);
        reply.setLastModified(DateFormatter.dateToListingFormattedString(objectEntity.getObjectModifiedTimestamp()));
        reply.setEtag(objectEntity.geteTag());
        try {
          if (!updateMetadataOnly) {
            fireObjectCreationEvent(destinationBucket,destinationKey,destObject.getVersionId(),requestUser.getUserId(),destObject.getSize(),null);
          }
        }
 catch (        Exception ex) {
          LOG.debug("Failed to fire reporting event for OSG COPY object operation",ex);
        }
      }
 catch (      Exception ex) {
        LOG.warn("CorrelationId: " + Contexts.lookup().getCorrelationId() + " Responding to client with 500 InternalError because of:",ex);
        throw new InternalErrorException("Could not copy " + srcBucket.getBucketName() + "/"+ srcObject.getObjectKey()+ " to "+ destBucket.getBucketName()+ "/"+ destObject.getObjectKey(),ex);
      }
      reply.setCopySourceVersionId(sourceVersionId != null ? sourceVersionId : (!srcObject.getVersionId().equals(ObjectStorageProperties.NULL_VERSION_ID) ? srcObject.getVersionId() : null));
      reply.setVersionId(!destObject.getVersionId().equals(ObjectStorageProperties.NULL_VERSION_ID) ? destObject.getVersionId() : null);
      return reply;
    }
 else {
      throw new AccessDeniedException(destinationBucket + "/" + destinationKey);
    }
  }
 else {
    throw new AccessDeniedException(sourceBucket + "/" + sourceKey);
  }
}
