{
  ObjectEntity objectEntity=getObjectEntityAndCheckPermissions(request,request.getVersionId());
  if (objectEntity.getIsDeleteMarker()) {
    throw new NoSuchKeyException(request.getKey());
  }
  request.setKey(objectEntity.getObjectUuid());
  request.setBucket(objectEntity.getBucket().getBucketUuid());
  Date ifModifiedSince=request.getIfModifiedSince();
  Date ifUnmodifiedSince=request.getIfUnmodifiedSince();
  String ifMatch=request.getIfMatch();
  String ifNoneMatch=request.getIfNoneMatch();
  if (ifMatch != null && !objectEntity.geteTag().equals(ifMatch)) {
    throw new PreconditionFailedException("If-Match");
  }
  if (DATE_TIME_COMPARATOR.compare(objectEntity.getObjectModifiedTimestamp(),ifUnmodifiedSince) > 0) {
    throw new PreconditionFailedException("If-Unmodified-Since");
  }
  boolean shortReply=false;
  if (ifNoneMatch != null) {
    if (objectEntity.geteTag().equals(ifNoneMatch)) {
      if (ifModifiedSince != null) {
        if (DATE_TIME_COMPARATOR.compare(objectEntity.getObjectModifiedTimestamp(),ifModifiedSince) <= 0) {
          shortReply=true;
        }
 else {
          shortReply=false;
        }
      }
 else {
        shortReply=true;
      }
    }
 else {
      shortReply=false;
    }
  }
 else   if (ifModifiedSince != null && DATE_TIME_COMPARATOR.compare(objectEntity.getObjectModifiedTimestamp(),ifModifiedSince) <= 0) {
    shortReply=true;
  }
 else {
    shortReply=false;
  }
  if (shortReply) {
    return generateNotModifiedResponse(request,objectEntity);
  }
  request.setIfModifiedSince(null);
  request.setIfUnmodifiedSince(null);
  request.setIfMatch(null);
  request.setIfNoneMatch(null);
  Long objectSize=objectEntity.getSize();
  Long lastIndex=(objectSize - 1) < 0 ? 0 : (objectSize - 1);
  Long byteRangeStart=request.getByteRangeStart();
  Long byteRangeEnd=request.getByteRangeEnd();
  if (byteRangeStart != null && byteRangeEnd != null) {
    if (byteRangeEnd < byteRangeStart) {
      byteRangeStart=null;
      byteRangeEnd=null;
    }
  }
 else   if (byteRangeStart == null && byteRangeEnd == null) {
  }
 else   if (byteRangeStart != null) {
    if (objectSize == 0) {
      throw new InvalidRangeException("bytes=" + ObjectUtils.toString(request.getByteRangeStart()) + "-"+ ObjectUtils.toString(request.getByteRangeEnd()));
    }
 else {
      byteRangeEnd=lastIndex;
    }
  }
 else {
    if (byteRangeEnd == 0) {
      throw new InvalidRangeException("bytes=" + ObjectUtils.toString(request.getByteRangeStart()) + "-"+ ObjectUtils.toString(request.getByteRangeEnd()));
    }
 else {
      byteRangeStart=(objectSize - byteRangeEnd) > 0 ? (objectSize - byteRangeEnd) : 0;
    }
    byteRangeEnd=lastIndex;
  }
  if (byteRangeStart != null && byteRangeStart > lastIndex) {
    throw new InvalidRangeException("bytes=" + ObjectUtils.toString(request.getByteRangeStart()) + "-"+ ObjectUtils.toString(request.getByteRangeEnd()));
  }
  if (byteRangeEnd != null && byteRangeEnd > lastIndex) {
    byteRangeEnd=lastIndex;
  }
  request.setByteRangeStart(byteRangeStart);
  request.setByteRangeEnd(byteRangeEnd);
  try {
    GetObjectExtendedResponseType response=ospClient.getObjectExtended(request);
    response.setVersionId(objectEntity.getVersionId());
    response.setLastModified(objectEntity.getObjectModifiedTimestamp());
    populateStoredHeaders(response,objectEntity.getStoredHeaders());
    response.setResponseHeaderOverrides(request.getResponseHeaderOverrides());
    response.setStatus(HttpResponseStatus.OK);
    return response;
  }
 catch (  S3Exception e) {
    LOG.warn("CorrelationId: " + Contexts.lookup().getCorrelationId() + " Responding to client with: ",e);
    throw e;
  }
catch (  Exception e) {
    LOG.warn("CorrelationId: " + Contexts.lookup().getCorrelationId() + " Responding to client with 500 InternalError because of:",e);
    throw new InternalErrorException(request.getBucket() + "/" + request.getKey(),e);
  }
}
