{
  SetBucketCorsResponseType response=null;
  Bucket bucket=null;
  if (request == null) {
    throw new InternalErrorException("Null request passed to setBucketCors()");
  }
  try {
    bucket=getBucketAndCheckAuthorization(request);
  }
 catch (  S3Exception s3e) {
    LOG.warn("Caught S3Exception while getting the bucket <" + request.getBucket() + ">, CorrelationId: "+ Contexts.lookup().getCorrelationId()+ ", responding to client with: ",s3e);
    throw s3e;
  }
  if (bucket == null) {
    throw new InternalErrorException("Null bucket returned by getBucketAndCheckAuthorization()");
  }
  response=(SetBucketCorsResponseType)request.getReply();
  setCorsInfo(request,response,bucket);
  CorsConfiguration corsConfig=request.getCorsConfiguration();
  if (corsConfig == null) {
    throw new MalformedXMLException("No CORS configuration found in request");
  }
  List<CorsRule> corsRules=corsConfig.getRules();
  if (corsRules == null || corsRules.isEmpty()) {
    throw new MalformedXMLException("No CORS rules found in CORS configuration in request");
  }
  final int MAX_CORS_RULES=100;
  if (corsRules.size() > MAX_CORS_RULES) {
    throw new MalformedXMLException(bucket.getBucketName(),corsRules.size() + "CORS rules are more than the allowed " + MAX_CORS_RULES+ " rules in a CORS configuration");
  }
  HashSet<String> uniqueRuleIds=new HashSet<String>();
  for (  CorsRule rule : corsConfig.getRules()) {
    if (rule == null) {
      throw new InternalErrorException("Null rule found in CORS config set request");
    }
    String ruleId=(rule.getId() == null ? "" : rule.getId());
    if (rule.getAllowedOrigins() == null || rule.getAllowedOrigins().isEmpty()) {
      throw new InvalidArgumentException(ruleId,"Invalid CORS rule: At least one AllowedOrigin is required");
    }
    if (rule.getAllowedMethods() == null || rule.getAllowedMethods().isEmpty()) {
      throw new InvalidArgumentException(ruleId,"Invalid CORS rule: At least one AllowedMethod is required");
    }
    if (rule.getMaxAgeSeconds() < 0) {
      throw new InvalidArgumentException(ruleId,"Invalid CORS rule: MaxAgeSeconds cannot be negative");
    }
    if (ruleId.length() > 0) {
      if (ruleId.length() > 255) {
        throw new InvalidArgumentException(ruleId,"Invalid CORS rule: CORS RuleId > 255 characters");
      }
      boolean unique=uniqueRuleIds.add(ruleId);
      if (!unique) {
        throw new InvalidArgumentException(ruleId,"Invalid CORS rule: RuleId must be unique. Saw this rule more than once: " + ruleId);
      }
    }
  }
  try {
    BucketCorsManagers.getInstance().addCorsRules(corsConfig.getRules(),bucket.getBucketUuid());
  }
 catch (  ObjectStorageException ex) {
    LOG.warn("Caught general exception while getting the CORS configuration for bucket <" + bucket.getBucketName() + ">, CorrelationId: "+ Contexts.lookup().getCorrelationId()+ ", responding to client with 500 InternalError because of: ",ex);
    throw new InternalErrorException(bucket.getBucketName(),ex);
  }
  return response;
}
