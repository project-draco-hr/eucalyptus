{
  logRequest(request);
  ObjectEntity objectEntity;
  Bucket bucket;
  try {
    bucket=BucketMetadataManagers.getInstance().lookupExtantBucket(request.getBucket());
  }
 catch (  NoSuchEntityException|NoSuchElementException e) {
    throw new NoSuchBucketException(request.getBucket());
  }
catch (  Exception e) {
    throw new InternalErrorException(e.getMessage());
  }
  try {
    objectEntity=ObjectMetadataManagers.getInstance().lookupUpload(bucket,request.getKey(),request.getUploadId());
    request.setKey(objectEntity.getObjectUuid());
    request.setBucket(bucket.getBucketUuid());
  }
 catch (  NoSuchEntityException|NoSuchElementException e) {
    throw new NoSuchUploadException(request.getUploadId());
  }
catch (  Exception e) {
    throw new InternalErrorException(e.getMessage());
  }
  if (OsgAuthorizationHandler.getInstance().operationAllowed(request,bucket,objectEntity,0)) {
    ObjectMetadataManagers.getInstance().transitionObjectToState(objectEntity,ObjectState.deleting);
    try {
      AbortMultipartUploadResponseType response=ospClient.abortMultipartUpload(request);
      User requestUser=Contexts.lookup().getUser();
      OsgObjectFactory.getFactory().flushMultipartUpload(ospClient,objectEntity,requestUser);
      setCorsInfo(request,response,bucket);
      return response;
    }
 catch (    Exception e) {
      LOG.warn("CorrelationId: " + Contexts.lookup().getCorrelationId() + " Responding to client with 500 InternalError because of:",e);
      throw new InternalErrorException("Could not remove parts for: " + request.getUploadId());
    }
  }
 else {
    throw new AccessDeniedException(request.getBucket() + "/" + request.getKey());
  }
}
