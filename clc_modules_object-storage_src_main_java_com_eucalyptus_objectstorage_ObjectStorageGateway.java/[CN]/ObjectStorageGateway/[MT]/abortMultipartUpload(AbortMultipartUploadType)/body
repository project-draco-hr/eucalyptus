{
  logRequest(request);
  ObjectEntity objectEntity;
  Bucket bucket;
  try {
    bucket=BucketMetadataManagers.getInstance().lookupExtantBucket(request.getBucket());
  }
 catch (  NoSuchEntityException|NoSuchElementException e) {
    throw new NoSuchBucketException(request.getBucket());
  }
catch (  Exception e) {
    throw new InternalErrorException(e.getMessage());
  }
  try {
    objectEntity=ObjectMetadataManagers.getInstance().lookupUpload(bucket,request.getUploadId());
    request.setKey(objectEntity.getObjectUuid());
    request.setBucket(bucket.getBucketUuid());
  }
 catch (  NoSuchEntityException|NoSuchElementException e) {
    throw new NoSuchUploadException(request.getUploadId());
  }
catch (  Exception e) {
    throw new InternalErrorException(e.getMessage());
  }
  if (OsgAuthorizationHandler.getInstance().operationAllowed(request,bucket,objectEntity,0)) {
    ObjectMetadataManagers.getInstance().transitionObjectToState(objectEntity,ObjectState.deleting);
    AbortMultipartUploadResponseType response=ospClient.abortMultipartUpload(request);
    ObjectMetadataManagers.getInstance().delete(objectEntity);
    try {
      MpuPartMetadataManagers.getInstance().removeParts(request.getUploadId());
    }
 catch (    Exception e) {
      throw new InternalErrorException("Could not remove parts for: " + request.getUploadId());
    }
    return response;
  }
 else {
    throw new AccessDeniedException(request.getBucket() + "/" + request.getKey());
  }
}
