{
  logRequest(request);
  try {
    User requestUser=getRequestUser(request);
    Account requestAccount=requestUser.getAccount();
    long bucketCount;
    if (!checkBucketNameValidity(request.getBucket())) {
      throw new InvalidBucketNameException(request.getBucket());
    }
    final AccessControlPolicy acPolicy=getFullAcp(request.getAccessControlList(),requestUser,null);
    Bucket bucket=Bucket.getInitializedBucket(request.getBucket(),requestUser.getUserId(),acPolicy,request.getLocationConstraint());
    if (OsgAuthorizationHandler.getInstance().operationAllowed(request,bucket,null,1)) {
      if (!Contexts.lookup().hasAdministrativePrivileges() && BucketMetadataManagers.getInstance().countBucketsByAccount(requestAccount.getCanonicalId()) >= ObjectStorageGlobalConfiguration.max_buckets_per_account) {
        throw new TooManyBucketsException(request.getBucket());
      }
      try {
        bucket=OsgBucketFactory.getFactory().createBucket(ospClient,bucket,request.getCorrelationId(),requestUser);
        CreateBucketResponseType reply=request.getReply();
        reply.setStatus(HttpResponseStatus.OK);
        reply.setBucket(bucket.getBucketName());
        reply.setTimestamp(new Date());
        reply.setStatusMessage("OK");
        LOG.info("CorrelationId: " + request.getCorrelationId() + " Responding with "+ reply.getStatus().toString());
        return reply;
      }
 catch (      BucketAlreadyExistsException e) {
        Bucket extantBucket=BucketMetadataManagers.getInstance().lookupExtantBucket(request.getBucket());
        if (extantBucket.isOwnedBy(requestAccount.getCanonicalId())) {
          CreateBucketResponseType reply=request.getReply();
          reply.setStatus(HttpResponseStatus.OK);
          reply.setBucket(bucket.getBucketName());
          reply.setStatusMessage("OK");
          LOG.info("CorrelationId: " + request.getCorrelationId() + " Responding with "+ reply.getStatus().toString());
          return reply;
        }
 else {
          throw e;
        }
      }
    }
 else {
      LOG.error("CorrelationId: " + request.getCorrelationId() + " Create bucket "+ request.getBucket()+ " access is denied based on acl and/or IAM policy");
      throw new AccessDeniedException(request.getBucket());
    }
  }
 catch (  Exception ex) {
    if (ex instanceof S3Exception) {
      LOG.error("CorrelationId: " + Contexts.lookup().getCorrelationId() + " Returning error response to user: "+ ex.getMessage(),ex);
      throw (S3Exception)ex;
    }
 else {
      InternalErrorException intEx=new InternalErrorException(request.getBucket());
      intEx.initCause(ex);
      throw intEx;
    }
  }
}
