{
  logRequest(request);
  Bucket bucket=null;
  User requestUser=Contexts.lookup().getUser();
  try {
    bucket=BucketManagers.getInstance().get(request.getBucket(),false,null);
  }
 catch (  NoSuchElementException e) {
    throw new NoSuchBucketException(request.getBucket());
  }
catch (  Exception e) {
    LOG.error(e);
    throw new InternalErrorException(request.getBucket() + "/" + request.getKey());
  }
  long newBucketSize=bucket.getBucketSize() == null ? 0 : bucket.getBucketSize();
  if (Strings.isNullOrEmpty(request.getContentLength())) {
    throw new MissingContentLengthException(request.getBucket() + "/" + request.getKey());
  }
  long objectSize=-1;
  try {
    objectSize=Long.parseLong(request.getContentLength());
    newBucketSize=bucket.getBucketSize() + objectSize;
  }
 catch (  Exception e) {
    LOG.error("Could not parse content length into a long: " + request.getContentLength(),e);
    throw new MissingContentLengthException(request.getBucket() + "/" + request.getKey());
  }
  String versionId=null;
  try {
    versionId=BucketManagers.getInstance().getVersionId(bucket);
  }
 catch (  Exception e2) {
    LOG.error("Error generating version Id string by bucket " + bucket.getBucketName(),e2);
    throw new InternalErrorException(request.getBucket() + "/" + request.getKey());
  }
  ObjectEntity objectEntity=new ObjectEntity();
  try {
    objectEntity.initializeForCreate(request.getBucket(),request.getKey(),versionId,request.getCorrelationId(),objectSize,requestUser);
  }
 catch (  Exception e) {
    LOG.error("Error initializing entity for persisting object metadata for " + request.getBucket() + "/"+ request.getKey());
    throw new InternalErrorException(request.getBucket() + "/" + request.getKey());
  }
  if (OSGAuthorizationHandler.getInstance().operationAllowed(request,bucket,objectEntity,newBucketSize)) {
    AccessControlPolicy acp=new AccessControlPolicy();
    acp.setAccessControlList(request.getAccessControlList());
    try {
      acp=AclUtils.processNewResourcePolicy(requestUser,acp,bucket.getOwnerCanonicalId());
    }
 catch (    Exception e) {
      LOG.error("Error processing ACL for put object " + objectEntity.getResourceFullName(),e);
      throw new MalformedACLErrorException(objectEntity.getResourceFullName());
    }
    try {
      objectEntity.setAcl(acp);
    }
 catch (    Exception e) {
      LOG.error("Error encountered setting object ACP for " + objectEntity.getResourceFullName() + " . Failing put operation",e);
      throw new InternalErrorException(request.getBucket() + "/" + request.getKey());
    }
    final String fullObjectKey=objectEntity.getObjectUuid();
    request.setKey(fullObjectKey);
    try {
      PutObjectResponseType response=ObjectManagers.getInstance().create(bucket,objectEntity,new CallableWithRollback<PutObjectResponseType,Boolean>(){
        @Override public PutObjectResponseType call() throws S3Exception, Exception {
          return ospClient.putObject(request,request.getData());
        }
        @Override public Boolean rollback(        PutObjectResponseType arg) throws Exception {
          DeleteObjectType deleteRequest=new DeleteObjectType();
          deleteRequest.setBucket(request.getBucket());
          deleteRequest.setKey(fullObjectKey);
          DeleteObjectResponseType resp=ospClient.deleteObject(deleteRequest);
          if (resp != null) {
            return true;
          }
 else {
            return false;
          }
        }
      }
);
      return response;
    }
 catch (    Exception e) {
      if (e instanceof S3Exception) {
        LOG.error("Got exception doing object PUT for " + objectEntity.getResourceFullName() + " with uuid: "+ objectEntity.getObjectUuid(),e);
        throw (S3Exception)e;
      }
 else {
        LOG.error("Got exception doing object PUT for " + objectEntity.getResourceFullName() + " with uuid: "+ objectEntity.getObjectUuid(),e);
        throw new InternalErrorException(objectEntity.getResourceFullName());
      }
    }
  }
 else {
    throw new AccessDeniedException(request.getBucket());
  }
}
