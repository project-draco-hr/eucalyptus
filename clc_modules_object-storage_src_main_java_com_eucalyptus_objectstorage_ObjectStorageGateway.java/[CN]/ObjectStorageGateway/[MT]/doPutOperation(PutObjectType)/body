{
  try {
    UserPrincipal requestUser=getRequestUser(request);
    Bucket bucket;
    try {
      bucket=BucketMetadataManagers.getInstance().lookupExtantBucket(request.getBucket());
    }
 catch (    NoSuchEntityException e) {
      LOG.debug("CorrelationId: " + Contexts.lookup().getCorrelationId() + "Responding to client with 404, no bucket found");
      throw new NoSuchBucketException(request.getBucket());
    }
    if (Strings.isNullOrEmpty(request.getContentLength())) {
      throw new MissingContentLengthException(request.getBucket() + "/" + request.getKey());
    }
    long objectSize;
    try {
      objectSize=Long.parseLong(request.getContentLength());
    }
 catch (    Exception e) {
      LOG.error("Could not parse content length into a long: " + request.getContentLength(),e);
      throw new MissingContentLengthException(request.getBucket() + "/" + request.getKey());
    }
    ObjectEntity objectEntity=ObjectEntity.newInitializedForCreate(bucket,request.getKey(),objectSize,requestUser,request.getCopiedHeaders());
    if (!OsgAuthorizationHandler.getInstance().operationAllowed(request,bucket,objectEntity,objectSize)) {
      throw new AccessDeniedException(request.getBucket());
    }
    if (request.getExpectHeader()) {
      OSGChannelWriter.writeResponse(Contexts.lookup(request.getCorrelationId()),OSGMessageResponse.Continue);
    }
    AccessControlPolicy acp=getFullAcp(request.getAccessControlList(),requestUser,bucket.getOwnerCanonicalId());
    objectEntity.setAcl(acp);
    final String fullObjectKey=objectEntity.getObjectUuid();
    request.setKey(fullObjectKey);
    try {
      objectEntity=OsgObjectFactory.getFactory().createObject(ospClient,objectEntity,request.getData(),request.getMetaData(),requestUser);
    }
 catch (    Exception e) {
      throw new InternalErrorException(request.getKey(),e);
    }
    PutObjectResponseType response=request.getReply();
    if (!ObjectStorageProperties.NULL_VERSION_ID.equals(objectEntity.getVersionId())) {
      response.setVersionId(objectEntity.getVersionId());
    }
    response.setEtag(objectEntity.geteTag());
    response.setLastModified(objectEntity.getObjectModifiedTimestamp());
    Map<String,String> storedHeaders=objectEntity.getStoredHeaders();
    populateStoredHeaders(response,storedHeaders);
    try {
      fireObjectCreationEvent(bucket.getBucketName(),objectEntity.getObjectKey(),objectEntity.getVersionId(),requestUser.getUserId(),requestUser.getName(),requestUser.getAccountNumber(),objectEntity.getSize(),null);
    }
 catch (    Exception ex) {
      LOG.debug("Failed to fire reporting event for OSG object creation",ex);
    }
    setCorsInfo(request,response,bucket);
    return response;
  }
 catch (  AccessDeniedException e) {
    LOG.debug("CorrelationId: " + Contexts.lookup().getCorrelationId() + " Responding to client with AccessDeniedException");
    throw e;
  }
catch (  S3Exception e) {
    LOG.warn("CorrelationId: " + Contexts.lookup().getCorrelationId() + " Responding to client with: ",e);
    throw e;
  }
catch (  Exception e) {
    LOG.warn("CorrelationId: " + Contexts.lookup().getCorrelationId() + " Responding to client with 500 InternalError because of:",e);
    throw new InternalErrorException(request.getKey(),e);
  }
}
