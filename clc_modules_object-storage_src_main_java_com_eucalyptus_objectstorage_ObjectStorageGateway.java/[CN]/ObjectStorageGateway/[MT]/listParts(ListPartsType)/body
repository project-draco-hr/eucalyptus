{
  logRequest(request);
  int maxParts=ObjectStorageProperties.MAX_KEYS;
  if (!Strings.isNullOrEmpty(request.getMaxParts())) {
    try {
      maxParts=Integer.parseInt(request.getMaxParts());
      if (maxParts < 0 || maxParts > ObjectStorageProperties.MAX_KEYS) {
        throw new InvalidArgumentException("max-parts");
      }
    }
 catch (    NumberFormatException e) {
      throw new InvalidArgumentException("max-parts");
    }
  }
  int partNumberMarker=0;
  if (!Strings.isNullOrEmpty(request.getPartNumberMarker())) {
    try {
      partNumberMarker=Integer.parseInt(request.getPartNumberMarker());
    }
 catch (    NumberFormatException e) {
      throw new InvalidArgumentException("part-number-marker");
    }
  }
  ListPartsResponseType reply=request.getReply();
  String bucketName=request.getBucket();
  String objectKey=request.getKey();
  ObjectEntity objectEntity;
  Bucket bucket;
  try {
    bucket=BucketMetadataManagers.getInstance().lookupExtantBucket(bucketName);
  }
 catch (  NoSuchElementException e) {
    throw new NoSuchBucketException(request.getBucket());
  }
catch (  Exception e) {
    throw new InternalErrorException(e.getMessage());
  }
  try {
    objectEntity=ObjectMetadataManagers.getInstance().lookupUpload(bucket,request.getKey(),request.getUploadId());
  }
 catch (  NoSuchElementException e) {
    throw new NoSuchUploadException(request.getUploadId());
  }
catch (  Exception e) {
    throw new InternalErrorException(e.getMessage());
  }
  if (OsgAuthorizationHandler.getInstance().operationAllowed(request,bucket,objectEntity,0)) {
    try {
      PaginatedResult<PartEntity> result=MpuPartMetadataManagers.getInstance().listPartsForUpload(bucket,objectKey,request.getUploadId(),partNumberMarker,maxParts);
      reply.setStorageClass(objectEntity.getStorageClass());
      reply.setPartNumberMarker(partNumberMarker);
      reply.setMaxParts(maxParts);
      reply.setBucket(bucketName);
      reply.setKey(objectKey);
      reply.setUploadId(request.getUploadId());
      reply.setIsTruncated(result.getIsTruncated());
      reply.setInitiator(new Initiator(Accounts.getUserArn(Accounts.lookupPrincipalByUserId(objectEntity.getOwnerIamUserId())),objectEntity.getOwnerIamUserDisplayName()));
      reply.setOwner(new CanonicalUser(objectEntity.getOwnerCanonicalId(),objectEntity.getOwnerDisplayName()));
      if (result.getLastEntry() instanceof PartEntity) {
        reply.setNextPartNumberMarker(((PartEntity)result.getLastEntry()).getPartNumber());
      }
 else {
        reply.setNextPartNumberMarker(0);
      }
      for (      PartEntity entity : result.getEntityList()) {
        List<Part> replyParts=reply.getParts();
        replyParts.add(entity.toPartListEntry());
      }
    }
 catch (    Exception e) {
      throw new InternalErrorException(e.getMessage());
    }
    return reply;
  }
 else {
    throw new AccessDeniedException(request.getBucket() + "/" + request.getKey());
  }
}
