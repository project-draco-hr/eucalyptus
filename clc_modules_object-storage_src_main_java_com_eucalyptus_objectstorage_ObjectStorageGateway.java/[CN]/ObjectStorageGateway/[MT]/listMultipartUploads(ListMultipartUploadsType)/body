{
  ListMultipartUploadsResponseType reply=(ListMultipartUploadsResponseType)request.getReply();
  logRequest(request);
  String bucketName=request.getBucket();
  Bucket bucket=null;
  try {
    bucket=BucketManagers.getInstance().get(bucketName,false,null);
  }
 catch (  NoSuchElementException e) {
    throw new NoSuchBucketException(bucketName);
  }
catch (  Exception e) {
    throw new InternalErrorException();
  }
  if (OSGAuthorizationHandler.getInstance().operationAllowed(request,bucket,null,0)) {
    int maxUploads=1000;
    try {
      if (request.getMaxUploads() != null) {
        maxUploads=request.getMaxUploads();
      }
    }
 catch (    NumberFormatException e) {
      LOG.error("Failed to parse max uploads from request properly: " + request.getMaxUploads(),e);
      throw new InvalidArgumentException("MaxKeys");
    }
    reply.setMaxUploads(maxUploads);
    reply.setBucket(request.getBucket());
    reply.setDelimiter(request.getDelimiter());
    reply.setKeyMarker(request.getKeyMarker());
    reply.setPrefix(request.getPrefix());
    reply.setIsTruncated(false);
    PaginatedResult<ObjectEntity> result=null;
    try {
      result=ObjectManagers.getInstance().listParts(bucket,maxUploads,request.getPrefix(),request.getDelimiter(),request.getKeyMarker(),request.getUploadIdMarker());
    }
 catch (    Exception e) {
      LOG.error("Error getting object listing for bucket: " + request.getBucket(),e);
      throw new InternalErrorException(request.getBucket());
    }
    if (result != null) {
      reply.setUploads(new ArrayList<Upload>());
      for (      ObjectEntity obj : result.getEntityList()) {
        reply.getUploads().add(new Upload(obj.getObjectKey(),obj.getUploadId(),new Initiator(obj.getOwnerIamUserId(),obj.getOwnerIamUserDisplayName()),new CanonicalUser(obj.getOwnerCanonicalId(),obj.getOwnerDisplayName()),obj.getStorageClass(),obj.getCreationTimestamp()));
      }
      if (result.getCommonPrefixes() != null && result.getCommonPrefixes().size() > 0) {
        reply.setCommonPrefixes(new ArrayList<CommonPrefixesEntry>());
        for (        String s : result.getCommonPrefixes()) {
          reply.getCommonPrefixes().add(new CommonPrefixesEntry(s));
        }
      }
      reply.setIsTruncated(result.isTruncated);
      if (result.isTruncated) {
        if (result.getLastEntry() instanceof ObjectEntity) {
          reply.setNextKeyMarker(((ObjectEntity)result.getLastEntry()).getObjectKey());
        }
 else {
          reply.setNextKeyMarker((result.getLastEntry() != null ? result.getLastEntry().toString() : ""));
        }
      }
    }
    return reply;
  }
 else {
    throw new AccessDeniedException(request.getBucket() + "/" + request.getKey());
  }
}
