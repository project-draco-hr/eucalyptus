{
  ObjectEntity objectEntity;
  try {
    objectEntity=getObjectEntityAndCheckPermissions(request,null);
  }
 catch (  NoSuchBucketException|NoSuchKeyException|NoSuchEntityException|NoSuchElementException e) {
    DeleteObjectResponseType reply=request.getReply();
    reply.setStatus(HttpResponseStatus.NO_CONTENT);
    reply.setStatusMessage("No Content");
    return reply;
  }
catch (  Exception e) {
    LOG.error("Error getting bucket metadata for bucket " + request.getBucket());
    throw new InternalErrorException(request.getBucket());
  }
  try {
    ObjectEntity responseEntity=OsgObjectFactory.getFactory().logicallyDeleteObject(ospClient,objectEntity,Contexts.lookup().getUser());
    try {
      final User user=Contexts.lookup().getUser();
      fireObjectUsageEvent(S3ObjectEvent.S3ObjectAction.OBJECTDELETE,objectEntity.getBucket().getBucketName(),objectEntity.getObjectKey(),objectEntity.getVersionId(),user.getUserId(),user.getName(),user.getAccountNumber(),objectEntity.getSize());
    }
 catch (    Exception e) {
      LOG.warn("caught exception while attempting to fire reporting event, exception message - " + e.getMessage());
    }
    DeleteObjectResponseType reply=request.getReply();
    reply.setStatus(HttpResponseStatus.NO_CONTENT);
    reply.setStatusMessage("No Content");
    if (responseEntity != null) {
      reply.setVersionId(responseEntity.getVersionId());
      if (responseEntity.getIsDeleteMarker() != null && responseEntity.getIsDeleteMarker())       reply.setIsDeleteMarker(Boolean.TRUE);
    }
    return reply;
  }
 catch (  Exception e) {
    LOG.error("Transaction error during delete object: " + request.getBucket() + "/"+ request.getKey(),e);
    throw new InternalErrorException(request.getBucket() + "/" + request.getKey());
  }
}
