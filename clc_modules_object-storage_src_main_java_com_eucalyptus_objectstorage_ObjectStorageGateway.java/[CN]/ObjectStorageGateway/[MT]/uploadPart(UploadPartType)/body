{
  UploadPartResponseType reply=(UploadPartResponseType)request.getReply();
  logRequest(request);
  Bucket bucket=null;
  try {
    bucket=BucketMetadataManagers.getInstance().lookupExtantBucket(request.getBucket());
  }
 catch (  NoSuchEntityException e) {
    throw new NoSuchBucketException(request.getBucket());
  }
catch (  Exception e) {
    throw new InternalErrorException();
  }
  long newBucketSize=bucket.getBucketSize() == null ? 0 : bucket.getBucketSize();
  if (Strings.isNullOrEmpty(request.getContentLength())) {
    throw new MissingContentLengthException(request.getBucket() + "/" + request.getKey());
  }
  long objectSize=-1;
  try {
    objectSize=Long.parseLong(request.getContentLength());
    newBucketSize=bucket.getBucketSize() + objectSize;
  }
 catch (  Exception e) {
    LOG.error("Could not parse content length into a long: " + request.getContentLength(),e);
    throw new MissingContentLengthException(request.getBucket() + "/" + request.getKey());
  }
  User requestUser=Contexts.lookup().getUser();
  PartEntity partEntity;
  try {
    partEntity=PartEntity.newInitializedForCreate(bucket,request.getKey(),request.getUploadId(),Integer.parseInt(request.getPartNumber()),objectSize,requestUser);
  }
 catch (  Exception e) {
    LOG.error("Error initializing entity for persisting part metadata for " + request.getBucket() + "/"+ request.getKey()+ " uploadId: "+ request.getUploadId()+ " partNumber: "+ request.getPartNumber());
    throw new InternalErrorException(request.getBucket() + "/" + request.getKey());
  }
  if (OsgAuthorizationHandler.getInstance().operationAllowed(request,bucket,partEntity,newBucketSize)) {
    try {
      if (request.getExpectHeader()) {
        OSGChannelWriter.writeResponse(Contexts.lookup(request.getCorrelationId()),OSGMessageResponse.Continue);
      }
    }
 catch (    Exception e) {
      throw new InternalErrorException(e);
    }
    ObjectEntity objectEntity;
    try {
      objectEntity=ObjectMetadataManagers.getInstance().lookupUpload(bucket,request.getUploadId());
    }
 catch (    Exception e) {
      throw new NoSuchUploadException("Cannot get upload for: " + bucket.getBucketName() + "/"+ request.getKey());
    }
    try {
      PartEntity updatedEntity=OsgObjectFactory.getFactory().createObjectPart(ospClient,objectEntity,partEntity,request.getData(),requestUser);
      UploadPartResponseType response=request.getReply();
      response.setLastModified(updatedEntity.getObjectModifiedTimestamp());
      response.setEtag(updatedEntity.geteTag());
      response.setStatusMessage("OK");
      response.setSize(updatedEntity.getSize());
      return response;
    }
 catch (    Exception e) {
      if (e instanceof S3Exception) {
        LOG.error("Got exception doing upload part for " + partEntity.getResourceFullName() + " with uuid: "+ partEntity.getPartUuid(),e);
        throw (S3Exception)e;
      }
 else {
        LOG.error("Got exception doing upload part for " + partEntity.getResourceFullName() + " with uuid: "+ partEntity.getPartUuid(),e);
        throw new InternalErrorException(partEntity.getResourceFullName());
      }
    }
  }
 else {
    throw new AccessDeniedException(request.getBucket());
  }
}
