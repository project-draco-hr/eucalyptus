{
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
switch (stepNum) {
case 0:
    CreateNetworkAclType createNetworkAclType=new CreateNetworkAclType();
  createNetworkAclType.setEffectiveUserId(info.getEffectiveUserId());
createNetworkAclType.setVpcId(properties.getVpcId());
CreateNetworkAclResponseType createNetworkAclResponseType=AsyncRequests.<CreateNetworkAclType,CreateNetworkAclResponseType>sendSync(configuration,createNetworkAclType);
info.setPhysicalResourceId(createNetworkAclResponseType.getNetworkAcl().getNetworkAclId());
info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(info.getPhysicalResourceId())));
break;
case 1:
if (properties.getTags() != null && !properties.getTags().isEmpty()) {
CreateTagsType createTagsType=new CreateTagsType();
createTagsType.setEffectiveUserId(info.getEffectiveUserId());
createTagsType.setResourcesSet(Lists.newArrayList(info.getPhysicalResourceId()));
createTagsType.setTagSet(EC2Helper.createTagSet(properties.getTags()));
AsyncRequests.<CreateTagsType,CreateTagsResponseType>sendSync(configuration,createTagsType);
}
break;
default :
throw new IllegalStateException("Invalid step " + stepNum);
}
}
