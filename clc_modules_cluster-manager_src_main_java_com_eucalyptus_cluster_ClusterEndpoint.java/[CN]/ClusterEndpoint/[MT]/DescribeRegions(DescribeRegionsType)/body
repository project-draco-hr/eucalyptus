{
  final DescribeRegionsResponseType reply=request.getReply();
  for (  final Class<? extends ComponentId> componentIdClass : ImmutableList.of(Eucalyptus.class)) {
    try {
      final Component component=Components.lookup(componentIdClass);
      final String region=component.getComponentId().name();
      final List<Region> regions=Lists.newArrayList();
      final NavigableSet<ServiceConfiguration> configs=component.services();
      if (!configs.isEmpty() && Component.State.ENABLED.equals(configs.first().lookupState())) {
        regions.add(new Region(region,ServiceUris.remotePublicify(configs.first()).toASCIIString()));
      }
      final Predicate<Object> filterPredicate=Filters.generateFor(request.getFilterSet(),Region.class).withOptionalInternalFilter("region-name",request.getRegions()).generate().asPredicate();
      for (      final Region item : Iterables.filter(regions,filterPredicate)) {
        reply.getRegionInfo().add(new RegionInfoType(item.getDisplayName(),item.getEndpointUrl()));
      }
    }
 catch (    NoSuchElementException ex) {
      LOG.error(ex,ex);
    }
  }
  return reply;
}
