{
  final MigrateInstancesResponseType reply=request.getReply();
  final Context context=Contexts.lookup();
  if (!context.isAdministrator() || !Permissions.isAuthorized(VENDOR_EC2,EC2_RESOURCE_INSTANCE,"",null,EC2_MIGRATEINSTANCES,context.getAuthContext())) {
    throw new EucalyptusCloudException("Authorization failed.");
  }
  if (!Strings.isNullOrEmpty(request.getSourceHost())) {
    final Predicate<VmInstance> filterHost=new Predicate<VmInstance>(){
      @Override public boolean apply(      VmInstance input){
        String vmHost=URI.create(input.getServiceTag()).getHost();
        return Strings.nullToEmpty(vmHost).equals(request.getSourceHost());
      }
    }
;
    for (    ServiceConfiguration ccConfig : Topology.enabledServices(ClusterController.class)) {
      try {
        ServiceConfiguration node=Nodes.lookup(ccConfig,request.getSourceHost());
        Cluster cluster=Clusters.lookup(ccConfig);
        final List<VmInstance> instances=VmInstances.list(filterHost);
        for (        final VmInstance instance : instances) {
          try {
            updatePasswordIfWindows(instance,ccConfig);
          }
 catch (          final Exception ex) {
            ;
          }
        }
        try {
          cluster.migrateInstances(request.getSourceHost(),request.getAllowHosts(),request.getDestinationHosts());
          return reply.markWinning();
        }
 catch (        Exception ex) {
          LOG.error(ex);
          throw new EucalyptusCloudException("Migrating off of node " + request.getSourceHost() + " failed because of: "+ Strings.nullToEmpty(ex.getMessage()).replaceAll(".*:status=",""),ex);
        }
      }
 catch (      EucalyptusCloudException ex) {
        throw ex;
      }
catch (      NoSuchElementException ex) {
      }
catch (      Exception ex) {
        LOG.error(ex);
        throw new EucalyptusCloudException("Migrating off of node " + request.getSourceHost() + " failed because of: "+ ex.getMessage(),ex);
      }
    }
    throw new EucalyptusCloudException("No ENABLED cluster found which can service the requested node: " + request.getSourceHost());
  }
 else   if (!Strings.isNullOrEmpty(request.getInstanceId())) {
    final VmInstance vm;
    try {
      vm=VmInstances.lookup(request.getInstanceId());
      if (!VmInstance.VmState.RUNNING.apply(vm)) {
        throw new EucalyptusCloudException("Cannot migrate a " + vm.getState().name().toLowerCase() + " instance: "+ request.getInstanceId());
      }
    }
 catch (    TerminatedInstanceException ex) {
      throw new EucalyptusCloudException("Cannot migrate a terminated instance: " + request.getInstanceId(),ex);
    }
catch (    NoSuchElementException ex) {
      throw new EucalyptusCloudException("Failed to lookup requested instance: " + request.getInstanceId(),ex);
    }
    try {
      ServiceConfiguration ccConfig=Topology.lookup(ClusterController.class,vm.lookupPartition());
      Cluster cluster=Clusters.lookup(ccConfig);
      try {
        updatePasswordIfWindows(vm,ccConfig);
      }
 catch (      final Exception ex) {
      }
      try {
        cluster.migrateInstance(request.getInstanceId(),request.getAllowHosts(),request.getDestinationHosts());
        return reply.markWinning();
      }
 catch (      Exception ex) {
        LOG.error(ex);
        throw new EucalyptusCloudException("Migrating instance " + request.getInstanceId() + " failed because of: "+ Strings.nullToEmpty(ex.getMessage()).replaceAll(".*:status=",""),ex);
      }
    }
 catch (    NoSuchElementException ex) {
      throw new EucalyptusCloudException("Failed to lookup ENABLED cluster for instance " + request.getInstanceId(),ex);
    }
  }
 else {
    throw new EucalyptusCloudException("Either the sourceHost or instanceId must be provided");
  }
}
