{
  DescribeAvailabilityZonesResponseType reply=(DescribeAvailabilityZonesResponseType)request.getReply();
  List<String> args=request.getAvailabilityZoneSet();
  if (Contexts.lookup().hasAdministrativePrivileges()) {
    for (    String keyword : describeKeywords.keySet()) {
      if (args.remove(keyword)) {
        reply.getAvailabilityZoneInfo().addAll(describeKeywords.get(keyword).get());
      }
    }
  }
 else {
    for (    String keyword : describeKeywords.keySet()) {
      args.remove(keyword);
    }
  }
  for (  Cluster c : Clusters.getInstance().listValues()) {
    reply.getAvailabilityZoneInfo().addAll(this.getDescriptionEntry(c,args));
  }
  if (args.isEmpty()) {
    for (    Cluster c : Clusters.getInstance().listValues()) {
      reply.getAvailabilityZoneInfo().addAll(this.getDescriptionEntry(c,args));
    }
  }
 else {
    for (    final String partitionName : request.getAvailabilityZoneSet()) {
      try {
        Cluster c=Iterables.find(Clusters.getInstance().listValues(),new Predicate<Cluster>(){
          @Override public boolean apply(          Cluster input){
            return partitionName.equals(input.getConfiguration().getPartition());
          }
        }
);
        reply.getAvailabilityZoneInfo().addAll(this.getDescriptionEntry(c,args));
      }
 catch (      NoSuchElementException e) {
      }
    }
  }
  return reply;
}
