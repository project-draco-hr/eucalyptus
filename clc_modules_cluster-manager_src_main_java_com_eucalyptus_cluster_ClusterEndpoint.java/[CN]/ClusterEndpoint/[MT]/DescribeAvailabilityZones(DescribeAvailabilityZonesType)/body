{
  final DescribeAvailabilityZonesResponseType reply=request.getReply();
  final List<String> args=request.getAvailabilityZoneSet();
  final Predicate<Object> filterPredicate=Filters.generateFor(request.getFilterSet(),Cluster.class).withOptionalInternalFilter("zone-name",Iterables.filter(args,Predicates.not(Predicates.in(describeKeywords.keySet())))).generate().asPredicate();
  final boolean admin=Contexts.lookup().hasAdministrativePrivileges();
  for (  String keyword : describeKeywords.keySet()) {
    if (args.remove(keyword) && admin) {
      reply.getAvailabilityZoneInfo().addAll(describeKeywords.get(keyword).apply(filterPredicate));
      return reply;
    }
  }
  final Clusters clusterRegistry=Clusters.getInstance();
  final List<Cluster> clusters=Lists.newArrayList(clusterRegistry.listValues());
  Iterables.addAll(clusters,Iterables.filter(clusterRegistry.listDisabledValues(),Predicates.not(CollectionUtils.propertyPredicate(Collections2.transform(clusters,CloudMetadatas.toDisplayName()),CloudMetadatas.toDisplayName()))));
  for (  final Cluster c : Iterables.filter(clusters,filterPredicate)) {
    reply.getAvailabilityZoneInfo().addAll(this.getDescriptionEntry(c));
  }
  return reply;
}
