{
  DescribeAvailabilityZonesResponseType reply=(DescribeAvailabilityZonesResponseType)request.getReply();
  if (request.isAdministrator() && request.getAvailabilityZoneSet().lastIndexOf("help") == 0) {
    reply.getAvailabilityZoneInfo().addAll(this.addHelpInfo());
    return reply;
  }
  List<String> args=request.getAvailabilityZoneSet();
  if (args.isEmpty()) {
    for (    Group g : Contexts.lookup().getGroups()) {
      reply.getAvailabilityZoneInfo().addAll(this.addZoneInfo(g,false));
    }
  }
 else   if (args.remove("verbose")) {
    for (    Group g : Contexts.lookup().getGroups()) {
      reply.getAvailabilityZoneInfo().addAll(this.addZoneInfo(g,true));
    }
  }
 else   if (args.contains("certs") || args.contains("logs") || args.contains("keys")) {
    for (    Cluster c : Clusters.getInstance().listValues()) {
      this.getDescriptionEntry(reply,c,request);
    }
  }
 else {
    for (    String clusterName : request.getAvailabilityZoneSet()) {
      try {
        Cluster c=Clusters.getInstance().lookup(clusterName);
        this.getDescriptionEntry(reply,c,request);
      }
 catch (      NoSuchElementException e) {
        if (clusterName.equals("coredump")) {
          reply.getAvailabilityZoneInfo().addAll(this.dumpState());
        }
      }
    }
  }
  return reply;
}
