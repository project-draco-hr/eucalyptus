{
  final DescribeServicesResponseType reply=request.getReply();
  final String typeFilter=request.getByType();
  final String hostFilter=request.getByHost();
  final String partitionFilter=request.getByPartition();
  final String stateFilter=request.getByState();
  final boolean listAll=Boolean.TRUE.equals(request.getListAll());
  final boolean showEventStacks=Boolean.TRUE.equals(request.getShowEventStacks());
  final boolean showEvents=Boolean.TRUE.equals(request.getShowEvents()) || showEventStacks;
  for (  Component comp : Components.list()) {
    if (typeFilter == null || (typeFilter != null && !typeFilter.toLowerCase().equals(comp.getComponentId().name()))) {
      if (!listAll && (hostFilter == null || Internets.testLocal(hostFilter))) {
        if (comp.hasLocalService()) {
          final ServiceConfiguration config=comp.getLocalServiceConfiguration();
          if ((partitionFilter == null || partitionFilter.equals(config.getPartition())) && (stateFilter == null || stateFilter.toUpperCase().equals(config.lookupState().toString()))) {
            reply.getServiceStatuses().add(new ServiceStatusType(){
{
                this.setServiceId(TypeMappers.transform(config,ServiceId.class));
                this.setLocalEpoch(reply.getBaseEpoch());
                this.setLocalState(config.lookupStateMachine().getState().toString());
                if (showEvents) {
                  this.getStatusDetails().addAll(Collections2.transform(config.lookupDetails(),TypeMappers.lookup(ServiceCheckRecord.class,ServiceStatusDetail.class)));
                  if (!showEventStacks) {
                    for (                    ServiceStatusDetail a : this.getStatusDetails()) {
                      a.setStackTrace("");
                    }
                  }
                }
              }
            }
);
          }
        }
      }
 else {
        for (        final ServiceConfiguration config : comp.lookupServiceConfigurations()) {
          if ((partitionFilter == null || partitionFilter.equals(config.getPartition())) && (hostFilter == null || hostFilter.equals(config.getHostName())) && (stateFilter == null || stateFilter.toUpperCase().equals(config.lookupState().toString()))) {
            reply.getServiceStatuses().add(new ServiceStatusType(){
{
                this.setServiceId(TypeMappers.transform(config,ServiceId.class));
                this.setLocalEpoch(reply.getBaseEpoch());
                try {
                  this.setLocalState(config.lookupStateMachine().getState().toString());
                }
 catch (                Exception ex) {
                  this.setLocalState("n/a: " + ex.getMessage());
                }
                if (showEvents) {
                  this.getStatusDetails().addAll(Collections2.transform(config.lookupDetails(),TypeMappers.lookup(ServiceCheckRecord.class,ServiceStatusDetail.class)));
                  if (!showEventStacks) {
                    for (                    ServiceStatusDetail a : this.getStatusDetails()) {
                      a.setStackTrace("");
                    }
                  }
                }
              }
            }
);
          }
        }
      }
    }
  }
  return reply;
}
