{
  final Logger LOG=Logger.getLogger(getClass());
  LOG.info("Checking " + table + " for upgrade");
  Sql sql=null;
  try {
    sql=Bootstrap.isFinished() ? Databases.getBootstrapper().getConnection("eucalyptus_cloud") : Upgrades.DatabaseFilters.NEWVERSION.getConnection("eucalyptus_cloud");
    sql.withTransaction(new Closure(this){
{
        this.maximumNumberOfParameters=1;
      }
      @Override public Object call(      final Object... args){
        try {
          final Sql sql=new Sql((Connection)args[0]);
          if (!columnExists(sql,"id")) {
            sql.execute("alter table " + table + " add column id character varying(255)");
            if (!columnExists(sql,"creation_timestamp")) {
              sql.execute("alter table " + table + " add column creation_timestamp timestamp without time zone");
            }
            if (!columnExists(sql,"last_update_timestamp")) {
              sql.execute("alter table " + table + " add column last_update_timestamp timestamp without time zone");
            }
            if (!columnExists(sql,"metadata_perm_uuid")) {
              sql.execute("alter table " + table + " add column metadata_perm_uuid character varying(255)");
            }
            if (!columnExists(sql,"version")) {
              sql.execute("alter table " + table + " add column version integer");
            }
            final List<GroovyRowResult> volumeAndInstanceIds=sql.rows("select metadata_vm_volume_id, vminstance_id from " + table + " order by metadata_vm_volume_id, vminstance_id");
            final UUIDHexGenerator generator=new UUIDHexGenerator();
            final java.sql.Date date=new java.sql.Date(System.currentTimeMillis());
            for (            final GroovyRowResult volumeAndInstanceIdRow : volumeAndInstanceIds) {
              sql.execute("update " + table + " set id = ?, creation_timestamp = ?, last_update_timestamp = ?, metadata_perm_uuid = ?, version = 1 where metadata_vm_volume_id = ? and vminstance_id = ?",new Object[]{generator.generate(null,null),date,date,UUID.randomUUID().toString(),volumeAndInstanceIdRow.getAt(0),volumeAndInstanceIdRow.getAt(1)});
            }
            sql.execute("alter table " + table + " alter column id set not null");
            sql.execute("alter table " + table + " alter column metadata_perm_uuid set not null");
            sql.execute("alter table " + table + " add constraint "+ primaryKeyConstraintName+ " primary key (id)");
            sql.execute("alter table " + table + " add constraint "+ permUuidUniqueConstraintName+ " unique (metadata_perm_uuid)");
          }
 else {
            LOG.info("New columns exist, skipping upgrade");
          }
        }
 catch (        Exception e) {
          throw Exceptions.toUndeclared("Failed to upgrade " + table + " schema",e);
        }
        return null;
      }
    }
);
  }
  finally {
    if (sql != null) {
      sql.close();
    }
  }
  return Boolean.TRUE;
}
