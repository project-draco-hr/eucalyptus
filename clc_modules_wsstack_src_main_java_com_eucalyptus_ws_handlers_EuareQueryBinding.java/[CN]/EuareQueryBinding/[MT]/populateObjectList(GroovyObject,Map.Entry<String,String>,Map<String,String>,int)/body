{
  List<String> failedMappings=new ArrayList<String>();
  try {
    Field declaredField=getRecursiveField(obj.getClass(),paramFieldPair.getValue());
    ArrayList theList=(ArrayList)obj.getProperty(paramFieldPair.getValue());
    Class genericType=(Class)((ParameterizedType)declaredField.getGenericType()).getActualTypeArguments()[0];
    if (String.class.equals(genericType)) {
      if (params.containsKey(paramFieldPair.getKey())) {
        theList.add(params.remove(paramFieldPair.getKey()));
      }
 else {
        List<String> keys=Lists.newArrayList(params.keySet());
        for (        String k : keys) {
          if (k.matches(paramFieldPair.getKey() + "\\.\\d*")) {
            theList.add(params.remove(k));
          }
        }
      }
    }
 else     if (declaredField.isAnnotationPresent(HttpEmbedded.class)) {
      HttpEmbedded annoteEmbedded=(HttpEmbedded)declaredField.getAnnotation(HttpEmbedded.class);
      if (annoteEmbedded.multiple()) {
        String prefix=paramFieldPair.getKey();
        List<String> embeddedListFieldNames=new ArrayList<String>();
        for (        String actualParameterName : params.keySet())         if (actualParameterName.matches(prefix + ".1.*"))         embeddedListFieldNames.add(actualParameterName.replaceAll(prefix + ".1.",""));
        for (int i=0; i < paramSize + 1; i++) {
          boolean foundAll=true;
          Map<String,String> embeddedParams=new HashMap<String,String>();
          for (          String fieldName : embeddedListFieldNames) {
            String paramName=prefix + "." + i+ "."+ fieldName;
            if (!params.containsKey(paramName)) {
              failedMappings.add("Mismatched embedded field: " + paramName);
              foundAll=false;
            }
 else             embeddedParams.put(fieldName,params.get(paramName));
          }
          if (foundAll)           failedMappings.addAll(populateEmbedded(genericType,embeddedParams,theList));
 else           break;
        }
      }
 else       failedMappings.addAll(populateEmbedded(genericType,params,theList));
    }
  }
 catch (  Exception e1) {
    failedMappings.add(paramFieldPair.getKey());
  }
  return failedMappings;
}
