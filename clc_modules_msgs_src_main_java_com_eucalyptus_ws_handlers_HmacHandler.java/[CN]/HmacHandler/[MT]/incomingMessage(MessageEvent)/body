{
  if (event.getMessage() instanceof MappingHttpRequest) {
    final MappingHttpRequest httpRequest=(MappingHttpRequest)event.getMessage();
    final Map<String,String> parameters=httpRequest.getParameters();
    final ByteArrayOutputStream bos=new ByteArrayOutputStream();
    httpRequest.getContent().readBytes(bos,httpRequest.getContent().readableBytes());
    final String body=bos.toString();
    bos.close();
    final Function<String,List<String>> headerLookup=SignatureHandlerUtils.headerLookup(httpRequest);
    final Function<String,List<String>> parameterLookup=SignatureHandlerUtils.parameterLookup(httpRequest);
    final HmacUtils.SignatureVariant variant=HmacUtils.detectSignatureVariant(headerLookup,parameterLookup);
    final Map<String,List<String>> headers=Maps.newHashMap();
    for (    final String header : httpRequest.getHeaderNames()) {
      headers.put(header.toLowerCase(),httpRequest.getHeaders(header));
    }
    if (variant.getVersion().value() <= 2) {
      if (!parameters.containsKey(SecurityParameter.AWSAccessKeyId.parameter())) {
        throw new AuthenticationException("Missing required parameter: " + SecurityParameter.AWSAccessKeyId);
      }
    }
    final HmacCredentials credentials=new HmacCredentials(httpRequest.getCorrelationId(),variant,processParametersForVariant(httpRequest,variant),headers,httpRequest.getMethod().getName(),httpRequest.getServicePath(),body);
    if (!allowTemporaryCredentials && credentials.getParameters().containsKey(SecurityParameter.SecurityToken.parameter())) {
      throw new AuthenticationException("Temporary credentials forbidden for service");
    }
    SecurityContext.getLoginContext(credentials).login();
    parameters.keySet().removeAll(variant.getParametersToRemove());
    parameters.remove(SecurityParameter.SecurityToken.parameter());
  }
}
