{
  if (event.getMessage() instanceof MappingHttpRequest) {
    MappingHttpRequest httpRequest=(MappingHttpRequest)event.getMessage();
    Map<String,String> parameters=httpRequest.getParameters();
    ByteArrayOutputStream bos=new ByteArrayOutputStream();
    httpRequest.getContent().readBytes(bos,httpRequest.getContent().readableBytes());
    String blah=bos.toString();
    bos.close();
    if (!parameters.containsKey(SecurityParameter.AWSAccessKeyId.toString()) && !internal) {
      throw new AuthenticationException("Missing required parameter: " + SecurityParameter.AWSAccessKeyId);
    }
 else     if (internal) {
      parameters.put(SecurityParameter.AWSAccessKeyId.toString(),Accounts.getFirstActiveAccessKeyId(Accounts.lookupSystemAdmin()));
    }
    if (!parameters.containsKey(SecurityParameter.Signature.toString())) {
      throw new AuthenticationException("Missing required parameter: " + SecurityParameter.Signature);
    }
    LOG.debug("HTTP request parameters: " + parameters);
    String sig=parameters.remove(SecurityParameter.Signature.toString());
    String sigVersion=parameters.get(RequiredQueryParams.SignatureVersion.toString());
    String sigMethod=parameters.get(SecurityParameter.SignatureMethod.toString());
    String verb=httpRequest.getMethod().getName();
    sigMethod=((sigMethod == null) ? "HMACSHA1" : sigMethod);
    Hmac hmac=Hmac.valueOf("HmacSHA" + sigMethod.substring(7));
    String headerHost=httpRequest.getHeader("Host");
    String servicePath=httpRequest.getServicePath();
    SecurityContext.getLoginContext(new HmacCredentials(httpRequest.getCorrelationId(),sig,parameters,verb,servicePath,headerHost,Integer.valueOf(sigVersion),hmac)).login();
    parameters.remove(RequiredQueryParams.SignatureVersion.toString());
    parameters.remove(SecurityParameter.SignatureMethod.toString());
    parameters.remove(SecurityParameter.AWSAccessKeyId.toString());
  }
}
