{
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
  AttachVolumeType attachVolumeType=new AttachVolumeType();
  attachVolumeType.setEffectiveUserId(info.getEffectiveUserId());
  DescribeInstancesType describeInstancesType=new DescribeInstancesType();
  describeInstancesType.setInstancesSet(Lists.newArrayList(properties.getInstanceId()));
  describeInstancesType.setEffectiveUserId(info.getEffectiveUserId());
  DescribeInstancesResponseType describeInstancesResponseType=AsyncRequests.<DescribeInstancesType,DescribeInstancesResponseType>sendSync(configuration,describeInstancesType);
  if (describeInstancesResponseType.getReservationSet() == null || describeInstancesResponseType.getReservationSet().isEmpty()) {
    throw new ValidationErrorException("No such instance " + properties.getInstanceId());
  }
  attachVolumeType.setInstanceId(properties.getInstanceId());
  DescribeVolumesType describeVolumesType=new DescribeVolumesType();
  describeVolumesType.setVolumeSet(Lists.newArrayList(properties.getVolumeId()));
  describeVolumesType.setEffectiveUserId(info.getEffectiveUserId());
  DescribeVolumesResponseType describeVolumesResponseType=AsyncRequests.<DescribeVolumesType,DescribeVolumesResponseType>sendSync(configuration,describeVolumesType);
  if (describeVolumesResponseType.getVolumeSet().size() == 0)   throw new ValidationErrorException("No such volume " + properties.getVolumeId());
  if (!"available".equals(describeVolumesResponseType.getVolumeSet().get(0).getStatus())) {
    throw new ValidationErrorException("Volume " + properties.getVolumeId() + " not available");
  }
  attachVolumeType.setVolumeId(properties.getVolumeId());
  attachVolumeType.setDevice(properties.getDevice());
  AsyncRequests.<AttachVolumeType,AttachVolumeResponseType>sendSync(configuration,attachVolumeType);
  boolean attached=false;
  for (int i=0; i < 60; i++) {
    Thread.sleep(5000L);
    DescribeVolumesType describeVolumesType2=new DescribeVolumesType();
    describeVolumesType2.setVolumeSet(Lists.newArrayList(properties.getVolumeId()));
    describeVolumesType2.setEffectiveUserId(info.getEffectiveUserId());
    DescribeVolumesResponseType describeVolumesResponseType2=AsyncRequests.<DescribeVolumesType,DescribeVolumesResponseType>sendSync(configuration,describeVolumesType2);
    if (describeVolumesResponseType2.getVolumeSet().size() == 0)     continue;
    if (describeVolumesResponseType2.getVolumeSet().get(0).getAttachmentSet() == null || describeVolumesResponseType2.getVolumeSet().get(0).getAttachmentSet().isEmpty())     continue;
    for (    AttachedVolume attachedVolume : describeVolumesResponseType2.getVolumeSet().get(0).getAttachmentSet()) {
      if (attachedVolume.getInstanceId().equals(properties.getInstanceId()) && attachedVolume.getDevice().equals(properties.getDevice()) && attachedVolume.getStatus().equals("attached")) {
        attached=true;
        break;
      }
    }
    if (attached == true)     break;
  }
  if (!attached)   throw new Exception("Timeout");
  String physicalResourceId=getStackEntity().getStackName() + "-" + info.getLogicalResourceId()+ "-"+ Crypto.generateAlphanumericId(13,"");
  info.setPhysicalResourceId(physicalResourceId);
  info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(info.getPhysicalResourceId())));
}
