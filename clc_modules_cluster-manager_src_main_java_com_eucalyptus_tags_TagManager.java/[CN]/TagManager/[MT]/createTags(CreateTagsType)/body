{
  final CreateTagsResponseType reply=request.getReply();
  reply.set_return(false);
  final Context context=Contexts.lookup();
  final UserFullName userFullName=context.getUserFullName();
  final AccountFullName accountFullName=userFullName.asAccountFullName();
  final List<String> resourceIds=Objects.firstNonNull(request.getResourcesSet(),Collections.<String>emptyList());
  final List<ResourceTag> resourceTags=Objects.firstNonNull(request.getTagSet(),Collections.<ResourceTag>emptyList());
  for (  final ResourceTag resourceTag : resourceTags) {
    final String key=resourceTag.getKey();
    final String value=Strings.nullToEmpty(resourceTag.getValue()).trim();
    if (isReserved(key)) {
      throw new ClientComputeException("InvalidParameterValue","Tag keys starting with 'aws:' and 'euca:' are reserved for internal use");
    }
    if (Strings.isNullOrEmpty(key) || key.trim().length() > 127) {
      throw new ClientComputeException("InvalidParameterValue","Tag key exceeds the maximum length of 127 characters");
    }
    if (value.length() > 255) {
      throw new ClientComputeException("InvalidParameterValue","Tag value exceeds the maximum length of 255 characters");
    }
  }
  if (resourceTags.size() > 0 && resourceIds.size() > 0) {
    final Predicate<Void> creator=new Predicate<Void>(){
      @Override public boolean apply(      final Void v){
        final List<CloudMetadata> resources=Lists.transform(resourceIds,resourceLookup(true));
        if (!Iterables.all(resources,Predicates.and(Predicates.notNull(),typeSpecificFilters(),permissionsFilter()))) {
          return false;
        }
        for (        final CloudMetadata resource : resources) {
          for (          final ResourceTag resourceTag : resourceTags) {
            final String key=Strings.nullToEmpty(resourceTag.getKey()).trim();
            final String value=Strings.nullToEmpty(resourceTag.getValue()).trim();
            TagSupport.fromResource(resource).createOrUpdate(resource,userFullName,key,value);
          }
          if (TagSupport.fromResource(resource).count(resource,accountFullName) > MAX_TAGS_PER_RESOURCE) {
            throw new TagLimitException();
          }
        }
        return true;
      }
    }
;
    try {
      reply.set_return(Entities.asTransaction(Tag.class,creator).apply(null));
    }
 catch (    TagLimitException e) {
      throw new TagLimitExceededException();
    }
catch (    RuntimeException e) {
      handleException(e);
    }
  }
  return reply;
}
