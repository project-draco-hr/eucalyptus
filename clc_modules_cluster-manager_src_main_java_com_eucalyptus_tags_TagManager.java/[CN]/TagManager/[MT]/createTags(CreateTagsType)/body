{
  final CreateTagsResponseType reply=request.getReply();
  reply.set_return(false);
  final Context context=Contexts.lookup();
  final OwnerFullName ownerFullName=context.getUserFullName();
  final List<String> resourceIds=Objects.firstNonNull(request.getResourcesSet(),Collections.<String>emptyList());
  final List<ResourceTag> resourceTags=Objects.firstNonNull(request.getTagSet(),Collections.<ResourceTag>emptyList());
  for (  final ResourceTag resourceTag : resourceTags) {
    final String key=resourceTag.getKey();
    final String value=Strings.nullToEmpty(resourceTag.getValue()).trim();
    if (Strings.isNullOrEmpty(key) || key.trim().length() > 128 || isReserved(key)) {
      throw new InvalidParameterValueException("Invalid key (max length 128, must not be empty, reserved prefixes " + reservedPrefixes + "): "+ key);
    }
    if (value.length() > 256 || isReserved(key)) {
      throw new InvalidParameterValueException("Invalid value (max length 256, reserved prefixes " + reservedPrefixes + "): "+ value);
    }
  }
  if (resourceTags.size() > 0 && resourceIds.size() > 0) {
    final Predicate<Void> creator=new Predicate<Void>(){
      @Override public boolean apply(      final Void v){
        final List<CloudMetadata> resources=Lists.transform(resourceIds,resourceLookup());
        if (!Iterables.all(resources,Predicates.and(Predicates.notNull(),typeSpecificFilters(),RestrictedTypes.filterPrivileged()))) {
          return false;
        }
        for (        final CloudMetadata resource : resources) {
          final Tag example=TagSupport.fromResource(resource).example(resource,ownerFullName,null,null);
          if (Entities.count(example) + resourceTags.size() > MAX_TAGS_PER_RESOURCE) {
            return false;
          }
        }
        for (        final CloudMetadata resource : resources) {
          for (          final ResourceTag resourceTag : resourceTags) {
            final String key=Strings.nullToEmpty(resourceTag.getKey()).trim();
            final String value=Strings.nullToEmpty(resourceTag.getValue()).trim();
            TagSupport.fromResource(resource).createOrUpdate(resource,ownerFullName,key,value);
          }
        }
        return true;
      }
    }
;
    reply.set_return(Entities.asTransaction(Tag.class,creator).apply(null));
  }
  return reply;
}
