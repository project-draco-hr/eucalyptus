{
  final ServiceBuilder builder=component.getBuilder();
  String partition=part;
  if (!component.getComponentId().isPartitioned()) {
    partition=name;
  }
 else   if (component.getComponentId().isCloudLocal()) {
    partition=Components.lookup(Eucalyptus.class).getComponentId().name();
  }
 else   if (partition == null) {
    LOG.error("BUG: Provided partition is null.  Using the service name as the partition name for the time being.");
    partition=name;
  }
  InetAddress addr;
  try {
    addr=InetAddress.getByName(hostName);
  }
 catch (  UnknownHostException ex1) {
    LOG.error("Inavlid hostname: " + hostName + " failure: "+ ex1.getMessage(),ex1);
    throw new ServiceRegistrationException(builder.getClass().getSimpleName() + ": registration failed because the hostname " + hostName+ " is invalid: "+ ex1.getMessage(),ex1);
  }
  LOG.info("Using builder: " + builder.getClass().getSimpleName() + " for: "+ partition+ "."+ name+ "@"+ hostName+ ":"+ port);
  if (!builder.checkAdd(partition,name,hostName,port)) {
    LOG.info(builder.getClass().getSimpleName() + ": checkAdd failed.");
    return false;
  }
  try {
    final ServiceConfiguration newComponent=builder.add(partition,name,hostName,port);
    try {
      Runnable followRunner=new Runnable(){
        public void run(){
          try {
            component.startTransition(newComponent).get();
            component.enableTransition(newComponent).get();
          }
 catch (          ServiceRegistrationException ex1) {
            LOG.error(ex1,ex1);
          }
catch (          IllegalStateException ex1) {
            LOG.error(ex1,ex1);
          }
catch (          ExecutionException ex) {
            LOG.error(ex,ex);
          }
catch (          InterruptedException ex) {
            Thread.currentThread().interrupt();
          }
        }
      }
;
      try {
        Threads.lookup(ConfigurationService.class,ComponentRegistrationHandler.class).submit(followRunner).get(5000,TimeUnit.MILLISECONDS);
      }
 catch (      InterruptedException ex) {
        Thread.currentThread().interrupt();
      }
catch (      TimeoutException ex) {
        LOG.error(ex,ex);
      }
    }
 catch (    Throwable ex) {
      builder.remove(newComponent);
      LOG.info(builder.getClass().getSimpleName() + ": enable failed because of: " + ex.getMessage());
    }
    return true;
  }
 catch (  Throwable e) {
    e=Exceptions.filterStackTrace(e);
    LOG.info(builder.getClass().getSimpleName() + ": registration failed because of: " + e.getMessage());
    LOG.error(e,e);
    throw new ServiceRegistrationException(builder.getClass().getSimpleName() + ": registration failed with message: " + e.getMessage(),e);
  }
}
