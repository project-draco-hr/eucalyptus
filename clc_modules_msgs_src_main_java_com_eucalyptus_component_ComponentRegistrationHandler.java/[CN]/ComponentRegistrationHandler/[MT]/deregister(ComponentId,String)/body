{
  final ServiceBuilder<?> builder=ServiceBuilders.lookup(compId);
  LOG.info("Using builder: " + builder.getClass().getSimpleName());
  boolean proceedOnError=false;
  try {
    if (!checkRemove(builder,name)) {
      LOG.info(builder.getClass().getSimpleName() + ": checkRemove failed.");
      throw new ServiceRegistrationException(builder.getClass().getSimpleName() + ": checkRemove returned false.  " + "It is unsafe to currently deregister, please check the logs for additional information.");
    }
  }
 catch (  final NoSuchElementException ex) {
    LOG.info("Silently proceeding with deregister for non-existant configuration");
    proceedOnError=true;
  }
catch (  Exception e) {
    LOG.info(builder.getClass().getSimpleName() + ": checkRemove failed.");
    throw new ServiceRegistrationException(builder.getClass().getSimpleName() + ": checkRemove failed with message: " + e.getMessage(),e);
  }
  ServiceConfiguration conf=null;
  try {
    try {
      conf=ServiceConfigurations.lookupByName(compId.getClass(),name);
    }
 catch (    NoSuchElementException ex1) {
      conf=Components.lookup(compId.getClass()).lookup(name);
    }
    try {
      Topology.destroy(conf);
    }
 catch (    Exception ex) {
      LOG.error(ex);
      Logs.extreme().debug(ex,ex);
    }
    try {
      ServiceConfigurations.remove(conf);
    }
 catch (    Exception ex) {
      LOG.error(ex);
      Logs.extreme().debug(ex,ex);
    }
  }
 catch (  Exception e) {
    if (proceedOnError) {
      LOG.info(builder.getClass().getSimpleName() + ": deregistration error, but proceeding since config has been removed: " + e.getMessage());
      return conf;
    }
 else {
      LOG.info(builder.getClass().getSimpleName() + ": deregistration failed because of" + e.getMessage());
      throw new ServiceRegistrationException(builder.getClass().getSimpleName() + ": deregistration failed because of: " + e.getMessage(),e);
    }
  }
  return conf;
}
