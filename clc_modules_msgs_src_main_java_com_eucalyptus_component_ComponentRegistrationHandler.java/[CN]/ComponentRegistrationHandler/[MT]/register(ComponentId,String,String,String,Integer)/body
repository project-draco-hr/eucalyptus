{
  ServiceConfiguration returnConfig=null;
  if (!compId.isRegisterable()) {
    throw new ServiceRegistrationException("Failed to register component: " + compId.getFullName() + " does not support registration.");
  }
  final ServiceBuilder builder=ServiceBuilders.lookup(compId);
  String partition=partitionName;
  if (!ServiceGroups.listMembership(compId).isEmpty()) {
    partition=partitionName;
  }
 else   if (!compId.isPartitioned()) {
    partition=name;
  }
 else   if (!compId.isPartitioned() && compId.isCloudLocal()) {
    partition=Components.lookup(Eucalyptus.class).getComponentId().name();
  }
 else   if (partition == null) {
    LOG.error("BUG: Provided partition is null.  Using the service name as the partition name for the time being.");
    partition=name;
  }
  HostNamePredicate.get().apply(hostName);
  LOG.info("Using builder: " + builder.getClass().getSimpleName() + " for: "+ partition+ "."+ name+ "@"+ hostName+ ":"+ port);
  if (builder.checkUpdate(partition,name,hostName,port)) {
    final ServiceConfiguration configuration=ServiceConfigurations.lookupByName(builder.getComponentId().getClass(),name);
    ServiceConfigurations.update(configuration,hostName,port);
    ServiceConfigurations.store(configuration);
    Components.updateConfiguration().apply(configuration);
    LOG.info(String.format("Updated registration information to: %s.%s@%s:%d",partition,name,hostName,port));
    return configuration;
  }
  if (!builder.checkAdd(partition,name,hostName,port)) {
    LOG.info("Returning existing registration information for: " + partition + "."+ name+ "@"+ hostName+ ":"+ port);
    return ServiceConfigurations.lookupByName(builder.getComponentId().getClass(),name);
  }
  try {
    final ServiceConfiguration newComponent=builder.newInstance(partition,name,hostName,port);
    if (newComponent.getComponentId().isPartitioned()) {
      Partition part=Partitions.lookup(newComponent);
      part.syncKeysToDisk();
      Partition p=Partitions.lookup(newComponent);
      Logs.extreme().info(p.getCertificate());
      Logs.extreme().info(p.getNodeCertificate());
    }
    returnConfig=ServiceConfigurations.store(newComponent);
    try {
      Components.lookup(newComponent).setup(newComponent);
      Future<ServiceConfiguration> res=Topology.start(newComponent);
      JdkFutureAdapters.listenInPoolThread(res).addListener(new Runnable(){
        @Override public void run(){
          try {
            Topology.enable(newComponent);
          }
 catch (          Exception ex) {
            LOG.info(builder.getClass().getSimpleName() + ": enable failed because of: " + ex.getMessage());
          }
        }
      }
,MoreExecutors.sameThreadExecutor());
    }
 catch (    Exception ex) {
      LOG.info(builder.getClass().getSimpleName() + ": load failed because of: " + ex.getMessage());
    }
    return returnConfig;
  }
 catch (  Exception e) {
    e=Exceptions.filterStackTrace(e);
    LOG.info(builder.getClass().getSimpleName() + ": registration failed because of: " + e.getMessage());
    LOG.error(e,e);
    throw new ServiceRegistrationException(builder.getClass().getSimpleName() + ": registration failed with message: " + e.getMessage(),e);
  }
}
