{
  final ServiceBuilder builder=component.getBuilder();
  LOG.info("Using builder: " + builder.getClass().getSimpleName());
  try {
    if (!builder.checkRemove(partition,name)) {
      LOG.info(builder.getClass().getSimpleName() + ": checkRemove failed.");
      throw new ServiceRegistrationException(builder.getClass().getSimpleName() + ": checkRemove returned false.  It is unsafe to currently deregister, please check the logs for additional information.");
    }
  }
 catch (  Exception e) {
    LOG.info(builder.getClass().getSimpleName() + ": checkRemove failed.");
    throw new ServiceRegistrationException(builder.getClass().getSimpleName() + ": checkRemove failed with message: " + e.getMessage(),e);
  }
  final ServiceConfiguration conf;
  try {
    conf=builder.lookupByName(name);
  }
 catch (  ServiceRegistrationException e) {
    LOG.info(builder.getClass().getSimpleName() + ": lookupByName failed.");
    LOG.error(e,e);
    throw e;
  }
  try {
    final CheckedListenableFuture<ServiceConfiguration> future=component.stopTransition(conf);
    Runnable followRunner=new Runnable(){
      public void run(){
        try {
          future.get();
          for (int i=0; i < 3; i++) {
            try {
              component.destroyTransition(conf);
              break;
            }
 catch (            IllegalStateException ex) {
              LOG.error(ex,Exceptions.filterStackTrace(ex,10));
              continue;
            }
          }
        }
 catch (        Exception ex) {
          LOG.error(ex,ex);
        }
      }
    }
;
    Threads.lookup(ConfigurationService.class,ComponentRegistrationHandler.class,conf.getFullName().toString()).submit(followRunner);
    builder.remove(conf);
    return true;
  }
 catch (  Throwable e) {
    LOG.info(builder.getClass().getSimpleName() + ": remove failed.");
    LOG.info(e.getMessage());
    LOG.error(e,e);
    throw new ServiceRegistrationException(builder.getClass().getSimpleName() + ": remove failed with message: " + e.getMessage(),e);
  }
}
