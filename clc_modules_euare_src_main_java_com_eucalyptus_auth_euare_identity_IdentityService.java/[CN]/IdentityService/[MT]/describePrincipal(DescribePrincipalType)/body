{
  final DescribePrincipalResponseType response=request.getReply();
  final DescribePrincipalResult result=new DescribePrincipalResult();
  try {
    final UserPrincipal user;
    if (request.getAccessKeyId() != null) {
      user=identityProvider.lookupPrincipalByAccessKeyId(request.getAccessKeyId(),request.getNonce());
    }
 else     if (request.getCertificateId() != null) {
      user=identityProvider.lookupPrincipalByCertificateId(request.getCertificateId());
    }
 else     if (request.getUserId() != null) {
      user=identityProvider.lookupPrincipalByUserId(request.getUserId(),request.getNonce());
    }
 else     if (request.getRoleId() != null) {
      user=identityProvider.lookupPrincipalByRoleId(request.getRoleId(),request.getNonce());
    }
 else     if (request.getAccountId() != null) {
      user=identityProvider.lookupPrincipalByAccountNumber(request.getAccountId());
    }
 else     if (request.getCanonicalId() != null) {
      user=identityProvider.lookupPrincipalByCanonicalId(request.getCanonicalId());
    }
 else {
      user=null;
    }
    if (user != null) {
      final Principal principal=new Principal();
      principal.setEnabled(user.isEnabled());
      principal.setArn(Accounts.getUserArn(user));
      principal.setUserId(user.getUserId());
      principal.setRoleId(Accounts.isRoleIdentifier(user.getAuthenticatedId()) ? user.getAuthenticatedId() : null);
      principal.setCanonicalId(user.getCanonicalId());
      principal.setAccountAlias(user.getAccountAlias());
      final ArrayList<com.eucalyptus.auth.euare.common.identity.AccessKey> accessKeys=Lists.newArrayList();
      for (      final AccessKey accessKey : user.getKeys()) {
        final com.eucalyptus.auth.euare.common.identity.AccessKey key=new com.eucalyptus.auth.euare.common.identity.AccessKey();
        key.setAccessKeyId(accessKey.getAccessKey());
        key.setSecretAccessKey(accessKey.getSecretKey());
        accessKeys.add(key);
      }
      principal.setAccessKeys(accessKeys);
      final ArrayList<com.eucalyptus.auth.euare.common.identity.Certificate> certificates=Lists.newArrayList();
      for (      final Certificate certificate : Iterables.filter(user.getCertificates(),propertyPredicate(false,revoked()))) {
        final com.eucalyptus.auth.euare.common.identity.Certificate cert=new com.eucalyptus.auth.euare.common.identity.Certificate();
        cert.setCertificateId(certificate.getCertificateId());
        cert.setCertificateBody(certificate.getPem());
        certificates.add(cert);
      }
      principal.setCertificates(certificates);
      final ArrayList<Policy> policies=Lists.newArrayList();
      if (user.isEnabled())       for (      final PolicyVersion policyVersion : user.getPrincipalPolicies()) {
        final Policy policy=new Policy();
        policy.setVersionId(policyVersion.getPolicyVersionId());
        policy.setName(policyVersion.getPolicyName());
        policy.setScope(policyVersion.getPolicyScope().toString());
        policy.setPolicy(policyVersion.getPolicy());
        policy.setHash(PolicyVersions.hash(policyVersion.getPolicy()));
        policies.add(policy);
      }
      principal.setPolicies(policies);
      result.setPrincipal(principal);
    }
  }
 catch (  InvalidAccessKeyAuthException e) {
  }
catch (  AuthException e) {
    throw handleException(e);
  }
  response.setDescribePrincipalResult(result);
  return response;
}
