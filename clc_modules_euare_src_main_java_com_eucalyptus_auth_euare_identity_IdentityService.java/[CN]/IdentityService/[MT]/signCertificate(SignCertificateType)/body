{
  final SignCertificateResponseType response=request.getReply();
  final SignCertificateResult result=new SignCertificateResult();
  final String pubkey=request.getKey();
  final String principal=request.getPrincipal();
  final Integer expirationDays=request.getExpirationDays();
  if (Strings.isNullOrEmpty(pubkey))   throw new IdentityServiceSenderException("InvalidValue","No public key is provided");
  if (Strings.isNullOrEmpty(principal))   throw new IdentityServiceSenderException("InvalidValue","No principal is provided");
  try {
    final KeyFactory keyFactory=KeyFactory.getInstance("RSA","BC");
    final X509EncodedKeySpec publicKeySpec=new X509EncodedKeySpec(B64.standard.dec(pubkey));
    final PublicKey publicKey=keyFactory.generatePublic(publicKeySpec);
    final X509Certificate vmCert=EuareServerCertificateUtil.generateVMCertificate((RSAPublicKey)publicKey,principal,Objects.firstNonNull(expirationDays,180));
    final String certPem=new String(PEMFiles.getBytes(vmCert));
    result.setPem(certPem);
  }
 catch (  final Exception ex) {
    throw new IdentityServiceReceiverException("InternalError",String.valueOf(ex.getMessage()));
  }
  response.setSignCertificateResult(result);
  return response;
}
