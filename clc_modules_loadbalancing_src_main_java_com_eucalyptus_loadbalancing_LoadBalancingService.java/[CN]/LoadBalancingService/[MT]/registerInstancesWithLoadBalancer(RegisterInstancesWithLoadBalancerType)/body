{
  RegisterInstancesWithLoadBalancerResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final UserFullName ownerFullName=ctx.getUserFullName();
  final String lbName=request.getLoadBalancerName();
  final Collection<Instance> instances=request.getInstances().getMember();
  LoadBalancer lb=null;
  try {
    lb=LoadBalancers.getLoadbalancer(ctx,lbName);
  }
 catch (  final Exception ex) {
    throw new AccessPointNotFoundException();
  }
  if (!LoadBalancingMetadatas.filterPrivileged().apply(lb)) {
    throw new AccessPointNotFoundException();
  }
  final Predicate<LoadBalancer> creator=new Predicate<LoadBalancer>(){
    @Override public boolean apply(    LoadBalancer lb){
      for (      Instance vm : instances) {
        if (lb.hasBackendInstance(vm.getInstanceId()))         continue;
        try {
          final LoadBalancerBackendInstance beInstance=LoadBalancerBackendInstance.newInstance(ownerFullName,lb,vm.getInstanceId());
          beInstance.setState(LoadBalancerBackendInstance.STATE.OutOfService);
          Entities.persist(beInstance);
        }
 catch (        final LoadBalancingException ex) {
          throw Exceptions.toUndeclared(ex);
        }
      }
      return true;
    }
  }
;
  final Function<Void,ArrayList<Instance>> finder=new Function<Void,ArrayList<Instance>>(){
    @Override public ArrayList<Instance> apply(    Void v){
      LoadBalancer lb=null;
      try {
        lb=LoadBalancers.getLoadbalancer(ctx,lbName);
      }
 catch (      Exception ex) {
        LOG.warn("No loadbalancer is found with name=" + lbName);
        return Lists.newArrayList();
      }
      Entities.refresh(lb);
      ArrayList<Instance> result=new ArrayList<Instance>(Collections2.transform(lb.getBackendInstances(),new Function<LoadBalancerBackendInstance,Instance>(){
        @Override public Instance apply(        final LoadBalancerBackendInstance input){
          final Instance newInst=new Instance();
          newInst.setInstanceId(input.getInstanceId());
          return newInst;
        }
      }
));
      return result;
    }
  }
;
  try {
    RegisterInstancesEvent evt=new RegisterInstancesEvent();
    evt.setLoadBalancer(lbName);
    evt.setContext(ctx);
    evt.setInstances(instances);
    ActivityManager.getInstance().fire(evt);
  }
 catch (  EventFailedException e) {
    LOG.error("failed to handle RegisterInstances event",e);
    final String reason=e.getCause() != null && e.getCause().getMessage() != null ? e.getCause().getMessage() : "internal error";
    throw new InternalFailure400Exception(String.format("Failed to register instances: %s",reason),e);
  }
  if (instances != null) {
    try {
      reply.set_return(Entities.asTransaction(LoadBalancerBackendInstance.class,creator).apply(lb));
    }
 catch (    Exception ex) {
      handleException(ex);
    }
  }
  RegisterInstancesWithLoadBalancerResult result=new RegisterInstancesWithLoadBalancerResult();
  Instances returnInstances=new Instances();
  returnInstances.setMember(Entities.asTransaction(LoadBalancer.class,finder).apply(null));
  result.setInstances(returnInstances);
  reply.setRegisterInstancesWithLoadBalancerResult(result);
  return reply;
}
