{
  PutServoStatesResponseType reply=request.getReply();
  final String servoId=request.getInstanceId();
  final Instances instances=request.getInstances();
  LoadBalancer lb=null;
  if (servoId != null) {
    try {
      LoadBalancerServoInstance servo=LoadBalancers.lookupServoInstance(servoId);
      lb=servo.getAvailabilityZone().getLoadbalancer();
      if (lb == null)       throw new Exception("Failed to find the loadbalancer");
    }
 catch (    NoSuchElementException ex) {
      LOG.warn("unknown servo VM id is used to query: " + servoId);
    }
catch (    Exception ex) {
      LOG.warn("failed to query servo instance");
    }
  }
  if (lb != null && instances.getMember() != null && instances.getMember().size() > 0) {
    for (    Instance instance : instances.getMember()) {
      String instanceId=instance.getInstanceId();
      String[] parts=instanceId.split(":");
      if (parts == null || parts.length != 2) {
        LOG.warn("instance id is in wrong format:" + instanceId);
        continue;
      }
      instanceId=parts[0];
      String state=parts[1];
      final EntityTransaction db=Entities.get(LoadBalancerBackendInstance.class);
      try {
        LoadBalancerBackendInstance sample=LoadBalancerBackendInstance.named(instanceId);
        LoadBalancerBackendInstance found=Entities.uniqueResult(sample);
        if (state.equals(LoadBalancerBackendInstance.STATE.InService.name()) || state.equals(LoadBalancerBackendInstance.STATE.OutOfService.name())) {
          found.setState(Enum.valueOf(LoadBalancerBackendInstance.STATE.class,state));
          Entities.persist(found);
        }
        db.commit();
      }
 catch (      NoSuchElementException ex) {
        db.rollback();
      }
catch (      Exception ex) {
        db.rollback();
        LOG.warn("Failed to query loadbalancer backend instance: " + instanceId,ex);
      }
    }
  }
  return reply;
}
