{
  PutServoStatesResponseType reply=request.getReply();
  final String servoId=request.getInstanceId();
  if (!isValidServoRequest(servoId)) {
    return reply;
  }
  final Instances instances=request.getInstances();
  final MetricData metric=request.getMetricData();
  LoadBalancer lb=null;
  if (servoId != null) {
    try {
      final LoadBalancerServoInstance servo=LoadBalancers.lookupServoInstance(servoId);
      final LoadBalancerZoneCoreView zoneView=servo.getAvailabilityZone();
      final LoadBalancerZone zone=LoadBalancerZoneEntityTransform.INSTANCE.apply(zoneView);
      final LoadBalancerCoreView lbView=zone.getLoadbalancer();
      lb=LoadBalancerEntityTransform.INSTANCE.apply(lbView);
      if (lb == null)       throw new Exception("Failed to find the loadbalancer");
      if (!servo.getAvailabilityZone().getState().equals(LoadBalancerZone.STATE.InService))       lb=null;
    }
 catch (    NoSuchElementException ex) {
      LOG.warn("unknown servo VM id is used to query: " + servoId);
    }
catch (    Exception ex) {
      LOG.warn("failed to query servo instance");
    }
  }
  if (lb == null || !LoadBalancingMetadatas.filterPrivilegedWithoutOwner().apply(lb))   return reply;
  if (instances != null && instances.getMember() != null && instances.getMember().size() > 0) {
    final Collection<LoadBalancerBackendInstanceCoreView> lbInstances=lb.getBackendInstances();
    if (lb != null && instances.getMember() != null && instances.getMember().size() > 0) {
      for (      Instance instance : instances.getMember()) {
        String instanceId=instance.getInstanceId();
        String[] parts=instanceId.split(":");
        if (parts == null || parts.length != 2) {
          LOG.warn("instance id is in wrong format:" + instanceId);
          continue;
        }
        instanceId=parts[0];
        String state=parts[1];
        LoadBalancerBackendInstanceCoreView found=null;
        for (        final LoadBalancerBackendInstanceCoreView lbInstance : lbInstances) {
          if (instanceId.equals(lbInstance.getInstanceId())) {
            found=lbInstance;
            break;
          }
        }
        if (found != null) {
          String zoneName=found.getZoneName();
          final EntityTransaction db=Entities.get(LoadBalancerBackendInstance.class);
          try {
            LoadBalancerBackendInstance update=Entities.uniqueResult(LoadBalancerBackendInstance.named(lb,found.getInstanceId()));
            if (state.equals(LoadBalancerBackendInstance.STATE.InService.name()) || state.equals(LoadBalancerBackendInstance.STATE.OutOfService.name())) {
              update.setState(Enum.valueOf(LoadBalancerBackendInstance.STATE.class,state));
              if (state.equals(LoadBalancerBackendInstance.STATE.OutOfService.name())) {
                update.setReasonCode("Instance");
                update.setDescription("Instance has failed at least the UnhealthyThreshold number of health checks consecutively.");
              }
 else {
                update.setReasonCode(null);
                update.setDescription(null);
              }
              Entities.persist(update);
            }
            db.commit();
          }
 catch (          NoSuchElementException ex) {
            db.rollback();
          }
catch (          Exception ex) {
            db.rollback();
            LOG.warn("Failed to query loadbalancer backend instance: " + instanceId,ex);
          }
        }
      }
    }
  }
  for (  final LoadBalancerBackendInstanceCoreView sample : lb.getBackendInstances()) {
    final EntityTransaction db=Entities.get(LoadBalancerBackendInstance.class);
    try {
      final LoadBalancerBackendInstance found=Entities.uniqueResult(LoadBalancerBackendInstance.named(lb,sample.getInstanceId()));
      final String zoneName=found.getAvailabilityZone().getName();
      if (found.getState().equals(LoadBalancerBackendInstance.STATE.InService)) {
        LoadBalancerCwatchMetrics.getInstance().updateHealthy(LoadBalancerCoreViewTransform.INSTANCE.apply(lb),zoneName,found.getInstanceId());
      }
 else       if (found.getState().equals(LoadBalancerBackendInstance.STATE.OutOfService)) {
        LoadBalancerCwatchMetrics.getInstance().updateUnHealthy(LoadBalancerCoreViewTransform.INSTANCE.apply(lb),zoneName,found.getInstanceId());
      }
      db.commit();
    }
 catch (    NoSuchElementException ex) {
      db.rollback();
    }
catch (    Exception ex) {
      db.rollback();
      LOG.warn("Failed to query loadbalancer backend instance",ex);
    }
  }
  if (metric != null && metric.getMember() != null && metric.getMember().size() > 0) {
    try {
      LoadBalancerCwatchMetrics.getInstance().addMetric(servoId,metric);
    }
 catch (    Exception ex) {
      LOG.error("Failed to add ELB cloudwatch metric",ex);
    }
  }
  return reply;
}
