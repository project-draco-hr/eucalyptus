{
  DeleteLoadBalancerResponseType reply=request.getReply();
  final String lbToDelete=request.getLoadBalancerName();
  final Context ctx=Contexts.lookup();
  final UserFullName ownerFullName=ctx.getUserFullName();
  try {
    if (lbToDelete != null) {
      LoadBalancer lb=null;
      try {
        lb=LoadBalancers.getLoadbalancer(ownerFullName,lbToDelete);
      }
 catch (      NoSuchElementException ex) {
        throw new Exception("loadbalancer not found",ex);
      }
      if (!RestrictedTypes.filterPrivileged().apply(lb)) {
        throw new Exception("not authorized for the loadbalancer instance");
      }
      Collection<LoadBalancerListener> listeners=lb.getListeners();
      final List<Integer> ports=Lists.newArrayList(Collections2.transform(listeners,new Function<LoadBalancerListener,Integer>(){
        @Override public Integer apply(        @Nullable LoadBalancerListener arg0){
          return arg0.getLoadbalancerPort();
        }
      }
));
      try {
        DeleteListenerEvent evt=new DeleteListenerEvent();
        evt.setLoadBalancer(lbToDelete);
        evt.setContext(ctx);
        evt.setPorts(ports);
        ActivityManager.getInstance().fire(evt);
      }
 catch (      EventFailedException e) {
        LOG.error("failed to fire DeleteListener event",e);
      }
      try {
        DeleteLoadbalancerEvent evt=new DeleteLoadbalancerEvent();
        evt.setLoadBalancer(lbToDelete);
        evt.setContext(ctx);
        ActivityManager.getInstance().fire(evt);
      }
 catch (      EventFailedException e) {
        LOG.error("failed to fire DeleteLoadbalancer event",e);
        throw e;
      }
      LoadBalancers.deleteLoadbalancer(ownerFullName,lbToDelete);
    }
  }
 catch (  Exception e) {
    if (!(e.getCause() instanceof NoSuchElementException)) {
      LOG.error("Error deleting the loadbalancer: " + e.getMessage(),e);
      throw new LoadBalancingException("Failed to delete the loadbalancer " + lbToDelete,e);
    }
  }
  DeleteLoadBalancerResult result=new DeleteLoadBalancerResult();
  reply.setDeleteLoadBalancerResult(result);
  reply.set_return(true);
  return reply;
}
