{
  DeregisterInstancesFromLoadBalancerResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final String lbName=request.getLoadBalancerName();
  final Collection<Instance> instances=request.getInstances().getMember();
  LoadBalancer lb=null;
  try {
    lb=LoadBalancers.getLoadbalancer(ctx,lbName);
  }
 catch (  Exception ex) {
    throw new AccessPointNotFoundException();
  }
  if (lb != null && !LoadBalancingMetadatas.filterPrivileged().apply(lb)) {
    throw new AccessPointNotFoundException();
  }
  final Function<LoadBalancer,Collection<String>> filter=new Function<LoadBalancer,Collection<String>>(){
    @Override public Collection<String> apply(    LoadBalancer lb){
      Collection<String> filtered=Sets.newHashSet();
      for (      Instance inst : instances) {
        if (lb.hasBackendInstance(inst.getInstanceId()))         filtered.add(inst.getInstanceId());
      }
      return filtered;
    }
  }
;
  final Collection<String> instancesToRemove=Entities.asTransaction(LoadBalancer.class,filter).apply(lb);
  if (instancesToRemove == null) {
    reply.set_return(false);
    return reply;
  }
  final Predicate<Void> remover=new Predicate<Void>(){
    @Override public boolean apply(    Void v){
      for (      String instanceId : instancesToRemove) {
        LoadBalancerBackendInstance toDelete=null;
        try {
          toDelete=Entities.uniqueResult(LoadBalancerBackendInstance.named(instanceId));
        }
 catch (        NoSuchElementException ex) {
          toDelete=null;
        }
catch (        Exception ex) {
          LOG.error("Can't query loadbalancer backend instance for " + instanceId);
          toDelete=null;
        }
        if (toDelete == null)         continue;
        Entities.delete(toDelete);
      }
      return true;
    }
  }
;
  final Function<Void,ArrayList<Instance>> finder=new Function<Void,ArrayList<Instance>>(){
    @Override public ArrayList<Instance> apply(    Void v){
      LoadBalancer lb=null;
      try {
        lb=LoadBalancers.getLoadbalancer(ctx,lbName);
      }
 catch (      Exception ex) {
        LOG.warn("No loadbalancer is found with name=" + lbName);
        return Lists.newArrayList();
      }
      Entities.refresh(lb);
      ArrayList<Instance> result=new ArrayList<Instance>(Collections2.transform(lb.getBackendInstances(),new Function<LoadBalancerBackendInstance,Instance>(){
        @Override public Instance apply(        final LoadBalancerBackendInstance input){
          final Instance newInst=new Instance();
          newInst.setInstanceId(input.getInstanceId());
          return newInst;
        }
      }
));
      return result;
    }
  }
;
  try {
    DeregisterInstancesEvent evt=new DeregisterInstancesEvent();
    evt.setLoadBalancer(lbName);
    evt.setContext(ctx);
    evt.setInstances(instances);
    ActivityManager.getInstance().fire(evt);
  }
 catch (  EventFailedException e) {
    LOG.error("failed to fire DeregisterInstances event",e);
    final String reason=e.getCause() != null && e.getCause().getMessage() != null ? e.getCause().getMessage() : "internal error";
    throw new LoadBalancingException(String.format("Failed to deregister instances: %s",reason),e);
  }
  reply.set_return(Entities.asTransaction(LoadBalancerBackendInstance.class,remover).apply(null));
  DeregisterInstancesFromLoadBalancerResult result=new DeregisterInstancesFromLoadBalancerResult();
  Instances returnInstances=new Instances();
  returnInstances.setMember(Entities.asTransaction(LoadBalancer.class,finder).apply(null));
  result.setInstances(returnInstances);
  reply.setDeregisterInstancesFromLoadBalancerResult(result);
  return reply;
}
