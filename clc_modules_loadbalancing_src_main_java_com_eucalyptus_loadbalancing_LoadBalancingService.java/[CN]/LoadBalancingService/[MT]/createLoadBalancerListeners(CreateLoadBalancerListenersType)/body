{
  final CreateLoadBalancerListenersResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final String lbName=request.getLoadBalancerName();
  final List<Listener> listeners=request.getListeners().getMember();
  LoadBalancer lb=null;
  try {
    lb=LoadBalancers.getLoadbalancer(ctx,lbName);
  }
 catch (  Exception ex) {
    throw new AccessPointNotFoundException();
  }
  if (lb != null && !LoadBalancingMetadatas.filterPrivileged().apply(lb)) {
    throw new AccessPointNotFoundException();
  }
  if (listeners != null)   LoadBalancers.validateListener(lb,listeners);
  try {
    CreateListenerEvent evt=new CreateListenerEvent();
    evt.setLoadBalancer(lbName);
    evt.setContext(ctx);
    evt.setListeners(listeners);
    ActivityManager.getInstance().fire(evt);
  }
 catch (  final EventFailedException e) {
    LOG.error("failed to handle CreateListener event",e);
    final String reason=e.getCause() != null && e.getCause().getMessage() != null ? e.getMessage() : "internal error";
    throw new InternalFailure400Exception(String.format("Failed to create listener: %s",reason),e);
  }
  try {
    LoadBalancers.createLoadbalancerListener(lbName,ctx,listeners);
  }
 catch (  final LoadBalancingException ex) {
    throw ex;
  }
catch (  final Exception e) {
    final String reason=e.getCause() != null && e.getCause().getMessage() != null ? e.getMessage() : "internal error";
    throw new InternalFailure400Exception(String.format("Failed to create listener: %s",reason),e);
  }
  reply.set_return(true);
  return reply;
}
