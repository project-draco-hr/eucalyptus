{
  DescribeLoadBalancersResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final AccountFullName ownerFullName=ctx.getUserFullName().asAccountFullName();
  final Set<String> requestedNames=Sets.newHashSet();
  if (!request.getLoadBalancerNames().getMember().isEmpty()) {
    requestedNames.addAll(request.getLoadBalancerNames().getMember());
  }
  final Function<Set<String>,Set<String>> lookupLBNames=new Function<Set<String>,Set<String>>(){
    public Set<String> apply(    final Set<String> input){
      final Predicate<? super LoadBalancer> requestedAndAccessible=CloudMetadatas.filteringFor(LoadBalancer.class).byId(input).byPrivileges().buildPredicate();
      final List<LoadBalancer> lbs=Entities.query(LoadBalancer.named(ownerFullName,null),true);
      Set<String> res=Sets.newHashSet();
      for (      final LoadBalancer foundLB : Iterables.filter(lbs,requestedAndAccessible))       res.add(foundLB.getDisplayName());
      return res;
    }
  }
;
  Set<String> allowedLBNames=Entities.asTransaction(LoadBalancer.class,lookupLBNames).apply(requestedNames);
  final Function<String,LoadBalancer> getLoadBalancer=new Function<String,LoadBalancer>(){
    @Override public LoadBalancer apply(    final String lbName){
      try {
        return Entities.uniqueResult(LoadBalancer.named(ownerFullName,lbName));
      }
 catch (      NoSuchElementException ex) {
        return null;
      }
catch (      Exception ex) {
        LOG.warn("faied to retrieve the loadbalancer-" + lbName,ex);
        return null;
      }
    }
  }
;
  final Function<Set<String>,Set<LoadBalancerDescription>> lookupLBDescriptions=new Function<Set<String>,Set<LoadBalancerDescription>>(){
    public Set<LoadBalancerDescription> apply(    final Set<String> input){
      final Set<LoadBalancerDescription> descs=Sets.newHashSet();
      for (      String lbName : input) {
        LoadBalancerDescription desc=new LoadBalancerDescription();
        final LoadBalancer lb=Entities.asTransaction(LoadBalancer.class,getLoadBalancer).apply(lbName);
        if (lb == null)         continue;
        desc.setLoadBalancerName(lbName);
        desc.setCreatedTime(lb.getCreationTimestamp());
        final LoadBalancerDnsRecord dns=lb.getDns();
        desc.setDnsName(dns.getDnsName());
        if (lb.getBackendInstances().size() > 0) {
          desc.setInstances(new Instances());
          desc.getInstances().setMember(new ArrayList<Instance>(Collections2.transform(lb.getBackendInstances(),new Function<LoadBalancerBackendInstance,Instance>(){
            @Override public Instance apply(            final LoadBalancerBackendInstance be){
              Instance instance=new Instance();
              instance.setInstanceId(be.getInstanceId());
              return instance;
            }
          }
)));
        }
        if (lb.getZones().size() > 0) {
          desc.setAvailabilityZones(new AvailabilityZones());
          desc.getAvailabilityZones().setMember(new ArrayList<String>(Collections2.transform(lb.getZones(),new Function<LoadBalancerZone,String>(){
            @Override public String apply(            final LoadBalancerZone zone){
              return zone.getName();
            }
          }
)));
        }
        if (lb.getListeners().size() > 0) {
          desc.setListenerDescriptions(new ListenerDescriptions());
          desc.getListenerDescriptions().setMember(new ArrayList<ListenerDescription>(Collections2.transform(lb.getListeners(),new Function<LoadBalancerListener,ListenerDescription>(){
            @Override public ListenerDescription apply(            final LoadBalancerListener input){
              ListenerDescription desc=new ListenerDescription();
              Listener listener=new Listener();
              listener.setLoadBalancerPort(input.getLoadbalancerPort());
              listener.setInstancePort(input.getInstancePort());
              if (input.getInstanceProtocol() != PROTOCOL.NONE)               listener.setInstanceProtocol(input.getInstanceProtocol().name());
              listener.setProtocol(input.getProtocol().name());
              if (input.getCertificateId() != null)               listener.setSslCertificateId(input.getCertificateId());
              desc.setListener(listener);
              return desc;
            }
          }
)));
        }
        descs.add(desc);
      }
      return descs;
    }
  }
;
  Set<LoadBalancerDescription> descs=lookupLBDescriptions.apply(allowedLBNames);
  DescribeLoadBalancersResult descResult=new DescribeLoadBalancersResult();
  LoadBalancerDescriptions lbDescs=new LoadBalancerDescriptions();
  lbDescs.setMember(new ArrayList<LoadBalancerDescription>(descs));
  descResult.setLoadBalancerDescriptions(lbDescs);
  reply.setDescribeLoadBalancersResult(descResult);
  reply.set_return(true);
  return reply;
}
