{
  DescribeLoadBalancersResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final String accountName=ctx.getAccount().getName();
  final Set<String> requestedNames=Sets.newHashSet();
  if (!request.getLoadBalancerNames().getMember().isEmpty()) {
    requestedNames.addAll(request.getLoadBalancerNames().getMember());
  }
  final boolean showAll=requestedNames.remove("verbose") && ctx.hasAdministrativePrivileges();
  Set<LoadBalancer> allowedLBs=null;
  final Function<Set<String>,Set<LoadBalancer>> lookupAccountLBs=new Function<Set<String>,Set<LoadBalancer>>(){
    @Override public Set<LoadBalancer> apply(    final Set<String> identifiers){
      final Predicate<? super LoadBalancer> requestedAndAccessible=LoadBalancingMetadatas.filteringFor(LoadBalancer.class).byId(identifiers).byPrivileges().buildPredicate();
      final List<LoadBalancer> lbs=Entities.query(LoadBalancer.namedByAccount(accountName,null),true);
      return Sets.newHashSet(Iterables.filter(lbs,requestedAndAccessible));
    }
  }
;
  final Function<Void,Set<LoadBalancer>> lookupAllLBs=new Function<Void,Set<LoadBalancer>>(){
    @Override public Set<LoadBalancer> apply(    final Void arg){
      final List<LoadBalancer> lbs=Entities.query(LoadBalancer.named(null,null),true);
      return Sets.newHashSet(lbs);
    }
  }
;
  if (showAll)   allowedLBs=Entities.asTransaction(LoadBalancer.class,lookupAllLBs).apply(null);
 else   allowedLBs=Entities.asTransaction(LoadBalancer.class,lookupAccountLBs).apply(requestedNames);
  final Function<Set<LoadBalancer>,Set<LoadBalancerDescription>> lookupLBDescriptions=new Function<Set<LoadBalancer>,Set<LoadBalancerDescription>>(){
    public Set<LoadBalancerDescription> apply(    final Set<LoadBalancer> input){
      final Set<LoadBalancerDescription> descs=Sets.newHashSet();
      for (      final LoadBalancer lb : input) {
        LoadBalancerDescription desc=new LoadBalancerDescription();
        if (lb == null)         continue;
        final String lbName=lb.getDisplayName();
        desc.setLoadBalancerName(lbName);
        desc.setCreatedTime(lb.getCreationTimestamp());
        final LoadBalancerDnsRecordCoreView dns=lb.getDns();
        desc.setDnsName(dns.getDnsName());
        if (lb.getBackendInstances().size() > 0) {
          desc.setInstances(new Instances());
          desc.getInstances().setMember(new ArrayList<Instance>(Collections2.transform(lb.getBackendInstances(),new Function<LoadBalancerBackendInstanceCoreView,Instance>(){
            @Override public Instance apply(            final LoadBalancerBackendInstanceCoreView be){
              Instance instance=new Instance();
              instance.setInstanceId(be.getInstanceId());
              return instance;
            }
          }
)));
        }
        if (lb.getZones().size() > 0) {
          desc.setAvailabilityZones(new AvailabilityZones());
          final List<LoadBalancerZoneCoreView> currentZones=Lists.newArrayList(Collections2.filter(lb.getZones(),new Predicate<LoadBalancerZoneCoreView>(){
            @Override public boolean apply(            @Nullable LoadBalancerZoneCoreView arg0){
              return arg0.getState().equals(LoadBalancerZone.STATE.InService);
            }
          }
));
          desc.getAvailabilityZones().setMember(new ArrayList<String>(Lists.transform(currentZones,new Function<LoadBalancerZoneCoreView,String>(){
            @Override public String apply(            final LoadBalancerZoneCoreView zone){
              return zone.getName();
            }
          }
)));
        }
        if (lb.getListeners().size() > 0) {
          desc.setListenerDescriptions(new ListenerDescriptions());
          desc.getListenerDescriptions().setMember(new ArrayList<ListenerDescription>(Collections2.transform(lb.getListeners(),new Function<LoadBalancerListenerCoreView,ListenerDescription>(){
            @Override public ListenerDescription apply(            final LoadBalancerListenerCoreView input){
              ListenerDescription desc=new ListenerDescription();
              Listener listener=new Listener();
              listener.setLoadBalancerPort(input.getLoadbalancerPort());
              listener.setInstancePort(input.getInstancePort());
              if (input.getInstanceProtocol() != PROTOCOL.NONE)               listener.setInstanceProtocol(input.getInstanceProtocol().name());
              listener.setProtocol(input.getProtocol().name());
              if (input.getCertificateId() != null)               listener.setSslCertificateId(input.getCertificateId());
              desc.setListener(listener);
              final LoadBalancerListener lbListener=LoadBalancerListenerEntityTransform.INSTANCE.apply(input);
              final PolicyNames pnames=new PolicyNames();
              pnames.setMember(new ArrayList<String>(Lists.transform(lbListener.getPolicies(),new Function<LoadBalancerPolicyDescriptionCoreView,String>(){
                @Override public String apply(                LoadBalancerPolicyDescriptionCoreView arg0){
                  return arg0.getPolicyName();
                }
              }
)));
              desc.setPolicyNames(pnames);
              return desc;
            }
          }
)));
        }
        try {
          int interval=lb.getHealthCheckInterval();
          String target=lb.getHealthCheckTarget();
          int timeout=lb.getHealthCheckTimeout();
          int healthyThresholds=lb.getHealthyThreshold();
          int unhealthyThresholds=lb.getHealthCheckUnhealthyThreshold();
          final HealthCheck hc=new HealthCheck();
          hc.setInterval(interval);
          hc.setHealthyThreshold(healthyThresholds);
          hc.setTarget(target);
          hc.setTimeout(timeout);
          hc.setUnhealthyThreshold(unhealthyThresholds);
          desc.setHealthCheck(hc);
        }
 catch (        IllegalStateException ex) {
          ;
        }
catch (        Exception ex) {
          ;
        }
        try {
          desc.setSourceSecurityGroup(new SourceSecurityGroup());
          LoadBalancerSecurityGroupCoreView group=lb.getGroup();
          if (group != null) {
            desc.getSourceSecurityGroup().setOwnerAlias(group.getGroupOwnerAccountId());
            desc.getSourceSecurityGroup().setGroupName(group.getName());
          }
        }
 catch (        Exception ex) {
          ;
        }
        try {
          final List<LoadBalancerPolicyDescription> lbPolicies=LoadBalancerPolicies.getLoadBalancerPolicyDescription(lb);
          final ArrayList<AppCookieStickinessPolicy> appCookiePolicies=Lists.newArrayList();
          final ArrayList<LBCookieStickinessPolicy> lbCookiePolicies=Lists.newArrayList();
          final ArrayList<String> otherPolicies=Lists.newArrayList();
          for (          final LoadBalancerPolicyDescription policy : lbPolicies) {
            if ("LBCookieStickinessPolicyType".equals(policy.getPolicyTypeName())) {
              final LBCookieStickinessPolicy lbp=new LBCookieStickinessPolicy();
              lbp.setPolicyName(policy.getPolicyName());
              lbp.setCookieExpirationPeriod(Long.parseLong(policy.findAttributeDescription("CookieExpirationPeriod").getAttributeValue()));
              lbCookiePolicies.add(lbp);
            }
 else             if ("AppCookieStickinessPolicyType".equals(policy.getPolicyTypeName())) {
              final AppCookieStickinessPolicy app=new AppCookieStickinessPolicy();
              app.setPolicyName(policy.getPolicyName());
              app.setCookieName(policy.findAttributeDescription("CookieName").getAttributeValue());
              appCookiePolicies.add(app);
            }
 else             otherPolicies.add(policy.getPolicyName());
          }
          final Policies p=new Policies();
          final LBCookieStickinessPolicies lbp=new LBCookieStickinessPolicies();
          lbp.setMember(lbCookiePolicies);
          final AppCookieStickinessPolicies app=new AppCookieStickinessPolicies();
          app.setMember(appCookiePolicies);
          final PolicyNames other=new PolicyNames();
          other.setMember(otherPolicies);
          p.setAppCookieStickinessPolicies(app);
          p.setLbCookieStickinessPolicies(lbp);
          p.setOtherPolicies(other);
          desc.setPolicies(p);
        }
 catch (        final Exception ex) {
          LOG.error("Failed to retrieve policies",ex);
        }
        descs.add(desc);
      }
      return descs;
    }
  }
;
  Set<LoadBalancerDescription> descs=lookupLBDescriptions.apply(allowedLBs);
  DescribeLoadBalancersResult descResult=new DescribeLoadBalancersResult();
  LoadBalancerDescriptions lbDescs=new LoadBalancerDescriptions();
  lbDescs.setMember(new ArrayList<LoadBalancerDescription>(descs));
  descResult.setLoadBalancerDescriptions(lbDescs);
  reply.setDescribeLoadBalancersResult(descResult);
  reply.set_return(true);
  return reply;
}
