{
  String accountId=this.delegate.getAccountNumber();
  if (resourceType == null) {
    throw new AuthException("Empty resource type");
  }
  GroupEntity searchGroup=new GroupEntity(DatabaseAuthUtils.getUserGroupName(User.ACCOUNT_ADMIN));
  EntityWrapper<AuthorizationEntity> db=EntityWrapper.get(AuthorizationEntity.class);
  try {
    Example groupExample=Example.create(searchGroup).enableLike(MatchMode.EXACT);
    @SuppressWarnings("unchecked") List<AuthorizationEntity> authorizations=(List<AuthorizationEntity>)db.createCriteria(AuthorizationEntity.class).setCacheable(true).add(Restrictions.and(Restrictions.eq("type",resourceType),Restrictions.eq("effect",EffectType.Limit))).createCriteria("statement").setCacheable(true).createCriteria("policy").setCacheable(true).createCriteria("group").setCacheable(true).add(groupExample).createCriteria("account").setCacheable(true).add(Restrictions.idEq(accountId)).list();
    db.commit();
    List<Authorization> results=Lists.newArrayList();
    for (    AuthorizationEntity auth : authorizations) {
      results.add(new DatabaseAuthorizationProxy(auth));
    }
    return results;
  }
 catch (  Throwable e) {
    db.rollback();
    Debugging.logError(LOG,e,"Failed to lookup global quota for account " + accountId + ", type="+ resourceType);
    throw new AuthException("Failed to lookup account global quota",e);
  }
}
