{
  List<User> results=Lists.newArrayList();
  EntityWrapper<GroupEntity> db=EntityWrapper.get(GroupEntity.class);
  try {
    @SuppressWarnings("unchecked") List<UserEntity> users=(List<UserEntity>)db.createCriteria(UserEntity.class).setCacheable(true).createCriteria("groups").setCacheable(true).add(Restrictions.eq("userGroup",false)).createCriteria("account").setCacheable(true).add(Restrictions.eq("name",this.delegate.getName())).list();
    db.commit();
    for (    UserEntity u : users) {
      results.add(new DatabaseUserProxy(u));
    }
    return results;
  }
 catch (  Exception e) {
    db.rollback();
    Debugging.logError(LOG,e,"Failed to get users for " + this.delegate.getName());
    throw new AuthException("Failed to get users for account",e);
  }
}
