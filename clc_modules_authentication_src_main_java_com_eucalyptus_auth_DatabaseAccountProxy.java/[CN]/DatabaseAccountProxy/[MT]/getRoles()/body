{
  final List<Role> results=Lists.newArrayList();
  final EntityWrapper<RoleEntity> db=EntityWrapper.get(RoleEntity.class);
  try {
    @SuppressWarnings("unchecked") List<RoleEntity> roles=(List<RoleEntity>)db.createCriteria(RoleEntity.class).createCriteria("account").add(Restrictions.eq("name",this.delegate.getName())).setCacheable(true).list();
    for (    final RoleEntity role : roles) {
      results.add(new DatabaseRoleProxy(role));
    }
    return results;
  }
 catch (  Exception e) {
    Debugging.logError(LOG,e,"Failed to get roles for " + this.delegate.getName());
    throw new AuthException("Failed to get roles",e);
  }
 finally {
    if (db.isActive())     db.rollback();
  }
}
