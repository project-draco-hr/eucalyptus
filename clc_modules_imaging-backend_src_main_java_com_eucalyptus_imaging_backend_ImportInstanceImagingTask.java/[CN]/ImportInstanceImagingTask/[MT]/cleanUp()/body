{
  if (getCleanUpDone())   return true;
  final String instanceId=this.getInstanceId();
  if (instanceId != null && instanceId.length() > 0) {
    try {
      final List<RunningInstancesItemType> instances=Ec2Client.getInstance().describeInstances(this.getOwnerUserId(),Lists.newArrayList(instanceId));
      final Set<String> statesToTerminate=Sets.newHashSet("running","pending");
      for (      final RunningInstancesItemType instance : instances) {
        if (instanceId.equals(instance.getInstanceId()) && statesToTerminate.contains(instance.getStateName())) {
          Ec2Client.getInstance().terminateInstances(this.getOwnerUserId(),Lists.newArrayList(instanceId));
          LOG.info(String.format("Instance %s is terminated because import task was cancelled or failed",instanceId));
        }
      }
    }
 catch (    final Exception ex) {
      ;
    }
  }
  boolean cleanedImage=true;
  if (this.imageId != null) {
    try {
      final List<ImageDetails> images=Ec2Client.getInstance().describeImages(this.getOwnerUserId(),Lists.newArrayList(this.imageId));
      for (      final ImageDetails image : images) {
        if (this.imageId.equals(image.getImageId()) && "available".equals(image.getImageState()))         cleanedImage=false;
      }
    }
 catch (    final Exception ex) {
      ;
    }
    if (!cleanedImage) {
      try {
        Ec2Client.getInstance().deregisterImage(this.getOwnerUserId(),this.imageId);
        LOG.info(String.format("Image %s is deregistered because import task was cancelled or failed",this.imageId));
      }
 catch (      final Exception ex) {
        LOG.error("Failed to deregister image '" + this.imageId + "' after cancelled/failed import task");
      }
      cleanedImage=true;
    }
  }
  if (!cleanedImage)   return false;
  boolean cleanedSnapshots=false;
  final List<String> snapshotIds=this.getSnapshotIds();
  if (snapshotIds != null && snapshotIds.size() > 0) {
    int numCompletedSnapshots=0;
    try {
      final List<Snapshot> snapshots=Ec2Client.getInstance().describeSnapshots(this.getOwnerUserId(),snapshotIds);
      if (snapshots == null || snapshots.size() <= 0)       cleanedSnapshots=true;
 else {
        for (        final Snapshot snapshot : snapshots) {
          if (!"pending".equals(snapshot.getStatus())) {
            numCompletedSnapshots++;
          }
        }
      }
    }
 catch (    final Exception ex) {
      cleanedSnapshots=true;
    }
    if (!cleanedSnapshots && numCompletedSnapshots >= snapshotIds.size()) {
      for (      final String snapshotId : snapshotIds) {
        try {
          Ec2Client.getInstance().deleteSnapshot(this.getOwnerUserId(),snapshotId);
          LOG.info(String.format("Snapshot %s is deleted because import task was cancelled or failed",snapshotId));
        }
 catch (        final Exception ex) {
          LOG.error("Failed to delete snapshot '" + snapshotId + "' after cancelled/failed import task");
        }
      }
      cleanedSnapshots=true;
    }
  }
 else {
    cleanedSnapshots=true;
  }
  if (!cleanedSnapshots)   return false;
  final ImportInstanceTaskDetails instanceDetails=this.getTask().getImportInstance();
  if (instanceDetails.getVolumes() != null) {
    for (    final ImportInstanceVolumeDetail volumeDetail : instanceDetails.getVolumes()) {
      if (volumeDetail.getVolume() != null && volumeDetail.getVolume().getId() != null) {
        String volumeId=volumeDetail.getVolume().getId();
        try {
          Volumes.setSystemManagedFlag(null,volumeId,false);
          final List<Volume> eucaVolumes=Ec2Client.getInstance().describeVolumes(this.getOwnerUserId(),Lists.newArrayList(volumeId));
          if (eucaVolumes != null && eucaVolumes.size() != 0) {
            Ec2Client.getInstance().deleteVolume(this.getOwnerUserId(),volumeId);
            LOG.info(String.format("Volume %s is deleted because import task was cancelled or failed",volumeId));
          }
        }
 catch (        final NoSuchElementException ex) {
          ;
        }
catch (        final Exception ex) {
          LOG.warn(String.format("Failed to delete volume %s for cancelled/failed import task %s",volumeId,this.getDisplayName()));
        }
      }
    }
  }
  setCleanUpDone(true);
  return true;
}
