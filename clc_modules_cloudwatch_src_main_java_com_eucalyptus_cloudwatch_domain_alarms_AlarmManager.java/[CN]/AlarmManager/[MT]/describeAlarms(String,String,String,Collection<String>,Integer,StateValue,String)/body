{
  List<AlarmEntity> results=null;
  EntityTransaction db=Entities.get(AlarmEntity.class);
  try {
    Date nextTokenCreatedTime=NextTokenUtils.getNextTokenCreatedTime(nextToken,AlarmEntity.class,true);
    Criteria criteria=Entities.createCriteria(AlarmEntity.class);
    if (accountId != null) {
      criteria=criteria.add(Restrictions.eq("accountId",accountId));
    }
    if (actionPrefix != null) {
      final Junction actionsOf=Restrictions.disjunction();
      for (int i=1; i <= AlarmEntity.MAX_OK_ACTIONS_NUM; i++) {
        actionsOf.add(Restrictions.like("okAction" + i,actionPrefix + "%"));
      }
      for (int i=1; i <= AlarmEntity.MAX_ALARM_ACTIONS_NUM; i++) {
        actionsOf.add(Restrictions.like("alarmAction" + i,actionPrefix + "%"));
      }
      for (int i=1; i <= AlarmEntity.MAX_INSUFFICIENT_DATA_ACTIONS_NUM; i++) {
        actionsOf.add(Restrictions.like("insufficientDataAction" + i,actionPrefix + "%"));
      }
      criteria=criteria.add(actionsOf);
    }
    if (alarmNamePrefix != null) {
      criteria=criteria.add(Restrictions.like("alarmName",alarmNamePrefix + "%"));
    }
    if (alarmNames != null && !alarmNames.isEmpty()) {
      final Junction alarmNamesOf=Restrictions.disjunction();
      for (      String alarmName : alarmNames) {
        alarmNamesOf.add(Restrictions.eq("alarmName",alarmName));
      }
      criteria=criteria.add(alarmNamesOf);
    }
    if (stateValue != null) {
      criteria=criteria.add(Restrictions.eq("stateValue",stateValue));
    }
    criteria=NextTokenUtils.addNextTokenConstraints(maxRecords,nextToken,nextTokenCreatedTime,criteria);
    results=(List<AlarmEntity>)criteria.list();
    db.commit();
  }
 catch (  RuntimeException ex) {
    Logs.extreme().error(ex,ex);
    throw ex;
  }
 finally {
    if (db.isActive())     db.rollback();
  }
  return results;
}
