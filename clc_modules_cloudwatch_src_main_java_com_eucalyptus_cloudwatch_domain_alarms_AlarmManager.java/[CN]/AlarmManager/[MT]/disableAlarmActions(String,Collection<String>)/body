{
  HashSet<String> alarmNamesHashSet=new HashSet<String>();
  Date now=new Date();
  if (alarmNames != null) {
    alarmNamesHashSet.addAll(alarmNames);
  }
  EntityTransaction db=Entities.get(AlarmEntity.class);
  try {
    Criteria criteria=Entities.createCriteria(AlarmEntity.class).add(Restrictions.eq("accountId",accountId));
    criteria=criteria.addOrder(Order.asc("creationTimestamp"));
    criteria=criteria.addOrder(Order.asc("naturalId"));
    Collection<AlarmEntity> alarmEntities=(Collection<AlarmEntity>)criteria.list();
    for (    AlarmEntity alarmEntity : alarmEntities) {
      final String alarmName=alarmEntity.getAlarmName();
      if (alarmNamesHashSet.contains(alarmEntity.getAlarmName()) && !Boolean.FALSE.equals(alarmEntity.getActionsEnabled())) {
        JSONObject historyDataJSON=new JSONObject();
        historyDataJSON.element("version","1.0");
        historyDataJSON.element("type","Update");
        JSONObject historyDataDeletedAlarmJSON=getJSONObjectFromAlarmEntity(alarmEntity);
        historyDataJSON.element("updatedAlarm",historyDataDeletedAlarmJSON);
        String historyData=historyDataJSON.toString();
        AlarmManager.addAlarmHistoryItem(accountId,alarmName,historyData,HistoryItemType.ConfigurationUpdate,"Alarm \"" + alarmName + "\" updated",now);
        alarmEntity.setActionsEnabled(Boolean.FALSE);
      }
    }
    db.commit();
  }
 catch (  RuntimeException ex) {
    Logs.extreme().error(ex,ex);
    throw ex;
  }
 finally {
    if (db.isActive())     db.rollback();
  }
}
