{
  Lock lock=this.lockManager.writeLock(LockManager.GLOBAL);
  lock.lockInterruptibly();
  try {
    SynchronizationContext<D> context=new SynchronizationContextImpl<D>(this,database);
    if (context.getActiveDatabaseSet().contains(database)) {
      return false;
    }
    this.test(database);
    try {
      DatabaseEvent event=new DatabaseEvent(database);
      logger.info(Messages.getMessage(Messages.DATABASE_SYNC_START,database,this));
      for (      SynchronizationListener listener : this.synchronizationListenerList) {
        listener.beforeSynchronization(event);
      }
      strategy.synchronize(context);
      logger.info(Messages.getMessage(Messages.DATABASE_SYNC_END,database,this));
      for (      SynchronizationListener listener : this.synchronizationListenerList) {
        listener.afterSynchronization(event);
      }
      return this.activate(database,this.stateManager);
    }
  finally {
      context.close();
    }
  }
 catch (  NoSuchElementException e) {
    return this.activate(database,this.stateManager);
  }
 finally {
    lock.unlock();
  }
}
