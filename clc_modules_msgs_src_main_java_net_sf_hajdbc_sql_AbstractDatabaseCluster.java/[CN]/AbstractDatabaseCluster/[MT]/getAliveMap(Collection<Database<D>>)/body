{
  Map<Database<D>,Future<Boolean>> futureMap=new TreeMap<Database<D>,Future<Boolean>>();
  for (  final Database<D> database : databases) {
    Callable<Boolean> task=new Callable<Boolean>(){
      public Boolean call() throws Exception {
        return AbstractDatabaseCluster.this.isAlive(database);
      }
    }
;
    futureMap.put(database,this.executor.submit(task));
  }
  Map<Boolean,List<Database<D>>> map=new TreeMap<Boolean,List<Database<D>>>(booleanComparator);
  int size=databases.size();
  map.put(false,new ArrayList<Database<D>>(size));
  map.put(true,new ArrayList<Database<D>>(size));
  for (  Map.Entry<Database<D>,Future<Boolean>> futureMapEntry : futureMap.entrySet()) {
    try {
      map.get(futureMapEntry.getValue().get()).add(futureMapEntry.getKey());
    }
 catch (    ExecutionException e) {
      throw new IllegalStateException(e);
    }
catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
  }
  return map;
}
