{
  VmTypeAvailability vmTypeStatus=this.typeMap.get(allocInfo.getVmType().getName());
  Integer available=vmTypeStatus.getAvailable();
  NavigableSet<VmTypeAvailability> sorted=this.sorted();
  LOG.debug(LogUtil.header("BEFORE ALLOCATE"));
  LOG.debug(sorted);
  final Integer quantity;
  if (vmTypeStatus.getAvailable() < minAmount) {
    throw new NotEnoughResourcesException("Not enough resources (" + available + " < "+ minAmount+ ": vm instances.");
  }
 else {
    quantity=(maxAmount < available ? maxAmount : available);
  }
  Set<VmTypeAvailability> tailSet=sorted.tailSet(vmTypeStatus);
  Set<VmTypeAvailability> headSet=sorted.headSet(vmTypeStatus);
  LOG.debug(LogUtil.header("DURING ALLOCATE"));
  LOG.debug(LogUtil.subheader("TAILSET: \n" + tailSet));
  LOG.debug(LogUtil.subheader("HEADSET: \n" + headSet));
  for (  VmTypeAvailability v : tailSet)   v.decrement(quantity);
  for (  VmTypeAvailability v : headSet)   v.setAvailable(vmTypeStatus.getAvailable());
  LOG.debug(LogUtil.header("AFTER ALLOCATE"));
  LOG.debug(sorted);
  List<ResourceToken> tokenList=Lists.newArrayList();
  for (int i=0; i < quantity; i++) {
    try {
      ResourceToken token=new ResourceToken(allocInfo,i);
      LOG.debug(EventType.TOKEN_RESERVED.name() + ": " + token.toString());
      this.pendingTokens.add(token);
      tokenList.add(token);
    }
 catch (    Exception ex) {
      LOG.error(ex);
      Logs.extreme().error(ex,ex);
      for (      ResourceToken token : tokenList) {
        this.pendingTokens.remove(token);
      }
    }
  }
  return tokenList;
}
