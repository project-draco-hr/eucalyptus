{
  AWSEC2EIPAssociationResourceAction action=(AWSEC2EIPAssociationResourceAction)resourceAction;
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
  AssociateAddressType associateAddressType=MessageHelper.createMessage(AssociateAddressType.class,action.info.getEffectiveUserId());
  if (action.properties.getInstanceId() == null && action.properties.getNetworkInterfaceId() == null) {
    throw new ValidationErrorException("Either instance ID or network interface id must be specified");
  }
  if (action.properties.getInstanceId() != null) {
    DescribeInstancesType describeInstancesType=MessageHelper.createMessage(DescribeInstancesType.class,action.info.getEffectiveUserId());
    describeInstancesType.setInstancesSet(Lists.newArrayList(action.properties.getInstanceId()));
    DescribeInstancesResponseType describeInstancesResponseType=AsyncRequests.<DescribeInstancesType,DescribeInstancesResponseType>sendSync(configuration,describeInstancesType);
    if (describeInstancesResponseType.getReservationSet() == null || describeInstancesResponseType.getReservationSet().isEmpty()) {
      throw new ValidationErrorException("No such instance " + action.properties.getInstanceId());
    }
    associateAddressType.setInstanceId(action.properties.getInstanceId());
  }
  if (action.properties.getEip() != null) {
    DescribeAddressesType describeAddressesType=MessageHelper.createMessage(DescribeAddressesType.class,action.info.getEffectiveUserId());
    describeAddressesType.setPublicIpsSet(Lists.newArrayList(action.properties.getEip()));
    DescribeAddressesResponseType describeAddressesResponseType=AsyncRequests.<DescribeAddressesType,DescribeAddressesResponseType>sendSync(configuration,describeAddressesType);
    if (describeAddressesResponseType.getAddressesSet() == null || describeAddressesResponseType.getAddressesSet().isEmpty()) {
      throw new ValidationErrorException("No such EIP " + action.properties.getEip());
    }
    associateAddressType.setPublicIp(action.properties.getEip());
  }
  if (action.properties.getAllocationId() != null) {
    DescribeAddressesType describeAddressesType=MessageHelper.createMessage(DescribeAddressesType.class,action.info.getEffectiveUserId());
    describeAddressesType.setAllocationIds(Lists.newArrayList(action.properties.getAllocationId()));
    DescribeAddressesResponseType describeAddressesResponseType=AsyncRequests.<DescribeAddressesType,DescribeAddressesResponseType>sendSync(configuration,describeAddressesType);
    if (describeAddressesResponseType.getAddressesSet() == null || describeAddressesResponseType.getAddressesSet().isEmpty()) {
      throw new ValidationErrorException("No such allocation-id " + action.properties.getAllocationId());
    }
    associateAddressType.setAllocationId(action.properties.getAllocationId());
  }
  if (action.properties.getNetworkInterfaceId() != null) {
    associateAddressType.setNetworkInterfaceId(action.properties.getNetworkInterfaceId());
  }
  if (action.properties.getPrivateIpAddress() != null) {
    associateAddressType.setNetworkInterfaceId(action.properties.getNetworkInterfaceId());
  }
  AssociateAddressResponseType associateAddressResponseType=AsyncRequests.<AssociateAddressType,AssociateAddressResponseType>sendSync(configuration,associateAddressType);
  if (action.properties.getAllocationId() != null) {
    action.info.setPhysicalResourceId(associateAddressResponseType.getAssociationId());
  }
 else {
    action.info.setPhysicalResourceId(action.getDefaultPhysicalResourceId());
  }
  action.info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(action.info.getPhysicalResourceId())));
  if (action.properties.getInstanceId() != null) {
    EC2Helper.refreshInstanceAttributes(action.getStackEntity(),action.properties.getInstanceId(),action.info.getEffectiveUserId());
  }
  if (action.properties.getNetworkInterfaceId() != null) {
    DescribeNetworkInterfacesType describeNetworkInterfacesType=MessageHelper.createMessage(DescribeNetworkInterfacesType.class,action.info.getEffectiveUserId());
    NetworkInterfaceIdSetType networkInterfaceIdSetType=new NetworkInterfaceIdSetType();
    NetworkInterfaceIdSetItemType networkInterfaceIdSetItemType=new NetworkInterfaceIdSetItemType();
    networkInterfaceIdSetItemType.setNetworkInterfaceId(action.properties.getNetworkInterfaceId());
    ArrayList<NetworkInterfaceIdSetItemType> networkInterfaceIdSetItemTypes=Lists.newArrayList(networkInterfaceIdSetItemType);
    networkInterfaceIdSetType.setItem(networkInterfaceIdSetItemTypes);
    describeNetworkInterfacesType.setNetworkInterfaceIdSet(networkInterfaceIdSetType);
    DescribeNetworkInterfacesResponseType describeNetworkInterfacesResponseType=AsyncRequests.<DescribeNetworkInterfacesType,DescribeNetworkInterfacesResponseType>sendSync(configuration,describeNetworkInterfacesType);
    if (describeNetworkInterfacesResponseType.getNetworkInterfaceSet() != null && describeNetworkInterfacesResponseType.getNetworkInterfaceSet().getItem() != null && !describeNetworkInterfacesResponseType.getNetworkInterfaceSet().getItem().isEmpty()) {
      for (      NetworkInterfaceType networkInterfaceType : describeNetworkInterfacesResponseType.getNetworkInterfaceSet().getItem()) {
        if (networkInterfaceType != null && networkInterfaceType.getAttachment() != null && networkInterfaceType.getAttachment().getDeviceIndex() == 0 && networkInterfaceType.getAttachment().getInstanceId() != null) {
          EC2Helper.refreshInstanceAttributes(action.getStackEntity(),networkInterfaceType.getAttachment().getInstanceId(),action.info.getEffectiveUserId());
        }
      }
    }
  }
  return action;
}
