{
  AWSEC2EIPAssociationResourceAction action=(AWSEC2EIPAssociationResourceAction)resourceAction;
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
  AssociateAddressType associateAddressType=MessageHelper.createMessage(AssociateAddressType.class,action.info.getEffectiveUserId());
  if (action.properties.getInstanceId() != null) {
    DescribeInstancesType describeInstancesType=MessageHelper.createMessage(DescribeInstancesType.class,action.info.getEffectiveUserId());
    describeInstancesType.setInstancesSet(Lists.newArrayList(action.properties.getInstanceId()));
    DescribeInstancesResponseType describeInstancesResponseType=AsyncRequests.<DescribeInstancesType,DescribeInstancesResponseType>sendSync(configuration,describeInstancesType);
    if (describeInstancesResponseType.getReservationSet() == null || describeInstancesResponseType.getReservationSet().isEmpty()) {
      throw new ValidationErrorException("No such instance " + action.properties.getInstanceId());
    }
    associateAddressType.setInstanceId(action.properties.getInstanceId());
  }
  if (action.properties.getEip() != null) {
    DescribeAddressesType describeAddressesType=MessageHelper.createMessage(DescribeAddressesType.class,action.info.getEffectiveUserId());
    describeAddressesType.setPublicIpsSet(Lists.newArrayList(action.properties.getEip()));
    DescribeAddressesResponseType describeAddressesResponseType=AsyncRequests.<DescribeAddressesType,DescribeAddressesResponseType>sendSync(configuration,describeAddressesType);
    if (describeAddressesResponseType.getAddressesSet() == null || describeAddressesResponseType.getAddressesSet().isEmpty()) {
      throw new ValidationErrorException("No such EIP " + action.properties.getEip());
    }
    associateAddressType.setPublicIp(action.properties.getEip());
  }
  if (action.properties.getAllocationId() != null) {
    DescribeAddressesType describeAddressesType=MessageHelper.createMessage(DescribeAddressesType.class,action.info.getEffectiveUserId());
    describeAddressesType.setAllocationIds(Lists.newArrayList(action.properties.getAllocationId()));
    DescribeAddressesResponseType describeAddressesResponseType=AsyncRequests.<DescribeAddressesType,DescribeAddressesResponseType>sendSync(configuration,describeAddressesType);
    if (describeAddressesResponseType.getAddressesSet() == null || describeAddressesResponseType.getAddressesSet().isEmpty()) {
      throw new ValidationErrorException("No such allocation-id " + action.properties.getAllocationId());
    }
    associateAddressType.setAllocationId(action.properties.getAllocationId());
  }
  if (action.properties.getNetworkInterfaceId() != null) {
    associateAddressType.setNetworkInterfaceId(action.properties.getNetworkInterfaceId());
  }
  if (action.properties.getPrivateIpAddress() != null) {
    associateAddressType.setNetworkInterfaceId(action.properties.getNetworkInterfaceId());
  }
  AssociateAddressResponseType associateAddressResponseType=AsyncRequests.<AssociateAddressType,AssociateAddressResponseType>sendSync(configuration,associateAddressType);
  if (action.properties.getAllocationId() != null) {
    action.info.setPhysicalResourceId(associateAddressResponseType.getAssociationId());
  }
 else {
    action.info.setPhysicalResourceId(action.getDefaultPhysicalResourceId());
  }
  action.info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(action.info.getPhysicalResourceId())));
  if (action.properties.getInstanceId() != null) {
    String stackId=action.getStackEntity().getStackId();
    String accountId=action.getStackEntity().getAccountId();
    StackResourceEntity instanceStackResourceEntity=StackResourceEntityManager.getStackResource(stackId,accountId,action.properties.getInstanceId());
    if (instanceStackResourceEntity != null) {
      ResourceInfo instanceResourceInfo=StackResourceEntityManager.getResourceInfo(instanceStackResourceEntity);
      ResourceAction instanceResourceAction=new ResourceResolverManager().resolveResourceAction(instanceResourceInfo.getType());
      instanceResourceAction.setStackEntity(action.getStackEntity());
      instanceResourceInfo.setEffectiveUserId(action.info.getEffectiveUserId());
      instanceResourceAction.setResourceInfo(instanceResourceInfo);
      ResourcePropertyResolver.populateResourceProperties(instanceResourceAction.getResourceProperties(),JsonHelper.getJsonNodeFromString(instanceResourceInfo.getPropertiesJson()));
      instanceResourceAction.refreshAttributes();
      instanceStackResourceEntity=StackResourceEntityManager.updateResourceInfo(instanceStackResourceEntity,instanceResourceInfo);
      StackResourceEntityManager.updateStackResource(instanceStackResourceEntity);
    }
  }
  return action;
}
