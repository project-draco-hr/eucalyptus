{
  AWSEC2EIPAssociationResourceAction oldAction=(AWSEC2EIPAssociationResourceAction)oldResourceAction;
  AWSEC2EIPAssociationResourceAction newAction=(AWSEC2EIPAssociationResourceAction)newResourceAction;
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
  AssociateAddressType associateAddressType=MessageHelper.createMessage(AssociateAddressType.class,newAction.info.getEffectiveUserId());
  associateAddressType.setAllowReassociation(true);
  if (newAction.properties.getInstanceId() == null && newAction.properties.getNetworkInterfaceId() == null) {
    throw new ValidationErrorException("Either instance ID or network interface id must be specified");
  }
  if (newAction.properties.getInstanceId() != null) {
    DescribeInstancesType describeInstancesType=MessageHelper.createMessage(DescribeInstancesType.class,newAction.info.getEffectiveUserId());
    describeInstancesType.getFilterSet().add(Filter.filter("instance-id",newAction.properties.getInstanceId()));
    DescribeInstancesResponseType describeInstancesResponseType=AsyncRequests.sendSync(configuration,describeInstancesType);
    if (describeInstancesResponseType.getReservationSet() == null || describeInstancesResponseType.getReservationSet().isEmpty()) {
      throw new ValidationErrorException("No such instance " + newAction.properties.getInstanceId());
    }
    associateAddressType.setInstanceId(newAction.properties.getInstanceId());
  }
  if (newAction.properties.getEip() != null) {
    DescribeAddressesType describeAddressesType=MessageHelper.createMessage(DescribeAddressesType.class,newAction.info.getEffectiveUserId());
    describeAddressesType.setPublicIpsSet(Lists.newArrayList(newAction.properties.getEip()));
    DescribeAddressesResponseType describeAddressesResponseType=AsyncRequests.<DescribeAddressesType,DescribeAddressesResponseType>sendSync(configuration,describeAddressesType);
    if (describeAddressesResponseType.getAddressesSet() == null || describeAddressesResponseType.getAddressesSet().isEmpty()) {
      throw new ValidationErrorException("No such EIP " + newAction.properties.getEip());
    }
    associateAddressType.setPublicIp(newAction.properties.getEip());
  }
  if (newAction.properties.getAllocationId() != null) {
    DescribeAddressesType describeAddressesType=MessageHelper.createMessage(DescribeAddressesType.class,newAction.info.getEffectiveUserId());
    describeAddressesType.setAllocationIds(Lists.newArrayList(newAction.properties.getAllocationId()));
    DescribeAddressesResponseType describeAddressesResponseType=AsyncRequests.<DescribeAddressesType,DescribeAddressesResponseType>sendSync(configuration,describeAddressesType);
    if (describeAddressesResponseType.getAddressesSet() == null || describeAddressesResponseType.getAddressesSet().isEmpty()) {
      throw new ValidationErrorException("No such allocation-id " + newAction.properties.getAllocationId());
    }
    associateAddressType.setAllocationId(newAction.properties.getAllocationId());
  }
  if (newAction.properties.getNetworkInterfaceId() != null) {
    associateAddressType.setNetworkInterfaceId(newAction.properties.getNetworkInterfaceId());
  }
  if (newAction.properties.getPrivateIpAddress() != null) {
    associateAddressType.setNetworkInterfaceId(newAction.properties.getNetworkInterfaceId());
  }
  AssociateAddressResponseType associateAddressResponseType=AsyncRequests.<AssociateAddressType,AssociateAddressResponseType>sendSync(configuration,associateAddressType);
  if (newAction.properties.getAllocationId() != null) {
    newAction.info.setPhysicalResourceId(associateAddressResponseType.getAssociationId());
  }
 else {
    newAction.info.setPhysicalResourceId(newAction.getDefaultPhysicalResourceId());
  }
  newAction.info.setCreatedEnoughToDelete(true);
  newAction.info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(newAction.info.getPhysicalResourceId())));
  if (newAction.properties.getInstanceId() != null) {
    EC2Helper.refreshInstanceAttributes(newAction.getStackEntity(),newAction.properties.getInstanceId(),newAction.info.getEffectiveUserId(),newAction.getStackEntity().getStackVersion());
  }
  if (newAction.properties.getNetworkInterfaceId() != null) {
    DescribeNetworkInterfacesType describeNetworkInterfacesType=MessageHelper.createMessage(DescribeNetworkInterfacesType.class,newAction.info.getEffectiveUserId());
    describeNetworkInterfacesType.getFilterSet().add(Filter.filter("network-interface-id",newAction.properties.getNetworkInterfaceId()));
    DescribeNetworkInterfacesResponseType describeNetworkInterfacesResponseType=AsyncRequests.sendSync(configuration,describeNetworkInterfacesType);
    if (describeNetworkInterfacesResponseType.getNetworkInterfaceSet() != null && describeNetworkInterfacesResponseType.getNetworkInterfaceSet().getItem() != null && !describeNetworkInterfacesResponseType.getNetworkInterfaceSet().getItem().isEmpty()) {
      for (      NetworkInterfaceType networkInterfaceType : describeNetworkInterfacesResponseType.getNetworkInterfaceSet().getItem()) {
        if (networkInterfaceType != null && networkInterfaceType.getAttachment() != null && networkInterfaceType.getAttachment().getDeviceIndex() == 0 && networkInterfaceType.getAttachment().getInstanceId() != null) {
          EC2Helper.refreshInstanceAttributes(newAction.getStackEntity(),networkInterfaceType.getAttachment().getInstanceId(),newAction.info.getEffectiveUserId(),newAction.getStackEntity().getStackVersion());
        }
      }
    }
  }
  return newAction;
}
