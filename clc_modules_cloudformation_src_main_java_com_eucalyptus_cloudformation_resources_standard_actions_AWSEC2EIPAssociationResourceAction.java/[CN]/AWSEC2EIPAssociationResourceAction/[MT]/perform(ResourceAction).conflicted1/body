{
  AWSEC2EIPAssociationResourceAction action=(AWSEC2EIPAssociationResourceAction)resourceAction;
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
  if (action.info.getPhysicalResourceId() == null)   return action;
  if (action.properties.getAllocationId() != null) {
    DescribeAddressesType describeAddressesType=MessageHelper.createMessage(DescribeAddressesType.class,action.info.getEffectiveUserId());
    describeAddressesType.setAllocationIds(Lists.newArrayList(action.properties.getAllocationId()));
    DescribeAddressesResponseType describeAddressesResponseType=AsyncRequests.<DescribeAddressesType,DescribeAddressesResponseType>sendSync(configuration,describeAddressesType);
    if (describeAddressesResponseType.getAddressesSet() != null && !describeAddressesResponseType.getAddressesSet().isEmpty()) {
      DisassociateAddressType disassociateAddressType=MessageHelper.createMessage(DisassociateAddressType.class,action.info.getEffectiveUserId());
      disassociateAddressType.setAssociationId(action.info.getPhysicalResourceId());
      AsyncRequests.<DisassociateAddressType,DisassociateAddressResponseType>sendSync(configuration,disassociateAddressType);
    }
  }
  if (action.properties.getEip() != null) {
    DescribeAddressesType describeAddressesType=MessageHelper.createMessage(DescribeAddressesType.class,action.info.getEffectiveUserId());
    describeAddressesType.setPublicIpsSet(Lists.newArrayList(action.properties.getEip()));
    DescribeAddressesResponseType describeAddressesResponseType=AsyncRequests.<DescribeAddressesType,DescribeAddressesResponseType>sendSync(configuration,describeAddressesType);
    if (describeAddressesResponseType.getAddressesSet() != null && !describeAddressesResponseType.getAddressesSet().isEmpty()) {
      DisassociateAddressType disassociateAddressType=MessageHelper.createMessage(DisassociateAddressType.class,action.info.getEffectiveUserId());
      disassociateAddressType.setPublicIp(action.properties.getEip());
      AsyncRequests.<DisassociateAddressType,DisassociateAddressResponseType>sendSync(configuration,disassociateAddressType);
    }
  }
  if (action.properties.getInstanceId() != null) {
    EC2Helper.refreshInstanceAttributes(action.getStackEntity(),action.properties.getInstanceId(),action.info.getEffectiveUserId());
  }
  if (action.properties.getNetworkInterfaceId() != null) {
    DescribeNetworkInterfacesType describeNetworkInterfacesType=MessageHelper.createMessage(DescribeNetworkInterfacesType.class,action.info.getEffectiveUserId());
    describeNetworkInterfacesType.getFilterSet().add(Filter.filter("network-interface-id",action.properties.getNetworkInterfaceId()));
    DescribeNetworkInterfacesResponseType describeNetworkInterfacesResponseType=AsyncRequests.sendSync(configuration,describeNetworkInterfacesType);
    if (describeNetworkInterfacesResponseType.getNetworkInterfaceSet() != null && describeNetworkInterfacesResponseType.getNetworkInterfaceSet().getItem() != null && !describeNetworkInterfacesResponseType.getNetworkInterfaceSet().getItem().isEmpty()) {
      for (      NetworkInterfaceType networkInterfaceType : describeNetworkInterfacesResponseType.getNetworkInterfaceSet().getItem()) {
        if (networkInterfaceType != null && networkInterfaceType.getAttachment() != null && networkInterfaceType.getAttachment().getDeviceIndex() == 0 && networkInterfaceType.getAttachment().getInstanceId() != null) {
          EC2Helper.refreshInstanceAttributes(action.getStackEntity(),networkInterfaceType.getAttachment().getInstanceId(),action.info.getEffectiveUserId());
        }
      }
    }
  }
  return action;
}
