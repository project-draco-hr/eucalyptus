{
  AWSEC2EIPAssociationResourceAction action=(AWSEC2EIPAssociationResourceAction)resourceAction;
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
  if (action.info.getPhysicalResourceId() == null)   return action;
  if (action.properties.getAllocationId() != null) {
    DescribeAddressesType describeAddressesType=MessageHelper.createMessage(DescribeAddressesType.class,action.info.getEffectiveUserId());
    describeAddressesType.setAllocationIds(Lists.newArrayList(action.properties.getAllocationId()));
    DescribeAddressesResponseType describeAddressesResponseType=AsyncRequests.<DescribeAddressesType,DescribeAddressesResponseType>sendSync(configuration,describeAddressesType);
    if (describeAddressesResponseType.getAddressesSet() != null && !describeAddressesResponseType.getAddressesSet().isEmpty()) {
      DisassociateAddressType disassociateAddressType=MessageHelper.createMessage(DisassociateAddressType.class,action.info.getEffectiveUserId());
      disassociateAddressType.setAssociationId(action.info.getPhysicalResourceId());
      AsyncRequests.<DisassociateAddressType,DisassociateAddressResponseType>sendSync(configuration,disassociateAddressType);
    }
  }
  if (action.properties.getEip() != null) {
    DescribeAddressesType describeAddressesType=MessageHelper.createMessage(DescribeAddressesType.class,action.info.getEffectiveUserId());
    describeAddressesType.setPublicIpsSet(Lists.newArrayList(action.properties.getEip()));
    DescribeAddressesResponseType describeAddressesResponseType=AsyncRequests.<DescribeAddressesType,DescribeAddressesResponseType>sendSync(configuration,describeAddressesType);
    if (describeAddressesResponseType.getAddressesSet() != null && !describeAddressesResponseType.getAddressesSet().isEmpty()) {
      DisassociateAddressType disassociateAddressType=MessageHelper.createMessage(DisassociateAddressType.class,action.info.getEffectiveUserId());
      disassociateAddressType.setPublicIp(action.properties.getEip());
      AsyncRequests.<DisassociateAddressType,DisassociateAddressResponseType>sendSync(configuration,disassociateAddressType);
    }
  }
  if (action.properties.getInstanceId() != null) {
    String stackId=action.getStackEntity().getStackId();
    String accountId=action.getStackEntity().getAccountId();
    StackResourceEntity instanceStackResourceEntity=StackResourceEntityManager.getStackResourceByPhysicalResourceId(stackId,accountId,action.properties.getInstanceId());
    if (instanceStackResourceEntity != null) {
      ResourceInfo instanceResourceInfo=StackResourceEntityManager.getResourceInfo(instanceStackResourceEntity);
      ResourceAction instanceResourceAction=new ResourceResolverManager().resolveResourceAction(instanceResourceInfo.getType());
      instanceResourceAction.setStackEntity(action.getStackEntity());
      instanceResourceInfo.setEffectiveUserId(action.info.getEffectiveUserId());
      instanceResourceAction.setResourceInfo(instanceResourceInfo);
      ResourcePropertyResolver.populateResourceProperties(instanceResourceAction.getResourceProperties(),JsonHelper.getJsonNodeFromString(instanceResourceInfo.getPropertiesJson()));
      instanceResourceAction.refreshAttributes();
      instanceStackResourceEntity=StackResourceEntityManager.updateResourceInfo(instanceStackResourceEntity,instanceResourceInfo);
      StackResourceEntityManager.updateStackResource(instanceStackResourceEntity);
    }
  }
  return action;
}
