{
  Threads.lookup(Arbitrator.class,ArbitratorControl.class).submit(new Runnable(){
    @Override public void run(){
      final List<ArbitratorConfiguration> configs=ServiceConfigurations.list(Arbitrator.class);
      for (      final ArbitratorConfiguration config : configs) {
        if (Internets.testLocal(config.getHostName())) {
          final String hostName=config.getGatewayHost();
          if (hostName != null) {
            try {
              final InetAddress addr=InetAddress.getByName(hostName);
              if (Internets.isReachable(addr,2000)) {
                ArbitratorControl.error.remove(config);
                ArbitratorControl.okay.put(config,config);
              }
 else {
                ArbitratorControl.error.put(config,Exceptions.filterStackTrace(new NoRouteToHostException(addr.toString())));
                ArbitratorControl.okay.remove(config);
              }
            }
 catch (            final UnknownHostException e) {
              ArbitratorControl.error.put(config,Exceptions.filterStackTrace(e));
              ArbitratorControl.okay.remove(config);
            }
catch (            final IOException e) {
              ArbitratorControl.error.put(config,Exceptions.filterStackTrace(e));
              ArbitratorControl.okay.remove(config);
            }
          }
        }
      }
      wasSet=true;
    }
  }
);
  try {
    if (wasSet) {
      final Set<ArbitratorConfiguration> downArbitrators=Sets.newHashSet(error.keySet());
      if (downArbitrators.size() > 0) {
        ArbitratorConfiguration anyConfig=null;
        List<Exception> exceptions=new ArrayList<Exception>();
        for (        ArbitratorConfiguration key : downArbitrators) {
          anyConfig=key;
          exceptions.add(error.get(key));
        }
        if (ArbitratorControl.okay.isEmpty()) {
          throw Faults.fatal(anyConfig,exceptions);
        }
 else {
          throw Faults.advisory(anyConfig,exceptions);
        }
      }
    }
  }
 catch (  Exception e) {
    throw e;
  }
 finally {
    if (wasSet) {
      ArbitratorControl.okay.clear();
      ArbitratorControl.error.clear();
      wasSet=false;
    }
  }
}
