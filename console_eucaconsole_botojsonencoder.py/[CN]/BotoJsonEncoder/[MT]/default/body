def default(self, obj):
    if issubclass(obj.__class__, EC2Object):
        values = self.__sanitize_and_copy__(obj.__dict__)
        values['__obj_name__'] = obj.__class__.__name__
        return values
    elif isinstance(obj, RegionInfo):
        return []
    elif isinstance(obj, ClcError):
        return self.__sanitize_and_copy__(obj.__dict__)
    elif isinstance(obj, Response):
        return obj.__dict__
    elif isinstance(obj, EC2Connection):
        return []
    elif isinstance(obj, Group):
        values = self.__sanitize_and_copy__(obj.__dict__)
        values['__obj_name__'] = 'Group'
        return values
    elif isinstance(obj, ConsoleOutput):
        values = self.__sanitize_and_copy__(obj.__dict__)
        values['__obj_name__'] = 'ConsoleOutput'
        return values
    elif isinstance(obj, ImageAttribute):
        values = self.__sanitize_and_copy__(obj.__dict__)
        values['__obj_name__'] = 'ImageAttribute'
        return values
    elif isinstance(obj, AttachmentSet):
        values = self.__sanitize_and_copy__(obj.__dict__)
        values['__obj_name__'] = 'AttachmentSet'
        return values
    elif isinstance(obj, IPPermissions):
        values = self.__sanitize_and_copy__(obj.__dict__)
        values['parent'] = None
        values['__obj_name__'] = 'IPPermissions'
        return values
    elif isinstance(obj, GroupOrCIDR):
        values = self.__sanitize_and_copy__(obj.__dict__)
        values['__obj_name__'] = 'GroupOrCIDR'
        return values
    elif isinstance(obj, BlockDeviceType):
        values = self.__sanitize_and_copy__(obj.__dict__)
        values['connection'] = None
        values['__obj_name__'] = 'BlockDeviceType'
        return values
    elif isinstance(obj, Tag):
        values = self.__sanitize_and_copy__(obj.__dict__)
        values['__obj_name__'] = 'Tag'
        return values
    if isinstance(obj, InstanceState):
        values = self.__sanitize_and_copy__(obj.__dict__)
        values['__obj_name__'] = 'InstanceState'
        return values
    elif isinstance(obj, InstancePlacement):
        values = self.__sanitize_and_copy__(obj.__dict__)
        values['__obj_name__'] = 'InstancePlacement'
        return values
    return super(BotoJsonEncoder, self).default(obj)
