{
  Map<AlarmEntity,AlarmState> returnValue=Maps.newLinkedHashMap();
  Date queryDate=new Date();
  Date endDate=MetricUtils.stripSeconds(queryDate);
  List<MetricManager.GetMetricStatisticsParams> getMetricStatisticsParamses=Lists.newArrayList();
  for (  AlarmEntity alarmEntity : alarmEntities) {
    Date startDate=new Date(endDate.getTime() - 1000L * alarmEntity.getPeriod() * alarmEntity.getEvaluationPeriods());
    Date bufferStartDate=new Date(startDate.getTime() - 1000L * alarmEntity.getPeriod() * numBufferPeriods(alarmEntity.getPeriod()));
    getMetricStatisticsParamses.add(new MetricManager.GetMetricStatisticsParams(alarmEntity.getAccountId(),alarmEntity.getMetricName(),alarmEntity.getNamespace(),alarmEntity.getDimensionMap(),alarmEntity.getMetricType(),alarmEntity.getUnit(),bufferStartDate,endDate,alarmEntity.getPeriod()));
  }
  List<Collection<MetricStatistics>> manyMetricsStatisticsList=MetricManager.getManyMetricStatistics(getMetricStatisticsParamses);
  int count=0;
  for (  AlarmEntity alarmEntity : alarmEntities) {
    Date startDate=new Date(endDate.getTime() - 1000L * alarmEntity.getPeriod() * alarmEntity.getEvaluationPeriods());
    Date bufferStartDate=new Date(startDate.getTime() - 1000L * alarmEntity.getPeriod() * numBufferPeriods(alarmEntity.getPeriod()));
    Collection<MetricStatistics> metricStatisticsList=manyMetricsStatisticsList.get(count++);
    TreeMap<Long,StateAndMetricValue> dataPointMap=new TreeMap<Long,StateAndMetricValue>();
    for (long L=bufferStartDate.getTime(); L < endDate.getTime(); L+=alarmEntity.getPeriod() * 1000L) {
      dataPointMap.put(L,new StateAndMetricValue(StateValue.INSUFFICIENT_DATA,null));
    }
    for (    MetricStatistics metricStatistics : metricStatisticsList) {
      Long dateAsLong=metricStatistics.getTimestamp().getTime();
      if (!dataPointMap.containsKey(dateAsLong)) {
        LOG.warn("Data point does not fall in interval, skipping");
      }
 else {
        dataPointMap.put(dateAsLong,calculateLocalStateAndMetricValue(alarmEntity,metricStatistics));
      }
    }
    List<Double> okPoints=new ArrayList<Double>();
    List<Double> alarmPoints=new ArrayList<Double>();
    List<Double> insufficientDataPoints=new ArrayList<Double>();
    LinkedList<Double> relevantDataPoints=new LinkedList<Double>();
    StateValue oldestStateValue=null;
    for (long L=startDate.getTime(); L < endDate.getTime(); L+=alarmEntity.getPeriod() * 1000L) {
      StateAndMetricValue stateAndMetricValue=dataPointMap.get(L);
      relevantDataPoints.addLast(stateAndMetricValue.getMetricValue());
      if (oldestStateValue == null) {
        oldestStateValue=stateAndMetricValue.getStateValue();
      }
      if (stateAndMetricValue.getStateValue() == StateValue.OK) {
        okPoints.add(stateAndMetricValue.getMetricValue());
      }
 else       if (stateAndMetricValue.getStateValue() == StateValue.ALARM) {
        alarmPoints.add(stateAndMetricValue.getMetricValue());
      }
 else       if (stateAndMetricValue.getStateValue() == StateValue.INSUFFICIENT_DATA) {
        insufficientDataPoints.add(stateAndMetricValue.getMetricValue());
      }
    }
    AlarmState alarmState;
    if (okPoints.size() > 0) {
      alarmState=AlarmManager.createAlarmState(StateValue.OK,okPoints,relevantDataPoints,alarmEntity.getComparisonOperator(),alarmEntity.getThreshold(),alarmEntity.getPeriod(),queryDate,alarmEntity.getStatistic());
    }
 else     if (oldestStateValue == StateValue.ALARM) {
      alarmState=AlarmManager.createAlarmState(StateValue.ALARM,alarmPoints,relevantDataPoints,alarmEntity.getComparisonOperator(),alarmEntity.getThreshold(),alarmEntity.getPeriod(),queryDate,alarmEntity.getStatistic());
    }
 else {
      StateValue lastNonInsufficientDataStateValue=null;
      for (long L=startDate.getTime() - alarmEntity.getPeriod() * 1000L; L >= bufferStartDate.getTime(); L-=alarmEntity.getPeriod() * 1000L) {
        StateAndMetricValue stateAndMetricValue=dataPointMap.get(L);
        relevantDataPoints.addFirst(stateAndMetricValue.getMetricValue());
        if (stateAndMetricValue.getStateValue() == StateValue.OK) {
          okPoints.add(stateAndMetricValue.getMetricValue());
          lastNonInsufficientDataStateValue=StateValue.OK;
          break;
        }
 else         if (stateAndMetricValue.getStateValue() == StateValue.ALARM) {
          alarmPoints.add(stateAndMetricValue.getMetricValue());
          lastNonInsufficientDataStateValue=StateValue.ALARM;
          break;
        }
      }
      if (lastNonInsufficientDataStateValue == StateValue.OK) {
        alarmState=AlarmManager.createAlarmState(StateValue.OK,okPoints,relevantDataPoints,alarmEntity.getComparisonOperator(),alarmEntity.getThreshold(),alarmEntity.getPeriod(),queryDate,alarmEntity.getStatistic());
      }
 else       if (lastNonInsufficientDataStateValue == StateValue.ALARM) {
        alarmState=AlarmManager.createAlarmState(StateValue.ALARM,alarmPoints,relevantDataPoints,alarmEntity.getComparisonOperator(),alarmEntity.getThreshold(),alarmEntity.getPeriod(),queryDate,alarmEntity.getStatistic());
      }
 else {
        alarmState=AlarmManager.createAlarmState(StateValue.INSUFFICIENT_DATA,insufficientDataPoints,relevantDataPoints,alarmEntity.getComparisonOperator(),alarmEntity.getThreshold(),alarmEntity.getPeriod(),queryDate,alarmEntity.getStatistic());
      }
    }
    returnValue.put(alarmEntity,alarmState);
  }
  return returnValue;
}
