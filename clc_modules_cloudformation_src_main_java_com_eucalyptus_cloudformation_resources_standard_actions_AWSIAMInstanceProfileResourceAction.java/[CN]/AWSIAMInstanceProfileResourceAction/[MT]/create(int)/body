{
  ServiceConfiguration configuration=Topology.lookup(Euare.class);
switch (stepNum) {
case 0:
    String instanceProfileName=getDefaultPhysicalResourceId();
  CreateInstanceProfileType createInstanceProfileType=new CreateInstanceProfileType();
createInstanceProfileType.setEffectiveUserId(info.getEffectiveUserId());
createInstanceProfileType.setPath(properties.getPath());
createInstanceProfileType.setInstanceProfileName(instanceProfileName);
CreateInstanceProfileResponseType createInstanceProfileResponseType=AsyncRequests.<CreateInstanceProfileType,CreateInstanceProfileResponseType>sendSync(configuration,createInstanceProfileType);
String arn=createInstanceProfileResponseType.getCreateInstanceProfileResult().getInstanceProfile().getArn();
info.setPhysicalResourceId(instanceProfileName);
info.setArn(JsonHelper.getStringFromJsonNode(new TextNode(arn)));
info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(info.getPhysicalResourceId())));
break;
case 1:
if (properties.getRoles() != null) {
for (String roleName : properties.getRoles()) {
AddRoleToInstanceProfileType addRoleToInstanceProfileType=new AddRoleToInstanceProfileType();
addRoleToInstanceProfileType.setEffectiveUserId(info.getEffectiveUserId());
addRoleToInstanceProfileType.setInstanceProfileName(info.getPhysicalResourceId());
addRoleToInstanceProfileType.setRoleName(roleName);
AsyncRequests.<AddRoleToInstanceProfileType,AddRoleToInstanceProfileResponseType>sendSync(configuration,addRoleToInstanceProfileType);
}
}
break;
default :
throw new IllegalStateException("Invalid step " + stepNum);
}
}
