{
  doc.setWriter(new OutputStreamWriter(os));
  doc.open();
  doc.textLine("Instance Report",1);
  doc.textLine("Begin:" + new Date(report.getBeginMs()).toString(),4);
  doc.textLine("End:" + new Date(report.getEndMs()).toString(),4);
  doc.textLine("Resource Usage Section",3);
  doc.tableOpen();
  doc.newRow().addEmptyValCols(5).addValCol("Net In " + units.getSizeUnit(),3,"center").addValCol("Net Out " + units.getSizeUnit(),3,"center");
  doc.newRow().addValCol("InstanceId").addValCol("Type").addValCol("#").addValCol("Time").addValCol("CpuUsage%").addValCol("Between").addValCol("Within").addValCol("Public").addValCol("Between").addValCol("Within").addValCol("Public");
  for (  String zoneName : report.getZones().keySet()) {
    AvailabilityZoneArtEntity zone=report.getZones().get(zoneName);
    doc.newRow().addLabelCol(0,"Zone: " + zoneName).addValCol("cumul.").addValCol("cumul.");
    addUsageCols(doc,zone.getUsageTotals().getInstanceTotals(),units);
    for (    String clusterName : zone.getClusters().keySet()) {
      ClusterArtEntity cluster=zone.getClusters().get(clusterName);
      doc.newRow().addLabelCol(1,"Cluster: " + clusterName).addValCol("cumul.").addValCol("cumul.");
      addUsageCols(doc,cluster.getUsageTotals().getInstanceTotals(),units);
      for (      String accountName : cluster.getAccounts().keySet()) {
        AccountArtEntity account=cluster.getAccounts().get(accountName);
        doc.newRow().addLabelCol(2,"Account: " + accountName).addValCol("cumul.").addValCol("cumul.");
        addUsageCols(doc,account.getUsageTotals().getInstanceTotals(),units);
        for (        String userName : account.getUsers().keySet()) {
          UserArtEntity user=account.getUsers().get(userName);
          doc.newRow().addLabelCol(3,"User: " + userName).addValCol("cumul.").addValCol("cumul.");
          addUsageCols(doc,user.getUsageTotals().getInstanceTotals(),units);
          for (          String instanceUuid : user.getInstances().keySet()) {
            InstanceArtEntity instance=user.getInstances().get(instanceUuid);
            doc.newRow().addValCol(instance.getInstanceId()).addValCol(instance.getInstanceType());
            addUsageCols(doc,instance.getUsage(),units);
          }
        }
      }
    }
  }
  doc.tableClose();
  doc.textLine("Instance Running Times Section",3);
  doc.tableOpen();
  doc.newRow().addValCol("m1.Small",2,"center").addValCol("c1.Medium",2,"center").addValCol("m1.Large",2,"center").addValCol("c1.Large",2,"center").addValCol("m1.XLarge",2,"center");
  doc.newRow().addValCol("num",1,"center").addValCol("time",1,"center").addValCol("num",1,"center").addValCol("time",1,"center").addValCol("num",1,"center").addValCol("time",1,"center").addValCol("num",1,"center").addValCol("time",1,"center").addValCol("num",1,"center").addValCol("time",1,"center");
  for (  String zoneName : report.getZones().keySet()) {
    AvailabilityZoneArtEntity zone=report.getZones().get(zoneName);
    doc.newRow().addLabelCol(0,"Zone: " + zoneName);
    addTimeCols(doc,zone.getUsageTotals(),units);
    for (    String clusterName : zone.getClusters().keySet()) {
      ClusterArtEntity cluster=zone.getClusters().get(clusterName);
      doc.newRow().addLabelCol(1,"Cluster: " + clusterName);
      addTimeCols(doc,cluster.getUsageTotals(),units);
      for (      String accountName : cluster.getAccounts().keySet()) {
        AccountArtEntity account=cluster.getAccounts().get(accountName);
        doc.newRow().addLabelCol(2,"Account: " + accountName);
        addTimeCols(doc,account.getUsageTotals(),units);
        for (        String userName : account.getUsers().keySet()) {
          UserArtEntity user=account.getUsers().get(userName);
          doc.newRow().addValCol("User: " + userName,3,"left");
          addTimeCols(doc,user.getUsageTotals(),units);
        }
      }
    }
  }
  doc.tableClose();
  doc.close();
}
