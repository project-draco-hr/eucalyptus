{
  log.debug(" ----> GENERATING FALSE DATA");
  int uniqueUserId=0;
  int uniqueAccountId=0;
  int uniqueClusterId=0;
  for (int availZoneNum=0; availZoneNum < NUM_AVAIL_ZONE; availZoneNum++) {
    String availZone="zone-" + availZoneNum;
    for (int clusterNum=0; clusterNum < NUM_CLUSTERS_PER_ZONE; clusterNum++) {
      uniqueClusterId++;
      String cluster="cluster-" + uniqueClusterId;
      for (int accountNum=0; accountNum < NUM_ACCOUNTS_PER_CLUSTER; accountNum++) {
        uniqueAccountId++;
        String accountId="acct-" + uniqueAccountId;
        String accountName="account-" + uniqueAccountId;
        ReportingAccountCrud.getInstance().createOrUpdateAccount(accountId,accountName);
        for (int userNum=0; userNum < NUM_USERS_PER_ACCOUNT; userNum++) {
          System.out.printf("Generating usage for user %d\n",userNum);
          String user="user-" + userNum;
          uniqueUserId++;
          List<Attachment> attachments=new ArrayList<Attachment>();
          String userId="u-" + uniqueUserId;
          String userName="user-" + uniqueUserId;
          ReportingUserCrud.getInstance().createOrUpdateUser(userId,accountId,userName);
          long instanceUuidNum=INSTANCE_UUID_START;
          long volumeUuidNum=VOLUME_UUID_START;
          long elasticIpUuidNum=ELASTIC_IP_UUID_START;
          long snapshotUuidNum=SNAPSHOT_UUID_START;
          long bucketUuidNum=BUCKET_UUID_START;
          long objectUuidNum=OBJECT_UUID_START;
          String instanceUuid="(none)";
          String volumeUuid="(none)";
          String elasticIpUuid="(none)";
          String bucketUuid="(none)";
          int createdInstanceNum=0;
          for (int periodNum=0; periodNum < NUM_PERIODS; periodNum++) {
            System.out.printf(" Generating usage for period %d\n",periodNum);
            long timeMs=START_TIME + (PERIOD_DURATION * periodNum);
            if (periodNum % NUM_PERIODS_PER_ENTITY == 0) {
              int typeNum=createdInstanceNum % FalseInstanceType.values().length;
              FalseInstanceType type=FalseInstanceType.values()[typeNum];
              instanceUuid=String.format(UUID_FORMAT,uniqueUserId,instanceUuidNum++);
              System.out.printf("  Generating instance uuid %s\n",instanceUuid);
              ReportingInstanceEventStore.getInstance().insertCreateEvent(instanceUuid,timeMs,("i-" + userNum + "-"+ periodNum),type.toString(),userId,cluster,availZone);
              createdInstanceNum++;
              volumeUuid=String.format(UUID_FORMAT,uniqueUserId,volumeUuidNum++);
              System.out.printf("  Generating volume uuid %s\n",volumeUuid);
              ReportingVolumeEventStore.getInstance().insertCreateEvent(volumeUuid,("vol-" + userNum + "-"+ periodNum),timeMs,userId,availZone,VOLUME_SIZE);
              elasticIpUuid=String.format(UUID_FORMAT,uniqueUserId,elasticIpUuidNum++);
              System.out.printf("  Generating elastic ip uuid %s\n",elasticIpUuid);
              String ip=String.format("%d.%d.%d.%d",(userNum >> 8) % 256,userNum % 256,(periodNum >> 8) % 256,periodNum % 256);
              ReportingElasticIpEventStore.getInstance().insertCreateEvent(elasticIpUuid,timeMs,userId,ip);
            }
            if (periodNum % NUM_PERIODS_PER_SNAPSHOT == 0) {
              String uuid=String.format(UUID_FORMAT,uniqueUserId,snapshotUuidNum++);
              System.out.printf("  Generating snapshot uuid %s\n",uuid);
              ReportingVolumeSnapshotEventStore.getInstance().insertCreateEvent(uuid,("snap-" + userNum + "-"+ periodNum),timeMs,userId,SNAPSHOT_SIZE);
            }
            if (periodNum % NUM_PERIODS_PER_BUCKET == 0) {
              bucketUuid=String.format(UUID_FORMAT,uniqueUserId,bucketUuidNum++);
              System.out.printf("  Generating bucket uuid %s\n",bucketUuid);
              ReportingS3BucketEventStore.getInstance().insertS3BucketCreateEvent(bucketUuid,BUCKET_SIZE,userId,timeMs);
            }
            if (periodNum % NUM_PERIODS_PER_OBJECT == 0) {
              String uuid=String.format(UUID_FORMAT,uniqueUserId,objectUuidNum++);
              System.out.printf("  Generating object uuid %s\n",uuid);
              ReportingS3ObjectEventStore.getInstance().insertS3ObjectCreateEvent(bucketUuid,uuid,OBJECT_SIZE,timeMs,userId);
            }
            for (long i=INSTANCE_UUID_START; i < instanceUuidNum - 2; i++) {
              String uuid=String.format(UUID_FORMAT,uniqueUserId,i);
              System.out.printf("  Generating instance usage uuid %s\n",uuid);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,INSTANCE_CUMULATIVE_DISK_USAGE_PER_PERIOD * periodNum,INSTANCE_CPU_UTILIZATION_PER_PERIOD,INSTANCE_CUMULATIVE_NET_INCOMING_BETWEEN_USAGE_PER_PERIOD * periodNum,INSTANCE_CUMULATIVE_NET_INCOMING_WITHIN_PER_PERIOD * periodNum,INSTANCE_CUMULATIVE_NET_INCOMING_PUBLIC_PER_PERIOD * periodNum,INSTANCE_CUMULATIVE_NET_OUTGOING_BETWEEN_USAGE_PER_PERIOD * periodNum,INSTANCE_CUMULATIVE_NET_OUTGOING_WITHIN_PER_PERIOD * periodNum,INSTANCE_CUMULATIVE_NET_OUTGOING_PUBLIC_PER_PERIOD * periodNum);
            }
            for (long i=VOLUME_UUID_START; i < volumeUuidNum - 2; i++) {
              String uuid=String.format(UUID_FORMAT,uniqueUserId,i);
              System.out.printf("  Generating volume usage uuid %s\n",uuid);
              ReportingVolumeEventStore.getInstance().insertUsageEvent(uuid,timeMs,VOLUME_CUMULATIVE_READ_PER_PERIOD,VOLUME_CUMULATIVE_WRITTEN_PER_PERIOD);
            }
            for (long i=OBJECT_UUID_START; i < objectUuidNum - 2; i++) {
              String uuid=String.format(UUID_FORMAT,uniqueUserId,i);
              long bucketNum=i / (NUM_PERIODS_PER_BUCKET / NUM_PERIODS_PER_OBJECT);
              bucketUuid=String.format(UUID_FORMAT,uniqueUserId,bucketNum);
              System.out.printf("  Generating object usage, bucket uuid %s, object uuid %s\n",bucketUuid,uuid);
              ReportingS3ObjectEventStore.getInstance().insertS3ObjectUsageEvent(bucketUuid,uuid,OBJECT_SIZE,timeMs,userId);
            }
            ReportingVolumeEventStore.getInstance().insertAttachEvent(volumeUuid,instanceUuid,VOLUME_SIZE,timeMs);
            ReportingElasticIpEventStore.getInstance().insertAttachEvent(elasticIpUuid,instanceUuid,timeMs);
            System.out.printf("  Attaching volume %s and ip %s to instance %s\n",volumeUuid,elasticIpUuid,instanceUuid);
            attachments.add(new Attachment(instanceUuid,volumeUuid,elasticIpUuid));
            if (attachments.size() >= ATTACH_PERIODS_DURATION) {
              Attachment attachment=attachments.remove(0);
              ReportingVolumeEventStore.getInstance().insertDetachEvent(attachment.getVolumeUuid(),attachment.getInstanceUuid(),VOLUME_SIZE,timeMs);
              ReportingElasticIpEventStore.getInstance().insertDetachEvent(attachment.getElasticIpUuid(),attachment.getInstanceUuid(),timeMs);
              System.out.printf("  Detaching volume %s and ip %s to instance %s\n",attachment.getVolumeUuid(),attachment.getElasticIpUuid(),attachment.getInstanceUuid());
            }
          }
        }
      }
    }
  }
}
