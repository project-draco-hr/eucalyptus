{
  log.debug(" ----> GENERATING FALSE DATA");
  int uniqueUserId=0;
  int uniqueAccountId=0;
  int uniqueClusterId=0;
  for (int availZoneNum=0; availZoneNum < NUM_AVAIL_ZONE; availZoneNum++) {
    String availZone="zone-" + availZoneNum;
    for (int clusterNum=0; clusterNum < NUM_CLUSTERS_PER_ZONE; clusterNum++) {
      uniqueClusterId++;
      String cluster="cluster-" + uniqueClusterId;
      for (int accountNum=0; accountNum < NUM_ACCOUNTS_PER_CLUSTER; accountNum++) {
        uniqueAccountId++;
        String accountId="acct-" + uniqueAccountId;
        String accountName="account-" + uniqueAccountId;
        ReportingAccountCrud.getInstance().createOrUpdateAccount(accountId,accountName);
        for (int userNum=0; userNum < NUM_USERS_PER_ACCOUNT; userNum++) {
          log.debug(String.format("Generating usage for user %d\n",userNum));
          String user="user-" + userNum;
          uniqueUserId++;
          List<Attachment> attachments=new ArrayList<Attachment>();
          String userId="u-" + uniqueUserId;
          String userName="user-" + uniqueUserId;
          ReportingUserCrud.getInstance().createOrUpdateUser(userId,accountId,userName);
          long instanceUuidNum=INSTANCE_UUID_START;
          long volumeUuidNum=VOLUME_UUID_START;
          long elasticIpUuidNum=ELASTIC_IP_UUID_START;
          long snapshotUuidNum=SNAPSHOT_UUID_START;
          long bucketUuidNum=BUCKET_UUID_START;
          long objectUuidNum=OBJECT_UUID_START;
          String instanceUuid="(none)";
          String volumeUuid="(none)";
          String elasticIpUuid="(none)";
          String bucketName="(none)";
          int createdInstanceNum=0;
          for (int periodNum=0; periodNum < NUM_PERIODS; periodNum++) {
            log.debug(String.format(" Generating usage for period %d\n",periodNum));
            long timeMs=START_TIME + (PERIOD_DURATION * periodNum);
            if (periodNum % NUM_PERIODS_PER_ENTITY == 0) {
              int typeNum=createdInstanceNum % FalseInstanceType.values().length;
              FalseInstanceType type=FalseInstanceType.values()[typeNum];
              instanceUuid=String.format(UUID_FORMAT,uniqueUserId,instanceUuidNum++);
              log.debug(String.format("  Generating instance uuid %s\n",instanceUuid));
              ReportingInstanceEventStore.getInstance().insertCreateEvent(instanceUuid,("i-" + userNum + "-"+ periodNum),timeMs,type.toString(),userId,availZone);
              createdInstanceNum++;
              volumeUuid=String.format(UUID_FORMAT,uniqueUserId,volumeUuidNum++);
              log.debug(String.format("  Generating volume uuid %s\n",volumeUuid));
              ReportingVolumeEventStore.getInstance().insertCreateEvent(volumeUuid,("vol-" + userNum + "-"+ periodNum),timeMs,userId,availZone,VOLUME_SIZE);
              elasticIpUuid=String.format(UUID_FORMAT,uniqueUserId,elasticIpUuidNum++);
              log.debug(String.format("  Generating elastic ip uuid %s\n",elasticIpUuid));
              String ip=String.format("%d.%d.%d.%d",(userNum >> 8) % 256,userNum % 256,(periodNum >> 8) % 256,periodNum % 256);
              ReportingElasticIpEventStore.getInstance().insertCreateEvent(elasticIpUuid,timeMs,userId,ip);
            }
            if (periodNum % NUM_PERIODS_PER_SNAPSHOT == 0) {
              String uuid=String.format(UUID_FORMAT,uniqueUserId,snapshotUuidNum++);
              log.debug(String.format("  Generating snapshot uuid %s\n",uuid));
              ReportingVolumeSnapshotEventStore.getInstance().insertCreateEvent(uuid,volumeUuid,("snap-" + userNum + "-"+ periodNum),timeMs,userId,SNAPSHOT_SIZE);
            }
            if (periodNum % NUM_PERIODS_PER_BUCKET == 0) {
              bucketName="bucket-" + bucketUuidNum++;
            }
            if (periodNum % NUM_PERIODS_PER_OBJECT == 0) {
              String uuid=String.format(UUID_FORMAT,uniqueUserId,objectUuidNum++);
              log.debug(String.format("  Generating object uuid %s\n",uuid));
              for (int i=0; i < NUM_VERSIONS_PER_OBJECT; i++) {
                ReportingS3ObjectEventStore.getInstance().insertS3ObjectCreateEvent(bucketName,uuid,"0",OBJECT_SIZE,timeMs,userId);
              }
            }
            double oneMB=1024d * 11024d;
            for (long i=INSTANCE_UUID_START; i < instanceUuidNum - 2; i++) {
              String uuid=String.format(UUID_FORMAT,uniqueUserId,i);
              log.debug(String.format("  Generating instance usage uuid %s\n",uuid));
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,"NetworkIn",0L,"total",oneMB * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,"NetworkIn",0L,"internal",oneMB * 2 * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,"NetworkOut",0L,"total",oneMB * 3 * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,"NetworkOut",0L,"internal",oneMB * 4 * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,"DiskReadBytes",0L,"root",oneMB * 5 * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,"DiskWriteBytes",0L,"root",oneMB * 6 * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,"DiskReadBytes",0L,"ephemeral0",oneMB * 7 * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,"DiskWriteBytes",0L,"ephemeral0",oneMB * 8 * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,"VolumeTotalReadTime",0L,"vda",100000d * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,"VolumeTotalWriteTime",0L,"vda",200000d * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,"DiskReadOps",0L,"vda",100000d * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,"DiskWriteOps",0L,"vda",200000d * periodNum);
              ReportingInstanceEventStore.getInstance().insertUsageEvent(uuid,timeMs,"CPUUtilization",0L,"default",(double)(PERIOD_DURATION / 2) * periodNum);
            }
            ReportingVolumeEventStore.getInstance().insertAttachEvent(volumeUuid,instanceUuid,VOLUME_SIZE,timeMs);
            ReportingElasticIpEventStore.getInstance().insertAttachEvent(elasticIpUuid,instanceUuid,timeMs);
            log.debug(String.format("  Attaching volume %s and ip %s to instance %s\n",volumeUuid,elasticIpUuid,instanceUuid));
            attachments.add(new Attachment(instanceUuid,volumeUuid,elasticIpUuid));
            if (attachments.size() >= ATTACH_PERIODS_DURATION) {
              Attachment attachment=attachments.remove(0);
              ReportingVolumeEventStore.getInstance().insertDetachEvent(attachment.getVolumeUuid(),attachment.getInstanceUuid(),timeMs);
              ReportingElasticIpEventStore.getInstance().insertDetachEvent(attachment.getElasticIpUuid(),attachment.getInstanceUuid(),timeMs);
              log.debug(String.format("  Detaching volume %s and ip %s to instance %s\n",attachment.getVolumeUuid(),attachment.getElasticIpUuid(),attachment.getInstanceUuid()));
            }
          }
        }
      }
    }
  }
}
