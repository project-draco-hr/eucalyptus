{
  ReportArtEntity report=new ReportArtEntity(1000l,2000l);
  InstanceArtGenerator generator=new InstanceArtGenerator();
  generator.generateReportArt(report);
  AvailabilityZoneArtEntity zone=report.getZones().get("zone0");
  if (zone == null) {
    throw new IllegalStateException("zone0 not found");
  }
  InstanceUsageArtEntity zoneUsage=zone.getUsageTotals().getInstanceTotals();
  checkDiskInMetric("Zone Totals",zoneUsage,ONE_MB * 1700d * NUM_USER_TEST);
  AccountArtEntity account=zone.getAccounts().get("account0");
  if (account == null) {
    throw new IllegalStateException("account0 not found");
  }
  Map<String,UserArtEntity> users=account.getUsers();
  for (int i=0; i < NUM_USER_TEST; i++) {
    String userId="user " + i;
    UserArtEntity user=users.get(userId);
    if (user == null) {
      throw new IllegalStateException("user " + userId + " not found");
    }
    InstanceUsageArtEntity userUsage=user.getUsageTotals().getInstanceTotals();
    checkDiskInMetric("User Totals",userUsage,ONE_MB * 1700d);
    for (    String uuid : user.getInstances().keySet()) {
      InstanceUsageArtEntity usage=user.getInstances().get(uuid).getUsage();
      if (uuid.startsWith("a")) {
        checkDiskInMetric("Instance A",usage,ONE_MB * 700d);
      }
 else       if (uuid.startsWith("b")) {
        checkDiskInMetric("Instance B",usage,ONE_MB * 1000d);
      }
 else       if (uuid.startsWith("c") || uuid.startsWith("d")) {
        throw new IllegalStateException("Instance included without any usage in report boundaries");
      }
    }
  }
}
