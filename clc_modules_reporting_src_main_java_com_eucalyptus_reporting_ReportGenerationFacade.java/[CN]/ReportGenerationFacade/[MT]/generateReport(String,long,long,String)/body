{
  final String report;
  if (!"raw".equals(type)) {
    final ReportGenerator generator=ReportGenerator.getInstance();
    final ByteArrayOutputStream reportOutput=new ByteArrayOutputStream(10240);
    try {
      generator.generateReport(new Period(start,end),ReportFormat.HTML,ReportType.valueOf(type),null,reportOutput,null);
    }
 catch (    final Exception e) {
      throw new ReportGenerationException("Error generating report",e);
    }
    report=new String(reportOutput.toByteArray(),Charsets.UTF_8);
  }
 else {
    final ReportingExport export=Export.export(new Date(start),new Date(end));
    final StringBuilder builder=new StringBuilder(10240);
    final Map<String,String> uuidToInstanceIdMap=Maps.newHashMap();
    for (    final Serializable item : export) {
      if (item instanceof ReportingInstanceCreateEvent) {
        final ReportingInstanceCreateEvent event=(ReportingInstanceCreateEvent)item;
        uuidToInstanceIdMap.put(event.getUuid(),event.getInstanceId());
      }
      if (item instanceof ReportingInstanceUsageEvent) {
        final ReportingInstanceUsageEvent event=(ReportingInstanceUsageEvent)item;
        builder.append(SerializationUtils.serializeDateTime(new Date(event.getTimestampMs()))).append(", ");
        builder.append(event.getUuid()).append(", ");
        builder.append(uuidToInstanceIdMap.get(event.getUuid())).append(", ");
        builder.append(event.getCpuUtilizationPercent()).append(", ");
        builder.append(event.getCumulativeDiskIoMegs()).append(", ");
        builder.append(event.getCumulativeNetIncomingMegsPublic()).append(", ");
        builder.append(event.getCumulativeNetIncomingMegsBetweenZones()).append(", ");
        builder.append(event.getCumulativeNetIncomingMegsWithinZone()).append(", ");
        builder.append(event.getCumulativeNetOutgoingMegsPublic()).append(", ");
        builder.append(event.getCumulativeNetOutgoingMegsBetweenZones()).append(", ");
        builder.append(event.getCumulativeNetOutgoingMegsWithinZone()).append("\n");
      }
    }
    report=builder.toString();
  }
  return report;
}
