{
  final Matcher matcher=ARN_PATTERN.matcher(ern);
  if (!matcher.matches()) {
    throw new JSONException("'" + ern + "' is not a valid ARN");
  }
  if (matcher.group(ARN_PATTERNGROUP_IAM) != null) {
    final String pathName=matcher.group(ARN_PATTERNGROUP_IAM_ID);
    final String path;
    final String name;
    int lastSlash=pathName.lastIndexOf('/');
    if (lastSlash == 0) {
      path="/";
      name=pathName.substring(1);
    }
 else {
      path=pathName.substring(0,lastSlash);
      name=pathName.substring(lastSlash + 1);
    }
    final String accountId=matcher.group(ARN_PATTERNGROUP_IAM_NAMESPACE);
    final String type=matcher.group(ARN_PATTERNGROUP_IAM_USERGROUP);
    if (accountId.length() != 12 && !"role".equals(type)) {
      throw new JSONException("'" + ern + "' is not a valid ARN");
    }
    return new EuareResourceName(accountId,type,path,name);
  }
 else   if (matcher.group(ARN_PATTERNGROUP_EC2) != null) {
    String type=matcher.group(ARN_PATTERNGROUP_EC2_TYPE).toLowerCase();
    if (!PolicySpec.EC2_RESOURCES.contains(type)) {
      throw new JSONException("EC2 type '" + type + "' is not supported");
    }
    String id=matcher.group(ARN_PATTERNGROUP_EC2_ID).toLowerCase();
    if (PolicySpec.EC2_RESOURCE_ADDRESS.equals(type)) {
      AddressUtil.validateAddressRange(id);
    }
    return new Ec2ResourceName(type,id);
  }
 else   if (matcher.group(ARN_PATTERNGROUP_S3) != null) {
    String bucket=matcher.group(ARN_PATTERNGROUP_S3_BUCKET);
    String object=matcher.group(ARN_PATTERNGROUP_S3_OBJECT);
    return new S3ResourceName(bucket,object);
  }
 else {
    return new WildcardResourceName();
  }
}
