{
  if (ARN_WILDCARD.equals(ern))   return new WildcardResourceName();
  final Matcher matcher=ARN_PATTERN.matcher(ern);
  if (matcher.matches()) {
    final String service=matcher.group(ARN_PATTERNGROUP_SERVICE);
    final String region=matcher.group(ARN_PATTERNGROUP_REGION);
    final String account=matcher.group(ARN_PATTERNGROUP_ACCOUNT);
    final String resource=matcher.group(ARN_PATTERNGROUP_RESOURCE);
    for (    final ServiceErnBuilder builder : ernBuilders) {
      if (builder.supports(service)) {
        return builder.build(ern,service,region,account,resource);
      }
    }
  }
  throw new JSONException("'" + ern + "' is not a valid ARN");
}
