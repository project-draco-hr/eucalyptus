{
  if (LOADBALANCER_EMI == null)   throw new EventHandlerException("Loadbalancer's EMI is not configured");
  this.event=evt;
  if (evt.getZones() == null || evt.getZones().size() <= 0)   return;
  LoadBalancer lb=null;
  try {
    lb=LoadBalancers.getLoadbalancer(evt.getContext().getUserFullName(),evt.getLoadBalancer());
    this.loadbalancer=lb;
  }
 catch (  NoSuchElementException ex) {
    throw new EventHandlerException("Failed to find the loadbalancer " + evt.getLoadBalancer(),ex);
  }
catch (  Exception ex) {
    throw new EventHandlerException("Failed due to query exception",ex);
  }
  InstanceUserDataBuilder userDataBuilder=null;
  try {
    userDataBuilder=new DefaultInstanceUserDataBuilder();
  }
 catch (  Exception ex) {
    throw new EventHandlerException("failed to create service parameters",ex);
  }
  String launchConfigName=String.format("lc-euca-internal-elb-%s-%s",lb.getOwnerAccountNumber(),lb.getDisplayName());
  if (launchConfigName.length() > 255)   launchConfigName=launchConfigName.substring(0,255);
  String groupName=String.format("asg-euca-internal-elb-%s-%s",lb.getOwnerAccountNumber(),lb.getDisplayName());
  if (groupName.length() > 255)   groupName=groupName.substring(0,255);
  String instanceProfileName=null;
  try {
    List<String> result=this.chain.findHandler(InstanceProfileSetup.class).getResult();
    instanceProfileName=result.get(0);
  }
 catch (  Exception ex) {
    ;
  }
  boolean asgFound=false;
  try {
    final DescribeAutoScalingGroupsResponseType response=EucalyptusActivityTasks.getInstance().describeAutoScalingGroups(Lists.newArrayList(groupName));
    final List<AutoScalingGroupType> groups=response.getDescribeAutoScalingGroupsResult().getAutoScalingGroups().getMember();
    if (groups.size() > 0 && groups.get(0).getAutoScalingGroupName().equals(groupName)) {
      asgFound=true;
      launchConfigName=groups.get(0).getLaunchConfigurationName();
    }
  }
 catch (  final Exception ex) {
    asgFound=false;
  }
  int capacity=1;
  if (!asgFound) {
    try {
      StoredResult<String> sgroupSetup=this.getChain().findHandler(SecurityGroupSetup.class);
      final List<String> group=sgroupSetup.getResult();
      final String sgroupName=group.size() > 0 ? group.get(0) : null;
      final String keyName=LOADBALANCER_VM_KEYNAME != null && LOADBALANCER_VM_KEYNAME.length() > 0 ? LOADBALANCER_VM_KEYNAME : null;
      EucalyptusActivityTasks.getInstance().createLaunchConfiguration(LOADBALANCER_EMI,LOADBALANCER_INSTANCE_TYPE,instanceProfileName,launchConfigName,sgroupName,keyName,userDataBuilder.build());
      this.launchConfigName=launchConfigName;
    }
 catch (    Exception ex) {
      throw new EventHandlerException("Failed to create launch configuration",ex);
    }
    try {
      final List<String> availabilityZones=Lists.newArrayList(evt.getZones());
      capacity=availabilityZones.size() * this.capacityPerZone;
      EucalyptusActivityTasks.getInstance().createAutoScalingGroup(groupName,availabilityZones,capacity,launchConfigName,TagCreator.TAG_KEY,TagCreator.TAG_VALUE);
      this.asgName=groupName;
    }
 catch (    Exception ex) {
      throw new EventHandlerException("Failed to create autoscaling group",ex);
    }
  }
 else {
    try {
      final List<String> availabilityZones=Lists.newArrayList(evt.getZones());
      capacity=availabilityZones.size() * this.capacityPerZone;
      EucalyptusActivityTasks.getInstance().updateAutoScalingGroup(groupName,availabilityZones,capacity);
    }
 catch (    Exception ex) {
      throw new EventHandlerException("Failed to update the autoscaling group",ex);
    }
    this.asgName=groupName;
    this.launchConfigName=launchConfigName;
  }
  final EntityTransaction db=Entities.get(LoadBalancerAutoScalingGroup.class);
  try {
    Entities.uniqueResult(LoadBalancerAutoScalingGroup.named(lb));
    db.commit();
  }
 catch (  NoSuchElementException ex) {
    final LoadBalancerAutoScalingGroup group=LoadBalancerAutoScalingGroup.newInstance(lb,launchConfigName,groupName);
    group.setCapacity(capacity);
    Entities.persist(group);
    db.commit();
  }
catch (  Exception ex) {
    db.rollback();
    throw new EventHandlerException("Failed to commit the database",ex);
  }
}
