{
  if (!CloudWatchConfigProperties.isDisabledCloudWatchService() && Bootstrap.isOperational() && Topology.isEnabledLocally(CloudWatchBackend.class)) {
    LOG.debug("Kicking off AlarmStateEvaluationDispatcher");
    int size=0;
    long before=0;
    List<List<AlarmEntity>> resultsList=null;
    try (final TransactionResource db=Entities.transactionFor(AlarmEntity.class)){
      Criteria criteria=Entities.createCriteria(AlarmEntity.class);
      List<AlarmEntity> results=(List<AlarmEntity>)criteria.list();
      resultsList=makeResultsList(results);
      before=System.currentTimeMillis();
      size=results.size();
    }
     try {
      if (resultsList != null) {
        ExecutorCompletionService executorCompletionService=new ExecutorCompletionService(executorService);
        Set<Future> futures=Sets.newHashSet();
        for (        List<AlarmEntity> alarmEntityList : resultsList) {
          futures.add(executorCompletionService.submit(new AlarmStateEvaluationWorker(alarmEntityList),new Object()));
        }
        Future completedFuture;
        while (futures.size() > 0) {
          completedFuture=executorCompletionService.take();
          futures.remove(completedFuture);
          try {
            completedFuture.get();
          }
 catch (          ExecutionException e) {
            Throwable cause=e.getCause();
            LOG.error(cause);
          }
        }
        long after=System.currentTimeMillis();
        LOG.debug("Done evaluating " + size + " alarms, time = "+ (after - before)+ " ms");
      }
    }
 catch (    InterruptedException e) {
      LOG.debug(e);
    }
  }
}
