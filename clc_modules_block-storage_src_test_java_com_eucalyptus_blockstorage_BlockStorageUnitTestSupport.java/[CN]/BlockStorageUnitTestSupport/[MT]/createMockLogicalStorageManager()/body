{
  return new LogicalStorageManager(){
    @Override public void initialize() throws EucalyptusCloudException {
    }
    @Override public void configure() throws EucalyptusCloudException {
    }
    @Override public void checkPreconditions() throws EucalyptusCloudException {
    }
    @Override public void reload(){
    }
    @Override public void startupChecks() throws EucalyptusCloudException {
    }
    @Override public void cleanVolume(    String volumeId){
      try (TransactionResource tran=Entities.transactionFor(VolumeInfo.class)){
        VolumeInfo example=new VolumeInfo(volumeId);
        Entities.delete(Entities.uniqueResult(example));
        tran.commit();
      }
 catch (      TransactionException e) {
        System.err.println("exception caught looking for VolumeInfo with volumeId - " + volumeId);
        e.printStackTrace();
      }
    }
    @Override public void cleanSnapshot(    String snapshotId){
    }
    @Override public StorageResource createSnapshot(    String volumeId,    String snapshotId,    String snapshotPointId,    Boolean shouldTransferSnapshots) throws EucalyptusCloudException {
      return null;
    }
    @Override public List<String> prepareForTransfer(    String snapshotId) throws EucalyptusCloudException {
      return null;
    }
    @Override public void createVolume(    String volumeId,    int size) throws EucalyptusCloudException {
    }
    @Override public int createVolume(    String volumeId,    String snapshotId,    int size) throws EucalyptusCloudException {
      return 0;
    }
    @Override public void cloneVolume(    String volumeId,    String parentVolumeId) throws EucalyptusCloudException {
    }
    @Override public void addSnapshot(    String snapshotId) throws EucalyptusCloudException {
    }
    @Override public void deleteVolume(    String volumeId) throws EucalyptusCloudException {
    }
    @Override public void deleteSnapshot(    String snapshotId) throws EucalyptusCloudException {
    }
    @Override public String getVolumeConnectionString(    String volumeId) throws EucalyptusCloudException {
      return null;
    }
    @Override public void loadSnapshots(    List<String> snapshotSet,    List<String> snapshotFileNames) throws EucalyptusCloudException {
    }
    @Override public int getSnapshotSize(    String snapshotId) throws EucalyptusCloudException {
      return 0;
    }
    @Override public void finishVolume(    String snapshotId) throws EucalyptusCloudException {
    }
    @Override public StorageResource prepareSnapshot(    String snapshotId,    int sizeExpected,    long actualSizeInMB) throws EucalyptusCloudException {
      return null;
    }
    @Override public ArrayList<ComponentProperty> getStorageProps(){
      return null;
    }
    @Override public void setStorageProps(    ArrayList<ComponentProperty> storageParams){
    }
    @Override public String getStorageRootDirectory(){
      return null;
    }
    @Override public String getVolumePath(    String volumeId) throws EucalyptusCloudException {
      return null;
    }
    @Override public void importVolume(    String volumeId,    String volumePath,    int size) throws EucalyptusCloudException {
    }
    @Override public String getSnapshotPath(    String snapshotId) throws EucalyptusCloudException {
      return null;
    }
    @Override public void importSnapshot(    String snapshotId,    String snapPath,    String volumeId,    int size) throws EucalyptusCloudException {
    }
    @Override public String exportVolume(    String volumeId,    String nodeIqn) throws EucalyptusCloudException {
      return null;
    }
    @Override public void unexportVolume(    String volumeId,    String nodeIqn) throws EucalyptusCloudException, UnsupportedOperationException {
    }
    @Override public void unexportVolumeFromAll(    String volumeId) throws EucalyptusCloudException {
    }
    @Override public String createSnapshotPoint(    String parentVolumeId,    String volumeId) throws EucalyptusCloudException {
      return null;
    }
    @Override public void deleteSnapshotPoint(    String parentVolumeId,    String volumeId,    String snapshotPointId) throws EucalyptusCloudException {
    }
    @Override public void checkReady() throws EucalyptusCloudException {
    }
    @Override public void stop() throws EucalyptusCloudException {
    }
    @Override public void enable() throws EucalyptusCloudException {
    }
    @Override public void disable() throws EucalyptusCloudException {
    }
    @Override public boolean getFromBackend(    String snapshotId,    int size) throws EucalyptusCloudException {
      return false;
    }
    @Override public void checkVolume(    String volumeId) throws EucalyptusCloudException {
    }
    @Override public List<CheckerTask> getCheckers(){
      return null;
    }
  }
;
}
