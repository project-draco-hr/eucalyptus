{
  Map<String,String> props=Maps.newHashMap();
  props.put("hibernate.ejb.interceptor.session_scoped","com.eucalyptus.entities.DelegatingInterceptor");
  props.put("hibernate.show_sql","false");
  props.put("hibernate.format_sql","false");
  props.put("hibernate.generate_statistics","false");
  props.put("hibernate.bytecode.use_reflection_optimizer","true");
  props.put("javax.persistence.jdbc.driver","org.apache.derby.jdbc.EmbeddedDriver");
  props.put("javax.persistence.jdbc.user","root");
  props.put("javax.persistence.jdbc.password","root");
  props.put("hibernate.hbm2ddl.auto","create");
  props.put("hibernate.cache.use_second_level_cache","false");
  props.put("hibernate.dialect","org.hibernate.dialect.DerbyDialect");
  props.put("hibernate.connection.url","jdbc:derby:memory:test;create=true");
  PersistenceContextConfiguration config=new PersistenceContextConfiguration("eucalyptus_storage",ImmutableList.<Class<?>>builder().add(BlockStorageGlobalConfiguration.class).add(CHAPUserInfo.class).add(DASInfo.class).add(DirectStorageInfo.class).add(ISCSIMetaInfo.class).add(ISCSIVolumeInfo.class).add(SnapshotInfo.class).add(SnapshotPart.class).add(SnapshotTransferConfiguration.class).add(SnapshotUploadInfo.class).add(StorageInfo.class).add(VolumeExportRecord.class).add(VolumeInfo.class).add(VolumeToken.class).add(SANVolumeInfo.class).add(SANInfo.class).build(),props);
  PersistenceContexts.registerPersistenceContext(config);
}
