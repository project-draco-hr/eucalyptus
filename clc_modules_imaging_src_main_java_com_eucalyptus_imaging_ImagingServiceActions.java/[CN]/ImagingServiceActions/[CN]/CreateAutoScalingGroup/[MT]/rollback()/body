{
  if (this.createdAutoScalingGroup != null) {
    final Set<String> instances=Sets.newHashSet();
    try {
      final DescribeAutoScalingGroupsResponseType resp=EucalyptusActivityTasks.getInstance().describeAutoScalingGroups(Lists.newArrayList(this.createdAutoScalingGroup));
      for (      final AutoScalingGroupType asg : resp.getDescribeAutoScalingGroupsResult().getAutoScalingGroups().getMember()) {
        if (asg.getInstances() != null) {
          for (          final Instance instance : asg.getInstances().getMember()) {
            instances.add(instance.getInstanceId());
          }
        }
      }
    }
 catch (    final Exception ex) {
      ;
    }
    try {
      EucalyptusActivityTasks.getInstance().deleteAutoScalingGroup(this.createdAutoScalingGroup,true);
    }
 catch (    final Exception ex) {
      throw new ImagingServiceActionException("failed to delete autoscaling group",ex);
    }
    do {
      final List<String> terminated=Lists.newArrayList();
      for (      final String instanceId : instances) {
        try {
          final List<RunningInstancesItemType> runningInstances=EucalyptusActivityTasks.getInstance().describeSystemInstances(Lists.newArrayList(instanceId));
          final String state=runningInstances.get(0).getStateName();
          if ("terminated".equals(state))           terminated.add(instanceId);
        }
 catch (        final Exception ex) {
          terminated.add(instanceId);
        }
      }
      for (      final String terminatedId : terminated) {
        instances.remove(terminatedId);
      }
      try {
        Thread.sleep(1000);
      }
 catch (      final Exception ex) {
        ;
      }
    }
 while (instances.size() > 0);
  }
}
