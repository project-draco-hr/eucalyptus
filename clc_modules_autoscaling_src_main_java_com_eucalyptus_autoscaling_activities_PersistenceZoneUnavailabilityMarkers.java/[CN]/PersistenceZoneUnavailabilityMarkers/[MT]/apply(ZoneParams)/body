{
  final List<ZoneUnavailabilityMarker> unavailableZoneList=Entities.query(new ZoneUnavailabilityMarker());
  final Set<String> currentUnavailableZones=Sets.newHashSet(Iterables.transform(unavailableZoneList,ZoneName.INSTANCE));
  final Set<String> changedZones=Sets.newHashSet();
  for (  final String zone : zoneParams.getUnavailableZones()) {
    if (!currentUnavailableZones.contains(zone)) {
      changedZones.add(zone);
      Entities.persist(new ZoneUnavailabilityMarker(zone));
    }
  }
  for (  final ZoneUnavailabilityMarker marker : unavailableZoneList) {
    if (!zoneParams.getUnavailableZones().contains(marker.getName())) {
      changedZones.add(marker.getName());
      Entities.delete(marker);
    }
  }
  try {
    zoneParams.getCallback().notifyChangedZones(changedZones);
  }
 catch (  AutoScalingMetadataException e) {
    throw Exceptions.toUndeclared(e);
  }
  return null;
}
