{
  final Matcher matcher=ARN_PATTERN.matcher(ern);
  if (matcher.matches()) {
    final Optional<String> pathName=Optional.fromNullable(matcher.group(ARN_PATTERNGROUP_IAM_ID));
    final String path;
    final String name;
    int lastSlash=pathName.isPresent() ? pathName.get().lastIndexOf('/') : 0;
    if (lastSlash == 0) {
      path="/";
      name=pathName.isPresent() ? pathName.get().substring(1) : "*";
    }
 else {
      path=pathName.get().substring(0,lastSlash);
      name=pathName.get().substring(lastSlash + 1);
    }
    final String accountId=matcher.group(ARN_PATTERNGROUP_IAM_NAMESPACE);
    final String type=Objects.firstNonNull(matcher.group(ARN_PATTERNGROUP_IAM_TYPE),"*");
    return new EuareResourceName(accountId,type,path,name);
  }
  throw new JSONException("'" + ern + "' is not a valid ARN");
}
