{
  if (!(Bootstrap.isFinished() && Topology.isEnabled(Eucalyptus.class)))   return;
  if (emi != null) {
    try {
      final List<ImageDetails> images=EucalyptusActivityTasks.getInstance().describeImages(Lists.newArrayList(emi),false);
      if (images == null || images.size() <= 0)       throw new EucalyptusCloudException("No such EMI is found in the system");
      if (!images.get(0).getImageId().toLowerCase().equals(emi.toLowerCase()))       throw new EucalyptusCloudException("No such EMI is found in the system");
    }
 catch (    final EucalyptusCloudException ex) {
      throw ex;
    }
catch (    final Exception ex) {
      throw new EucalyptusCloudException("Failed to verify EMI in the system");
    }
  }
  if (instanceType != null) {
    ;
  }
  if (keyname != null && !keyname.equals("")) {
    try {
      final List<DescribeKeyPairsResponseItemType> keypairs=EucalyptusActivityTasks.getInstance().describeKeyPairs(Lists.newArrayList(keyname));
      if (keypairs == null || keypairs.size() <= 0)       throw new EucalyptusCloudException("No such keypair is found in the system");
      if (!keypairs.get(0).getKeyName().equals(keyname))       throw new EucalyptusCloudException("No such keypair is found in the system");
    }
 catch (    final EucalyptusCloudException ex) {
      throw ex;
    }
catch (    final Exception ex) {
      throw new EucalyptusCloudException("Failed to verify the keyname in the system");
    }
  }
  if (ntpServers != null) {
    ;
  }
  if (!Topology.isEnabledLocally(ImagingBackend.class))   return;
  if ((emi != null && emi.length() > 0) || (instanceType != null && instanceType.length() > 0) || (keyname != null && keyname.length() > 0)|| (ntpServers != null && ntpServers.length() > 0)|| (logServer != null && logServer.length() > 0)|| (logServerPort != null && logServerPort.length() > 0)|| (initScript != null)) {
    String asgName=null;
    LOG.info("Changing launch configuration");
    try {
      final List<TagDescription> tags=EucalyptusActivityTasks.getInstance().describeAutoScalingTags();
      for (      final TagDescription tag : tags) {
        if (DEFAULT_LAUNCHER_TAG.equals(tag.getValue())) {
          asgName=tag.getResourceId();
          break;
        }
      }
    }
 catch (    final Exception ex) {
      return;
    }
    if (asgName == null)     return;
    try {
      AutoScalingGroupType asgType=null;
      try {
        final DescribeAutoScalingGroupsResponseType resp=EucalyptusActivityTasks.getInstance().describeAutoScalingGroups(Lists.newArrayList(asgName));
        if (resp.getDescribeAutoScalingGroupsResult() != null && resp.getDescribeAutoScalingGroupsResult().getAutoScalingGroups() != null && resp.getDescribeAutoScalingGroupsResult().getAutoScalingGroups().getMember() != null && resp.getDescribeAutoScalingGroupsResult().getAutoScalingGroups().getMember().size() > 0) {
          asgType=resp.getDescribeAutoScalingGroupsResult().getAutoScalingGroups().getMember().get(0);
        }
      }
 catch (      final Exception ex) {
        LOG.warn("can't find autoscaling group named " + asgName);
        return;
      }
      if (asgType != null) {
        final String lcName=asgType.getLaunchConfigurationName();
        final LaunchConfigurationType lc=EucalyptusActivityTasks.getInstance().describeLaunchConfiguration(lcName);
        String tmpLaunchConfigName=null;
        do {
          tmpLaunchConfigName=String.format("lc-euca-internal-imaging-%s",UUID.randomUUID().toString().substring(0,8));
        }
 while (tmpLaunchConfigName.equals(asgType.getLaunchConfigurationName()));
        final String newEmi=emi != null ? emi : lc.getImageId();
        final String newType=instanceType != null ? instanceType : lc.getInstanceType();
        String newKeyname=keyname != null ? keyname : lc.getKeyName();
        String newUserdata=lc.getUserData();
        if (ntpServers != null) {
          newUserdata=B64.standard.encString(String.format("%s\n%s",getCredentialsString(),getWorkerUserData(ntpServers,ImagingServiceProperties.LOG_SERVER,ImagingServiceProperties.LOG_SERVER_PORT,ImagingServiceProperties.INIT_SCRIPT)));
        }
        if (logServer != null) {
          newUserdata=B64.standard.encString(String.format("%s\n%s",getCredentialsString(),getWorkerUserData(ImagingServiceProperties.NTP_SERVER,logServer,ImagingServiceProperties.LOG_SERVER_PORT,ImagingServiceProperties.INIT_SCRIPT)));
        }
        if (logServerPort != null) {
          newUserdata=B64.standard.encString(String.format("%s\n%s",getCredentialsString(),getWorkerUserData(ImagingServiceProperties.NTP_SERVER,ImagingServiceProperties.LOG_SERVER,logServerPort,ImagingServiceProperties.INIT_SCRIPT)));
        }
        if (initScript != null) {
          newUserdata=B64.standard.encString(String.format("%s\n%s",getCredentialsString(),getWorkerUserData(ImagingServiceProperties.NTP_SERVER,ImagingServiceProperties.LOG_SERVER,ImagingServiceProperties.LOG_SERVER_PORT,initScript)));
        }
        try {
          EucalyptusActivityTasks.getInstance().createLaunchConfiguration(newEmi,newType,lc.getIamInstanceProfile(),tmpLaunchConfigName,lc.getSecurityGroups().getMember().get(0),newKeyname,newUserdata);
        }
 catch (        final Exception ex) {
          LOG.warn("Failed to create temporary launch config",ex);
          throw new EucalyptusCloudException("failed to create temporary launch config",ex);
        }
        try {
          EucalyptusActivityTasks.getInstance().updateAutoScalingGroup(asgName,null,asgType.getDesiredCapacity(),tmpLaunchConfigName);
        }
 catch (        final Exception ex) {
          LOG.warn("Failed to update the autoscaling group",ex);
          throw new EucalyptusCloudException("failed to update the autoscaling group",ex);
        }
        try {
          EucalyptusActivityTasks.getInstance().deleteLaunchConfiguration(asgType.getLaunchConfigurationName());
        }
 catch (        final Exception ex) {
          LOG.warn("unable to delete the old launch configuration",ex);
        }
        try {
          EucalyptusActivityTasks.getInstance().createLaunchConfiguration(newEmi,newType,lc.getIamInstanceProfile(),asgType.getLaunchConfigurationName(),lc.getSecurityGroups().getMember().get(0),newKeyname,newUserdata);
        }
 catch (        final Exception ex) {
          throw new EucalyptusCloudException("unable to create the new launch config",ex);
        }
        try {
          EucalyptusActivityTasks.getInstance().updateAutoScalingGroup(asgName,null,asgType.getDesiredCapacity(),asgType.getLaunchConfigurationName());
        }
 catch (        final Exception ex) {
          throw new EucalyptusCloudException("failed to update the autoscaling group",ex);
        }
        try {
          EucalyptusActivityTasks.getInstance().deleteLaunchConfiguration(tmpLaunchConfigName);
        }
 catch (        final Exception ex) {
          LOG.warn("unable to delete the temporary launch configuration",ex);
        }
        if (emi != null) {
          try {
            final List<ImageDetails> images=EucalyptusActivityTasks.getInstance().describeImages(Lists.newArrayList(newEmi),false);
            for (            ResourceTag tag : images.get(0).getTagSet())             EucalyptusActivityTasks.getInstance().createOrUpdateAutoscalingTags(tag.getKey(),tag.getValue(),asgName);
          }
 catch (          final Exception ex) {
            LOG.warn("unable to propogate tags from image to ASG",ex);
          }
        }
        LOG.debug(String.format("autoscaling group '%s' was updated",asgName));
      }
    }
 catch (    final EucalyptusCloudException ex) {
      throw ex;
    }
catch (    final Exception ex) {
      throw new EucalyptusCloudException("Unable to update the autoscaling group",ex);
    }
  }
}
