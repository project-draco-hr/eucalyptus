{
  try (final TransactionResource tx=Entities.readOnlyDistinctTransactionFor(AccessKeyEntity.class)){
    final UserEntity user;
    try {
      user=(UserEntity)Entities.createCriteria(UserEntity.class).createCriteria("keys").add(Restrictions.eq("accessKey",keyId)).setFlushMode(FlushMode.MANUAL).setReadOnly(true).uniqueResult();
    }
 catch (    Exception e) {
      throw new InvalidAccessKeyAuthException("Failed to find access key",e);
    }
    if (user == null) {
      throw new InvalidAccessKeyAuthException("Failed to find access key");
    }
    final UserPrincipal principal=new UserPrincipalImpl(user);
    final Optional<AccessKey> accessKey=Iterables.tryFind(principal.getKeys(),CollectionUtils.propertyPredicate(keyId,AccessKeys.accessKeyIdentifier()));
    if (!Iterables.any(accessKey.asSet(),AccessKeys.isActive())) {
      throw new InvalidAccessKeyAuthException("Invalid access key or token");
    }
    return decorateCredentials(principal,nonce,accessKey.get().getSecretKey());
  }
 }
