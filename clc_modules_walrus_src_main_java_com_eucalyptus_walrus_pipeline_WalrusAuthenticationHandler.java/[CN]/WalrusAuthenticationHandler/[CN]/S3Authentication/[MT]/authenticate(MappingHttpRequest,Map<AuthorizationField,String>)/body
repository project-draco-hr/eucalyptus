{
  if (!authMap.get(AuthorizationField.Type).equals(AWS_AUTH_TYPE)) {
    throw new AccessDeniedException("Mismatch between expected and found authentication types");
  }
  String verb=httpRequest.getMethod().getName();
  String date=getDate(httpRequest);
  String addrString=getS3AddressString(httpRequest);
  String content_md5=httpRequest.getHeader("Content-MD5");
  content_md5=content_md5 == null ? "" : content_md5;
  String content_type=httpRequest.getHeader(WalrusProperties.CONTENT_TYPE);
  content_type=content_type == null ? "" : content_type;
  String securityToken=httpRequest.getHeader(WalrusProperties.X_AMZ_SECURITY_TOKEN);
  String canonicalizedAmzHeaders=getCanonicalizedAmzHeaders(httpRequest);
  String data=verb + "\n" + content_md5+ "\n"+ content_type+ "\n"+ date+ "\n"+ canonicalizedAmzHeaders+ addrString;
  String accessKeyId=authMap.get(AuthorizationField.AccessKeyId);
  String signature=authMap.get(AuthorizationField.Signature);
  try {
    Account account=Accounts.lookupAccessKeyById(accessKeyId).getUser().getAccount();
    if (!Account.OBJECT_STORAGE_WALRUS_ACCOUNT.equals(account.getName())) {
      throw new AccessDeniedException("walrus only accepts requests from " + Account.OBJECT_STORAGE_WALRUS_ACCOUNT);
    }
  }
 catch (  AuthException e) {
    throw new AccessDeniedException(e.getMessage());
  }
  try {
    SecurityContext.getLoginContext(new WalrusWrappedCredentials(httpRequest.getCorrelationId(),data,accessKeyId,signature,securityToken)).login();
  }
 catch (  Exception ex) {
    String servicePath=ComponentIds.lookup(WalrusBackend.class).getServicePath();
    if (addrString.startsWith(servicePath)) {
      try {
        String modifiedAddrString=addrString.replaceFirst(servicePath,"");
        data=verb + "\n" + content_md5+ "\n"+ content_type+ "\n"+ date+ "\n"+ canonicalizedAmzHeaders+ modifiedAddrString;
        SecurityContext.getLoginContext(new WalrusWrappedCredentials(httpRequest.getCorrelationId(),data,accessKeyId,signature,securityToken)).login();
      }
 catch (      Exception ex2) {
        LOG.error(ex2);
        throw new AccessDeniedException(ex2.getMessage());
      }
    }
 else {
      LOG.error(ex);
      throw new AccessDeniedException(ex.getMessage());
    }
  }
}
