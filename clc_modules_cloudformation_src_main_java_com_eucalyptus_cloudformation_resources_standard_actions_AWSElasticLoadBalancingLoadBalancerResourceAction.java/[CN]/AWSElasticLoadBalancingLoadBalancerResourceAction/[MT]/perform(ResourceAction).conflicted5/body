{
  AWSElasticLoadBalancingLoadBalancerResourceAction action=(AWSElasticLoadBalancingLoadBalancerResourceAction)resourceAction;
  ServiceConfiguration configuration=Topology.lookup(LoadBalancing.class);
  String effectiveAdminUserId=Accounts.lookupPrincipalByAccountNumber(Accounts.lookupPrincipalByUserId(action.info.getEffectiveUserId()).getAccountNumber()).getUserId();
  AddTagsType addSystemTagsType=MessageHelper.createPrivilegedMessage(AddTagsType.class,effectiveAdminUserId);
  addSystemTagsType.setLoadBalancerNames(getLoadBalancerNames(action));
  addSystemTagsType.setTags(TagHelper.convertToTagList(TagHelper.getCloudFormationResourceSystemTags(action.info,action.getStackEntity())));
  AsyncRequests.<AddTagsType,AddTagsResponseType>sendSync(configuration,addSystemTagsType);
  List<CloudFormationResourceTag> tags=TagHelper.getCloudFormationResourceStackTags(action.getStackEntity());
  if (action.properties.getTags() != null && !action.properties.getTags().isEmpty()) {
    TagHelper.checkReservedCloudFormationResourceTemplateTags(action.properties.getTags());
    tags.addAll(action.properties.getTags());
  }
  if (!tags.isEmpty()) {
    AddTagsType addTagsType=MessageHelper.createMessage(AddTagsType.class,action.info.getEffectiveUserId());
    addTagsType.setLoadBalancerNames(getLoadBalancerNames(action));
    addTagsType.setTags(TagHelper.convertToTagList(tags));
    AsyncRequests.<AddTagsType,AddTagsResponseType>sendSync(configuration,addTagsType);
  }
  return action;
}
