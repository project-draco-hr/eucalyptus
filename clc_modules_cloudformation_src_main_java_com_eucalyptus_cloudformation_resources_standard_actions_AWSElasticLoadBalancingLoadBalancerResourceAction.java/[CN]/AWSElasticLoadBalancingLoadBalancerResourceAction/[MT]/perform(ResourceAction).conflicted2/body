{
  AWSElasticLoadBalancingLoadBalancerResourceAction action=(AWSElasticLoadBalancingLoadBalancerResourceAction)resourceAction;
  ServiceConfiguration configuration=Topology.lookup(LoadBalancing.class);
  if (action.properties.getCrossZone() != null && action.properties.getCrossZone() == Boolean.TRUE) {
    ModifyLoadBalancerAttributesType modifyLoadBalancerAttributesType=MessageHelper.createMessage(ModifyLoadBalancerAttributesType.class,action.info.getEffectiveUserId());
    modifyLoadBalancerAttributesType.setLoadBalancerName(action.info.getPhysicalResourceId());
    LoadBalancerAttributes loadBalancerAttributes=new LoadBalancerAttributes();
    CrossZoneLoadBalancing crossZoneLoadBalancing=new CrossZoneLoadBalancing();
    crossZoneLoadBalancing.setEnabled(Boolean.TRUE);
    loadBalancerAttributes.setCrossZoneLoadBalancing(crossZoneLoadBalancing);
    modifyLoadBalancerAttributesType.setLoadBalancerAttributes(loadBalancerAttributes);
    AsyncRequests.<ModifyLoadBalancerAttributesType,ModifyLoadBalancerAttributesResponseType>sendSync(configuration,modifyLoadBalancerAttributesType);
  }
  return action;
}
