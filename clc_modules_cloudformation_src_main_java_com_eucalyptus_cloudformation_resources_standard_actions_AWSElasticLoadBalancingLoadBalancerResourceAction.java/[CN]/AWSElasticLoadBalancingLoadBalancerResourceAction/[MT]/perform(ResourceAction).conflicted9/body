{
  AWSElasticLoadBalancingLoadBalancerResourceAction action=(AWSElasticLoadBalancingLoadBalancerResourceAction)resourceAction;
  ServiceConfiguration configuration=Topology.lookup(LoadBalancing.class);
  if (!Boolean.TRUE.equals(action.info.getCreatedEnoughToDelete()))   return action;
  DescribeLoadBalancersType describeLoadBalancersType=MessageHelper.createMessage(DescribeLoadBalancersType.class,action.info.getEffectiveUserId());
  LoadBalancerNames loadBalancerNames=new LoadBalancerNames();
  ArrayList<String> member=Lists.newArrayList(action.info.getPhysicalResourceId());
  loadBalancerNames.setMember(member);
  describeLoadBalancersType.setLoadBalancerNames(loadBalancerNames);
  DescribeLoadBalancersResponseType describeLoadBalancersResponseType=AsyncRequests.<DescribeLoadBalancersType,DescribeLoadBalancersResponseType>sendSync(configuration,describeLoadBalancersType);
  if (describeLoadBalancersResponseType != null && describeLoadBalancersResponseType.getDescribeLoadBalancersResult() != null && describeLoadBalancersResponseType.getDescribeLoadBalancersResult().getLoadBalancerDescriptions() != null && describeLoadBalancersResponseType.getDescribeLoadBalancersResult().getLoadBalancerDescriptions().getMember() != null && describeLoadBalancersResponseType.getDescribeLoadBalancersResult().getLoadBalancerDescriptions().getMember().size() == 1) {
    DeleteLoadBalancerType deleteLoadBalancerType=MessageHelper.createMessage(DeleteLoadBalancerType.class,action.info.getEffectiveUserId());
    deleteLoadBalancerType.setLoadBalancerName(action.info.getPhysicalResourceId());
    AsyncRequests.<DeleteLoadBalancerType,DeleteLoadBalancerResponseType>sendSync(configuration,deleteLoadBalancerType);
  }
  return action;
}
