{
  final AWSElasticLoadBalancingLoadBalancerResourceAction action=(AWSElasticLoadBalancingLoadBalancerResourceAction)resourceAction;
  final ServiceConfiguration configuration=Topology.lookup(LoadBalancing.class);
  final boolean crossZone=action.properties.getCrossZone() != null && action.properties.getCrossZone() == Boolean.TRUE;
  final boolean idleTimeout=action.properties.getConnectionSettings() != null && action.properties.getConnectionSettings().getIdleTimeout() != null;
  if (crossZone || idleTimeout) {
    ModifyLoadBalancerAttributesType modifyLoadBalancerAttributesType=MessageHelper.createMessage(ModifyLoadBalancerAttributesType.class,action.info.getEffectiveUserId());
    modifyLoadBalancerAttributesType.setLoadBalancerName(action.info.getPhysicalResourceId());
    LoadBalancerAttributes loadBalancerAttributes=new LoadBalancerAttributes();
    if (crossZone) {
      CrossZoneLoadBalancing crossZoneLoadBalancing=new CrossZoneLoadBalancing();
      crossZoneLoadBalancing.setEnabled(Boolean.TRUE);
      loadBalancerAttributes.setCrossZoneLoadBalancing(crossZoneLoadBalancing);
    }
    if (idleTimeout) {
      ConnectionSettings connectionSettings=new ConnectionSettings();
      connectionSettings.setIdleTimeout(action.properties.getConnectionSettings().getIdleTimeout());
      loadBalancerAttributes.setConnectionSettings(connectionSettings);
    }
    modifyLoadBalancerAttributesType.setLoadBalancerAttributes(loadBalancerAttributes);
    AsyncRequests.<ModifyLoadBalancerAttributesType,ModifyLoadBalancerAttributesResponseType>sendSync(configuration,modifyLoadBalancerAttributesType);
  }
  return action;
}
