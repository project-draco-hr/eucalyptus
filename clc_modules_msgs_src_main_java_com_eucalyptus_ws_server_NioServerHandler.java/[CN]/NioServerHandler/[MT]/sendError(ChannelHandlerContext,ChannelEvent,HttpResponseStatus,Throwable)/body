{
  Logs.exhaust().error(t,t);
  HttpResponseStatus status=restStatus;
  ChannelBuffer buffer=null;
  Map<String,String> headers=Collections.emptyMap();
  final ExceptionMarshallerHandler exceptionMarshallerHandler=ctx.getPipeline().get(ExceptionMarshallerHandler.class);
  if (exceptionMarshallerHandler != null) {
    try {
      final ExceptionMarshallerHandler.ExceptionResponse exceptionResponse=exceptionMarshallerHandler.marshallException(event,status,t);
      status=exceptionResponse.getStatus();
      buffer=exceptionResponse.getContent();
      headers=exceptionResponse.getHeaders();
    }
 catch (    Exception e) {
      Logs.exhaust().error(e,e);
    }
  }
  if (buffer == null) {
    buffer=ChannelBuffers.copiedBuffer(Binding.createRestFault(status.toString(),t.getMessage(),Logs.isExtrrreeeme() ? Exceptions.string(t) : t.getMessage()),"UTF-8");
  }
  final HttpResponse response=new DefaultHttpResponse(HttpVersion.HTTP_1_1,status);
  response.setHeader(HttpHeaders.Names.CONTENT_TYPE,"text/plain; charset=UTF-8");
  response.setHeader(HttpHeaders.Names.CONTENT_LENGTH,String.valueOf(buffer.readableBytes()));
  for (  final Map.Entry<String,String> headerEntry : headers.entrySet()) {
    response.setHeader(headerEntry.getKey(),headerEntry.getValue());
  }
  response.setContent(buffer);
  ChannelFuture writeFuture=Channels.future(ctx.getChannel());
  writeFuture.addListener(ChannelFutureListener.CLOSE);
  response.addHeader(HttpHeaders.Names.CONNECTION,HttpHeaders.Values.CLOSE);
  if (ctx.getChannel().isConnected()) {
    Channels.write(ctx,writeFuture,response);
  }
}
