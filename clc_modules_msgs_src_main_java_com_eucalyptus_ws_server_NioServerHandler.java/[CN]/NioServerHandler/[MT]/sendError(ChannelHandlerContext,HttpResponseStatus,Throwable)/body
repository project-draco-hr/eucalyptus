{
  Logs.exhaust().error(t,t);
  HttpResponseStatus status=restStatus;
  ChannelBuffer buffer=null;
  Optional<String> contentType=Optional.absent();
  if (ctx.getPipeline().get(SoapMarshallingHandler.class) != null) {
    final SOAPEnvelope soapEnvelope=Binding.createFault(status.getCode() < 500 ? "soapenv:Client" : "soapenv:Server",t.getMessage(),Logs.isExtrrreeeme() ? Exceptions.string(t) : t.getMessage());
    try {
      final ByteArrayOutputStream byteOut=new ByteArrayOutputStream();
      HoldMe.canHas.lock();
      try {
        soapEnvelope.serialize(byteOut);
      }
  finally {
        HoldMe.canHas.unlock();
      }
      status=HttpResponseStatus.INTERNAL_SERVER_ERROR;
      buffer=ChannelBuffers.wrappedBuffer(byteOut.toByteArray());
      contentType=Optional.of("text/xml; charset=UTF-8");
    }
 catch (    Exception e) {
      Logs.exhaust().error(e,e);
    }
  }
  if (buffer == null) {
    buffer=ChannelBuffers.copiedBuffer(Binding.createRestFault(status.toString(),t.getMessage(),Logs.isExtrrreeeme() ? Exceptions.string(t) : t.getMessage()),"UTF-8");
  }
  final HttpResponse response=new DefaultHttpResponse(HttpVersion.HTTP_1_1,status);
  response.addHeader(HttpHeaders.Names.CONTENT_TYPE,contentType.or("text/plain; charset=UTF-8"));
  response.addHeader(HttpHeaders.Names.CONTENT_LENGTH,String.valueOf(buffer.readableBytes()));
  response.setContent(buffer);
  ChannelFuture writeFuture=Channels.future(ctx.getChannel());
  writeFuture.addListener(ChannelFutureListener.CLOSE);
  response.addHeader(HttpHeaders.Names.CONNECTION,HttpHeaders.Values.CLOSE);
  if (ctx.getChannel().isConnected()) {
    Channels.write(ctx,writeFuture,response);
  }
}
