{
  ConfigurationContext configurationContext=msgContext.getConfigurationContext();
  final String servicePath=configurationContext.getServiceContextPath();
  final String contextPath=(servicePath.startsWith("/") ? servicePath : "/" + servicePath) + "/";
  String uri=request.getRequestURI();
  String method=request.getMethod();
  String soapAction=HttpUtils.getSoapAction(request);
  Handler.InvocationResponse pi=null;
  msgContext.setProperty(REAL_HTTP_REQUEST,request);
  msgContext.setProperty(REAL_HTTP_RESPONSE,response);
  Header[] headers=request.getHeaders(HTTP.CONTENT_LEN);
  if (headers != null && headers.length > 0) {
    String contentLength=headers[0].getValue();
    msgContext.setProperty(HTTP.CONTENT_LEN,contentLength);
  }
  if (method.equals(HTTPConstants.HEADER_GET)) {
    if ((uri.startsWith("/latest/") || uri.matches("/\\d\\d\\d\\d-\\d\\d-\\d\\d/.*")) && handleMetaData(response,msgContext,uri))     return;
    if (!uri.startsWith(contextPath)) {
      response.setStatus(HttpStatus.SC_MOVED_PERMANENTLY);
      response.addHeader(new BasicHeader("Location",(contextPath + uri).replaceAll("//","/")));
      return;
    }
    if (uri.endsWith("services/")) {
      handleServicesList(response,configurationContext);
      return;
    }
    pi=handleGet(request,response,msgContext);
  }
 else   if (method.equals(HTTPConstants.HEADER_POST)) {
    String contentType=request.getContentType();
    if (HTTPTransportUtils.isRESTRequest(contentType))     pi=Axis2HttpWorker.processXMLRequest(msgContext,request.getInputStream(),response.getOutputStream(),contentType);
 else {
      String ip=(String)msgContext.getProperty(MessageContext.TRANSPORT_ADDR);
      if (ip != null)       uri=ip + uri;
      pi=HTTPTransportUtils.processHTTPPostRequest(msgContext,request.getInputStream(),response.getOutputStream(),contentType,soapAction,uri);
    }
  }
 else   if (method.equals(HTTPConstants.HEADER_PUT)) {
    String contentType=request.getContentType();
    msgContext.setProperty(Constants.Configuration.CONTENT_TYPE,contentType);
    pi=Axis2HttpWorker.processXMLRequest(msgContext,request.getInputStream(),response.getOutputStream(),contentType);
  }
 else   if (method.equals(HTTPConstants.HEADER_DELETE))   pi=Axis2HttpWorker.processURLRequest(msgContext,response.getOutputStream(),null);
 else   if (method.equals("HEAD"))   pi=Axis2HttpWorker.processURLRequest(msgContext,response.getOutputStream(),null);
 else   throw new MethodNotSupportedException(method + " method not supported");
  Boolean holdResponse=(Boolean)msgContext.getProperty(RequestResponseTransport.HOLD_RESPONSE);
  if (pi.equals(Handler.InvocationResponse.SUSPEND) || (holdResponse != null && Boolean.TRUE.equals(holdResponse)))   try {
    ((RequestResponseTransport)msgContext.getProperty(RequestResponseTransport.TRANSPORT_CONTROL)).awaitResponse();
  }
 catch (  InterruptedException e) {
    throw new IOException("We were interrupted, so this may not function correctly:" + e.getMessage());
  }
  RequestResponseTransport requestResponseTransportControl=(RequestResponseTransport)msgContext.getProperty(RequestResponseTransport.TRANSPORT_CONTROL);
  if (TransportUtils.isResponseWritten(msgContext) || ((requestResponseTransportControl != null) && requestResponseTransportControl.getStatus().equals(RequestResponseTransport.RequestResponseTransportStatus.SIGNALLED)))   ;
 else   response.setStatus(HttpStatus.SC_ACCEPTED);
  Integer status=(Integer)msgContext.getProperty(HTTP_STATUS);
  if (status != null)   response.setStatus(status);
}
