{
  CorsRule corsRule=new CorsRule();
  try {
    String id=parser.getValue(node,"ID");
    if (id != null && id.length() > 0) {
      corsRule.setId(id);
    }
    String maxAgeSecondsString=parser.getValue(node,"MaxAgeSeconds");
    if (maxAgeSecondsString != null) {
      try {
        int maxAgeSeconds=Integer.parseInt(maxAgeSecondsString);
        if (maxAgeSeconds > 0) {
          corsRule.setMaxAgeSeconds(maxAgeSeconds);
        }
      }
 catch (      NumberFormatException nfe) {
      }
    }
    List<String> corsAllowedMethods=extractCorsElementList(parser,node,"AllowedMethod");
    if (corsAllowedMethods != null) {
      for (      String corsAllowedMethod : corsAllowedMethods) {
        if (!AllowedCorsMethods.methodList.contains(HttpMethod.valueOf(corsAllowedMethod))) {
          CorsConfigUnsupportedMethodException s3e=new CorsConfigUnsupportedMethodException(corsAllowedMethod);
          throw s3e;
        }
      }
    }
    corsRule.setAllowedMethods(corsAllowedMethods);
    corsRule.setAllowedOrigins(extractCorsElementList(parser,node,"AllowedOrigin"));
    corsRule.setAllowedHeaders(extractCorsElementList(parser,node,"AllowedHeader"));
    corsRule.setExposeHeaders(extractCorsElementList(parser,node,"ExposeHeader"));
  }
 catch (  S3Exception e) {
    throw e;
  }
catch (  Exception ex) {
    MalformedXMLException e=new MalformedXMLException("/CORSConfiguration/CORSRule");
    e.initCause(ex);
    throw e;
  }
  return corsRule;
}
