{
  if (headerString.equals(ObjectStorageProperties.ExtendedGetHeaders.Range.toString())) {
    Matcher matcher=ObjectStorageProperties.RANGE_HEADER_PATTERN.matcher(value);
    if (matcher.matches()) {
      if (matcher.groupCount() > 0) {
        Long start=null;
        Long end=null;
        boolean parseError=false;
        for (int i=1; i <= matcher.groupCount(); i++) {
          String position=matcher.group(i);
          if (StringUtils.isNotBlank(position)) {
            try {
              if (i == 1) {
                start=Long.parseLong(position);
              }
 else {
                end=Long.parseLong(position);
              }
            }
 catch (            NumberFormatException e) {
              LOG.debug("Cannot parse string \"" + position + "\" to long ");
              parseError=true;
              break;
            }
          }
        }
        if (!parseError) {
          if (start != null) {
            operationParams.put(ObjectStorageProperties.ExtendedHeaderRangeTypes.ByteRangeStart.toString(),start);
          }
          if (end != null) {
            operationParams.put(ObjectStorageProperties.ExtendedHeaderRangeTypes.ByteRangeEnd.toString(),end);
          }
        }
 else {
          LOG.debug("Dropping the Range header since its value: " + value + " cannot be parsed");
        }
      }
 else {
        LOG.debug("Dropping the Range header since its value: " + value + " does not contain any matching groups against the pattern: "+ ObjectStorageProperties.RANGE_HEADER_PATTERN.toString());
      }
    }
 else {
      LOG.debug("Dropping the Range header since its value: " + value + " does not match pattern: "+ ObjectStorageProperties.RANGE_HEADER_PATTERN.toString());
    }
  }
 else   if (ObjectStorageProperties.ExtendedHeaderDateTypes.contains(headerString)) {
    try {
      List<String> dateFormats=new ArrayList<String>();
      dateFormats.add(DateUtil.PATTERN_RFC1123);
      operationParams.put(headerString,DateUtil.parseDate(value,dateFormats));
    }
 catch (    Exception ex) {
      try {
        operationParams.put(headerString,DateUtils.parseIso8601DateTime(value));
      }
 catch (      ParseException e) {
        throw new BindingException("Error parsing date: " + value,e);
      }
    }
  }
 else {
    operationParams.put(headerString,value);
  }
}
