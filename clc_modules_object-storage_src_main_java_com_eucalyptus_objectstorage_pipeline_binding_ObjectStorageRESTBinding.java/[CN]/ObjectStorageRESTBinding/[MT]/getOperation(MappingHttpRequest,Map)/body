{
  String[] target=null;
  String path=getOperationPath(httpRequest);
  boolean objectstorageInternalOperation=false;
  String targetHost=httpRequest.getHeader(HttpHeaders.Names.HOST);
  if (targetHost.contains(".objectstorage")) {
    String bucket=targetHost.substring(0,targetHost.indexOf(".objectstorage"));
    path="/" + bucket + path;
  }
  if (path.length() > 0) {
    target=OSGUtil.getTarget(path);
  }
  String verb=httpRequest.getMethod().getName();
  String operationKey="";
  Map<String,String> params=httpRequest.getParameters();
  String operationName=null;
  long contentLength=0;
  String contentLengthString=httpRequest.getHeader(HttpHeaders.Names.CONTENT_LENGTH);
  if (contentLengthString != null) {
    contentLength=Long.parseLong(contentLengthString);
  }
  if (target == null) {
    operationKey=SERVICE + verb;
  }
 else   if (target.length < 2) {
    if (!target[0].equals("")) {
      operationKey=BUCKET + verb;
      operationParams.put("Bucket",target[0]);
      operationParams.put("Operation",verb.toUpperCase() + "." + "BUCKET");
      if (verb.equals(ObjectStorageProperties.HTTPVerb.POST.toString())) {
        Map formFields=httpRequest.getFormFields();
        String objectKey=null;
        String file=(String)formFields.get(ObjectStorageProperties.FormField.file.toString());
        if (formFields.containsKey(ObjectStorageProperties.FormField.key.toString())) {
          objectKey=(String)formFields.get(ObjectStorageProperties.FormField.key.toString());
          objectKey=objectKey.replaceAll("\\$\\{filename\\}",file);
          operationParams.put("Key",objectKey);
        }
        if (formFields.containsKey(ObjectStorageProperties.FormField.acl.toString())) {
          String acl=(String)formFields.get(ObjectStorageProperties.FormField.acl.toString());
          httpRequest.addHeader(ObjectStorageProperties.AMZ_ACL,acl);
        }
        if (formFields.containsKey(ObjectStorageProperties.FormField.redirect.toString())) {
          String successActionRedirect=(String)formFields.get(ObjectStorageProperties.FormField.redirect.toString());
          operationParams.put("SuccessActionRedirect",successActionRedirect);
        }
        if (formFields.containsKey(ObjectStorageProperties.FormField.success_action_redirect.toString())) {
          String successActionRedirect=(String)formFields.get(ObjectStorageProperties.FormField.success_action_redirect.toString());
          operationParams.put("SuccessActionRedirect",successActionRedirect);
        }
        if (formFields.containsKey(ObjectStorageProperties.FormField.success_action_status.toString())) {
          Integer successActionStatus=Integer.parseInt((String)formFields.get(ObjectStorageProperties.FormField.success_action_status.toString()));
          if (successActionStatus == 200 || successActionStatus == 201) {
            operationParams.put("SuccessActionStatus",successActionStatus);
          }
 else {
            operationParams.put("SuccessActionStatus",204);
          }
        }
 else {
          operationParams.put("SuccessActionStatus",204);
        }
        if (formFields.containsKey(HttpHeaders.Names.CONTENT_TYPE)) {
          operationParams.put("ContentType",formFields.get(HttpHeaders.Names.CONTENT_TYPE));
        }
        if (formFields.get(ObjectStorageProperties.UPLOAD_LENGTH_FIELD) != null) {
          operationParams.put("ContentLength",(long)formFields.get(ObjectStorageProperties.IGNORE_PREFIX + "FileContentLength"));
        }
 else {
          throw new MalformedPOSTRequestException("Could not calculate upload content length from request");
        }
        key=target[0] + "." + objectKey;
        ChannelBuffer buffer=(ChannelBuffer)formFields.get(ObjectStorageProperties.FIRST_CHUNK_FIELD);
        if (buffer == null) {
          LOG.trace("No data content found for POST upload");
          throw new MalformedPOSTRequestException("No upload content found");
        }
      }
 else       if (ObjectStorageProperties.HTTPVerb.PUT.toString().equals(verb)) {
        if (params.containsKey(ObjectStorageProperties.BucketParameter.logging.toString())) {
          getTargetBucketParams(operationParams,httpRequest);
        }
 else         if (params.containsKey(ObjectStorageProperties.BucketParameter.versioning.toString())) {
          getVersioningStatus(operationParams,httpRequest);
        }
      }
    }
 else {
      operationKey=SERVICE + verb;
    }
  }
 else {
    operationKey=OBJECT + verb;
    String objectKey="";
    String splitOn="";
    for (int i=1; i < target.length; ++i) {
      objectKey+=splitOn + target[i];
      splitOn="/";
    }
    try {
      objectKey=OSGUtil.URLdecode(objectKey);
    }
 catch (    UnsupportedEncodingException e) {
      throw new BindingException("Unable to get key: " + e.getMessage());
    }
    operationParams.put("Bucket",target[0]);
    operationParams.put("Key",objectKey);
    operationParams.put("Operation",verb.toUpperCase() + "." + "OBJECT");
    if (!params.containsKey(ObjectStorageProperties.BucketParameter.acl.toString())) {
      if (verb.equals(ObjectStorageProperties.HTTPVerb.PUT.toString())) {
        if (httpRequest.containsHeader(ObjectStorageProperties.COPY_SOURCE.toString())) {
          String copySource=httpRequest.getHeader(ObjectStorageProperties.COPY_SOURCE.toString());
          try {
            copySource=OSGUtil.URLdecode(copySource);
          }
 catch (          UnsupportedEncodingException ex) {
            throw new BindingException("Unable to decode copy source: " + copySource);
          }
          String[] sourceParts=copySource.split("\\?");
          if (sourceParts.length > 1) {
            operationParams.put("SourceVersionId",sourceParts[1].replaceFirst("versionId=","").trim());
          }
          copySource=sourceParts[0];
          String[] sourceTarget=OSGUtil.getTarget(copySource);
          String sourceObjectKey="";
          String sourceSplitOn="";
          if (sourceTarget.length > 1) {
            for (int i=1; i < sourceTarget.length; ++i) {
              sourceObjectKey+=sourceSplitOn + sourceTarget[i];
              sourceSplitOn="/";
            }
            operationParams.put("SourceBucket",sourceTarget[0]);
            operationParams.put("SourceObject",sourceObjectKey);
            operationParams.put("DestinationBucket",operationParams.remove("Bucket"));
            operationParams.put("DestinationObject",operationParams.remove("Key"));
            String metaDataDirective=httpRequest.getHeader(ObjectStorageProperties.METADATA_DIRECTIVE.toString());
            if (metaDataDirective != null) {
              operationParams.put("MetadataDirective",metaDataDirective);
            }
            AccessControlList accessControlList;
            if (contentLength > 0) {
              accessControlList=null;
              accessControlList=getAccessControlList(httpRequest);
            }
 else {
              accessControlList=new AccessControlList();
            }
            operationParams.put("AccessControlList",accessControlList);
            operationKey+=ObjectStorageProperties.COPY_SOURCE.toString();
            Set<String> headerNames=httpRequest.getHeaderNames();
            for (            String key : headerNames) {
              for (              ObjectStorageProperties.CopyHeaders header : ObjectStorageProperties.CopyHeaders.values()) {
                if (key.replaceAll("-","").equals(header.toString().toLowerCase())) {
                  String value=httpRequest.getHeader(key);
                  parseExtendedHeaders(operationParams,header.toString(),value);
                }
              }
            }
          }
 else {
            throw new BindingException("Malformed COPY request");
          }
        }
 else {
          key=target[0] + "." + objectKey;
          String contentType=httpRequest.getHeader(HttpHeaders.Names.CONTENT_TYPE);
          if (contentType != null)           operationParams.put("ContentType",contentType);
          String contentDisposition=httpRequest.getHeader("Content-Disposition");
          if (contentDisposition != null)           operationParams.put("ContentDisposition",contentDisposition);
          String contentMD5=httpRequest.getHeader(HttpHeaders.Names.CONTENT_MD5);
          if (contentMD5 != null)           operationParams.put("ContentMD5",contentMD5);
          if (contentLengthString != null)           operationParams.put("ContentLength",(new Long(contentLength).toString()));
        }
      }
 else       if (verb.equals(ObjectStorageProperties.HTTPVerb.GET.toString())) {
        if (!objectstorageInternalOperation) {
          if (params.containsKey("torrent")) {
            operationParams.put("GetTorrent",Boolean.TRUE);
          }
 else {
            if (!params.containsKey("uploadId")) {
              operationParams.put("InlineData",Boolean.FALSE);
              operationParams.put("GetMetaData",Boolean.TRUE);
            }
          }
          Set<String> headerNames=httpRequest.getHeaderNames();
          boolean isExtendedGet=false;
          for (          String key : headerNames) {
            for (            ObjectStorageProperties.ExtendedGetHeaders header : ObjectStorageProperties.ExtendedGetHeaders.values()) {
              if (key.replaceAll("-","").equals(header.toString())) {
                String value=httpRequest.getHeader(key);
                isExtendedGet=true;
                parseExtendedHeaders(operationParams,header.toString(),value);
              }
            }
          }
          if (isExtendedGet) {
            operationKey+="extended";
            operationParams.put("ReturnCompleteObjectOnConditionFailure",Boolean.FALSE);
          }
        }
        if (params.containsKey(ObjectStorageProperties.GetOptionalParameters.IsCompressed.toString())) {
          Boolean isCompressed=Boolean.parseBoolean(params.remove(ObjectStorageProperties.GetOptionalParameters.IsCompressed.toString()));
          operationParams.put("IsCompressed",isCompressed);
        }
      }
 else       if (verb.equals(ObjectStorageProperties.HTTPVerb.POST.toString())) {
        if (params.containsKey("uploadId")) {
          operationParams.put("Parts",getPartsList(httpRequest));
        }
      }
    }
    if (params.containsKey(ObjectStorageProperties.ObjectParameter.versionId.toString())) {
      if (!verb.equals(ObjectStorageProperties.HTTPVerb.DELETE.toString()))       operationParams.put("VersionId",params.remove(ObjectStorageProperties.ObjectParameter.versionId.toString()));
    }
  }
  if (verb.equals(ObjectStorageProperties.HTTPVerb.PUT.toString()) && params.containsKey(ObjectStorageProperties.BucketParameter.acl.toString())) {
    operationParams.put("AccessControlPolicy",getAccessControlPolicy(httpRequest));
  }
  if (verb.equals(ObjectStorageProperties.HTTPVerb.PUT.toString()) && params.containsKey(ObjectStorageProperties.BucketParameter.lifecycle.toString())) {
    operationParams.put("lifecycleConfiguration",getLifecycle(httpRequest));
  }
  ArrayList paramsToRemove=new ArrayList();
  boolean addMore=true;
  Iterator iterator=params.keySet().iterator();
  while (iterator.hasNext()) {
    Object key=iterator.next();
    String keyString=key.toString();
    boolean dontIncludeParam=false;
    for (    ObjectStorageAuthenticationHandler.SecurityParameter securityParam : ObjectStorageAuthenticationHandler.SecurityParameter.values()) {
      if (keyString.equals(securityParam.toString().toLowerCase())) {
        dontIncludeParam=true;
        break;
      }
    }
    if (!dontIncludeParam) {
      String value=params.get(key);
      if (value != null) {
        String[] keyStringParts=keyString.split("-");
        if (keyStringParts.length > 1) {
          keyString="";
          for (int i=0; i < keyStringParts.length; ++i) {
            keyString+=toUpperFirst(keyStringParts[i]);
          }
        }
 else {
          keyString=toUpperFirst(keyString);
        }
      }
      dontIncludeParam=true;
      if (operationKey.startsWith(SERVICE)) {
        for (        ObjectStorageProperties.ServiceParameter param : ObjectStorageProperties.ServiceParameter.values()) {
          if (keyString.toLowerCase().equals(param.toString().toLowerCase())) {
            dontIncludeParam=false;
            break;
          }
        }
      }
 else       if (operationKey.startsWith(BUCKET)) {
        for (        ObjectStorageProperties.BucketParameter param : ObjectStorageProperties.BucketParameter.values()) {
          if (keyString.toLowerCase().equals(param.toString().toLowerCase())) {
            dontIncludeParam=false;
            break;
          }
        }
      }
 else       if (operationKey.startsWith(OBJECT)) {
        for (        ObjectStorageProperties.ObjectParameter param : ObjectStorageProperties.ObjectParameter.values()) {
          if (keyString.toLowerCase().equals(param.toString().toLowerCase())) {
            dontIncludeParam=false;
            break;
          }
        }
      }
      if (dontIncludeParam) {
        paramsToRemove.add(key);
      }
    }
    if (dontIncludeParam)     continue;
    String value=params.get(key);
    if (value != null) {
      operationParams.put(keyString,value);
    }
    for (    ObjectStorageProperties.SubResource subResource : ObjectStorageProperties.SubResource.values()) {
      if (keyString.toLowerCase().equals(subResource.toString().toLowerCase())) {
        operationKey+=keyString.toLowerCase();
      }
    }
    paramsToRemove.add(key);
  }
  for (  Object key : paramsToRemove) {
    params.remove(key);
  }
  if (!objectstorageInternalOperation) {
    operationName=operationMap.get(operationKey);
  }
  if (operationName == null) {
    String unsupportedOp=unsupportedOperationMap.get(operationKey);
    if (unsupportedOp != null) {
      String resourceType=null;
      String resource=null;
      if (target.length < 2) {
        resourceType=BUCKET;
        resource=target[0];
      }
 else {
        resourceType=OBJECT;
        String delimiter=new String();
        for (int i=1; i < target.length; ++i) {
          resource+=delimiter + target[i];
          delimiter="/";
        }
      }
      NotImplementedException e=new NotImplementedException();
      e.setResource(resource);
      e.setResourceType(resourceType);
      e.setMessage(unsupportedOp + " is not implemented");
      throw e;
    }
  }
  if ("CreateBucket".equals(operationName)) {
    String locationConstraint=getLocationConstraint(httpRequest);
    if (locationConstraint != null)     operationParams.put("LocationConstraint",locationConstraint);
  }
  return operationName;
}
