{
  final FilteredPipeline candidate=null;
  for (  final FilteredPipeline f : pipelines) {
    if (f.checkAccepts(request)) {
      return f;
    }
  }
  if (request.getHeader(HttpHeaders.Names.HOST).contains("amazonaws.com")) {
    String hostHeader=request.getHeader(HttpHeaders.Names.HOST);
    LOG.debug("Trying to intercept request for " + hostHeader);
    for (    final FilteredPipeline f : pipelines) {
      if (Ats.from(f).has(ComponentPart.class)) {
        Class<? extends ComponentId> compIdClass=Ats.from(f).get(ComponentPart.class).value();
        if (Ats.from(compIdClass).has(AwsServiceName.class)) {
          String awsServiceName=Ats.from(compIdClass).get(AwsServiceName.class).value();
          if (request.getHeader(HttpHeaders.Names.HOST).startsWith(awsServiceName)) {
            if (request.getHeaderNames().contains("SOAPAction") && f.addHandlers(Channels.pipeline()).get(SoapHandler.class) != null) {
              LOG.debug("Intercepting request for " + hostHeader + " using "+ f.getClass());
              return f;
            }
 else             if (!request.getHeaderNames().contains("SOAPAction") && f.addHandlers(Channels.pipeline()).get(SoapHandler.class) == null) {
              return f;
            }
          }
        }
      }
    }
  }
  if (candidate == null) {
    for (    final FilteredPipeline f : internalPipelines) {
      if (f.checkAccepts(request)) {
        return f;
      }
    }
  }
  return candidate;
}
