{
  if (FilteredPipeline.class.isAssignableFrom(candidate) && !Modifier.isAbstract(candidate.getModifiers()) && !Modifier.isInterface(candidate.getModifiers())&& Ats.from(candidate).has(ComponentPart.class)) {
    try {
      final ComponentId compId=Ats.from(candidate).get(ComponentPart.class).value().newInstance();
      final Class<? extends FilteredPipeline> pipelineClass=candidate;
      final FilteredPipeline pipeline=Classes.newInstance(pipelineClass);
      Pipelines.pipelines.add(pipeline);
      return true;
    }
 catch (    final Exception ex) {
      LOG.trace(ex,ex);
      return false;
    }
  }
 else   if (ChannelPipelineFactory.class.isAssignableFrom(candidate) && !Modifier.isAbstract(candidate.getModifiers()) && !Modifier.isInterface(candidate.getModifiers())&& Ats.from(candidate).has(ComponentPart.class)) {
    try {
      final ComponentId compId=Ats.from(candidate).get(ComponentPart.class).value().newInstance();
      final Class<? extends ChannelPipelineFactory> pipelineClass=candidate;
      final ChannelPipelineFactory pipeline=Classes.newInstance(pipelineClass);
      Pipelines.clientPipelines.put(compId.getClass(),pipeline);
      return true;
    }
 catch (    final Exception ex) {
      LOG.trace(ex,ex);
      return false;
    }
  }
 else {
    return false;
  }
}
