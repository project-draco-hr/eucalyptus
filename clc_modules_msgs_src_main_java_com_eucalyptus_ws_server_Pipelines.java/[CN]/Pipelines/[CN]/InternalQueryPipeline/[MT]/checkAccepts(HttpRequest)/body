{
  if (message instanceof MappingHttpRequest) {
    final MappingHttpRequest httpRequest=(MappingHttpRequest)message;
    final boolean noPath=message.getUri().isEmpty() || message.getUri().equals("/") || message.getUri().startsWith("/?");
    if (!(message.getUri().startsWith(this.servicePath) || message.getUri().startsWith(this.internalServicePath)) && !(noPath && resolvesByHost(message.getHeader(HttpHeaders.Names.HOST)))) {
      return false;
    }
    if (httpRequest.getMethod().equals(HttpMethod.POST) && !message.getHeaderNames().contains("SOAPAction")) {
      final Map<String,String> parameters=new HashMap<>(httpRequest.getParameters());
      final Set<String> nonQueryParameters=Sets.newHashSet();
      final String query=httpRequest.getContentAsString();
      for (      final String p : query.split("&")) {
        final String[] splitParam=p.split("=");
        String lhs=splitParam[0];
        String rhs=splitParam.length == 2 ? splitParam[1] : null;
        try {
          if (lhs != null)           lhs=new URLCodec().decode(lhs);
        }
 catch (        final DecoderException e) {
        }
        try {
          if (rhs != null)           rhs=new URLCodec().decode(rhs);
        }
 catch (        final DecoderException e) {
        }
        parameters.put(lhs,rhs);
        nonQueryParameters.add(lhs);
      }
      for (      final RequiredQueryParams p : RequiredQueryParams.values()) {
        if (!parameters.containsKey(p.toString())) {
          return false;
        }
      }
      httpRequest.getParameters().putAll(parameters);
      httpRequest.addNonQueryParameterKeys(nonQueryParameters);
    }
 else {
      for (      final RequiredQueryParams p : RequiredQueryParams.values()) {
        if (!httpRequest.getParameters().containsKey(p.toString())) {
          return false;
        }
      }
    }
    return true;
  }
  return false;
}
