{
  final Object o=event.getMessage();
  if (o instanceof MappingHttpMessage) {
    try {
      final MappingHttpMessage httpRequest=(MappingHttpMessage)o;
      OMElement elem=null;
      Document doc=null;
      SOAPEnvelope env=httpRequest.getSoapEnvelope();
      HoldMe.canHas.lock();
      try {
        final StAXOMBuilder doomBuilder=HoldMe.getStAXOMBuilder(HoldMe.getDOOMFactory(),env.getXMLStreamReader());
        elem=doomBuilder.getDocumentElement();
        elem.build();
        doc=((Element)elem).getOwnerDocument();
      }
  finally {
        HoldMe.canHas.unlock();
      }
      final List<WSEncryptionPart> partsToSign=Lists.newArrayList();
      final WSSecHeader wsheader=new WSSecHeader("",false);
      try {
        wsheader.insertSecurityHeader(doc);
      }
 catch (      WSSecurityException e) {
        LOG.error(e,e);
        Channels.fireExceptionCaught(ctx,e);
      }
      final WSSecSignature signer=new WSSecSignature();
      final WSSConfig config=WSSConfig.getNewInstance();
      config.setWsiBSPCompliant(false);
      signer.setWsConfig(config);
      signer.setKeyIdentifierType(WSConstants.BST_DIRECT_REFERENCE);
      signer.setSigCanonicalization(WSConstants.C14N_EXCL_OMIT_COMMENTS);
      try {
        signer.prepare(doc,this.credentials,wsheader);
      }
 catch (      WSSecurityException e) {
        LOG.error(doc);
        LOG.error(e,e);
        Channels.fireExceptionCaught(ctx,e);
      }
      if (this.shouldTimeStamp()) {
        final WSSecTimestamp ts=new WSSecTimestamp();
        ts.setTimeToLive(300);
        ts.prepare(doc);
        ts.prependToHeader(wsheader);
      }
      partsToSign.addAll(this.getSignatureParts());
      signer.appendBSTElementToHeader(wsheader);
      List<Reference> references=null;
      try {
        references=signer.addReferencesToSign(partsToSign,wsheader);
      }
 catch (      WSSecurityException e) {
        LOG.error(doc);
        LOG.error(e,e);
        Channels.fireExceptionCaught(ctx,e);
      }
      try {
        signer.computeSignature(references,false,null);
      }
 catch (      WSSecurityException e) {
        LOG.error(doc);
        LOG.error(e,e);
        Channels.fireExceptionCaught(ctx,e);
      }
      SOAPEnvelope envelope=null;
      HoldMe.canHas.lock();
      try {
        final StAXSOAPModelBuilder stAXSOAPModelBuilder=new StAXSOAPModelBuilder(elem.getXMLStreamReader(),HoldMe.getOMSOAP11Factory(),null);
        envelope=stAXSOAPModelBuilder.getSOAPEnvelope();
        if (envelope != null)         envelope.build();
      }
  finally {
        HoldMe.canHas.unlock();
      }
      httpRequest.setSoapEnvelope(envelope);
    }
 catch (    OMException e) {
      LOG.error(e,e);
      Channels.fireExceptionCaught(ctx,e);
    }
  }
}
