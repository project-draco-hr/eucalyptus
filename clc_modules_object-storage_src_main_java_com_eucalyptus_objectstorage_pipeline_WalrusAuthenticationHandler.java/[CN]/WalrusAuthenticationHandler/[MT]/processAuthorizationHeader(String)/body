{
  if (Strings.isNullOrEmpty(authorization)) {
    return null;
  }
  HashMap<AuthorizationField,String> authMap=new HashMap<AuthorizationField,String>();
  String[] components=authorization.split(" ");
  if (components.length < 2) {
    throw new AuthenticationException("Invalid authoriztion header");
  }
  if (AWS_AUTH_TYPE.equals(components[0]) && components.length == 2) {
    authMap.put(AuthorizationField.Type,AWS_AUTH_TYPE);
    String[] signatureElements=components[1].split(":");
    authMap.put(AuthorizationField.AccessKeyId,signatureElements[0]);
    authMap.put(AuthorizationField.Signature,signatureElements[1]);
  }
 else   if (EUCA_AUTH_TYPE.equals(components[0]) && components.length == 4) {
    authMap.put(AuthorizationField.Type,EUCA_AUTH_TYPE);
    authMap.put(AuthorizationField.CertFingerPrint,components[1].trim());
    authMap.put(AuthorizationField.SignedHeaders,components[2].trim());
    authMap.put(AuthorizationField.Signature,components[3].trim());
  }
 else   if (EUCA_OLD_AUTH_TYPE.equals(components[0]) && components.length == 1) {
    authMap.put(AuthorizationField.Type,EUCA_OLD_AUTH_TYPE);
  }
 else {
    throw new AuthenticationException("Invalid authorization header");
  }
  return authMap;
}
