{
  if (jsonNode == null)   return null;
  DependencyManager resourceDependencyManager=new DependencyManager();
  ArrayNode arrayNode=(ArrayNode)jsonNode.get("nodes");
  if (arrayNode == null) {
    resourceDependencyManager.setNodes(null);
  }
 else {
    Set<String> nodes=Sets.newLinkedHashSet();
    for (int i=0; i < arrayNode.size(); i++) {
      nodes.add(arrayNode.get(i).textValue());
    }
    resourceDependencyManager.setNodes(nodes);
  }
  JsonNode outEdgesNode=jsonNode.get("outEdges");
  if (outEdgesNode == null) {
    resourceDependencyManager.setOutEdges(null);
  }
 else {
    Multimap<String,String> outEdges=TreeMultimap.create();
    for (    String key : Lists.newArrayList(outEdgesNode.fieldNames())) {
      ArrayNode arrayNode1=(ArrayNode)outEdgesNode.get(key);
      if (arrayNode1 != null) {
        for (int i=0; i < arrayNode1.size(); i++) {
          outEdges.put(key,arrayNode1.get(i).textValue());
        }
      }
    }
    resourceDependencyManager.setOutEdges(outEdges);
  }
  JsonNode inEdgesNode=jsonNode.get("inEdges");
  if (inEdgesNode == null) {
    resourceDependencyManager.setInEdges(null);
  }
 else {
    Multimap<String,String> inEdges=TreeMultimap.create();
    for (    String key : Lists.newArrayList(inEdgesNode.fieldNames())) {
      ArrayNode arrayNode1=(ArrayNode)inEdgesNode.get(key);
      if (arrayNode1 != null) {
        for (int i=0; i < arrayNode1.size(); i++) {
          inEdges.put(key,arrayNode1.get(i).textValue());
        }
      }
    }
    resourceDependencyManager.setInEdges(inEdges);
  }
  return resourceDependencyManager;
}
