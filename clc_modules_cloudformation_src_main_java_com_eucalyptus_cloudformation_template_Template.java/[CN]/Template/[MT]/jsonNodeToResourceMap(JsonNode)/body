{
  if (jsonNode == null)   return null;
  Map<String,ResourceInfo> resourceMap=Maps.newLinkedHashMap();
  for (  String key : Lists.newArrayList(jsonNode.fieldNames())) {
    JsonNode resourceNode=jsonNode.get(key);
    String type=resourceNode.get("type").textValue();
    ResourceInfo resourceInfo=new ResourceResolverManager().resolveResourceInfo(type);
    resourceInfo.setAccountId(resourceNode.get("accountId").textValue());
    resourceInfo.setAllowedByCondition(resourceNode.get("allowedByCondition").booleanValue());
    resourceInfo.setDeletionPolicy(resourceNode.get("deletionPolicy").textValue());
    resourceInfo.setEffectiveUserId(resourceNode.get("effectiveUserId").textValue());
    resourceInfo.setLogicalResourceId(resourceNode.get("logicalResourceId").textValue());
    resourceInfo.setMetadataJson(resourceNode.get("metadataJson").textValue());
    resourceInfo.setPhysicalResourceId(resourceNode.get("physicalResourceId").textValue());
    resourceInfo.setPropertiesJson(resourceNode.get("propertiesJson").textValue());
    resourceInfo.setReferenceValueJson(resourceNode.get("referenceValueJson").textValue());
    resourceInfo.setUpdatePolicyJson(resourceNode.get("updatePolicyJson").textValue());
    ObjectNode attributeNode=(ObjectNode)resourceNode.get("attributes");
    for (    String attributeName : Lists.newArrayList(attributeNode.fieldNames())) {
      resourceInfo.setResourceAttributeJson(attributeName,attributeNode.get(attributeName).textValue());
    }
    resourceMap.put(key,resourceInfo);
  }
  return resourceMap;
}
