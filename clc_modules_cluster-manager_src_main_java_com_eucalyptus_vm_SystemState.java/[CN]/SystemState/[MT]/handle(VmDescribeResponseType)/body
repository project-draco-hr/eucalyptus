{
  final String originCluster=request.getOriginCluster();
  for (  final VmInfo runVm : request.getVms()) {
    SystemState.updateVmInstance(originCluster,runVm);
  }
  final List<String> unreportedVms=Lists.transform(VmInstances.listValues(),new Function<VmInstance,String>(){
    @Override public String apply(    final VmInstance input){
      return input.getInstanceId();
    }
  }
);
  final List<String> runningVmIds=Lists.transform(request.getVms(),new Function<VmInfo,String>(){
    @Override public String apply(    final VmInfo arg0){
      final String vmId=arg0.getImageId();
      unreportedVms.remove(vmId);
      return vmId;
    }
  }
);
  for (  final String vmId : unreportedVms) {
    EntityTransaction db=Entities.get(VmInstance.class);
    try {
      final VmInstance vm=VmInstances.lookup(vmId);
      if (VmState.SHUTTING_DOWN.apply(vm)) {
        vm.setState(VmState.TERMINATED,Reason.EXPIRED);
      }
 else       if (VmState.TERMINATED.apply(vm) && vm.getSplitTime() > VmInstances.BURY_TIME) {
        vm.setState(VmState.BURIED,Reason.EXPIRED);
      }
 else       if (VmState.BURIED.apply(vm)) {
        VmInstance.Transitions.DELETE.apply(vm);
      }
 else {
        VmInstance.Transitions.TERMINATE.apply(vm);
      }
      db.commit();
    }
 catch (    final Exception ex) {
      Logs.exhaust().error(ex,ex);
      db.rollback();
    }
  }
}
