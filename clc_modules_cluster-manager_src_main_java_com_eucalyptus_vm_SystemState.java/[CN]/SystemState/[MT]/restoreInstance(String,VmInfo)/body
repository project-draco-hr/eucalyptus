{
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    final VmType vmType=VmTypes.getVmType(runVm.getInstanceType().getName());
    final UserFullName userFullName=UserFullName.getInstance(runVm.getOwnerId());
    Partition partition;
    try {
      partition=Partitions.lookupByName(runVm.getPlacement());
    }
 catch (    Exception ex2) {
    }
    @SuppressWarnings("deprecation") BootableSet bootSet=Emis.newBootableSet(vmType,partition,runVm.getImageId(),runVm.getKernelId(),runVm.getRamdiskId());
    int launchIndex;
    try {
      launchIndex=Integer.parseInt(runVm.getLaunchIndex());
    }
 catch (    Exception ex1) {
      launchIndex=1;
    }
    SshKeyPair keyPair;
    try {
      keyPair=KeyPairs.lookup(userFullName,runVm.getKeyValue());
    }
 catch (    Exception ex) {
      LOG.error(ex,ex);
    }
    byte[] userData;
    try {
      userData=Base64.decode(runVm.getUserData());
    }
 catch (    Exception ex) {
      LOG.error(ex,ex);
    }
    List<NetworkGroup> networks;
    try {
      networks=Lists.transform(runVm.getGroupNames(),transformNetworkNames(userFullName));
    }
 catch (    Exception ex) {
      LOG.error(ex,ex);
    }
    SetReference<PrivateNetworkIndex,VmInstance> index;
    ExtantNetwork exNet;
    NetworkGroup network=(!networks.isEmpty() ? networks.get(0) : null);
    if (network != null) {
      if (!network.hasExtantNetwork()) {
        exNet=network.reclaim(runVm.getNetParams().getVlan());
      }
 else {
        exNet=network.extantNetwork();
        if (!exNet.getTag().equals(runVm.getNetParams().getVlan())) {
          exNet=null;
        }
 else {
          index=exNet.reclaimNetworkIndex(runVm.getNetParams().getNetworkIndex());
        }
      }
    }
    VmInstance vmInst=new VmInstance.Builder().owner(userFullName).withIds(runVm.getInstanceId(),runVm.getReservationId()).bootRecord(bootSet,userData,keyPair,vmType).placement(partition,partition.getName()).networking(networks,index).build(launchIndex);
    vmInst.setNaturalId(runVm.getUuid());
    Entities.persist(vmInst);
    db.commit();
  }
 catch (  Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
  }
  try {
    String instanceUuid=runVm.getUuid();
    String instanceId=runVm.getInstanceId();
    String reservationId=runVm.getReservationId();
    final UserFullName ownerId=UserFullName.getInstance(runVm.getOwnerId());
    String placement=cluster;
    byte[] userData=new byte[0];
    if (runVm.getUserData() != null && runVm.getUserData().length() > 1) {
      userData=Base64.decode(runVm.getUserData());
    }
    Integer launchIndex=0;
    try {
      launchIndex=Integer.parseInt(runVm.getLaunchIndex());
    }
 catch (    NumberFormatException e) {
    }
    ImageInfo img=Transactions.one(Images.exampleMachineWithImageId(runVm.getInstanceType().lookupRoot().getId()),new Callback<ImageInfo>(){
      @Override public void fire(      ImageInfo t){
      }
    }
);
    SshKeyPair key=null;
    if (runVm.getKeyValue() != null || !"".equals(runVm.getKeyValue())) {
      try {
        SshKeyPair searchKey=KeyPairs.fromPublicKey(ownerId,runVm.getKeyValue());
      }
 catch (      Exception e) {
        key=KeyPairs.noKey();
      }
    }
 else {
      key=KeyPairs.noKey();
    }
    VmType vmType=VmTypes.getVmType(runVm.getInstanceType().getName());
    vm.clearPending();
    vm.updatePublicAddress(VmInstance.DEFAULT_IP);
    VmInstances.register(vm);
  }
 catch (  Exception t) {
    LOG.error(t,t);
  }
}
