{
  final Map<String,String> m=new HashMap<>();
  final String instanceProfileNameOrArn=vm.getIamInstanceProfileArn();
  if (!Strings.isNullOrEmpty(instanceProfileNameOrArn)) {
    BaseInstanceProfile profile=null;
    String profileArn=null;
    String roleArn=vm.getIamRoleArn();
    String roleName=null;
    if (!Strings.isNullOrEmpty(roleArn)) {
      roleName=roleArn.substring(roleArn.lastIndexOf('/') + 1);
    }
 else     try {
      String profileName;
      if (instanceProfileNameOrArn.startsWith("arn:")) {
        profileName=instanceProfileNameOrArn.substring(instanceProfileNameOrArn.lastIndexOf('/') + 1);
      }
 else {
        profileName=instanceProfileNameOrArn;
      }
      profile=Accounts.lookupInstanceProfileByName(vm.getOwnerAccountNumber(),profileName);
      profileArn=Accounts.getInstanceProfileArn(profile);
      if (roleArn == null) {
        final BaseRole role=profile.getRole();
        if (role != null) {
          roleArn=Accounts.getRoleArn(role);
          roleName=role.getName();
        }
      }
 else {
        final EuareResourceName ern=(EuareResourceName)Ern.parse(roleArn);
        roleName=ern.getName();
      }
    }
 catch (    AuthException e) {
      LOG.debug(e);
    }
    CredentialsType credentials=null;
    if (roleArn != null) {
      final AssumeRoleType assumeRoleType=new AssumeRoleType();
      assumeRoleType.setRoleArn(roleArn);
      assumeRoleType.setRoleSessionName(vm.getInstanceId());
      ServiceConfiguration serviceConfiguration=Topology.lookup(Tokens.class);
      try {
        credentials=((AssumeRoleResponseType)AsyncRequests.sendSync(serviceConfiguration,assumeRoleType)).getAssumeRoleResult().getCredentials();
      }
 catch (      Exception e) {
        LOG.debug("Unable to send assume role request to token service",e);
      }
    }
    if (profile != null) {
      m.put("iam/info/last-updated-date",Timestamps.formatIso8601Timestamp(new Date()));
      m.put("iam/info/instance-profile-arn",profileArn);
      m.put("iam/info/instance-profile-id",profile.getInstanceProfileId());
    }
    if (roleName != null && credentials != null) {
      final String jsonCredentials=new JSONObject().element("Code","Success").element("LastUpdated",Timestamps.formatIso8601Timestamp(new Date())).element("Type","AWS-HMAC").element("AccessKeyId",credentials.getAccessKeyId()).element("SecretAccessKey",credentials.getSecretAccessKey()).element("Token",credentials.getSessionToken()).element("Expiration",Timestamps.formatIso8601Timestamp(credentials.getExpiration())).toString(2);
      m.put("iam/security-credentials/" + roleName + "/AccessKeyId",credentials.getAccessKeyId());
      m.put("iam/security-credentials/" + roleName + "/Expiration",Timestamps.formatIso8601Timestamp(credentials.getExpiration()));
      m.put("iam/security-credentials/" + roleName + "/SecretAccessKey",credentials.getSecretAccessKey());
      m.put("iam/security-credentials/" + roleName + "/Token",credentials.getSessionToken());
      m.put("iam/security-credentials/" + roleName,jsonCredentials);
      m.put("iam/security-credentials",roleName);
      m.put("iam/security-credentials/",roleName);
    }
  }
  return m;
}
