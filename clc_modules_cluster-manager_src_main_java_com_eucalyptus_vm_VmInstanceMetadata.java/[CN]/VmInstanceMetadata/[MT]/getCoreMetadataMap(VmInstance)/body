{
  final boolean dns=StackConfiguration.USE_INSTANCE_DNS && !ComponentIds.lookup(Dns.class).runLimitedServices();
  final Map<String,String> m=Maps.newHashMap();
  m.put("ami-id",vm.getImageId());
  if (vm.getBootRecord().getMachine() != null && !vm.getBootRecord().getMachine().getProductCodes().isEmpty()) {
    m.put("product-codes",Joiner.on('\n').join(vm.getBootRecord().getMachine().getProductCodes()));
  }
  m.put("ami-launch-index","" + vm.getLaunchIndex());
  if (vm.getBootRecord().getMachine() instanceof MachineImageInfo) {
    m.put("ami-manifest-path",((MachineImageInfo)vm.getBootRecord().getMachine()).getManifestLocation());
  }
  if (dns) {
    m.put("hostname",vm.getPrivateDnsName());
  }
 else {
    m.put("hostname",vm.getPrivateAddress());
  }
  m.put("instance-id",vm.getInstanceId());
  m.put("instance-type",vm.getVmType().getName());
  if (dns) {
    m.put("local-hostname",vm.getPrivateDnsName());
  }
 else {
    m.put("local-hostname",vm.getPrivateAddress());
  }
  m.put("local-ipv4",vm.getPrivateAddress());
  m.put("mac",upper().apply(vm.getMacAddress()));
  if (dns) {
    m.put("public-hostname",vm.getPublicDnsName());
  }
 else {
    m.put("public-hostname",vm.getPublicAddress());
  }
  m.put("public-ipv4",vm.getPublicAddress());
  m.put("reservation-id",vm.getReservationId());
  if (vm.getKernelId() != null) {
    m.put("kernel-id",vm.getKernelId());
  }
  if (vm.getRamdiskId() != null) {
    m.put("ramdisk-id",vm.getRamdiskId());
  }
  m.put("security-groups",Joiner.on('\n').join(Sets.newTreeSet(Iterables.transform(vm.getNetworkGroups(),CloudMetadatas.toDisplayName()))));
  m.put("services/domain",DomainNames.externalSubdomain().relativize(Name.root).toString());
  m.put("placement/availability-zone",vm.getPartition());
  return m;
}
