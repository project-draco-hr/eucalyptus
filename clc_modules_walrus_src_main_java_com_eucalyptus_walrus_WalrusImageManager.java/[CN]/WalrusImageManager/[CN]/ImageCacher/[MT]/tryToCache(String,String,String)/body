{
  Long unencryptedSize=0L;
  boolean failed=false;
  logCachingStatus("Trying to cache image: " + bucketName + "/"+ manifestKey+ " space needed = "+ spaceNeeded+ ", image size exceeded = "+ imageSizeExceeded,Level.DEBUG);
  try {
    if (!imageSizeExceeded) {
      logCachingStatus("Unzipping image: " + bucketName + "/"+ manifestKey+ " in file: "+ decryptedImageName+ " into: "+ tarredImageName,Level.DEBUG);
      WalrusImageUtils.unzipImage(decryptedImageName,tarredImageName);
      logCachingStatus("Unzip completed for: " + bucketName + "/"+ manifestKey,Level.DEBUG);
      logCachingStatus("Untarring image: " + bucketName + "/"+ manifestKey+ " in file "+ tarredImageName+ " into "+ imageName,Level.DEBUG);
      unencryptedSize=WalrusImageUtils.untarImage(tarredImageName,imageName);
      logCachingStatus(" Untarring completed for: " + bucketName + "/"+ manifestKey,Level.DEBUG);
    }
 else {
      File imageFile=new File(imageName);
      if (imageFile.exists()) {
        unencryptedSize=imageFile.length();
        logCachingStatus("Image file found with size: " + unencryptedSize,Level.DEBUG);
      }
 else {
        logCachingStatus("Could not find image file: " + imageName,Level.ERROR);
        imageSizeExceeded=false;
        spaceNeeded=-1L;
        return -1L;
      }
    }
    Long oldCacheSize=0L;
    EntityWrapper<ImageCacheInfo> db=EntityWrapper.get(ImageCacheInfo.class);
    try {
      List<ImageCacheInfo> imageCacheInfos=db.queryEscape(new ImageCacheInfo());
      for (      ImageCacheInfo imageCacheInfo : imageCacheInfos) {
        if (imageCacheInfo.getInCache()) {
          oldCacheSize+=imageCacheInfo.getSize();
        }
      }
      db.commit();
    }
 catch (    Exception e) {
      logCachingStatus("Exception calculating used cache capacity. Terminating caching task",Level.ERROR);
      LOG.error("Exception calculating used cache capacity",e);
      spaceNeeded=-1L;
      return -1L;
    }
 finally {
      db.rollback();
    }
    long cacheCapacity=WalrusInfo.getWalrusInfo().getStorageMaxCacheSizeInMB() * WalrusProperties.M;
    if ((oldCacheSize + unencryptedSize) > cacheCapacity) {
      logCachingStatus("Maximum image cache size exceeded when decrypting " + bucketName + "/"+ manifestKey+ " . Must evict images from cache and retry.",Level.DEBUG);
      failed=true;
      imageSizeExceeded=true;
      spaceNeeded=unencryptedSize - (cacheCapacity - oldCacheSize);
    }
  }
 catch (  Exception ex) {
    logCachingStatus("Caught exception trying to calculate cache usage. Failing task due to: " + ex.getMessage(),Level.ERROR);
    failed=true;
  }
  if (failed) {
    if (!imageSizeExceeded) {
      logCachingStatus(" Failed trying to cache image: " + bucketName + "/"+ manifestKey+ " due to unknown reason.",Level.ERROR);
      try {
        storageManager.deleteAbsoluteObject(tarredImageName);
        storageManager.deleteAbsoluteObject(imageName);
        logCachingStatus(" Cleaned temporary artifacts for image: " + bucketName + "/"+ manifestKey+ " on failure cleanup",Level.DEBUG);
      }
 catch (      Exception exception) {
        LOG.error(exception);
      }
    }
 else {
      logCachingStatus(" Failed trying to cache image: " + bucketName + "/"+ manifestKey+ " due to not enough available space in cache. Eviction of other images may be required.",null);
    }
    return -1L;
  }
 else {
    logCachingStatus(" Successfully cached image: " + bucketName + "/"+ manifestKey+ " size: "+ String.valueOf(unencryptedSize),null);
    return unencryptedSize;
  }
}
