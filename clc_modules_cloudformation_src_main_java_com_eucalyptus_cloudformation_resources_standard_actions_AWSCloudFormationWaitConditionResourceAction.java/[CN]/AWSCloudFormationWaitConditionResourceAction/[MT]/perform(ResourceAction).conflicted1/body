{
  LOG.trace("Checking for signals");
  AWSCloudFormationWaitConditionResourceAction action=(AWSCloudFormationWaitConditionResourceAction)resourceAction;
  CreationPolicy creationPolicy=CreationPolicy.parse(action.info.getCreationPolicyJson());
  if (creationPolicy != null && creationPolicy.getResourceSignal() != null) {
    Collection<SignalEntity> signals=SignalEntityManager.getSignals(action.getStackEntity().getStackId(),action.info.getAccountId(),action.info.getLogicalResourceId(),action.getStackEntity().getStackVersion());
    int numSuccessSignals=0;
    if (signals != null) {
      for (      SignalEntity signal : signals) {
        if (signal.getStatus() == SignalEntity.Status.FAILURE) {
          throw new ResourceFailureException("Received FAILURE signal with UniqueId " + signal.getUniqueId());
        }
        if (!signal.getProcessed()) {
          StackEventEntityManager.addSignalStackEvent(signal);
          signal.setProcessed(true);
          SignalEntityManager.updateSignal(signal);
        }
        numSuccessSignals++;
      }
    }
    if (numSuccessSignals < creationPolicy.getResourceSignal().getCount()) {
      long durationMs=System.currentTimeMillis() - Long.valueOf(JsonHelper.getJsonNodeFromString(action.info.getEucaCreateStartTime()).asText());
      if (TimeUnit.MILLISECONDS.toSeconds(durationMs) > creationPolicy.getResourceSignal().getTimeout()) {
        throw new ResourceFailureException("Failed to receive " + creationPolicy.getResourceSignal().getCount() + " resource signal(s) within the specified duration");
      }
      throw new RetryAfterConditionCheckFailedException("Not enough success signals yet");
    }
    ObjectNode dataNode=new ObjectMapper().createObjectNode();
    action.info.setData(JsonHelper.getStringFromJsonNode(new TextNode(dataNode.toString())));
    return action;
  }
 else {
    if (action.properties.getTimeout() == null) {
      throw new ValidationErrorException("Timeout is a required field");
    }
    if (action.properties.getHandle() == null) {
      throw new ValidationErrorException("Handle is a required field");
    }
    int numSignals=action.properties.getCount() != null && action.properties.getCount() > 0 ? action.properties.getCount() : 1;
    LOG.trace("num signals = " + numSignals);
    if (action.properties.getTimeout() > 43200) {
      throw new ValidationErrorException("timeout can not be more than 43200");
    }
    LOG.trace("Timeout = " + action.properties.getTimeout());
    BucketAndKey bucketAndKey=getBucketAndKey(action);
    String bucketName=bucketAndKey.getBucket();
    String keyName=bucketAndKey.getKey();
    ;
    boolean foundFailure=false;
    final Map<String,String> dataMap=Maps.newHashMap();
    try (final EucaS3Client s3c=EucaS3ClientFactory.getEucaS3Client(new CloudFormationAWSCredentialsProvider())){
      LOG.trace("Handle:" + action.properties.getHandle());
      VersionListing versionListing=s3c.listVersions(bucketName,"");
      LOG.trace("Found " + versionListing.getVersionSummaries() + " versions to check");
      for (      S3VersionSummary versionSummary : versionListing.getVersionSummaries()) {
        LOG.trace("Key:" + versionSummary.getKey());
        if (!versionSummary.getKey().equals(keyName)) {
          continue;
        }
        LOG.trace("Getting version: " + versionSummary.getVersionId());
        try {
          GetObjectRequest getObjectRequest=new GetObjectRequest(bucketName,keyName,versionSummary.getVersionId());
          S3Object s3Object=s3c.getObject(getObjectRequest);
          JsonNode jsonNode=null;
          try (S3ObjectInputStream s3ObjectInputStream=s3Object.getObjectContent()){
            jsonNode=new ObjectMapper().readTree(s3ObjectInputStream);
          }
           if (!jsonNode.isObject()) {
            LOG.trace("Read object, json but not object..skipping file");
            continue;
          }
          ObjectNode localObjectNode=(ObjectNode)jsonNode;
          String status=localObjectNode.get("Status").asText();
          if (status == null) {
            LOG.trace("Null status, skipping");
            continue;
          }
          String data=localObjectNode.get("Data").asText();
          if (data == null) {
            LOG.trace("Null data, skipping");
            continue;
          }
          String uniqueId=localObjectNode.get("UniqueId").asText();
          if (uniqueId == null) {
            LOG.trace("Null uniqueId, skipping");
            continue;
          }
          if ("FAILURE".equals(status)) {
            foundFailure=true;
            LOG.trace("found failure, gonna die");
            break;
          }
 else           if (!"SUCCESS".equals(status)) {
            LOG.trace("weird status...skipping");
            continue;
          }
 else {
            LOG.trace("found success, uniqueId=" + uniqueId);
            dataMap.put(uniqueId,data);
          }
        }
 catch (        Exception ex) {
          LOG.error(ex,ex);
          LOG.trace("Exception while going through the objects, will skip this one.");
        }
      }
    }
     if (foundFailure) {
      throw new ResourceFailureException("Found failure signal");
    }
    LOG.trace("Have " + dataMap.size() + " success signals, need "+ numSignals);
    if (dataMap.size() >= numSignals) {
      LOG.trace("Success");
      ObjectNode dataNode=new ObjectMapper().createObjectNode();
      for (      String uniqueId : dataMap.keySet()) {
        dataNode.put(uniqueId,dataMap.get(uniqueId));
      }
      action.info.setData(JsonHelper.getStringFromJsonNode(new TextNode(dataNode.toString())));
      return action;
    }
 else {
      long durationMs=System.currentTimeMillis() - Long.valueOf(JsonHelper.getJsonNodeFromString(action.info.getEucaCreateStartTime()).asText());
      if (TimeUnit.MILLISECONDS.toSeconds(durationMs) > action.properties.getTimeout()) {
        throw new ResourceFailureException("Timeout exeeded waiting for success signals");
      }
      throw new RetryAfterConditionCheckFailedException("Not enough success signals yet");
    }
  }
}
