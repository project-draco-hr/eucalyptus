{
  if (!(Bootstrap.isFinished() && Topology.isEnabledLocally(ImagingBackend.class) && Topology.isEnabled(Compute.class)))   return;
  if (!ImagingServiceProperties.HEALTHCHECK)   return;
  try {
    final List<ImagingWorker> workers=listWorkers();
    final List<ImagingWorker> timedout=Lists.newArrayList();
    final List<ImagingWorker> retiring=Lists.newArrayList();
    final List<ImagingWorker> toRemove=Lists.newArrayList();
    for (    final ImagingWorker worker : workers) {
      if (isTimedOut(worker))       timedout.add(worker);
      if (ImagingWorker.STATE.RETIRING.equals(worker.getState()))       retiring.add(worker);
      if (ImagingWorker.STATE.DECOMMISSIONED.equals(worker.getState()) && timeToRemove(worker) <= 0)       toRemove.add(worker);
    }
    for (    final ImagingWorker worker : timedout) {
      LOG.info(String.format("Imaging service worker %s is not responding and might be " + "decommissioned in about %d minutes.",worker.getDisplayName(),timeToRemove(worker)));
      retireWorker(worker.getDisplayName());
    }
    for (    final ImagingWorker worker : retiring) {
      final ImagingTask task=ImagingTasks.getConvertingTaskByWorkerId(worker.getDisplayName());
      if (task != null && ImportTaskState.CONVERTING.equals(task.getState())) {
        ImagingTasks.killAndRerunTask(task.getDisplayName());
        LOG.debug(String.format("Imaging worker task %s is moved back into queue",task.getDisplayName()));
      }
      decommisionWorker(worker.getDisplayName());
    }
    for (    final ImagingWorker worker : toRemove) {
      LOG.debug("Forgetting about imaging worker " + worker.getDisplayName());
      removeWorker(worker.getDisplayName());
    }
  }
 catch (  final Exception ex) {
    LOG.error("Failed to check imaging worker's state",ex);
  }
}
