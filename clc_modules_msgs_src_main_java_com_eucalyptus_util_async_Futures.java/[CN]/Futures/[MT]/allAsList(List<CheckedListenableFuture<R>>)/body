{
  final GenericCheckedListenableFuture<List<R>> combined=new GenericCheckedListenableFuture<List<R>>();
  final List<R> resultList=Lists.newArrayListWithCapacity(futures.size());
  Iterables.addAll(resultList,Iterables.limit(Iterables.cycle((R)null),futures.size()));
  final AtomicInteger completionCountdown=new AtomicInteger(futures.size());
  for (int i=0; i < futures.size(); i++) {
    final int resultIndex=i;
    final CheckedListenableFuture<R> future=futures.get(i);
    future.addListener(new Runnable(){
      @Override public void run(){
        try {
          resultList.set(resultIndex,future.get());
        }
 catch (        final ExecutionException e) {
          combined.setException(e.getCause());
        }
catch (        CancellationException e) {
          combined.cancel(false);
        }
catch (        InterruptedException e) {
        }
        if (completionCountdown.decrementAndGet() == 0) {
          combined.set(resultList);
        }
      }
    }
);
  }
  return combined;
}
