{
  final DeleteSubnetResponseType reply=request.getReply();
  delete(Identifier.subnet,request.getSubnetId(),new Function<Pair<Optional<AccountFullName>,String>,Subnet>(){
    @Override public Subnet apply(    final Pair<Optional<AccountFullName>,String> accountAndId){
      try {
        final Subnet subnet=subnets.lookupByName(accountAndId.getLeft().orNull(),accountAndId.getRight(),Functions.identity());
        if (RestrictedTypes.filterPrivileged().apply(subnet)) {
          subnets.delete(subnet);
        }
 else {
          throw Exceptions.toUndeclared(new ClientUnauthorizedComputeException("Not authorized to delete subnet"));
        }
        return null;
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex);
      }
    }
  }
);
  return reply;
}
