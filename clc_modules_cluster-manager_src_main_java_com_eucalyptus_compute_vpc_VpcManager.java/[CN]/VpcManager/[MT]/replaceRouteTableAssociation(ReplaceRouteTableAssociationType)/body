{
  final ReplaceRouteTableAssociationResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final AccountFullName accountFullName=ctx.getUserFullName().asAccountFullName();
  final String routeTableId=Identifier.rtb.normalize(request.getRouteTableId());
  final String associationId=Identifier.rtbassoc.normalize(request.getAssociationId());
  try {
    final String newAssociationId=routeTables.updateByAssociationId(associationId,accountFullName,new Function<RouteTable,String>(){
      @Override public String apply(      final RouteTable routeTable){
        if (RestrictedTypes.filterPrivileged().apply(routeTable))         try {
          final RouteTable newRouteTable=routeTables.lookupByName(accountFullName,routeTableId,Functions.identity());
          final RouteTableAssociation association=Iterables.find(routeTable.getRouteTableAssociations(),CollectionUtils.propertyPredicate(associationId,RouteTables.AssociationFilterStringFunctions.ASSOCIATION_ID));
          if (!newRouteTable.getVpc().getDisplayName().equals(routeTable.getVpc().getDisplayName())) {
            throw Exceptions.toUndeclared(new ClientComputeException("InvalidParameterValue","Route table " + routeTableId + " belongs to different network"));
          }
          final RouteTableAssociation oldAssociation=routeTable.disassociate(associationId);
          Entities.delete(oldAssociation);
          Entities.flush(oldAssociation);
          final RouteTableAssociation newAssociation;
          if (association.getMain()) {
            newAssociation=newRouteTable.associateMain();
          }
 else {
            newAssociation=newRouteTable.associate(association.getSubnet());
          }
          return newAssociation.getAssociationId();
        }
 catch (        VpcMetadataNotFoundException e) {
          throw Exceptions.toUndeclared(new ClientComputeException("InvalidRouteTableID.NotFound","Route table not found '" + request.getRouteTableId() + "'"));
        }
catch (        Exception e) {
          throw Exceptions.toUndeclared(e);
        }
 else {
          throw Exceptions.toUndeclared(new ClientUnauthorizedComputeException("Not authorized to replace route table association"));
        }
      }
    }
);
    invalidate(routeTableId);
    reply.setNewAssociationId(newAssociationId);
  }
 catch (  VpcMetadataNotFoundException e) {
    throw new ClientComputeException("InvalidAssociationID.NotFound","Route table association (" + request.getAssociationId() + ") not found ");
  }
catch (  Exception e) {
    throw handleException(e);
  }
  return reply;
}
