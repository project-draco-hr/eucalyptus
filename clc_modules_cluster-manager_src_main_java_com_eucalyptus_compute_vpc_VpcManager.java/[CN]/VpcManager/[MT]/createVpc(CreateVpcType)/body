{
  final CreateVpcResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final UserFullName userFullName=ctx.getUserFullName();
  final AccountFullName accountFullName=userFullName.asAccountFullName();
  if (!Cidr.parse().apply(request.getCidrBlock()).transform(Cidr.prefix()).transform(Functions.forPredicate(Range.closed(16,28))).or(false)) {
    throw new ClientComputeException("InvalidVpcRange","Cidr range invalid: " + request.getCidrBlock());
  }
  final Supplier<Vpc> allocator=new Supplier<Vpc>(){
    @Override public Vpc get(){
      try {
        DhcpOptionSet options;
        try {
          options=dhcpOptionSets.lookupByExample(DhcpOptionSet.exampleDefault(accountFullName),accountFullName,"default",Predicates.alwaysTrue(),Functions.<DhcpOptionSet>identity());
        }
 catch (        VpcMetadataNotFoundException e) {
          options=dhcpOptionSets.save(DhcpOptionSet.createDefault(userFullName,Identifier.dopt.generate()));
        }
        final Vpc vpc=vpcs.save(Vpc.create(userFullName,Identifier.vpc.generate(),options,request.getCidrBlock(),false));
        routeTables.save(RouteTable.create(userFullName,vpc,Identifier.rtb.generate(),vpc.getCidr(),true));
        networkAcls.save(NetworkAcl.create(userFullName,vpc,Identifier.acl.generate(),true));
        final NetworkGroup group=NetworkGroup.create(userFullName,vpc,ResourceIdentifiers.generateString(NetworkGroup.ID_PREFIX),NetworkGroups.defaultNetworkName(),"default VPC security group");
        final Collection<NetworkPeer> peers=Lists.newArrayList(NetworkPeer.create(group.getOwnerAccountNumber(),group.getName(),group.getGroupId()));
        group.getNetworkRules().addAll(Lists.newArrayList(NetworkRule.create(null,-1,null,null,peers,null),NetworkRule.createEgress(null,-1,null,null,null,Collections.singleton("0.0.0.0/0"))));
        securityGroups.save(group);
        return vpc;
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex);
      }
    }
  }
;
  reply.setVpc(allocate(allocator,Vpc.class,VpcType.class));
  return reply;
}
