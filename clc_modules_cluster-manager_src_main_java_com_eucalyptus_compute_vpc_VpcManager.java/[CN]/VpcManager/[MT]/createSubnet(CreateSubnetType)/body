{
  final CreateSubnetResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final AccountFullName accountFullName=ctx.getUserFullName().asAccountFullName();
  final String vpcId=Identifier.vpc.normalize(request.getVpcId());
  final Optional<String> availabilityZone=Iterables.tryFind(Clusters.getInstance().listValues(),Predicates.and(request.getAvailabilityZone() == null ? Predicates.<RestrictedType>alwaysTrue() : CollectionUtils.propertyPredicate(request.getAvailabilityZone(),CloudMetadatas.toDisplayName()),RestrictedTypes.filterPrivilegedWithoutOwner())).transform(CloudMetadatas.toDisplayName());
  final Optional<Cidr> subnetCidr=Cidr.parse().apply(request.getCidrBlock());
  if (!subnetCidr.isPresent()) {
    throw new ClientComputeException("InvalidParameterValue","Cidr invalid: " + request.getCidrBlock());
  }
  if (!subnetCidr.transform(Cidr.prefix()).transform(Functions.forPredicate(Range.closed(16,28))).or(false)) {
    throw new ClientComputeException("InvalidSubnet.Range","Cidr invalid: " + request.getCidrBlock());
  }
  if (!availabilityZone.isPresent()) {
    throw new ClientComputeException("InvalidParameterValue","Availability zone invalid: " + request.getAvailabilityZone());
  }
  final Supplier<Subnet> allocator=new Supplier<Subnet>(){
    @SuppressWarnings("OptionalGetWithoutIsPresent") @Override public Subnet get(){
      try {
        final Vpc vpc=vpcs.lookupByName(accountFullName,vpcId,Functions.identity());
        final Iterable<Subnet> subnetsInVpc=subnets.listByExample(Subnet.exampleWithOwner(accountFullName),CollectionUtils.propertyPredicate(vpc.getDisplayName(),Subnets.FilterStringFunctions.VPC_ID),Functions.identity());
        if (Iterables.size(subnetsInVpc) >= VpcConfiguration.getSubnetsPerVpc()) {
          throw new ClientComputeException("SubnetLimitExceeded","Subnet limit exceeded for " + vpc.getDisplayName());
        }
        if (!Cidr.parse(vpc.getCidr()).contains(subnetCidr.get())) {
          throw new ClientComputeException("InvalidParameterValue","Cidr not valid for vpc " + request.getCidrBlock());
        }
        final Iterable<Cidr> existingCidrs=Iterables.transform(subnetsInVpc,Functions.compose(Cidr.parseUnsafe(),Subnets.FilterStringFunctions.CIDR));
        if (Iterables.any(existingCidrs,subnetCidr.get().contains()) || Iterables.any(existingCidrs,subnetCidr.get().containedBy())) {
          throw new ClientComputeException("InvalidSubnet.Conflict","Cidr conflict for " + request.getCidrBlock());
        }
        final NetworkAcl networkAcl=networkAcls.lookupDefault(vpc.getDisplayName(),Functions.identity());
        return subnets.save(Subnet.create(ctx.getUserFullName(),vpc,networkAcl,Identifier.subnet.generate(),request.getCidrBlock(),availabilityZone.get()));
      }
 catch (      VpcMetadataNotFoundException ex) {
        throw Exceptions.toUndeclared(new ClientComputeException("InvalidVpcID.NotFound","Vpc not found '" + request.getVpcId() + "'"));
      }
catch (      Exception ex) {
        throw new RuntimeException(ex);
      }
    }
  }
;
  reply.setSubnet(allocate(allocator,Subnet.class,SubnetType.class));
  invalidate(reply.getSubnet().getSubnetId());
  return reply;
}
