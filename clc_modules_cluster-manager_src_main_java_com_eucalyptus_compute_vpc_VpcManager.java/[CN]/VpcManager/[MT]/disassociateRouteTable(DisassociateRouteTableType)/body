{
  final DisassociateRouteTableResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final AccountFullName accountFullName=ctx.getUserFullName().asAccountFullName();
  final String associationId=Identifier.rtbassoc.normalize(request.getAssociationId());
  try {
    final String subnetId=routeTables.updateByAssociationId(associationId,accountFullName,new Function<RouteTable,String>(){
      @Override public String apply(      final RouteTable routeTable){
        if (RestrictedTypes.filterPrivileged().apply(routeTable))         try {
          final RouteTableAssociation association=Iterables.find(routeTable.getRouteTableAssociations(),CollectionUtils.propertyPredicate(associationId,RouteTables.AssociationFilterStringFunctions.ASSOCIATION_ID));
          if (association.getMain()) {
            throw new ClientComputeException("InvalidParameterValue","Cannot disassociate the main route table association " + request.getAssociationId());
          }
          routeTable.disassociate(associationId);
          return association.getSubnetId();
        }
 catch (        Exception e) {
          throw Exceptions.toUndeclared(e);
        }
        return null;
      }
    }
);
    if (subnetId != null)     invalidate(subnetId);
  }
 catch (  VpcMetadataNotFoundException e) {
    throw new ClientComputeException("InvalidAssociationID.NotFound","Route table association (" + request.getAssociationId() + ") not found ");
  }
catch (  Exception e) {
    throw handleException(e);
  }
  return reply;
}
