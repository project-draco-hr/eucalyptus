{
  final DeleteNetworkAclEntryResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final AccountFullName accountFullName=ctx.isAdministrator() ? null : ctx.getUserFullName().asAccountFullName();
  final String networkAclId=Identifier.acl.normalize(request.getNetworkAclId());
  try {
    networkAcls.withRetries().updateByExample(NetworkAcl.exampleWithName(accountFullName,networkAclId),accountFullName,request.getNetworkAclId(),new Callback<NetworkAcl>(){
      @Override public void fire(      final NetworkAcl networkAcl){
        try {
          if (RestrictedTypes.filterPrivileged().apply(networkAcl)) {
            final Optional<NetworkAclEntry> entry=Iterables.tryFind(networkAcl.getEntries(),entryPredicate(request.getEgress(),request.getRuleNumber()));
            if (entry.isPresent()) {
              networkAcl.getEntries().remove(entry.get());
              networkAcl.updateTimeStamps();
            }
 else {
              throw new ClientComputeException("InvalidNetworkAclEntry.NotFound","Entry not found for number: " + request.getRuleNumber());
            }
          }
 else {
            throw new ClientUnauthorizedComputeException("Not authorized to delete network ACL entry");
          }
        }
 catch (        Exception e) {
          throw Exceptions.toUndeclared(e);
        }
      }
    }
);
    invalidate(networkAclId);
  }
 catch (  Exception e) {
    throw handleException(e);
  }
  return reply;
}
