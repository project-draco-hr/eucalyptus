{
  final CreateNetworkAclResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final String vpcId=Identifier.vpc.normalize(request.getVpcId());
  final Supplier<NetworkAcl> allocator=new Supplier<NetworkAcl>(){
    @Override public NetworkAcl get(){
      try {
        final Vpc vpc=vpcs.lookupByName(ctx.getUserFullName().asAccountFullName(),vpcId,Functions.identity());
        final long networkAclsForVpc=networkAcls.countByExample(NetworkAcl.exampleWithOwner(ctx.getUserFullName().asAccountFullName()),Restrictions.eq("vpc.displayName",vpcId),Collections.singletonMap("vpc","vpc"));
        if (networkAclsForVpc >= VpcConfiguration.getNetworkAclsPerVpc()) {
          throw new ClientComputeException("NetworkAclLimitExceeded","Network ACL limit exceeded for " + vpc.getDisplayName());
        }
        return networkAcls.save(NetworkAcl.create(ctx.getUserFullName(),vpc,Identifier.acl.generate(),false));
      }
 catch (      VpcMetadataNotFoundException ex) {
        throw Exceptions.toUndeclared(new ClientComputeException("InvalidVpcID.NotFound","Vpc not found '" + request.getVpcId() + "'"));
      }
catch (      Exception ex) {
        throw new RuntimeException(ex);
      }
    }
  }
;
  reply.setNetworkAcl(allocate(allocator,NetworkAcl.class,NetworkAclType.class));
  return reply;
}
