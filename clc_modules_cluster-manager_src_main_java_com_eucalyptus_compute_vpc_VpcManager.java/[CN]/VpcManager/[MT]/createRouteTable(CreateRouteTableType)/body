{
  final CreateRouteTableResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final String vpcId=Identifier.vpc.normalize(request.getVpcId());
  final Supplier<RouteTable> allocator=new Supplier<RouteTable>(){
    @Override public RouteTable get(){
      try {
        final Vpc vpc=vpcs.lookupByName(ctx.getUserFullName().asAccountFullName(),vpcId,Functions.<Vpc>identity());
        final long routeTablesForVpc=routeTables.countByExample(RouteTable.exampleWithOwner(ctx.getUserFullName().asAccountFullName()),Restrictions.eq("vpc.displayName",vpcId),Collections.singletonMap("vpc","vpc"));
        if (routeTablesForVpc >= VpcConfiguration.getRouteTablesPerVpc()) {
          throw new ClientComputeException(" RouteTableLimitExceeded","Route table limit exceeded for " + vpc.getDisplayName());
        }
        return routeTables.save(RouteTable.create(ctx.getUserFullName(),vpc,Identifier.rtb.generate(),vpc.getCidr(),false));
      }
 catch (      VpcMetadataNotFoundException ex) {
        throw Exceptions.toUndeclared(new ClientComputeException("InvalidVpcID.NotFound","Vpc not found '" + request.getVpcId() + "'"));
      }
catch (      Exception ex) {
        throw new RuntimeException(ex);
      }
    }
  }
;
  reply.setRouteTable(allocate(allocator,RouteTable.class,RouteTableType.class));
  return reply;
}
