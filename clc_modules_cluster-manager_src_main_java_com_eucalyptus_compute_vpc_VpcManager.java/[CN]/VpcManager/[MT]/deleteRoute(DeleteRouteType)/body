{
  final DeleteRouteResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final AccountFullName accountFullName=ctx.isAdministrator() ? null : ctx.getUserFullName().asAccountFullName();
  final String routeTableId=Identifier.rtb.normalize(request.getRouteTableId());
  final String cidr=request.getDestinationCidrBlock();
  try {
    routeTables.withRetries().updateByExample(RouteTable.exampleWithName(accountFullName,routeTableId),accountFullName,request.getRouteTableId(),new Callback<RouteTable>(){
      @Override public void fire(      final RouteTable routeTable){
        try {
          if (RestrictedTypes.filterPrivileged().apply(routeTable)) {
            final Optional<Route> routeOption=Iterables.tryFind(routeTable.getRoutes(),CollectionUtils.propertyPredicate(cidr,RouteTables.RouteFilterStringFunctions.DESTINATION_CIDR));
            if (routeOption.isPresent()) {
              final Route route=routeOption.get();
              if (route.getDestinationCidr().equals(routeTable.getVpc().getCidr())) {
                throw new ClientComputeException("InvalidParameterValue","Cannot remove local route " + cidr + " in route table "+ routeTableId);
              }
              routeTable.getRoutes().remove(route);
              routeTable.updateTimeStamps();
            }
 else {
              throw new ClientComputeException("InvalidRoute.NotFound","Route not found for cidr: " + cidr);
            }
          }
 else {
            throw Exceptions.toUndeclared(new ClientUnauthorizedComputeException("Not authorized to delete route"));
          }
        }
 catch (        Exception e) {
          throw Exceptions.toUndeclared(e);
        }
      }
    }
);
    invalidate(routeTableId);
  }
 catch (  Exception e) {
    throw handleException(e);
  }
  return reply;
}
