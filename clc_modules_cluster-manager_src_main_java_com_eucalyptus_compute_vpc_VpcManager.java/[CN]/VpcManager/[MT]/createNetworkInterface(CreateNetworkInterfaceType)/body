{
  final CreateNetworkInterfaceResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final AccountFullName accountFullName=ctx.getUserFullName().asAccountFullName();
  final String subnetId=Identifier.subnet.normalize(request.getSubnetId());
  final String privateIp=request.getPrivateIpAddress() != null ? request.getPrivateIpAddress() : request.getPrivateIpAddressesSet() != null && !request.getPrivateIpAddressesSet().getItem().isEmpty() ? request.getPrivateIpAddressesSet().getItem().get(0).getPrivateIpAddress() : null;
  final Supplier<NetworkInterface> allocator=new Supplier<NetworkInterface>(){
    @Override public NetworkInterface get(){
      try {
        final Subnet subnet=subnets.lookupByName(accountFullName,subnetId,Functions.<Subnet>identity());
        final Vpc vpc=subnet.getVpc();
        final Set<NetworkGroup> groups=request.getGroupSet() == null ? Sets.newHashSet(securityGroups.lookupDefault(vpc.getDisplayName(),Functions.<NetworkGroup>identity())) : Sets.newHashSet(Iterables.transform(request.getGroupSet().groupIds(),RestrictedTypes.resolver(NetworkGroup.class)));
        if (groups.size() > VpcConfiguration.getSecurityGroupsPerNetworkInterface()) {
          throw new ClientComputeException("SecurityGroupsPerInterfaceLimitExceeded","Security group limit exceeded");
        }
        final String identifier=Identifier.eni.generate();
        if (privateIp != null) {
          final Cidr cidr=Cidr.parse(subnet.getCidr());
          if (!cidr.contains(privateIp)) {
            throw new ClientComputeException("InvalidParameterValue","Address does not fall within the subnet's address range");
          }
 else           if (!Iterables.contains(Iterables.skip(IPRange.fromCidr(cidr),3),PrivateAddresses.asInteger(privateIp))) {
            throw new ClientComputeException("InvalidParameterValue","Address is in subnet's reserved address range");
          }
        }
        final String mac=NetworkInterfaceHelper.mac(identifier);
        final String ip=NetworkInterfaceHelper.allocate(vpc.getDisplayName(),subnet.getDisplayName(),identifier,mac,privateIp);
        return networkInterfaces.save(NetworkInterface.create(ctx.getUserFullName(),vpc,subnet,groups,identifier,mac,ip,vpc.getDnsHostnames() ? VmInstances.dnsName(ip,DomainNames.internalSubdomain()) : null,firstNonNull(request.getDescription(),"")));
      }
 catch (      VpcMetadataNotFoundException ex) {
        throw Exceptions.toUndeclared(new ClientComputeException("InvalidSubnetID.NotFound","Subnet not found '" + request.getSubnetId() + "'"));
      }
catch (      ResourceAllocationException ex) {
        throw Exceptions.toUndeclared(new ClientComputeException("InvalidParameterValue",ex.getMessage()));
      }
catch (      Exception ex) {
        final NoSuchMetadataException e=Exceptions.findCause(ex,NoSuchMetadataException.class);
        if (e != null) {
          throw Exceptions.toUndeclared(new ClientComputeException("InvalidSecurityGroupID.NotFound",e.getMessage()));
        }
        throw new RuntimeException(ex);
      }
    }
  }
;
  reply.setNetworkInterface(allocate(allocator,NetworkInterface.class,NetworkInterfaceType.class));
  return reply;
}
