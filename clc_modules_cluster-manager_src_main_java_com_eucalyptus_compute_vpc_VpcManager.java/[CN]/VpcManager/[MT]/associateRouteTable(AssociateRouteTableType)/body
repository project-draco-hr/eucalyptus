{
  final AssociateRouteTableResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final AccountFullName accountFullName=ctx.getUserFullName().asAccountFullName();
  final String routeTableId=Identifier.rtb.normalize(request.getRouteTableId());
  final String subnetId=Identifier.subnet.normalize(request.getSubnetId());
  try {
    final RouteTable routeTable=routeTables.updateByExample(RouteTable.exampleWithName(accountFullName,routeTableId),accountFullName,request.getRouteTableId(),new Callback<RouteTable>(){
      @Override public void fire(      final RouteTable routeTable){
        if (RestrictedTypes.filterPrivileged().apply(routeTable))         try {
          final Subnet subnet=subnets.lookupByName(accountFullName,subnetId,Functions.identity());
          if (!subnet.getVpc().getDisplayName().equals(routeTable.getVpc().getDisplayName())) {
            throw Exceptions.toUndeclared(new ClientComputeException("InvalidParameterValue","Route table " + routeTableId + " and subnet "+ subnetId+ " belong to different networks"));
          }
          if (!Iterables.tryFind(routeTable.getRouteTableAssociations(),CollectionUtils.propertyPredicate(subnetId,RouteTables.AssociationFilterStringFunctions.SUBNET_ID)).isPresent()) {
            routeTable.associate(subnet);
          }
        }
 catch (        VpcMetadataNotFoundException e) {
          throw Exceptions.toUndeclared(new ClientComputeException("InvalidSubnetID.NotFound","Subnet (" + request.getSubnetId() + ") not found"));
        }
catch (        Exception e) {
          throw Exceptions.toUndeclared(e);
        }
 else {
          throw Exceptions.toUndeclared(new ClientUnauthorizedComputeException("Not authorized to associate route table"));
        }
      }
    }
);
    final RouteTableAssociation association=Iterables.find(routeTable.getRouteTableAssociations(),CollectionUtils.propertyPredicate(subnetId,RouteTables.AssociationFilterStringFunctions.SUBNET_ID));
    reply.setAssociationId(association.getAssociationId());
    invalidate(subnetId);
  }
 catch (  VpcMetadataNotFoundException e) {
    throw new ClientComputeException("InvalidRouteTableID.NotFound","Route table not found '" + request.getRouteTableId() + "'");
  }
catch (  Exception e) {
    if (Exceptions.isCausedBy(e,ConstraintViolationException.class)) {
      throw new ClientComputeException("InvalidParameterValue","Subnet " + subnetId + " already associated.");
    }
    throw handleException(e);
  }
  return reply;
}
