{
  final CreateRouteResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final AccountFullName accountFullName=ctx.getUserFullName().asAccountFullName();
  final String gatewayId=request.getGatewayId() == null ? null : Identifier.igw.normalize(request.getGatewayId());
  final String natGatewayId=request.getNatGatewayId() == null ? null : Identifier.nat.normalize(request.getNatGatewayId());
  final String instanceId=request.getInstanceId() == null ? null : Identifier.i.normalize(request.getInstanceId());
  final String networkInterfaceId=request.getNetworkInterfaceId() == null ? null : Identifier.eni.normalize(request.getNetworkInterfaceId());
  final String routeTableId=Identifier.rtb.normalize(request.getRouteTableId());
  final String destinationCidr=request.getDestinationCidrBlock();
  final Optional<Cidr> destinationCidrOption=Cidr.parse().apply(destinationCidr);
  if (!destinationCidrOption.isPresent()) {
    throw new ClientComputeException("InvalidParameterValue","Cidr invalid: " + destinationCidr);
  }
  if (gatewayId == null && natGatewayId == null && instanceId == null && networkInterfaceId == null) {
    throw new ClientComputeException("InvalidParameterCombination","Route target required");
  }
  final Supplier<Route> allocator=transactional(new Supplier<Route>(){
    @Override public Route get(){
      try {
        final NetworkInterface networkInterface=networkInterfaceId == null ? null : networkInterfaces.lookupByName(accountFullName,networkInterfaceId,Functions.<NetworkInterface>identity());
        final VmInstance instance=instanceId == null ? null : VmInstances.lookup(instanceId);
        final InternetGateway internetGateway=gatewayId == null ? null : internetGateways.lookupByName(accountFullName,gatewayId,Functions.<InternetGateway>identity());
        final NatGateway natGateway=natGatewayId == null ? null : natGateways.lookupByName(accountFullName,natGatewayId,Functions.<NatGateway>identity());
        routeTables.updateByExample(RouteTable.exampleWithName(accountFullName,routeTableId),accountFullName,request.getRouteTableId(),new Callback<RouteTable>(){
          @Override public void fire(          final RouteTable routeTable){
            try {
              if (RestrictedTypes.filterPrivileged().apply(routeTable)) {
                final Optional<Route> existingRoute=Iterables.tryFind(routeTable.getRoutes(),CollectionUtils.propertyPredicate(destinationCidr,RouteTables.RouteFilterStringFunctions.DESTINATION_CIDR));
                if (existingRoute.isPresent()) {
                  throw new ClientComputeException("RouteAlreadyExists","Route exists for cidr: " + destinationCidr);
                }
                if (routeTable.getRoutes().size() >= VpcConfiguration.getRoutesPerTable()) {
                  throw new ClientComputeException("RouteLimitExceeded","Route limit exceeded for " + request.getRouteTableId());
                }
                NetworkInterface targetNetworkInterface=networkInterface;
                if (instance != null) {
                  final List<NetworkInterface> enis=instance.getNetworkInterfaces();
                  if (enis.size() != 1) {
                    throw new ClientComputeException("InvalidInstanceID","Network interface not found for " + request.getInstanceId());
                  }
                  targetNetworkInterface=enis.get(0);
                }
                final Route route;
                if (targetNetworkInterface != null) {
                  if (!RestrictedTypes.filterPrivileged().apply(targetNetworkInterface) || !targetNetworkInterface.getVpc().getDisplayName().equals(routeTable.getVpc().getDisplayName())) {
                    throw new ClientComputeException("InvalidParameterValue","Network interface invalid: " + targetNetworkInterface.getDisplayName());
                  }
                  route=Route.create(routeTable,Route.RouteOrigin.CreateRoute,destinationCidr,targetNetworkInterface);
                }
 else                 if (natGateway != null) {
                  if (!RestrictedTypes.filterPrivileged().apply(natGateway) || !natGateway.getVpcId().equals(routeTable.getVpc().getDisplayName())) {
                    throw new ClientComputeException("InvalidParameterValue","NAT gateway invalid: " + natGateway.getDisplayName());
                  }
                  route=Route.create(routeTable,Route.RouteOrigin.CreateRoute,destinationCidr,natGateway);
                }
 else {
                  if (internetGateway == null || internetGateway.getVpc() == null || !internetGateway.getVpc().getDisplayName().equals(routeTable.getVpc().getDisplayName())) {
                    throw new ClientComputeException("InvalidParameterValue","Internet gateway invalid: " + gatewayId);
                  }
                  route=Route.create(routeTable,Route.RouteOrigin.CreateRoute,destinationCidr,internetGateway);
                }
                routeTable.getRoutes().add(route);
                routeTable.updateTimeStamps();
              }
 else {
                throw new ClientUnauthorizedComputeException("Not authorized to create route");
              }
            }
 catch (            Exception e) {
              throw Exceptions.toUndeclared(e);
            }
          }
        }
);
        return null;
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex);
      }
    }
  }
);
  try {
    allocator.get();
    invalidate(routeTableId);
  }
 catch (  Exception e) {
    throw handleException(e);
  }
  return reply;
}
