{
  final DeleteVpcResponseType reply=request.getReply();
  delete(Identifier.vpc,request.getVpcId(),new Function<Pair<Optional<AccountFullName>,String>,Vpc>(){
    @Override public Vpc apply(    final Pair<Optional<AccountFullName>,String> accountAndId){
      try {
        final Vpc vpc=vpcs.lookupByName(accountAndId.getLeft().orNull(),accountAndId.getRight(),Functions.identity());
        if (RestrictedTypes.filterPrivileged().apply(vpc)) {
          if (Boolean.TRUE.equals(vpc.getDefaultVpc()) && Contexts.lookup().isAdministrator()) {
            final List<Subnet> defaultSubnets=subnets.listByExample(Subnet.exampleDefault(AccountFullName.getInstance(vpc.getOwnerAccountNumber()),null),Predicates.alwaysTrue(),Functions.identity());
            for (            final Subnet subnet : defaultSubnets) {
              subnets.delete(subnet);
            }
            try {
              final InternetGateway internetGateway=internetGateways.lookupByVpc(null,vpc.getDisplayName(),Functions.identity());
              internetGateways.delete(internetGateway);
            }
 catch (            VpcMetadataNotFoundException e) {
            }
          }
          try {
            networkAcls.delete(networkAcls.lookupDefault(vpc.getDisplayName(),Functions.identity()));
          }
 catch (          VpcMetadataNotFoundException e) {
          }
          try {
            routeTables.delete(routeTables.lookupMain(vpc.getDisplayName(),Functions.identity()));
          }
 catch (          VpcMetadataNotFoundException e) {
          }
          try {
            securityGroups.delete(securityGroups.lookupDefault(vpc.getDisplayName(),Functions.identity()));
          }
 catch (          VpcMetadataNotFoundException e) {
          }
          vpcs.delete(vpc);
        }
 else {
          throw Exceptions.toUndeclared(new ClientUnauthorizedComputeException("Not authorized to delete vpc"));
        }
        return null;
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex);
      }
    }
  }
);
  return reply;
}
