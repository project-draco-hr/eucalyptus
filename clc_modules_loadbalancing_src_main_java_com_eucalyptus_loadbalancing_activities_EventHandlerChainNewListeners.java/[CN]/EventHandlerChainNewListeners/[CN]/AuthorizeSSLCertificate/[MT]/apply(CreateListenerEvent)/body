{
  final Collection<Listener> listeners=evt.getListeners();
  final Set<String> certArns=Sets.newHashSet();
  for (  final Listener listener : listeners) {
    final PROTOCOL protocol=PROTOCOL.valueOf(listener.getProtocol().toUpperCase());
    if (protocol.equals(PROTOCOL.HTTPS) || protocol.equals(PROTOCOL.SSL)) {
      certArns.add(listener.getSSLCertificateId());
    }
  }
  if (certArns.size() <= 0)   return;
  roleName=String.format("%s-%s-%s",EventHandlerChainNew.IAMRoleSetup.ROLE_NAME_PREFIX,evt.getContext().getAccount().getAccountNumber(),evt.getLoadBalancer());
  final String prefix=String.format("arn:aws:iam::%s:server-certificate",evt.getContext().getAccount().getAccountNumber());
  for (  final String arn : certArns) {
    if (!arn.startsWith(prefix))     continue;
    String pathAndName=arn.replace(prefix,"");
    String certName=pathAndName.substring(pathAndName.lastIndexOf("/") + 1);
    String policyName=String.format("%s-%s-%s-%s",SERVER_CERT_ROLE_POLICY_NAME_PREFIX,evt.getContext().getAccount().getAccountNumber(),evt.getLoadBalancer(),certName);
    final String rolePolicyDoc=ROLE_SERVER_CERT_POLICY_DOCUMENT.replace("CERT_ARN_PLACEHOLDER",arn);
    try {
      EucalyptusActivityTasks.getInstance().putRolePolicy(roleName,policyName,rolePolicyDoc);
      policyNames.add(policyName);
    }
 catch (    final Exception ex) {
      throw new EventHandlerException("failed to authorize server certificate for SSL listener",ex);
    }
  }
}
