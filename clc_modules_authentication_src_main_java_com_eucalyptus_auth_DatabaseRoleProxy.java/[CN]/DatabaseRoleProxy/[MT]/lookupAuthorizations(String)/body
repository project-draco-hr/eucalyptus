{
  if (resourceType == null) {
    throw new AuthException("Empty resource type");
  }
  final EntityWrapper<AuthorizationEntity> db=EntityWrapper.get(AuthorizationEntity.class);
  try {
    @SuppressWarnings("unchecked") final List<AuthorizationEntity> authorizations=(List<AuthorizationEntity>)db.createCriteria(AuthorizationEntity.class).add(Restrictions.and(Restrictions.or(Restrictions.eq("type",resourceType),Restrictions.eq("type","*")),Restrictions.in("effect",EnumSet.of(Authorization.EffectType.Allow,Authorization.EffectType.Deny)))).createCriteria("statement").createCriteria("policy").createCriteria("role").add(Restrictions.eq("roleId",getRoleId())).setCacheable(true).list();
    final List<Authorization> results=Lists.newArrayList();
    for (    final AuthorizationEntity auth : authorizations) {
      results.add(new DatabaseAuthorizationProxy(auth));
    }
    return results;
  }
 catch (  Exception e) {
    Debugging.logError(LOG,e,"Failed to lookup authorization for user with ID " + getRoleId() + ", type="+ resourceType);
    throw new AuthException("Failed to lookup auth",e);
  }
 finally {
    if (db.isActive())     db.rollback();
  }
}
