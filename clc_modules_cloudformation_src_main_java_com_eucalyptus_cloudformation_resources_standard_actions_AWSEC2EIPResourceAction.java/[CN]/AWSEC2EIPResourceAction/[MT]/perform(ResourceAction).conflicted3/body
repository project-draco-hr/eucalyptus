{
  AWSEC2EIPResourceAction action=(AWSEC2EIPResourceAction)resourceAction;
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
  if (!Boolean.TRUE.equals(action.info.getCreatedEnoughToDelete()))   return action;
  final DescribeAddressesResponseType describeAddressesResponseType=describeAddresses(action,configuration);
  if (describeAddressesResponseType.getAddressesSet() != null && !describeAddressesResponseType.getAddressesSet().isEmpty()) {
    ReleaseAddressType releaseAddressType=MessageHelper.createMessage(ReleaseAddressType.class,action.info.getEffectiveUserId());
    if (action.properties.getDomain() != null) {
      releaseAddressType.setAllocationId(JsonHelper.getJsonNodeFromString(action.info.getAllocationId()).asText());
    }
 else {
      releaseAddressType.setPublicIp(action.info.getPhysicalResourceId());
    }
    AsyncRequests.<ReleaseAddressType,ReleaseAddressResponseType>sendSync(configuration,releaseAddressType);
  }
  return action;
}
