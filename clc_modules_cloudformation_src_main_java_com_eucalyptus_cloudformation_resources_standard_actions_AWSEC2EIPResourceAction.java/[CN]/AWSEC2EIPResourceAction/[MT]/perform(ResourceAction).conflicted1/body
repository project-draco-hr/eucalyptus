{
  final AWSEC2EIPResourceAction action=(AWSEC2EIPResourceAction)resourceAction;
  if (action.info.getPhysicalResourceId() == null)   return action;
  if (action.properties.getInstanceId() != null) {
    final ServiceConfiguration configuration=Topology.lookup(Compute.class);
    final List<AddressInfoType> addresses=describeAddresses(action,configuration).getAddressesSet();
    if (addresses != null && !addresses.isEmpty() && (addresses.get(0).getInstanceId() != null || addresses.get(0).getNetworkInterfaceId() != null)) {
      final DisassociateAddressType disassociateAddressType=MessageHelper.createMessage(DisassociateAddressType.class,action.info.getEffectiveUserId());
      if (action.properties.getDomain() != null) {
        disassociateAddressType.setAssociationId(addresses.get(0).getAssociationId());
      }
 else {
        disassociateAddressType.setPublicIp(action.info.getPhysicalResourceId());
      }
      AsyncRequests.<DisassociateAddressType,DisassociateAddressResponseType>sendSync(configuration,disassociateAddressType);
    }
    EC2Helper.refreshInstanceAttributes(action.getStackEntity(),action.properties.getInstanceId(),action.info.getEffectiveUserId(),action.getStackEntity().getStackVersion());
  }
  return action;
}
