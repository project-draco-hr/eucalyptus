{
  AWSEC2EIPResourceAction action=(AWSEC2EIPResourceAction)resourceAction;
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
  if (action.properties.getInstanceId() != null) {
    DescribeInstancesType describeInstancesType=MessageHelper.createMessage(DescribeInstancesType.class,action.info.getEffectiveUserId());
    describeInstancesType.setInstancesSet(Lists.newArrayList(action.properties.getInstanceId()));
    DescribeInstancesResponseType describeInstancesResponseType=AsyncRequests.<DescribeInstancesType,DescribeInstancesResponseType>sendSync(configuration,describeInstancesType);
    if (describeInstancesResponseType.getReservationSet() == null || describeInstancesResponseType.getReservationSet().isEmpty()) {
      throw new ValidationErrorException("No such instance " + action.properties.getInstanceId());
    }
    AssociateAddressType associateAddressType=MessageHelper.createMessage(AssociateAddressType.class,action.info.getEffectiveUserId());
    if (action.properties.getDomain() != null) {
      associateAddressType.setAllocationId(JsonHelper.getJsonNodeFromString(action.info.getAllocationId()).asText());
    }
 else {
      associateAddressType.setPublicIp(action.info.getPhysicalResourceId());
    }
    associateAddressType.setInstanceId(action.properties.getInstanceId());
    AsyncRequests.<AssociateAddressType,AssociateAddressResponseType>sendSync(configuration,associateAddressType);
    if (action.properties.getInstanceId() != null) {
      EC2Helper.refreshInstanceAttributes(action.getStackEntity(),action.properties.getInstanceId(),action.info.getEffectiveUserId());
    }
  }
  return action;
}
