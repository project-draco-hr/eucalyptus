{
  Function<VolumeInfo,VolumeToken> addToken=new Function<VolumeInfo,VolumeToken>(){
    @Override public VolumeToken apply(    VolumeInfo src){
      try {
        VolumeInfo volRecord=Entities.merge(src);
        VolumeToken token=new VolumeToken();
        token.setVolume(volRecord);
        token.setIsValid(true);
        token.setToken(Crypto.generateSessionToken());
        return token;
      }
 catch (      Exception e) {
        LOG.error("Error creating new volume token for " + vol.getVolumeId());
      }
      return null;
    }
  }
;
  try {
    return Entities.asTransaction(VolumeInfo.class,addToken,VolumeToken.TX_RETRIES).apply(vol);
  }
 catch (  RuntimeException e) {
    LOG.error("Failed to create new token for volume " + vol.getVolumeId() + " Msg: "+ e.getMessage(),e);
    throw new EucalyptusCloudException("Failed new token creation.",e);
  }
}
