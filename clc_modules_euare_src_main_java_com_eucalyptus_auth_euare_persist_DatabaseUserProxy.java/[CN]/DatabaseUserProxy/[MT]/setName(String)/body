{
  try {
    NAME_CHECKER.check(name);
  }
 catch (  InvalidValueException e) {
    Debugging.logError(LOG,e,"Invalid user name " + name);
    throw new AuthException(AuthException.INVALID_NAME,e);
  }
  try {
    this.getAccount().lookupUserByName(name);
  }
 catch (  AuthException e) {
    try (final TransactionResource db=Entities.transactionFor(UserEntity.class)){
      UserEntity user=DatabaseAuthUtils.getUnique(UserEntity.class,"userId",this.delegate.getUserId());
      user.setName(name);
      for (      GroupEntity g : user.getGroups()) {
        if (g.isUserGroup()) {
          g.setName(DatabaseAuthUtils.getUserGroupName(name));
          break;
        }
      }
      db.commit();
    }
 catch (    Exception t) {
      Debugging.logError(LOG,t,"Failed to setName for " + this.delegate);
      throw new AuthException(t);
    }
    return;
  }
  throw new AuthException(AuthException.USER_ALREADY_EXISTS);
}
