{
  if (Strings.isNullOrEmpty(name)) {
    throw new AuthException(AuthException.EMPTY_POLICY_NAME);
  }
  try (final TransactionResource db=Entities.transactionFor(UserEntity.class)){
    UserEntity user=DatabaseAuthUtils.getUnique(UserEntity.class,UserEntity_.userId,this.delegate.getUserId());
    GroupEntity group=getUserGroupEntity(user);
    if (group == null) {
      throw new RuntimeException("Can't find user group for user " + this.delegate.getName());
    }
    PolicyEntity policy=DatabaseAuthUtils.removeGroupPolicy(group,name);
    if (policy != null) {
      Entities.delete(policy);
    }
    db.commit();
  }
 catch (  Exception e) {
    Debugging.logError(LOG,e,"Failed to remove policy " + name + " in "+ this.delegate);
    throw new AuthException("Failed to remove policy",e);
  }
}
