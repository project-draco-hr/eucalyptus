{
  this.transition(State.unallocated,State.allocated,false,true,new SplitTransition(Transition.allocating){
    public void top(){
      Address.this.instanceUuid=UNASSIGNED_INSTANCEUUID;
      Address.this.instanceId=UNASSIGNED_INSTANCEID;
      Address.this.instanceAddress=UNASSIGNED_INSTANCEADDR;
      Address.this.associationId=null;
      Address.this.networkInterfaceId=null;
      Address.this.networkInterfaceOwnerId=null;
      Address.this.privateAddress=null;
      Address.this.allocationId=domain == Domain.vpc ? ResourceIdentifiers.generateString(ID_PREFIX_ALLOC) : null;
      Address.this.domain=domain;
      Address.this.setOwner(ownerFullName);
      Address.addAddress(Address.this);
      try {
        Addresses.getInstance().register(Address.this);
      }
 catch (      NoSuchElementException e) {
        LOG.debug(e);
      }
      Address.this.stateUuid=UUID.randomUUID().toString();
      Address.this.atomicState.attemptMark(State.allocated,false);
    }
    public void bottom(){
    }
  }
);
  fireUsageEvent(ownerFullName,Suppliers.ofInstance(AddressEvent.forAllocate()));
  return this;
}
