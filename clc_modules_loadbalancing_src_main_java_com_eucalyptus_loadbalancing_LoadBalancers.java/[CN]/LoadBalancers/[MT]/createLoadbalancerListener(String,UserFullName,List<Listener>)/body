{
  validateListener(lbName,ownerFullName,listeners);
  final Predicate<Void> creator=new Predicate<Void>(){
    @Override public boolean apply(    Void v){
      LoadBalancer lb=null;
      try {
        lb=LoadBalancers.getLoadbalancer(ownerFullName,lbName);
      }
 catch (      Exception ex) {
        LOG.warn("No loadbalancer is found with name=" + lbName);
        return false;
      }
      for (      Listener listener : listeners) {
        try {
          if (!lb.hasListener(listener.getLoadBalancerPort().intValue())) {
            LoadBalancerListener.Builder builder=new LoadBalancerListener.Builder(lb,listener.getInstancePort().intValue(),listener.getLoadBalancerPort().intValue(),LoadBalancerListener.PROTOCOL.valueOf(listener.getProtocol().toUpperCase()));
            if (!Strings.isNullOrEmpty(listener.getInstanceProtocol()))             builder.instanceProtocol(PROTOCOL.valueOf(listener.getInstanceProtocol()));
            if (!Strings.isNullOrEmpty(listener.getSslCertificateId()))             builder.withSSLCerntificate(listener.getSslCertificateId());
            Entities.persist(builder.build());
          }
        }
 catch (        Exception ex) {
          LOG.warn("failed to create the listener object",ex);
        }
      }
      return true;
    }
  }
;
  Entities.asTransaction(LoadBalancerListener.class,creator).apply(null);
}
