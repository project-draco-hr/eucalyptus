{
  final Function<Void,LoadBalancingException> validator=new Function<Void,LoadBalancingException>(){
    @Override public LoadBalancingException apply(    Void v){
      LoadBalancer lb=null;
      try {
        lb=LoadBalancers.getLoadbalancer(ownerFullName,lbName);
      }
 catch (      Exception ex) {
        return new AccessPointNotFoundException();
      }
      if (!RestrictedTypes.filterPrivileged().apply(lb)) {
        return new AccessPointNotFoundException();
      }
      try {
        for (        Listener listener : listeners) {
          if (!LoadBalancerListener.acceptable(listener))           return new InvalidConfigurationRequestException();
          if (lb.hasListener(listener.getLoadBalancerPort().intValue())) {
            LoadBalancerListener existing=lb.findListener(listener.getLoadBalancerPort().intValue());
            if (existing.getInstancePort() == listener.getInstancePort().intValue() && existing.getProtocol().name().toLowerCase().equals(listener.getProtocol().toLowerCase()) && (existing.getCertificateId() != null && existing.getCertificateId().equals(listener.getSslCertificateId())))             ;
 else             return new DuplicateListenerException();
          }
        }
      }
 catch (      Exception ex) {
        LOG.warn("duplicate check failed",ex);
        return new DuplicateListenerException();
      }
      return null;
    }
  }
;
  LoadBalancingException checkResult=Entities.asTransaction(LoadBalancer.class,validator).apply(null);
  if (checkResult != null)   throw checkResult;
  final Predicate<Void> creator=new Predicate<Void>(){
    @Override public boolean apply(    Void v){
      LoadBalancer lb=null;
      try {
        lb=LoadBalancers.getLoadbalancer(ownerFullName,lbName);
      }
 catch (      Exception ex) {
        LOG.warn("No loadbalancer is found with name=" + lbName);
        return false;
      }
      for (      Listener listener : listeners) {
        try {
          if (!lb.hasListener(listener.getLoadBalancerPort().intValue())) {
            LoadBalancerListener.Builder builder=new LoadBalancerListener.Builder(lb,listener.getInstancePort().intValue(),listener.getLoadBalancerPort().intValue(),LoadBalancerListener.PROTOCOL.valueOf(listener.getProtocol().toUpperCase()));
            if (!Strings.isNullOrEmpty(listener.getInstanceProtocol()))             builder.instanceProtocol(PROTOCOL.valueOf(listener.getInstanceProtocol()));
            if (!Strings.isNullOrEmpty(listener.getSslCertificateId()))             builder.withSSLCerntificate(listener.getSslCertificateId());
            Entities.persist(builder.build());
          }
        }
 catch (        Exception ex) {
          LOG.warn("failed to create the listener object",ex);
        }
      }
      return true;
    }
  }
;
  Entities.asTransaction(LoadBalancerListener.class,creator).apply(null);
}
