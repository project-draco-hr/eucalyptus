{
  LoadBalancer lb;
  try {
    lb=LoadBalancers.getLoadbalancer(ctx,lbName);
  }
 catch (  Exception ex) {
    throw new InternalFailure400Exception("unable to find the loadbalancer");
  }
  validateListener(lb,listeners);
  final Predicate<LoadBalancer> creator=new Predicate<LoadBalancer>(){
    @Override public boolean apply(    LoadBalancer lb){
      for (      Listener listener : listeners) {
        try {
          if (!lb.hasListener(listener.getLoadBalancerPort())) {
            LoadBalancerListener.Builder builder=new LoadBalancerListener.Builder(lb,listener.getInstancePort(),listener.getLoadBalancerPort(),LoadBalancerListener.PROTOCOL.valueOf(listener.getProtocol().toUpperCase()));
            if (!Strings.isNullOrEmpty(listener.getInstanceProtocol()))             builder.instanceProtocol(PROTOCOL.valueOf(listener.getInstanceProtocol()));
            if (!Strings.isNullOrEmpty(listener.getSSLCertificateId()))             builder.withSSLCerntificate(listener.getSSLCertificateId());
            Entities.persist(builder.build());
          }
        }
 catch (        Exception ex) {
          LOG.warn("failed to create the listener object",ex);
        }
      }
      return true;
    }
  }
;
  Entities.asTransaction(LoadBalancerListener.class,creator).apply(lb);
}
