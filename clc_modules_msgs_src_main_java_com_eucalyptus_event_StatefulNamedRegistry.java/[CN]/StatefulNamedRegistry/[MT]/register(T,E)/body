{
  StatefulValue<T,E> oldValue=null;
  StatefulValue<T,E> newValue=null;
  assertThat(obj,notNullValue());
  this.canHas.writeLock().lock();
  try {
    newValue=new StatefulValue<T,E>(nextState,obj);
    oldValue=this.stateMap.putIfAbsent(obj.getName(),newValue);
    if (oldValue != null) {
      newValue=new StatefulValue<T,E>(nextState,oldValue.getValue());
      if (this.stateMap.replace(obj.getName(),oldValue,newValue)) {
        return newValue.getValue();
      }
 else {
        return (newValue=oldValue).getValue();
      }
    }
 else {
      return newValue.getValue();
    }
  }
  finally {
    this.canHas.writeLock().unlock();
    this.fireStateChange(oldValue,nextState);
  }
}
