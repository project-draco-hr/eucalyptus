{
  final ImportImageType req=new ImportImageType();
  final ImportDiskImage image=new ImportDiskImage();
  final DiskImageDetail kernelImg=new DiskImageDetail();
  kernelImg.setFormat("KERNEL");
  kernelImg.setImportManifestUrl(this.kernelManifestUrl);
  if (this.kernelImageSize != null)   kernelImg.setBytes(this.kernelImageSize);
  final DiskImageDetail ramdiskImg=new DiskImageDetail();
  ramdiskImg.setFormat("RAMDISK");
  ramdiskImg.setImportManifestUrl(this.ramdiskManifestUrl);
  if (this.ramdiskImageSize != null)   ramdiskImg.setBytes(this.ramdiskImageSize);
  final DiskImageDetail machineImg=new DiskImageDetail();
  machineImg.setFormat("PARTITION");
  machineImg.setImportManifestUrl(this.machineManifestUrl);
  if (this.machineImageSize != null)   machineImg.setBytes(this.machineImageSize);
  image.setDiskImageSet(Lists.<DiskImageDetail>newArrayList(kernelImg,ramdiskImg,machineImg));
  final ConvertedImageDetail convertImg=new ConvertedImageDetail();
  convertImg.setBucket(this.destinationBucket);
  convertImg.setPrefix(this.destinationPrefix);
  image.setConvertedImage(convertImg);
  req.setImage(image);
  req.setDescription("Conversion during image registration");
  return req;
}
