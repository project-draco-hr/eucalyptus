{
  final List<Class<?>> lookupTypes=Classes.genericsToClasses(listener);
  if (lookupTypes.isEmpty() || lookupTypes.contains(Event.class) || lookupTypes.get(0).isAssignableFrom(Classes.typeOf(type))) {
    if ((type instanceof Class) && Event.class.isAssignableFrom((Class)type)) {
      this.eventMap.register((Class)type,listener);
    }
 else {
      if (!this.registryMap.containsKey(type.getClass())) {
        this.registryMap.put(type.getClass(),new ReentrantListenerRegistry());
      }
      this.registryMap.get(type.getClass()).register(type,listener);
    }
  }
 else {
    throw Exceptions.fatal(new IllegalArgumentException("Failed to register listener " + listener.getClass().getCanonicalName() + "because the declared generic type "+ lookupTypes+ " is not assignable from the provided event type: "+ type.getClass().getCanonicalName()));
  }
}
