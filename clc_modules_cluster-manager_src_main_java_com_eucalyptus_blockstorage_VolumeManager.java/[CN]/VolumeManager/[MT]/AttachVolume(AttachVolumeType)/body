{
  AttachVolumeResponseType reply=(AttachVolumeResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  if (request.getDevice() == null || request.getDevice().endsWith("sda")) {
    throw new EucalyptusCloudException("Invalid device name specified: " + request.getDevice());
  }
  VmInstance vm=null;
  try {
    vm=VmInstances.getInstance().lookup(request.getInstanceId());
  }
 catch (  NoSuchElementException e) {
    LOG.debug(e,e);
    throw new EucalyptusCloudException("Instance does not exist: " + request.getInstanceId());
  }
  if (!Lookups.checkPrivilege(request,PolicySpec.VENDOR_EC2,PolicySpec.EC2_RESOURCE_INSTANCE,request.getInstanceId(),vm.getOwner())) {
    throw new EucalyptusCloudException("Not authorized to attach volume to instance " + request.getInstanceId() + " by "+ ctx.getUser().getName());
  }
  Cluster cluster=null;
  try {
    cluster=Clusters.getInstance().lookup(vm.getClusterName());
  }
 catch (  NoSuchElementException e) {
    LOG.debug(e,e);
    throw new EucalyptusCloudException("Cluster does not exist: " + vm.getClusterName());
  }
  final String deviceName=request.getDevice();
  final String volumeId=request.getVolumeId();
  try {
    vm.lookupVolumeAttachment(new Predicate<AttachedVolume>(){
      @Override public boolean apply(      AttachedVolume arg0){
        return arg0.getDevice().replaceAll("unknown,requested:","").equals(deviceName);
      }
    }
);
    throw new EucalyptusCloudException("Already have a device attached to: " + request.getDevice());
  }
 catch (  NoSuchElementException ex1) {
  }
  for (  VmInstance iter : VmInstances.getInstance().listValues()) {
    try {
      iter.lookupVolumeAttachment(volumeId);
      throw new EucalyptusCloudException("Volume already attached: " + request.getVolumeId());
    }
 catch (    NoSuchElementException ex) {
    }
  }
  EntityWrapper<Volume> db=EntityWrapper.get(Volume.class);
  Volume volume=null;
  try {
    volume=db.getUnique(Volume.named(ctx.getUserFullName(),request.getVolumeId()));
    if (volume.getRemoteDevice() == null) {
      StorageUtil.getVolumeReply(new HashMap<String,AttachedVolume>(),Lists.newArrayList(volume));
    }
    db.commit();
  }
 catch (  EucalyptusCloudException e) {
    LOG.debug(e,e);
    db.rollback();
    throw new EucalyptusCloudException("Volume does not exist: " + request.getVolumeId());
  }
  if (!Lookups.checkPrivilege(request,PolicySpec.VENDOR_EC2,PolicySpec.EC2_RESOURCE_VOLUME,request.getVolumeId(),volume.getOwner())) {
    throw new EucalyptusCloudException("Not authorized to attach volume " + request.getVolumeId() + " by "+ ctx.getUser().getName());
  }
  ServiceConfiguration sc=Partitions.lookupService(Storage.class,volume.getPartition());
  ServiceConfiguration scVm=Partitions.lookupService(Storage.class,cluster.getConfiguration().getPartition());
  if (!sc.equals(scVm)) {
    throw new EucalyptusCloudException("Can only attach volumes in the same cluster: " + request.getVolumeId());
  }
 else   if ("invalid".equals(volume.getRemoteDevice())) {
    throw new EucalyptusCloudException("Volume is not yet available: " + request.getVolumeId());
  }
  AttachStorageVolumeResponseType scAttachResponse;
  try {
    scAttachResponse=ServiceDispatcher.lookup(sc).send(new AttachStorageVolumeType(cluster.getNode(vm.getServiceTag()).getIqn(),volume.getDisplayName()));
  }
 catch (  Exception e) {
    LOG.debug(e,e);
    throw new EucalyptusCloudException(e.getMessage());
  }
  request.setRemoteDevice(scAttachResponse.getRemoteDeviceString());
  AttachedVolume attachVol=new AttachedVolume(volume.getDisplayName(),vm.getInstanceId(),request.getDevice(),request.getRemoteDevice());
  attachVol.setStatus("attaching");
  AsyncRequests.newRequest(new VolumeAttachCallback(request,attachVol)).dispatch(cluster.getConfiguration());
  vm.addVolumeAttachment(attachVol);
  EventRecord.here(VolumeManager.class,EventClass.VOLUME,EventType.VOLUME_ATTACH).withDetails(volume.getOwner().toString(),volume.getDisplayName(),"instance",vm.getInstanceId()).withDetails("cluster",vm.getClusterName()).info();
  volume.setState(State.BUSY);
  reply.setAttachedVolume(attachVol);
  return reply;
}
