{
  AttachVolumeResponseType reply=(AttachVolumeResponseType)request.getReply();
  final String deviceName=request.getDevice();
  final String volumeId=request.getVolumeId();
  final Context ctx=Contexts.lookup();
  if (request.getDevice() == null || request.getDevice().endsWith("sda") || request.getDevice().endsWith("sdb")) {
    throw new EucalyptusCloudException("Invalid device name specified: " + request.getDevice());
  }
  VmInstance vm=null;
  try {
    vm=RestrictedTypes.doPrivileged(request.getInstanceId(),VmInstance.class);
  }
 catch (  NoSuchElementException ex) {
    LOG.debug(ex,ex);
    throw new EucalyptusCloudException("Instance does not exist: " + request.getInstanceId(),ex);
  }
catch (  Exception ex) {
    LOG.debug(ex,ex);
    throw new EucalyptusCloudException(ex.getMessage(),ex);
  }
  AccountFullName ownerFullName=ctx.getUserFullName().asAccountFullName();
  Volume volume=Volumes.lookup(ownerFullName,volumeId);
  if (!RestrictedTypes.filterPrivileged().apply(volume)) {
    throw new EucalyptusCloudException("Not authorized to attach volume " + request.getVolumeId() + " by "+ ctx.getUser().getName());
  }
  Cluster cluster=null;
  try {
    ServiceConfiguration ccConfig=Topology.lookup(ClusterController.class,vm.lookupPartition());
    cluster=Clusters.lookup(ccConfig);
  }
 catch (  NoSuchElementException e) {
    LOG.debug(e,e);
    throw new EucalyptusCloudException("Cluster does not exist in partition: " + vm.getPartition());
  }
  try {
    vm.lookupVolumeAttachmentByDevice(deviceName);
    throw new EucalyptusCloudException("Already have a device attached to: " + request.getDevice());
  }
 catch (  NoSuchElementException ex1) {
  }
  try {
    VmInstances.lookupVolumeAttachment(volumeId);
    throw new EucalyptusCloudException("Volume already attached: " + request.getVolumeId());
  }
 catch (  Exception ex1) {
  }
  Partition volPartition=Partitions.lookupByName(volume.getPartition());
  ServiceConfiguration sc=Topology.lookup(Storage.class,volPartition);
  ServiceConfiguration scVm=Topology.lookup(Storage.class,cluster.getConfiguration().lookupPartition());
  if (!sc.equals(scVm)) {
    throw new EucalyptusCloudException("Can only attach volumes in the same zone: " + request.getVolumeId());
  }
 else   if ("invalid".equals(volume.getRemoteDevice())) {
    throw new EucalyptusCloudException("Volume is not yet available: " + request.getVolumeId());
  }
  AttachStorageVolumeResponseType scAttachResponse;
  try {
    AttachStorageVolumeType req=new AttachStorageVolumeType(cluster.getNode(vm.getServiceTag()).getIqn(),volume.getDisplayName());
    scAttachResponse=AsyncRequests.sendSync(sc,req);
  }
 catch (  Exception e) {
    LOG.debug(e,e);
    throw new EucalyptusCloudException(e.getMessage());
  }
  request.setRemoteDevice(scAttachResponse.getRemoteDeviceString());
  AttachedVolume attachVol=new AttachedVolume(volume.getDisplayName(),vm.getInstanceId(),request.getDevice(),request.getRemoteDevice());
  vm.addTransientVolume(deviceName,volume);
  AsyncRequests.newRequest(new VolumeAttachCallback(request,attachVol)).dispatch(cluster.getConfiguration());
  EventRecord.here(VolumeManager.class,EventClass.VOLUME,EventType.VOLUME_ATTACH).withDetails(volume.getOwner().toString(),volume.getDisplayName(),"instance",vm.getInstanceId()).withDetails("partition",vm.getPartition().toString()).info();
  reply.setAttachedVolume(attachVol);
  return reply;
}
