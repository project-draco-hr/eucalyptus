{
  AttachVolumeResponseType reply=(AttachVolumeResponseType)request.getReply();
  final String deviceName=request.getDevice();
  final String volumeId=normalizeVolumeIdentifier(request.getVolumeId());
  final String instanceId=normalizeInstanceIdentifier(request.getInstanceId());
  final Context ctx=Contexts.lookup();
  if (deviceName == null || !validateDeviceName(deviceName)) {
    throw new ClientComputeException("InvalidParameterValue","Value (" + deviceName + ") for parameter device is invalid.");
  }
  VmInstance vm=null;
  try {
    vm=RestrictedTypes.doPrivileged(instanceId,VmInstance.class);
  }
 catch (  final NoSuchElementException e) {
    throw new ClientComputeException("InvalidInstanceID.NotFound","The instance ID '" + request.getInstanceId() + "' does not exist");
  }
catch (  Exception ex) {
    throw handleException(ex);
  }
  if (MigrationState.isMigrating(vm)) {
    throw Exceptions.toUndeclared("Cannot attach a volume to an instance which is currently migrating: " + vm.getInstanceId() + " "+ vm.getRuntimeState().getMigrationTask());
  }
  AccountFullName ownerFullName=ctx.getUserFullName().asAccountFullName();
  Volume volume=null;
  try {
    volume=Volumes.lookup(ownerFullName,volumeId);
  }
 catch (  final NoSuchElementException ex) {
    try {
      volume=Volumes.lookup(null,volumeId);
    }
 catch (    NoSuchElementException e) {
      throw new ClientComputeException("InvalidVolume.NotFound","The volume '" + request.getVolumeId() + "' does not exist");
    }
  }
  if (!RestrictedTypes.filterPrivileged().apply(volume)) {
    throw new ClientUnauthorizedComputeException("Not authorized to attach volume " + volumeId + " by "+ ctx.getUser().getName());
  }
  try {
    vm.lookupVolumeAttachmentByDevice(deviceName);
    throw new ClientComputeException("InvalidParameterValue","Already have a device attached to: " + request.getDevice());
  }
 catch (  NoSuchElementException ex1) {
  }
  if (Iterables.any(VmInstances.lookupEphemeralDevices(instanceId),new Predicate<VmEphemeralAttachment>(){
    @Override public boolean apply(    VmEphemeralAttachment device){
      return deviceName.endsWith(device.getShortDeviceName());
    }
  }
))   throw new ClientComputeException("InvalidParameterValue","Already have an ephemeral device attached to: " + request.getDevice());
  try {
    VmInstances.lookupVolumeAttachment(volumeId);
    throw new ClientComputeException("VolumeInUse","Volume already attached: " + volumeId);
  }
 catch (  NoSuchElementException ex1) {
  }
  Partition volPartition=Partitions.lookupByName(volume.getPartition());
  ServiceConfiguration sc=Topology.lookup(Storage.class,volPartition);
  ServiceConfiguration scVm=Topology.lookup(Storage.class,vm.lookupPartition());
  if (!sc.equals(scVm)) {
    throw new EucalyptusCloudException("Can only attach volumes in the same zone: " + volumeId);
  }
  if (VmState.STOPPED.apply(vm)) {
    String rootDevice=vm.getBootRecord().getMachine().getRootDeviceName();
    VmInstances.addPersistentVolume(vm,deviceName,volume,rootDevice.equals(deviceName),false);
  }
 else   if (VmState.RUNNING.apply(vm)) {
    ServiceConfiguration ccConfig=Topology.lookup(ClusterController.class,vm.lookupPartition());
    GetVolumeTokenResponseType scGetTokenResponse;
    try {
      GetVolumeTokenType req=new GetVolumeTokenType(volume.getDisplayName());
      scGetTokenResponse=AsyncRequests.sendSync(sc,req);
    }
 catch (    Exception e) {
      LOG.warn("Failed to attach volume " + volume.getDisplayName(),e);
      throw new EucalyptusCloudException(e.getMessage(),e);
    }
    String token=StorageProperties.formatVolumeAttachmentTokenForTransfer(scGetTokenResponse.getToken(),volume.getDisplayName());
    final ClusterAttachVolumeType attachVolume=new ClusterAttachVolumeType();
    attachVolume.setInstanceId(request.getInstanceId());
    attachVolume.setVolumeId(request.getVolumeId());
    attachVolume.setDevice(request.getDevice());
    attachVolume.setRemoteDevice(token);
    VmInstances.addTransientVolume(vm,deviceName,token,volume);
    final VolumeAttachCallback cb=new VolumeAttachCallback(attachVolume);
    AsyncRequests.newRequest(cb).dispatch(ccConfig);
  }
 else {
    throw new ClientComputeException("IncorrectState","Instance '" + instanceId + "' is not 'running'");
  }
  EventRecord.here(VolumeManager.class,EventClass.VOLUME,EventType.VOLUME_ATTACH).withDetails(volume.getOwner().toString(),volume.getDisplayName(),"instance",vm.getInstanceId()).withDetails("partition",vm.getPartition().toString()).info();
  reply.setAttachedVolume(new AttachedVolume(volume.getDisplayName(),vm.getInstanceId(),request.getDevice()));
  Volumes.fireUsageEvent(volume,VolumeEvent.forVolumeAttach(vm.getInstanceUuid(),volume.getDisplayName()));
  return reply;
}
