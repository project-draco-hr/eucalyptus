{
  DeleteVolumeResponseType reply=(DeleteVolumeResponseType)request.getReply();
  final Context ctx=Contexts.lookup();
  reply.set_return(false);
  final Function<String,Volume> deleteVolume=new Function<String,Volume>(){
    @Override public Volume apply(    final String input){
      try {
        Volume vol=null;
        try {
          vol=Entities.uniqueResult(Volume.named(ctx.getUserFullName().asAccountFullName(),input));
        }
 catch (        NoSuchElementException e) {
          try {
            vol=Entities.uniqueResult(Volume.named(null,input));
          }
 catch (          NoSuchElementException e2) {
            throw Exceptions.toUndeclared(new ClientComputeException("InvalidVolume.NotFound","The volume '" + input + "' does not exist"));
          }
        }
        if (!RestrictedTypes.filterPrivileged().apply(vol)) {
          throw Exceptions.toUndeclared(new ClientUnauthorizedComputeException("Not authorized to delete volume by " + ctx.getUser().getName()));
        }
        try {
          VmVolumeAttachment attachment=VmInstances.lookupVolumeAttachment(input);
          throw Exceptions.toUndeclared(new ClientComputeException("VolumeInUse","Volume is currently attached to: " + attachment.getVmInstance().getDisplayName()));
        }
 catch (        NoSuchElementException ex) {
        }
        if (State.FAIL.equals(vol.getState()) || State.ANNIHILATED.equals(vol.getState())) {
          Entities.delete(vol);
          return vol;
        }
 else {
          try {
            ServiceConfiguration sc=Topology.lookup(Storage.class,Partitions.lookupByName(vol.getPartition()));
            DeleteStorageVolumeResponseType scReply=AsyncRequests.sendSync(sc,new DeleteStorageVolumeType(vol.getDisplayName()));
            if (scReply.get_return()) {
              Volumes.annihilateStorageVolume(vol);
              return vol;
            }
 else {
              throw Exceptions.toUndeclared("Storage Controller returned false:  Contact the administrator to report the problem.");
            }
          }
 catch (          Exception ex) {
            throw Exceptions.toUndeclared("Delete volume request failed because of: " + ex.getMessage(),ex);
          }
        }
      }
 catch (      NoSuchElementException ex) {
        throw ex;
      }
catch (      TransactionException ex) {
        throw Exceptions.toUndeclared("Deleting volume failed:  Contact the administrator to report the problem.",ex);
      }
    }
  }
;
  try {
    Entities.asTransaction(Volume.class,deleteVolume).apply(normalizeVolumeIdentifier(request.getVolumeId()));
    reply.set_return(true);
    return reply;
  }
 catch (  NoSuchElementException ex) {
    return reply;
  }
catch (  RuntimeException ex) {
    Exceptions.rethrow(ex,ComputeException.class);
    throw ex;
  }
}
