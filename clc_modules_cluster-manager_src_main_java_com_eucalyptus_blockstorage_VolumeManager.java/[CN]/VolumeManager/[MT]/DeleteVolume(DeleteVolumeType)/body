{
  DeleteVolumeResponseType reply=(DeleteVolumeResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  reply.set_return(false);
  EntityWrapper<Volume> db=EntityWrapper.get(Volume.class);
  boolean reallyFailed=false;
  try {
    Volume vol=db.getUnique(Volume.named(ctx.getUserFullName(),request.getVolumeId()));
    if (!Types.checkPrivilege(request,PolicySpec.VENDOR_EC2,PolicySpec.EC2_RESOURCE_VOLUME,request.getVolumeId(),vol.getOwner())) {
      throw new EucalyptusCloudException("Not authorized to delete volume by " + ctx.getUser().getName());
    }
    for (    VmInstance vm : VmInstances.getInstance().listValues()) {
      try {
        vm.lookupVolumeAttachment(request.getVolumeId());
        db.rollback();
        return reply;
      }
 catch (      NoSuchElementException ex) {
      }
    }
    if (State.FAIL.equals(vol.getState())) {
      db.delete(vol);
      db.commit();
      return reply;
    }
    ServiceConfiguration sc=Partitions.lookupService(Storage.class,vol.getPartition());
    DeleteStorageVolumeResponseType scReply=ServiceDispatcher.lookup(sc).send(new DeleteStorageVolumeType(vol.getDisplayName()));
    if (scReply.get_return()) {
      vol.setState(State.ANNIHILATING);
      db.commit();
      try {
        ListenerRegistry.getInstance().fireEvent(new StorageEvent(StorageEvent.EventType.EbsVolume,false,vol.getSize(),vol.getOwnerUserId(),vol.getOwnerUserName(),vol.getOwnerAccountNumber(),vol.getOwnerAccountName(),vol.getScName(),vol.getPartition()));
      }
 catch (      EventFailedException ex) {
        LOG.error(ex,ex);
      }
    }
 else {
      reallyFailed=true;
      throw new EucalyptusCloudException("Storage Controller returned false:  Contact the administrator to report the problem.");
    }
  }
 catch (  EucalyptusCloudException e) {
    LOG.debug(e,e);
    db.rollback();
    if (reallyFailed) {
      throw e;
    }
 else {
      return reply;
    }
  }
  reply.set_return(true);
  return reply;
}
