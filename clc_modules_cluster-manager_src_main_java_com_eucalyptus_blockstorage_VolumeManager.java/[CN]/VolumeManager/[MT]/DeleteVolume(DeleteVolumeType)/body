{
  DeleteVolumeResponseType reply=(DeleteVolumeResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  reply.set_return(false);
  EntityWrapper<Volume> db=EntityWrapper.get(Volume.class);
  boolean reallyFailed=false;
  try {
    Volume vol=db.getUnique(Volume.named(ctx.getUserFullName(),request.getVolumeId()));
    if (!Lookups.checkPrivilege(request,PolicySpec.VENDOR_EC2,PolicySpec.EC2_RESOURCE_VOLUME,request.getVolumeId(),vol.getOwner())) {
      throw new EucalyptusCloudException("Not authorized to delete volume by " + ctx.getUser().getName());
    }
    for (    VmInstance vm : VmInstances.getInstance().listValues()) {
      try {
        vm.lookupVolumeAttachment(request.getVolumeId());
        db.rollback();
        return reply;
      }
 catch (      NoSuchElementException ex) {
      }
    }
    if (State.FAIL.equals(vol.getState())) {
      db.delete(vol);
      db.commit();
      return reply;
    }
    Service sc;
    try {
      sc=StorageUtil.getActiveSc(vol.getCluster());
    }
 catch (    NoSuchElementException ex) {
      LOG.error(ex,ex);
      throw new EucalyptusCloudException("Failed to lookup SC for volume: " + vol,ex);
    }
    DeleteStorageVolumeResponseType scReply=sc.getDispatcher().send(new DeleteStorageVolumeType(vol.getDisplayName()));
    if (scReply.get_return()) {
      vol.setState(State.ANNIHILATING);
      db.commit();
      EventRecord.here(VolumeManager.class,EventClass.VOLUME,EventType.VOLUME_DELETE).withDetails(vol.getOwner().toString(),vol.getDisplayName(),"size",vol.getSize().toString()).withDetails("cluster",vol.getCluster()).withDetails("snapshot",vol.getParentSnapshot()).info();
    }
 else {
      reallyFailed=true;
      throw new EucalyptusCloudException("Storage Controller returned false:  Contact the administrator to report the problem.");
    }
  }
 catch (  EucalyptusCloudException e) {
    LOG.debug(e,e);
    db.rollback();
    if (reallyFailed) {
      throw e;
    }
 else {
      return reply;
    }
  }
  reply.set_return(true);
  return reply;
}
