{
  DescribeVolumesResponseType reply=(DescribeVolumesResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  EntityWrapper<Volume> db=EntityWrapper.get(Volume.class);
  try {
    final Map<String,AttachedVolume> attachedVolumes=new HashMap<String,AttachedVolume>();
    for (    VmInstance vm : VmInstances.listValues()) {
      vm.eachVolumeAttachment(new Predicate<AttachedVolume>(){
        @Override public boolean apply(        AttachedVolume arg0){
          return attachedVolumes.put(arg0.getVolumeId(),arg0) == null;
        }
      }
);
    }
    List<Volume> volumes=db.query(Volume.ownedBy(ctx.getUserFullName()));
    List<Volume> describeVolumes=Lists.newArrayList();
    for (    Volume v : volumes) {
      if (!RestrictedTypes.checkPrivilege(request,PolicySpec.VENDOR_EC2,PolicySpec.EC2_RESOURCE_VOLUME,v.getDisplayName(),v.getOwner())) {
        continue;
      }
      if (!State.ANNIHILATED.equals(v.getState())) {
        describeVolumes.add(v);
      }
 else {
        try {
          ListenerRegistry.getInstance().fireEvent(new StorageEvent(StorageEvent.EventType.EbsVolume,false,v.getSize(),v.getOwnerUserId(),v.getOwnerUserName(),v.getOwnerAccountNumber(),v.getOwnerAccountName(),v.getScName(),v.getPartition()));
        }
 catch (        EventFailedException ex) {
          LOG.error(ex,ex);
        }
        db.delete(v);
      }
    }
    try {
      ArrayList<edu.ucsb.eucalyptus.msgs.Volume> volumeReplyList=StorageUtil.getVolumeReply(attachedVolumes,describeVolumes);
      reply.getVolumeSet().addAll(volumeReplyList);
    }
 catch (    Exception e) {
      LOG.warn("Error getting volume information from the Storage Controller: " + e);
      LOG.debug(e,e);
    }
    db.commit();
  }
 catch (  Exception t) {
    db.commit();
  }
  return reply;
}
