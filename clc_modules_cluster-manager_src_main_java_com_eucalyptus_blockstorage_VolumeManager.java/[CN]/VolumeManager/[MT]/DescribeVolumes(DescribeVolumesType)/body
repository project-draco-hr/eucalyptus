{
  DescribeVolumesResponseType reply=(DescribeVolumesResponseType)request.getReply();
  EntityWrapper<Volume> db=getEntityWrapper();
  try {
    final Map<String,AttachedVolume> attachedVolumes=new HashMap<String,AttachedVolume>();
    for (    VmInstance vm : VmInstances.getInstance().listValues()) {
      vm.eachVolumeAttachment(new Predicate<AttachedVolume>(){
        @Override public boolean apply(        AttachedVolume arg0){
          return attachedVolumes.put(arg0.getVolumeId(),arg0) == null;
        }
      }
);
    }
    List<Volume> volumes=db.query(Volume.ownedBy(request.getUserErn().getUniqueId()));
    List<Volume> describeVolumes=Lists.newArrayList();
    for (    Volume v : volumes) {
      if (!State.ANNIHILATED.equals(v.getState())) {
        describeVolumes.add(v);
      }
 else {
        EventRecord.here(VolumeManager.class,EventClass.VOLUME,EventType.VOLUME_DELETE).withDetails(v.getUserName(),v.getDisplayName(),"size",v.getSize().toString()).withDetails("cluster",v.getCluster()).withDetails("snapshot",v.getParentSnapshot()).info();
        db.delete(v);
      }
    }
    try {
      ArrayList<edu.ucsb.eucalyptus.msgs.Volume> volumeReplyList=StorageUtil.getVolumeReply(attachedVolumes,describeVolumes);
      reply.getVolumeSet().addAll(volumeReplyList);
    }
 catch (    Exception e) {
      LOG.warn("Error getting volume information from the Storage Controller: " + e);
      LOG.debug(e,e);
    }
    db.commit();
  }
 catch (  Throwable t) {
    db.commit();
  }
  return reply;
}
