{
  final DescribeVolumesResponseType reply=(DescribeVolumesResponseType)request.getReply();
  final Context ctx=Contexts.lookup();
  final boolean showAll=request.getVolumeSet().remove("verbose");
  final AccountFullName ownerFullName=(ctx.hasAdministrativePrivileges() && showAll) ? null : ctx.getUserFullName().asAccountFullName();
  final Set<String> volumeIds=Sets.newHashSet();
  if (!request.getVolumeSet().isEmpty()) {
    volumeIds.addAll(request.getVolumeSet());
  }
  final Function<Set<String>,Set<String>> lookupVolumeIds=new Function<Set<String>,Set<String>>(){
    public Set<String> apply(    final Set<String> input){
      Set<String> res=Sets.newHashSet();
      if (input.isEmpty()) {
        for (        Volume foundVol : Collections2.filter(Entities.query(Volume.named(ownerFullName,null)),RestrictedTypes.filterPrivileged())) {
          res.add(foundVol.getDisplayName());
        }
      }
 else {
        for (        String s : input) {
          try {
            Volume foundVol=Entities.uniqueResult(Volume.named(ownerFullName,s));
            if (RestrictedTypes.filterPrivileged().apply(foundVol)) {
              res.add(foundVol.getDisplayName());
            }
          }
 catch (          NoSuchElementException ex) {
          }
catch (          TransactionException ex) {
            throw Exceptions.toUndeclared(ex);
          }
        }
      }
      return res;
    }
  }
;
  Set<String> allowedVolumeIds=Entities.asTransaction(Volume.class,lookupVolumeIds).apply(volumeIds);
  final Function<String,Volume> lookupVolume=new Function<String,Volume>(){
    @Override public Volume apply(    String input){
      try {
        Volume foundVol=Entities.uniqueResult(Volume.named(ownerFullName,input));
        if (State.ANNIHILATED.equals(foundVol.getState())) {
          Entities.delete(foundVol);
          Volumes.fireDeleteEvent(foundVol);
          reply.getVolumeSet().add(foundVol.morph(new edu.ucsb.eucalyptus.msgs.Volume()));
          return foundVol;
        }
 else         if (RestrictedTypes.filterPrivileged().apply(foundVol)) {
          AttachedVolume attachedVolume=null;
          try {
            VmVolumeAttachment attachment=VmInstances.lookupVolumeAttachment(input);
            attachedVolume=VmVolumeAttachment.asAttachedVolume(attachment.getVmInstance()).apply(attachment);
            foundVol.setState(State.BUSY);
          }
 catch (          NoSuchElementException ex) {
            if (State.BUSY.equals(foundVol.getState())) {
              foundVol.setState(State.EXTANT);
            }
          }
          edu.ucsb.eucalyptus.msgs.Volume msgTypeVolume=foundVol.morph(new edu.ucsb.eucalyptus.msgs.Volume());
          if (attachedVolume != null) {
            msgTypeVolume.getAttachmentSet().add(attachedVolume);
          }
          reply.getVolumeSet().add(msgTypeVolume);
          return foundVol;
        }
      }
 catch (      NoSuchElementException ex) {
        throw ex;
      }
catch (      TransactionException ex) {
        throw Exceptions.toUndeclared(ex);
      }
      throw new NoSuchElementException("Failed to lookup volume: " + input);
    }
  }
;
  for (  String volId : allowedVolumeIds) {
    try {
      Volume vol=Entities.asTransaction(Volume.class,lookupVolume).apply(volId);
    }
 catch (    Exception ex) {
      Logs.extreme().debug(ex,ex);
    }
  }
  return reply;
}
