{
  final DescribeVolumesResponseType reply=(DescribeVolumesResponseType)request.getReply();
  final Context ctx=Contexts.lookup();
  final boolean showAll=request.getVolumeSet().remove("verbose");
  final AccountFullName ownerFullName=(ctx.hasAdministrativePrivileges() && showAll) ? null : ctx.getUserFullName().asAccountFullName();
  final Set<String> volumeIds=Sets.newHashSet();
  if (!request.getVolumeSet().isEmpty()) {
    volumeIds.addAll(request.getVolumeSet());
  }
  final Function<Set<String>,List<Volume>> lookupVolumes=new Function<Set<String>,List<Volume>>(){
    public List<Volume> apply(    final Set<String> input){
      List<Volume> res=Lists.newArrayList();
      if (input.isEmpty()) {
        List<Volume> found=Entities.query(Volume.named(ownerFullName,null));
        res.addAll(Collections2.filter(found,RestrictedTypes.filterPrivileged()));
      }
 else {
        for (        String s : input) {
          try {
            Volume foundVol=Entities.uniqueResult(Volume.named(ownerFullName,s));
            if (RestrictedTypes.filterPrivileged().apply(foundVol)) {
              res.add(foundVol);
            }
          }
 catch (          NoSuchElementException ex) {
          }
catch (          TransactionException ex) {
            throw Exceptions.toUndeclared(ex);
          }
        }
      }
      return res;
    }
  }
;
  EntityTransaction db=Entities.get(Volume.class);
  try {
    List<Volume> volumes=lookupVolumes.apply(volumeIds);
    List<Volume> describeVolumes=Lists.newArrayList();
    for (    Volume v : volumes) {
      if (!State.ANNIHILATED.equals(v.getState())) {
        describeVolumes.add(v);
      }
 else {
        fireDeleteEvent(v);
        Entities.delete(v);
      }
    }
    reply.getVolumeSet().addAll(StorageUtil.getVolumeReply(describeVolumes));
    db.commit();
  }
 catch (  Exception ex) {
    Logs.extreme().error(ex,ex);
    db.rollback();
    throw ex;
  }
  return reply;
}
