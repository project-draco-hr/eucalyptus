{
  Context ctx=Contexts.lookup();
  String action=PolicySpec.requestToAction(request);
  if (!ctx.hasAdministrativePrivileges()) {
    if (!Permissions.isAuthorized(PolicySpec.VENDOR_EC2,PolicySpec.EC2_RESOURCE_VOLUME,"",ctx.getAccount(),action,ctx.getUser())) {
      throw new EucalyptusCloudException("Not authorized to create volume by " + ctx.getUser().getName());
    }
    long volSize=0;
    try {
      volSize=Long.valueOf(request.getSize());
    }
 catch (    NumberFormatException e) {
      LOG.error("Invalid volume size " + request.getSize(),e);
      throw new EucalyptusCloudException(e);
    }
    if (!Permissions.canAllocate(PolicySpec.VENDOR_EC2,PolicySpec.EC2_RESOURCE_VOLUME,"",action,ctx.getUser(),volSize)) {
      throw new EucalyptusCloudException("Exceeded quota of volume creation by " + ctx.getUser().getName());
    }
  }
  if ((request.getSnapshotId() == null && request.getSize() == null)) {
    throw new EucalyptusCloudException("One of size or snapshotId is required as a parameter.");
  }
  ServiceConfiguration sc;
  try {
    sc=Partitions.lookupService(Storage.class,request.getAvailabilityZone());
  }
 catch (  NoSuchComponentException ex) {
    throw new EucalyptusCloudException(ex.getMessage(),ex);
  }
  EntityWrapper<Volume> db=EntityWrapper.get(Volume.class);
  if (request.getSnapshotId() != null) {
    try {
      db.recast(Snapshot.class).getUnique(Snapshot.named(ctx.getUserFullName(),request.getSnapshotId()));
    }
 catch (    EucalyptusCloudException e) {
      LOG.debug(e,e);
      db.rollback();
      throw new EucalyptusCloudException("Snapshot does not exist: " + request.getSnapshotId());
    }
  }
  String newId=null;
  Volume newVol=null;
  while (true) {
    newId=Crypto.generateId(ctx.getUserFullName().getAccountNumber(),ID_PREFIX);
    try {
      db.getUnique(Volume.named(null,newId));
    }
 catch (    EucalyptusCloudException e) {
      try {
        Integer newSize=new Integer(request.getSize() != null ? request.getSize() : "-1");
        newVol=new Volume(ctx.getUserFullName(),newId,newSize,sc.getName(),sc.getPartition(),request.getSnapshotId());
        db.add(newVol);
        db.commit();
        break;
      }
 catch (      Throwable e1) {
        db.rollback();
        db=EntityWrapper.get(Volume.class);
      }
    }
  }
  newVol.setState(State.GENERATING);
  try {
    CreateStorageVolumeType req=new CreateStorageVolumeType(newId,request.getSize(),request.getSnapshotId());
    req.regardingUserRequest(request);
    ServiceDispatcher.lookup(sc).send(req);
    try {
      ListenerRegistry.getInstance().fireEvent(new StorageEvent(StorageEvent.EventType.EbsVolume,true,newVol.getSize(),newVol.getOwnerUserId(),newVol.getOwnerAccountId(),newVol.getScName(),newVol.getPartition()));
    }
 catch (    EventFailedException ex) {
      LOG.error(ex,ex);
    }
  }
 catch (  EucalyptusCloudException e) {
    LOG.debug(e,e);
    try {
      db=EntityWrapper.get(Volume.class);
      Volume d=db.getUnique(Volume.named((UserFullName)newVol.getOwner(),newVol.getDisplayName()));
      db.delete(d);
      db.commit();
    }
 catch (    Throwable e1) {
      db.rollback();
      LOG.debug(e1,e1);
    }
    throw new EucalyptusCloudException("Error while communicating with Storage Controller: CreateStorageVolume:" + e.getMessage());
  }
  CreateVolumeResponseType reply=(CreateVolumeResponseType)request.getReply();
  reply.setVolume(newVol.morph(new edu.ucsb.eucalyptus.msgs.Volume()));
  return reply;
}
