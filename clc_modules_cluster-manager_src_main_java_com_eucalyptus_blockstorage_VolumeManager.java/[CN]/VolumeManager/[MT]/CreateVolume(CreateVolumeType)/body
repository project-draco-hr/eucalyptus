{
  Context ctx=Contexts.lookup();
  String action=PolicySpec.requestToAction(request);
  if (!ctx.hasAdministrativePrivileges() && !Permissions.isAuthorized(PolicySpec.VENDOR_EC2,PolicySpec.EC2_RESOURCE_VOLUME,"",ctx.getAccount(),action,ctx.getUser())) {
    throw new EucalyptusCloudException("Not authorized to create volume by " + ctx.getUser().getName());
  }
  Long volSize=Long.parseLong(request.getSize());
  final String snapId=request.getSnapshotId();
  String partition=request.getAvailabilityZone();
  if (!ctx.hasAdministrativePrivileges() && !Permissions.canAllocate(PolicySpec.VENDOR_EC2,PolicySpec.EC2_RESOURCE_VOLUME,"",action,ctx.getUser(),volSize)) {
    throw new EucalyptusCloudException("Exceeded quota of volume creation by " + ctx.getUser().getName());
  }
  if ((request.getSnapshotId() == null && request.getSize() == null)) {
    throw new EucalyptusCloudException("One of size or snapshotId is required as a parameter.");
  }
  final ServiceConfiguration sc=Partitions.lookupService(Storage.class,partition);
  if (snapId != null) {
    try {
      Snapshots.lookup(snapId);
    }
 catch (    ExecutionException ex) {
      throw new EucalyptusCloudException("Failed to create volume because the referenced snapshot id is invalid: " + snapId);
    }
  }
  Exception lastEx=null;
  for (int i=0; i < VOL_CREATE_RETRIES; i++) {
    String newId=Crypto.generateId(ctx.getUserFullName().getAccountNumber(),ID_PREFIX);
    Integer newSize=new Integer(request.getSize() != null ? request.getSize() : "-1");
    try {
      Volume newVol=Transactions.save(new Volume(ctx.getUserFullName(),newId,newSize,sc.getName(),sc.getPartition(),snapId),new Callback<Volume>(){
        @Override public void fire(        Volume t){
          t.setState(State.GENERATING);
          try {
            ListenerRegistry.getInstance().fireEvent(new StorageEvent(StorageEvent.EventType.EbsVolume,true,t.getSize(),t.getOwnerUserId(),t.getOwnerAccountId(),t.getScName(),t.getPartition()));
            CreateStorageVolumeType req=new CreateStorageVolumeType(t.getDisplayName(),t.getSize(),snapId,null).regardingUserRequest(request);
            ServiceDispatcher.lookup(sc).send(req);
          }
 catch (          Exception ex) {
            LOG.error("Failed to create volume: " + t.toString(),ex);
            Transactions.join().delete(t);
          }
        }
      }
);
      CreateVolumeResponseType reply=request.getReply();
      reply.setVolume(newVol.morph(new edu.ucsb.eucalyptus.msgs.Volume()));
      return reply;
    }
 catch (    ExecutionException ex) {
      LOG.error(ex,ex);
      lastEx=ex;
    }
  }
  throw new EucalyptusCloudException("Failed to create volume after " + VOL_CREATE_RETRIES + " because of: "+ lastEx,lastEx);
}
