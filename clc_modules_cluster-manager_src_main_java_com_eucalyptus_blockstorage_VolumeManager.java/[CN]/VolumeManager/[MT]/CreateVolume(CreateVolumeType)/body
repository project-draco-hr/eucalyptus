{
  Context ctx=Contexts.lookup();
  Long volSize=request.getSize() != null ? Long.parseLong(request.getSize()) : null;
  final String snapId=request.getSnapshotId();
  String partition=request.getAvailabilityZone();
  if ((request.getSnapshotId() == null && request.getSize() == null)) {
    throw new EucalyptusCloudException("One of size or snapshotId is required as a parameter.");
  }
  if (snapId != null) {
    try {
      Snapshots.lookup(snapId);
    }
 catch (    ExecutionException ex) {
      throw new EucalyptusCloudException("Failed to create volume because the referenced snapshot id is invalid: " + snapId);
    }
  }
  Integer newSize=new Integer(request.getSize() != null ? request.getSize() : "-1");
  Exception lastEx=null;
  for (int i=0; i < VOL_CREATE_RETRIES; i++) {
    try {
      final ServiceConfiguration sc=Partitions.lookupService(Storage.class,partition);
      UserFullName owner=ctx.getUserFullName();
      Volume newVol=Volumes.createStorageVolume(sc,owner,snapId,newSize,request);
      CreateVolumeResponseType reply=request.getReply();
      reply.setVolume(newVol.morph(new edu.ucsb.eucalyptus.msgs.Volume()));
      return reply;
    }
 catch (    ExecutionException ex) {
      LOG.error(ex,ex);
      lastEx=ex;
    }
  }
  throw new EucalyptusCloudException("Failed to create volume after " + VOL_CREATE_RETRIES + " because of: "+ lastEx,lastEx);
}
