{
  final DetachVolumeResponseType reply=(DetachVolumeResponseType)request.getReply();
  final String volumeId=normalizeVolumeIdentifier(request.getVolumeId());
  final String instanceId=normalizeOptionalInstanceIdentifier(request.getInstanceId());
  final Context ctx=Contexts.lookup();
  Volume vol;
  try {
    vol=Volumes.lookup(ctx.getUserFullName().asAccountFullName(),volumeId);
  }
 catch (  Exception ex) {
    if ((ex instanceof NoSuchElementException || ex.getCause() instanceof NoSuchElementException) && "eucalyptus".equals(ctx.getAccount().getName())) {
      vol=Volumes.lookup(null,volumeId);
    }
 else {
      throw new EucalyptusCloudException("Volume does not exist: " + volumeId,ex);
    }
  }
  if (!RestrictedTypes.filterPrivileged().apply(vol)) {
    throw new EucalyptusCloudException("Not authorized to detach volume " + volumeId + " by "+ ctx.getUser().getName());
  }
  VmInstance vm=null;
  AttachedVolume volume=null;
  try {
    VmVolumeAttachment vmVolAttach=VmInstances.lookupTransientVolumeAttachment(volumeId);
    volume=VmVolumeAttachment.asAttachedVolume(vmVolAttach.getVmInstance()).apply(vmVolAttach);
    vm=vmVolAttach.getVmInstance();
  }
 catch (  NoSuchElementException ex) {
    if (ex instanceof NonTransientVolumeException) {
      throw new EucalyptusCloudException(ex.getMessage() + " Cannot be detached");
    }
 else {
      throw new EucalyptusCloudException("Volume is not currently attached to any instance");
    }
  }
  if (!validateDeviceName(volume.getDevice())) {
    throw new ClientComputeException("InvalidParameterValue","Value (" + volume.getDevice() + ") for parameter device is invalid.");
  }
  if (vm != null && MigrationState.isMigrating(vm)) {
    throw Exceptions.toUndeclared("Cannot detach a volume from an instance which is currently migrating: " + vm.getInstanceId() + " "+ vm.getMigrationTask());
  }
  if (volume == null) {
    throw new EucalyptusCloudException("Volume is not attached: " + volumeId);
  }
  if (!RestrictedTypes.filterPrivileged().apply(vm)) {
    throw new EucalyptusCloudException("Not authorized to detach volume from instance " + instanceId + " by "+ ctx.getUser().getName());
  }
  if (instanceId != null && !vm.getInstanceId().equals(instanceId)) {
    throw new EucalyptusCloudException("Volume is not attached to instance: " + instanceId);
  }
  if (request.getDevice() != null && !request.getDevice().equals("") && !volume.getDevice().equals(request.getDevice())) {
    throw new EucalyptusCloudException("Volume is not attached to device: " + request.getDevice());
  }
  ServiceConfiguration scVm;
  try {
    scVm=Topology.lookup(Storage.class,vm.lookupPartition());
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    throw new EucalyptusCloudException("Failed to lookup SC for partition: " + vm.getPartition(),ex);
  }
  if (VmState.STOPPED.equals(vm.getState())) {
    try {
      AsyncRequests.sendSync(scVm,new DetachStorageVolumeType(volume.getVolumeId()));
    }
 catch (    Exception e) {
      LOG.debug(e);
      Logs.extreme().debug(e,e);
    }
    vm.removeVolumeAttachment(volume.getVolumeId());
  }
 else {
    Cluster cluster=null;
    ServiceConfiguration ccConfig=null;
    try {
      ccConfig=Topology.lookup(ClusterController.class,vm.lookupPartition());
      cluster=Clusters.lookup(ccConfig);
    }
 catch (    NoSuchElementException e) {
      LOG.debug(e,e);
      throw new EucalyptusCloudException("Cluster does not exist in partition: " + vm.getPartition());
    }
    request.setVolumeId(volume.getVolumeId());
    request.setRemoteDevice(volume.getRemoteDevice());
    request.setDevice(volume.getDevice().replaceAll("unknown,requested:",""));
    request.setInstanceId(vm.getInstanceId());
    VolumeDetachCallback ncDetach=new VolumeDetachCallback(request);
    AsyncRequests.newRequest(ncDetach).dispatch(cluster.getConfiguration());
  }
  vm.updateVolumeAttachment(volumeId,AttachmentState.detaching);
  volume.setStatus("detaching");
  reply.setDetachedVolume(volume);
  Volumes.fireUsageEvent(vol,VolumeEvent.forVolumeDetach(vm.getInstanceUuid(),vm.getInstanceId()));
  return reply;
}
