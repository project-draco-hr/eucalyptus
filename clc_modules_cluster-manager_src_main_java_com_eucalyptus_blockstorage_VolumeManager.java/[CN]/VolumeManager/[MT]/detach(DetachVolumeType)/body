{
  DetachVolumeResponseType reply=(DetachVolumeResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  Volume vol;
  try {
    vol=Volumes.lookup(ctx.getUserFullName().asAccountFullName(),request.getVolumeId());
  }
 catch (  Exception ex1) {
    throw new EucalyptusCloudException("Volume does not exist: " + request.getVolumeId());
  }
  if (!RestrictedTypes.filterPrivileged().apply(vol)) {
    throw new EucalyptusCloudException("Not authorized to detach volume " + request.getVolumeId() + " by "+ ctx.getUser().getName());
  }
  VmInstance vm=null;
  AttachedVolume volume=null;
  try {
    VmVolumeAttachment vmVolAttach=VmInstances.lookupVolumeAttachment(request.getVolumeId());
    volume=VmVolumeAttachment.asAttachedVolume(vmVolAttach.getVmInstance()).apply(vmVolAttach);
    vm=vmVolAttach.getVmInstance();
  }
 catch (  NoSuchElementException ex) {
  }
  if (volume == null) {
    throw new EucalyptusCloudException("Volume is not attached: " + request.getVolumeId());
  }
  if (!RestrictedTypes.filterPrivileged().apply(vm)) {
    throw new EucalyptusCloudException("Not authorized to detach volume from instance " + request.getInstanceId() + " by "+ ctx.getUser().getName());
  }
  if (!vm.getInstanceId().equals(request.getInstanceId()) && request.getInstanceId() != null && !request.getInstanceId().equals("")) {
    throw new EucalyptusCloudException("Volume is not attached to instance: " + request.getInstanceId());
  }
  if (request.getDevice() != null && !request.getDevice().equals("") && !volume.getDevice().equals(request.getDevice())) {
    throw new EucalyptusCloudException("Volume is not attached to device: " + request.getDevice());
  }
  Cluster cluster=null;
  ServiceConfiguration ccConfig=null;
  try {
    ccConfig=Topology.lookup(ClusterController.class,vm.lookupPartition());
    cluster=Clusters.lookup(ccConfig);
  }
 catch (  NoSuchElementException e) {
    LOG.debug(e,e);
    throw new EucalyptusCloudException("Cluster does not exist in partition: " + vm.getPartition());
  }
  ServiceConfiguration scVm;
  try {
    scVm=Topology.lookup(Storage.class,vm.lookupPartition());
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    throw new EucalyptusCloudException("Failed to lookup SC for partition: " + vm.getPartition(),ex);
  }
  request.setVolumeId(volume.getVolumeId());
  request.setRemoteDevice(volume.getRemoteDevice());
  request.setDevice(volume.getDevice().replaceAll("unknown,requested:",""));
  request.setInstanceId(vm.getInstanceId());
  VolumeDetachCallback ncDetach=new VolumeDetachCallback(request);
  try {
    AsyncRequests.sendSync(scVm,new DetachStorageVolumeType(volume.getVolumeId()));
  }
 catch (  Exception e) {
    LOG.debug(e);
    Logs.extreme().debug(e,e);
  }
  AsyncRequests.newRequest(ncDetach).dispatch(cluster.getConfiguration());
  EventRecord.here(VolumeManager.class,EventClass.VOLUME,EventType.VOLUME_DETACH).withDetails(vm.getOwner().toString(),volume.getVolumeId(),"instance",vm.getInstanceId()).withDetails("cluster",ccConfig.getFullName().toString()).info();
  volume.setStatus("detaching");
  reply.setDetachedVolume(volume);
  Volumes.fireUsageEvent(vol,VolumeEvent.forVolumeDetach(vm.getInstanceUuid(),vm.getInstanceId()));
  return reply;
}
