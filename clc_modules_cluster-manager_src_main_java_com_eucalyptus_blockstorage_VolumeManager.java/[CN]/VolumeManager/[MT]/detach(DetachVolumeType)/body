{
  DetachVolumeResponseType reply=(DetachVolumeResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  Volume vol=null;
  EntityWrapper<Volume> db=EntityWrapper.get(Volume.class);
  try {
    vol=db.getUnique(Volume.named(ctx.getUserFullName(),request.getVolumeId()));
  }
 catch (  EucalyptusCloudException e) {
    LOG.debug(e,e);
    db.rollback();
    throw new EucalyptusCloudException("Volume does not exist: " + request.getVolumeId());
  }
  db.commit();
  if (!RestrictedTypes.filterPrivileged().apply(vol)) {
    throw new EucalyptusCloudException("Not authorized to detach volume " + request.getVolumeId() + " by "+ ctx.getUser().getName());
  }
  VmInstance vm=null;
  AttachedVolume volume=null;
  for (  VmInstance iter : VmInstances.list(Predicates.not(VmState.TERMINATED))) {
    try {
      volume=iter.lookupVolumeAttachment(request.getVolumeId());
      vm=iter;
    }
 catch (    NoSuchElementException ex) {
    }
  }
  if (volume == null) {
    throw new EucalyptusCloudException("Volume is not attached: " + request.getVolumeId());
  }
  if (!RestrictedTypes.filterPrivileged().apply(vm)) {
    throw new EucalyptusCloudException("Not authorized to detach volume from instance " + request.getInstanceId() + " by "+ ctx.getUser().getName());
  }
  if (!vm.getInstanceId().equals(request.getInstanceId()) && request.getInstanceId() != null && !request.getInstanceId().equals("")) {
    throw new EucalyptusCloudException("Volume is not attached to instance: " + request.getInstanceId());
  }
  if (request.getDevice() != null && !request.getDevice().equals("") && !volume.getDevice().equals(request.getDevice())) {
    throw new EucalyptusCloudException("Volume is not attached to device: " + request.getDevice());
  }
  Cluster cluster=null;
  try {
    cluster=Clusters.getInstance().lookup(vm.lookupPartition());
  }
 catch (  NoSuchElementException e) {
    LOG.debug(e,e);
    throw new EucalyptusCloudException("Cluster does not exist: " + vm.lookupClusterConfiguration());
  }
  ServiceConfiguration scVm;
  try {
    scVm=Partitions.lookupService(Storage.class,cluster.getConfiguration().getPartition());
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    throw new EucalyptusCloudException("Failed to lookup SC for cluster: " + cluster,ex);
  }
  try {
    ServiceDispatcher.lookup(scVm).send(new DetachStorageVolumeType(cluster.getNode(vm.getServiceTag()).getIqn(),volume.getVolumeId()));
  }
 catch (  Exception e) {
    LOG.debug(e,e);
    throw new EucalyptusCloudException(e.getMessage());
  }
  request.setVolumeId(volume.getVolumeId());
  request.setRemoteDevice(volume.getRemoteDevice());
  request.setDevice(volume.getDevice().replaceAll("unknown,requested:",""));
  request.setInstanceId(vm.getInstanceId());
  AsyncRequests.newRequest(new VolumeDetachCallback(request)).dispatch(cluster.getConfiguration());
  EventRecord.here(VolumeManager.class,EventClass.VOLUME,EventType.VOLUME_DETACH).withDetails(vm.getOwner().toString(),volume.getVolumeId(),"instance",vm.getInstanceId()).withDetails("cluster",vm.lookupClusterConfiguration().toString()).info();
  volume.setStatus("detaching");
  reply.setDetachedVolume(volume);
  return reply;
}
