{
  DetachVolumeResponseType reply=(DetachVolumeResponseType)request.getReply();
  EntityWrapper<Volume> db=VolumeManager.getEntityWrapper();
  try {
    db.getUnique(Volume.named(request.getUserErn().getUniqueId(),request.getVolumeId()));
  }
 catch (  EucalyptusCloudException e) {
    LOG.debug(e,e);
    db.rollback();
    throw new EucalyptusCloudException("Volume does not exist: " + request.getVolumeId());
  }
  db.commit();
  VmInstance vm=null;
  AttachedVolume volume=null;
  for (  VmInstance iter : VmInstances.getInstance().listValues()) {
    try {
      volume=iter.lookupVolumeAttachment(request.getVolumeId());
      vm=iter;
    }
 catch (    NoSuchElementException ex) {
    }
  }
  if (volume == null) {
    throw new EucalyptusCloudException("Volume is not attached: " + request.getVolumeId());
  }
  if (!vm.getInstanceId().equals(request.getInstanceId()) && request.getInstanceId() != null && !request.getInstanceId().equals("")) {
    throw new EucalyptusCloudException("Volume is not attached to instance: " + request.getInstanceId());
  }
  if (request.getDevice() != null && !request.getDevice().equals("") && !volume.getDevice().equals(request.getDevice())) {
    throw new EucalyptusCloudException("Volume is not attached to device: " + request.getDevice());
  }
  Cluster cluster=null;
  try {
    cluster=Clusters.getInstance().lookup(vm.getPlacement());
  }
 catch (  NoSuchElementException e) {
    LOG.debug(e,e);
    throw new EucalyptusCloudException("Cluster does not exist: " + vm.getPlacement());
  }
  ServiceConfiguration scVm;
  try {
    scVm=StorageUtil.getActiveSc(cluster.getName()).getServiceConfiguration();
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    throw new EucalyptusCloudException("Failed to lookup SC for cluster: " + cluster,ex);
  }
  try {
    StorageUtil.send(scVm.getName(),new DetachStorageVolumeType(cluster.getNode(vm.getServiceTag()).getIqn(),volume.getVolumeId()));
  }
 catch (  Exception e) {
    LOG.debug(e,e);
    throw new EucalyptusCloudException(e.getMessage());
  }
  request.setVolumeId(volume.getVolumeId());
  request.setRemoteDevice(volume.getRemoteDevice());
  request.setDevice(volume.getDevice().replaceAll("unknown,requested:",""));
  request.setInstanceId(vm.getInstanceId());
  Callbacks.newRequest(new VolumeDetachCallback(request)).dispatch(cluster.getServiceEndpoint());
  EventRecord.here(VolumeManager.class,EventClass.VOLUME,EventType.VOLUME_DETACH).withDetails(vm.getOwner().to,volume.getVolumeId(),"instance",vm.getInstanceId()).withDetails("cluster",vm.getPlacement()).info();
  volume.setStatus("detaching");
  reply.setDetachedVolume(volume);
  return reply;
}
