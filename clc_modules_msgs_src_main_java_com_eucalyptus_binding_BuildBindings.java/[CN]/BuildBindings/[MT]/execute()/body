{
  PrintStream buildLog;
  try {
    buildLog=new PrintStream(new FileOutputStream("bind.log",false));
    System.setOut(buildLog);
    System.setErr(buildLog);
  }
 catch (  FileNotFoundException e2) {
    System.setOut(oldOut);
    System.setErr(oldErr);
  }
  if (this.classFileSets.isEmpty()) {
    throw new BuildException("No classes were provided to bind.");
  }
 else   if (this.bindingFileSets.isEmpty()) {
    throw new BuildException("No bindings were provided to bind.");
  }
 else {
    try {
      System.setProperty("java.class.path",((AntClassLoader)BuildBindings.class.getClassLoader()).getClasspath());
    }
 catch (    Exception e) {
      System.err.println("Failed setting classpath from Ant task");
    }
    Path path=new Path(getProject());
    for (    String p : paths()) {
      path.add(new Path(getProject(),p));
    }
    for (    File f : new File("lib").listFiles(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        return name.endsWith(".jar");
      }
    }
)) {
      path.add(new Path(getProject(),f.getAbsolutePath()));
    }
    ClassLoader old=Thread.currentThread().getContextClassLoader();
    List<BindingGenerator> generators=BindingGenerator.getGenerators();
    try {
      AntClassLoader loader=this.getProject().createClassLoader(path);
      Thread.currentThread().setContextClassLoader(loader);
      BindingGenerator.MSG_TYPE=loader.forceLoadClass("edu.ucsb.eucalyptus.msgs.BaseMessage");
      BindingGenerator.DATA_TYPE=loader.forceLoadClass("edu.ucsb.eucalyptus.msgs.EucalyptusData");
      loader.forceLoadClass("org.jibx.binding.model.JiBX_bindingFactory");
      for (      FileSet fs : this.classFileSets) {
        for (        String classFileName : fs.getDirectoryScanner(getProject()).getIncludedFiles()) {
          try {
            if (!classFileName.endsWith("class"))             continue;
            Class c=loader.forceLoadClass(classFileName.replaceFirst("[^/]*/[^/]*/","").replaceAll("/",".").replaceAll("\\.class.{0,1}",""));
            if (BindingGenerator.MSG_TYPE.isAssignableFrom(c) || BindingGenerator.DATA_TYPE.isAssignableFrom(c)) {
              for (              BindingGenerator gen : generators) {
                gen.processClass(c);
              }
            }
          }
 catch (          ClassNotFoundException e) {
            error(e);
          }
        }
      }
    }
 catch (    ClassNotFoundException e1) {
      error(e1);
    }
 finally {
      try {
        for (        BindingGenerator gen : generators) {
          gen.close();
        }
      }
 catch (      Throwable e) {
        error(e);
      }
      Thread.currentThread().setContextClassLoader(old);
    }
    try {
      Compile compiler=new Compile(true,false,false,false,true);
      compiler.compile(paths(),bindings());
    }
 catch (    Throwable e) {
      error(e);
    }
 finally {
      System.setOut(oldOut);
      System.setErr(oldErr);
    }
  }
}
