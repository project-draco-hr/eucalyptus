{
  ConcurrentNavigableMap<String,Address> unusedAddresses=Addresses.getInstance().getDisabledMap();
  if (unusedAddresses.size() < count)   throw new NotEnoughResourcesAvailable();
  List<Map.Entry<String,Address>> addressList=Lists.newArrayList();
  for (int i=0; i < count; i++) {
    Map.Entry<String,Address> addressEntry=unusedAddresses.pollFirstEntry();
    if (addressEntry != null) {
      addressList.add(addressEntry);
    }
 else {
      for (      Map.Entry<String,Address> a : addressList) {
        unusedAddresses.putIfAbsent(a.getKey(),a.getValue());
      }
      throw new NotEnoughResourcesAvailable();
    }
  }
  NavigableSet<String> ipList=Sets.newTreeSet();
  for (  Map.Entry<String,Address> addressEntry : addressList) {
    Address address=addressEntry.getValue();
    address.allocate(EucalyptusProperties.NAME);
    EntityWrapper<Address> db=new EntityWrapper<Address>();
    try {
      Address addr=db.getUnique(new Address(address.getName()));
      addr.allocate(EucalyptusProperties.NAME);
    }
 catch (    EucalyptusCloudException e) {
      db.merge(address);
    }
    db.commit();
    ipList.add(address.getName());
    try {
      Addresses.getInstance().register(address);
    }
 catch (    Exception e) {
    }
  }
  return ipList;
}
