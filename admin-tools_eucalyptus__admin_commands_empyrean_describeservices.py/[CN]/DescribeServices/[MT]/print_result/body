def print_result(self, result):
    services = (result.get('serviceStatuses') or [])
    if self.args.get('expert'):
        table = self.get_table(('SERVICE', 'arn', 'state', 'epoch', 'uri', 'service-accounts'))
        table.sortby = 'arn'
        for service in services:
            svcid = (service.get('serviceId') or {})
            accounts = (service.get('serviceAccounts') or {})
            accounts_str = ','.join([((((account.get('accountName') + ':') + account.get('accountNumber')) + ':') + account.get('accountCanonicalId')) for account in accounts])
            table.add_row(('SERVICE', svcid.get('fullName'), _colorize_state(service.get('localState').lower()), service.get('localEpoch'), svcid.get('uri'), accounts_str))
    elif self.args.get('by_host'):
        hosts = {}
        for service in services:
            svcid = (service.get('serviceId') or {})
            hosts.setdefault(svcid.get('host'), [])
            hosts[svcid.get('host')].append(service)
        table = self.get_table(('SERVICE', 'host', 'type', 'name', 'state', 'service-accounts'))
        for (host, services) in sorted(hosts.iteritems()):
            host = _colorize(host, _get_service_list_color(services))
            for service in services:
                svcid = (service.get('serviceId') or {})
                accounts = (service.get('serviceAccounts') or {})
                accounts_str = ','.join([((((account.get('accountName') + ':') + account.get('accountNumber')) + ':') + account.get('accountCanonicalId')) for account in accounts])
                table.add_row(('SERVICE', host, svcid.get('type'), svcid.get('name'), _colorize_state(service.get('localState').lower()), accounts_str))
    elif self.args.get('by_zone'):
        by_zone = {}
        for service in services:
            svcid = (service.get('serviceId') or {})
            by_zone.setdefault(svcid.get('partition'), {})
            by_zone[svcid.get('partition')].setdefault(svcid.get('type'), [])
            by_zone[svcid.get('partition')][svcid.get('type')].append(service)
        table = self.get_table(('SERVICE', 'zone', 'type', 'name', 'state', 'service-accounts'))
        for (zone, svctypes) in sorted(by_zone.iteritems()):
            if (not zone):
                continue
            zone_color = 'green'
            for (svctype, services) in sorted(svctypes.iteritems()):
                svctype_color = _get_service_list_color(services)
                if (svctype_color == 'red'):
                    zone_color = 'red'
                elif ((svctype_color == 'brown') and (zone_color == 'green')):
                    zone_color = 'brown'
            zone = _colorize(zone, zone_color)
            for (svctype, services) in sorted(svctypes.iteritems()):
                svctype = _colorize(svctype, _get_service_list_color(services))
                for service in services:
                    svcid = (service.get('serviceId') or {})
                    state = service.get('localState').lower()
                    accounts = (service.get('serviceAccounts') or {})
                    accounts_str = ','.join([((((account.get('accountName') + ':') + account.get('accountNumber')) + ':') + account.get('accountCanonicalId')) for account in accounts])
                    table.add_row(('SERVICE', zone, svctype, svcid.get('name'), _colorize_state(state), accounts_str))
    else:
        svctypes = {}
        for service in services:
            svcid = (service.get('serviceId') or {})
            svctypes.setdefault(svcid.get('type'), [])
            svctypes[svcid.get('type')].append(service)
        table = self.get_table(('SERVICE', 'type', 'zone', 'name', 'state', 'accounts'))
        for (svctype, services) in sorted(svctypes.iteritems()):
            svctype = _colorize(svctype, _get_service_list_color(services))
            for service in services:
                svcid = (service.get('serviceId') or {})
                accounts = (service.get('serviceAccounts') or {})
                accounts_str = ','.join([((((account.get('accountName') + ':') + account.get('accountNumber')) + ':') + account.get('accountCanonicalId')) for account in accounts])
                table.add_row(('SERVICE', svctype, svcid.get('partition'), svcid.get('name'), _colorize_state(service.get('localState').lower()), accounts_str))
    print table
