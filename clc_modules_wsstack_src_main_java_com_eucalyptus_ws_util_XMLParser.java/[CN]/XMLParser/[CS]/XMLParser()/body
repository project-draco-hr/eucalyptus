{
  xpath=XPathFactory.newInstance().newXPath();
  docFactory=DocumentBuilderFactory.newInstance();
  docFactory.setExpandEntityReferences(false);
  try {
    docFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);
    docFactory.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd",false);
  }
 catch (  ParserConfigurationException ex) {
    LOG.error(ex,ex);
  }
  try {
    docBuilder=docFactory.newDocumentBuilder();
    docBuilder.setEntityResolver(new EntityResolver(){
      @Override public InputSource resolveEntity(      String publicId,      String systemId) throws SAXException, IOException {
        return new InputSource(new StringReader(""));
      }
    }
);
  }
 catch (  ParserConfigurationException ex) {
    LOG.error(ex,ex);
  }
}
