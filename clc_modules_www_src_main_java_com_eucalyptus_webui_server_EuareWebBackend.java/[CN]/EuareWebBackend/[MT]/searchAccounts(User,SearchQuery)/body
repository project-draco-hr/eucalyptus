{
  List<SearchResultRow> results=Lists.newArrayList();
  try {
    final Privileged.RequestUserContext requestUserContext=Privileged.requestUser(requestUser);
    if (query.hasOnlySingle(ID)) {
      Account account=Accounts.lookupAccountById(query.getSingle(ID).getValue());
      if (Privileged.allowReadAccount(requestUserContext,account)) {
        User admin=account.lookupAdmin();
        results.add(serializeAccount(account,admin.getRegistrationStatus()));
      }
    }
 else {
      final List<Account> accounts=Accounts.listAllAccounts();
      final Set<String> registeredAccounts=Sets.newHashSet(Iterables.transform(Accounts.listAccountsByStatus(RegistrationStatus.REGISTERED),Accounts.toAccountNumber()));
      final Set<String> approvedAccounts=Sets.newHashSet(Iterables.transform(Accounts.listAccountsByStatus(RegistrationStatus.APPROVED),Accounts.toAccountNumber()));
      for (      final Account account : accounts) {
        try {
          if (accountMatchQuery(account,query)) {
            if (Privileged.allowReadAccount(requestUserContext,account)) {
              if (registeredAccounts.contains(account.getAccountNumber())) {
                results.add(serializeAccount(account,RegistrationStatus.REGISTERED));
              }
 else               if (approvedAccounts.contains(account.getAccountNumber())) {
                results.add(serializeAccount(account,RegistrationStatus.APPROVED));
              }
 else {
                results.add(serializeAccount(account,RegistrationStatus.CONFIRMED));
              }
            }
          }
        }
 catch (        Exception e) {
          LOG.error(e,e);
        }
      }
    }
  }
 catch (  Exception e) {
    LOG.error("Failed to get accounts",e);
    LOG.debug(e,e);
    throw new EucalyptusServiceException("Failed to get accounts for query " + query + ": "+ e.getMessage());
  }
  return results;
}
