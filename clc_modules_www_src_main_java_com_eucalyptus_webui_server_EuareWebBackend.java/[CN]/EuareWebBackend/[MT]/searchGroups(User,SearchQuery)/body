{
  final List<SearchResultRow> results=Lists.newArrayList();
  try {
    final AuthContext authContext=authContext(requestUser);
    if (query.hasOnlySingle(ID)) {
      Group group=Accounts.lookupGroupById(query.getSingle(ID).getValue());
      Account account=group.getAccount();
      if (Privileged.allowListGroup(authContext,account,group)) {
        results.add(serializeGroup(account,group));
      }
    }
 else     if (query.hasOnlySingle(USERID)) {
      User user=Accounts.lookupUserById(query.getSingle(USERID).getValue());
      Account account=user.getAccount();
      for (      Group group : Privileged.listGroupsForUser(authContext(requestUser),account,user)) {
        results.add(serializeGroup(account,group));
      }
    }
 else     if (query.hasOnlySingle(ACCOUNTID)) {
      Account account=Accounts.lookupAccountById(query.getSingle(ACCOUNTID).getValue());
      for (      Group group : account.getGroups()) {
        try {
          if (!group.isUserGroup()) {
            if (Privileged.allowListGroup(authContext,account,group)) {
              results.add(serializeGroup(account,group));
            }
          }
        }
 catch (        Exception e) {
          LOG.error(e,e);
        }
      }
    }
 else {
      forAllGroups(getAccounts(query),new IdentityCallback<Group>(){
        @Override public void doWithIdentity(        final Account account,        final Group group) throws AuthException {
          if (groupMatchQuery(group,query) && Privileged.allowListGroup(authContext,account,group)) {
            results.add(serializeGroup(account,group));
          }
        }
      }
);
    }
  }
 catch (  Exception e) {
    LOG.error("Failed to get groups",e);
    LOG.debug(e,e);
    throw new EucalyptusServiceException("Failed to get groups for query " + query + ": "+ e.getMessage());
  }
  return results;
}
