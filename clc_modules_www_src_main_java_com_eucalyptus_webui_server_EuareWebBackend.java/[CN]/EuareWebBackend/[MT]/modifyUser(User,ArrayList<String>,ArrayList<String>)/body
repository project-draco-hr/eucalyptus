{
  try {
    int i=0;
    String userId=values.get(i++);
    String userName=values.get(i++);
    String path=values.get(i++);
    i++;
    String enabled=values.get(i++);
    i++;
    i++;
    i++;
    i++;
    i++;
    i++;
    Long expiration=Long.parseLong(values.get(i++));
    i++;
    i++;
    Map<String,String> newInfo=Maps.newHashMap();
    for (int k=i; k < values.size(); k++) {
      String key=keys.get(k);
      String value=values.get(k);
      if (!Strings.isNullOrEmpty(key)) {
        newInfo.put(key,value);
      }
    }
    User user=Accounts.lookupUserById(userId);
    String newName=user.getName().equals(userName) ? null : userName;
    String newPath=user.getPath() != null && user.getPath().equals(path) ? null : path;
    Boolean newEnabled=user.isEnabled().toString().equalsIgnoreCase(enabled) ? null : !user.isEnabled();
    Long newExpiration=user.getPasswordExpires().equals(expiration) ? null : expiration;
    Privileged.modifyUser(authContext(requestUser),user.getAccount(),user,newName,newPath,newEnabled,newExpiration,newInfo);
  }
 catch (  Exception e) {
    LOG.error("Failed to modify user " + keys + " = "+ values,e);
    LOG.debug(e,e);
    throw new EucalyptusServiceException("Failed to modify user " + keys + " = "+ values+ ": "+ e.getMessage());
  }
}
