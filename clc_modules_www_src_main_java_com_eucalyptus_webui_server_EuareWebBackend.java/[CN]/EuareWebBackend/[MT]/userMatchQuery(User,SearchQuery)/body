{
  if (!(query.match(NAME,new Matcher(){
    @Override public boolean match(    QueryValue value){
      return user.getName() != null && user.getName().contains(value.getValue());
    }
  }
) && query.match(ID,new Matcher(){
    @Override public boolean match(    QueryValue value){
      return user.getUserId() != null && user.getUserId().equals(value.getValue());
    }
  }
) && query.match(PATH,new Matcher(){
    @Override public boolean match(    QueryValue value){
      return user.getPath() != null && user.getPath().contains(value.getValue());
    }
  }
)&& query.match(ENABLED,new Matcher(){
    @Override public boolean match(    QueryValue value){
      return user.isEnabled() != null && (user.isEnabled().booleanValue() == "true".equalsIgnoreCase(value.getValue()));
    }
  }
)&& query.match(REGISTRATION,new Matcher(){
    @Override public boolean match(    QueryValue value){
      return user.getRegistrationStatus() != null && user.getRegistrationStatus().name().equalsIgnoreCase(value.getValue());
    }
  }
))) {
    return false;
  }
  for (  final Map.Entry<String,String> entry : user.getInfo().entrySet()) {
    if (!query.match(entry.getKey(),new Matcher(){
      @Override public boolean match(      QueryValue value){
        return entry.getValue() != null && entry.getValue().equalsIgnoreCase(value.getValue());
      }
    }
)) {
      return false;
    }
  }
  if (query.has(GROUP)) {
    final Set<String> userGroups=Sets.newHashSet();
    for (    Group g : user.getGroups()) {
      userGroups.add(g.getName());
    }
    if (!query.match(GROUP,new Matcher(){
      @Override public boolean match(      QueryValue value){
        try {
          return userGroups.contains(value.getValue());
        }
 catch (        Exception e) {
          LOG.error(e,e);
          return false;
        }
      }
    }
)) {
      return false;
    }
  }
  return true;
}
