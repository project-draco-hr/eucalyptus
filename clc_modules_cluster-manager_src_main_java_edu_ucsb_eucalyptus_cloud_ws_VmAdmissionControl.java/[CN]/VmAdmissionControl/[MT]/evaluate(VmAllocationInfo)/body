{
  SLAs sla=new SLAs();
  List<ResourceToken> allocTokeList=null;
  try {
    allocTokeList=sla.doVmAllocation(vmAllocInfo);
  }
 catch (  Exception e) {
    LOG.debug(e,e);
    for (    ResourceToken token : allocTokeList) {
      Clusters.getInstance().lookup(token.getCluster()).getNodeState().releaseToken(token);
    }
    throw new EucalyptusCloudException(e.getMessage());
  }
  try {
    sla.doAddressAllocation(vmAllocInfo);
  }
 catch (  NotEnoughResourcesAvailable e) {
    LOG.debug(e,e);
    for (    ResourceToken token : allocTokeList) {
      Clusters.getInstance().lookup(token.getCluster()).getNodeState().releaseToken(token);
      for (      String addr : token.getAddresses()) {
        AddressManager.releaseAddress(addr);
      }
    }
    throw new EucalyptusCloudException(e.getMessage());
  }
  try {
    sla.doNetworkAllocation(vmAllocInfo);
  }
 catch (  NotEnoughResourcesAvailable e) {
    LOG.debug(e,e);
    for (    ResourceToken token : allocTokeList) {
      Clusters.getInstance().lookup(token.getCluster()).getNodeState().releaseToken(token);
      for (      String addr : token.getAddresses()) {
        AddressManager.releaseAddress(addr);
      }
      Network net=Networks.getInstance().lookup(token.getPrimaryNetwork().getName());
      for (      Integer i : token.getPrimaryNetwork().getIndexes()) {
        net.getAvailableAddresses().add(i);
      }
    }
    throw new EucalyptusCloudException(e.getMessage());
  }
  return vmAllocInfo;
}
