{
  Calendar ageCal=Calendar.getInstance();
  ageCal.setTime(age);
  Calendar queryCal=Calendar.getInstance();
  queryCal.set(Calendar.DAY_OF_MONTH,ageCal.get(Calendar.DAY_OF_MONTH));
  queryCal.set(Calendar.MONTH,ageCal.get(Calendar.MONTH));
  queryCal.set(Calendar.YEAR,ageCal.get(Calendar.YEAR));
  queryCal.set(Calendar.HOUR_OF_DAY,0);
  queryCal.set(Calendar.MINUTE,0);
  queryCal.set(Calendar.SECOND,0);
  queryCal.set(Calendar.MILLISECOND,0);
  List<ObjectInfo> results=null;
  EntityTransaction tran=Entities.get(ObjectInfo.class);
  try {
    ObjectInfo example=new ObjectInfo();
    example.setBucketName(bucketName);
    Criterion criterion=Restrictions.and(Restrictions.like("objectKey",objPrefix,MatchMode.START),Restrictions.lt("creationTimestamp",queryCal.getTime()));
    results=Entities.query(example,true,criterion,Collections.EMPTY_MAP);
  }
 catch (  Exception ex) {
    LOG.error("exception caught while retrieving objects prefix with " + objPrefix + " from bucket "+ bucketName+ ", error message - "+ ex.getMessage());
    return Collections.EMPTY_LIST;
  }
 finally {
    tran.commit();
  }
  if (results == null || results.size() == 0) {
    return Collections.EMPTY_LIST;
  }
  List<String> objectKeys=Lists.newArrayList();
  for (  ObjectInfo objectInfo : results) {
    objectKeys.add(objectInfo.getObjectKey());
  }
  return objectKeys;
}
