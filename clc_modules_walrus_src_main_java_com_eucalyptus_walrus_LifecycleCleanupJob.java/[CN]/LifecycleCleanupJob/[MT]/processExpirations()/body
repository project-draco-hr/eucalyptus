{
  LOG.info("processing phase two, deleting objects that have been marked as expired");
  StorageManager storageManager=null;
  try {
    storageManager=BackendStorageManagerFactory.getStorageManager();
  }
 catch (  Exception e) {
    LOG.error("failed to retrieve storage manager, unable to delete expired objects - " + e.getMessage());
    return;
  }
  if (storageManager != null) {
    List<ObjectInfo> needsReaped=null;
    ObjectInfo example=new ObjectInfo();
    example.setLifecycleStatus(LifecycleStatus.REAPED_FOR_EXPIRE);
    EntityTransaction tran=Entities.get(ObjectInfo.class);
    try {
      needsReaped=Entities.query(example);
      tran.commit();
    }
 catch (    Exception ex) {
      LOG.error("an exception occurred while attempting to retrieve objects marked for expiration, " + "the exception message is - " + ex.getMessage());
    }
 finally {
      if (tran.isActive()) {
        tran.rollback();
      }
    }
    if (needsReaped != null && needsReaped.size() > 0) {
      for (      ObjectInfo deleteMe : needsReaped) {
        try {
          storageManager.deleteObject(deleteMe.getBucketName(),deleteMe.getObjectName());
        }
 catch (        Exception ex) {
          LOG.error("an exception occurred while attempting to have the storage manager delete " + "the object with key - " + deleteMe.getObjectKey() + " in bucket - "+ deleteMe.getBucketName()+ ", the exception message - "+ ex.getMessage());
        }
        tran=Entities.get(ObjectInfo.class);
        try {
          ObjectInfo needsMarkedExample=new ObjectInfo(deleteMe.getBucketName(),deleteMe.getObjectKey());
          needsMarkedExample.setLifecycleStatus(LifecycleStatus.REAPED_FOR_EXPIRE);
          ObjectInfo needsMarked=Entities.uniqueResult(needsMarkedExample);
          needsMarked.setLifecycleStatus(LifecycleStatus.EXPIRED);
          Entities.merge(needsMarked);
          tran.commit();
        }
 catch (        Exception ex) {
          LOG.error("an exception occurred while attempting to set object with key " + deleteMe.getObjectKey() + " and bucket name "+ deleteMe.getBucketName()+ " as expired, the exception message is - "+ ex.getMessage());
        }
 finally {
          if (tran.isActive()) {
            tran.rollback();
          }
        }
        if (deleteMe.getSize().longValue() > 0) {
          EntityTransaction buckInfoTran=Entities.get(BucketInfo.class);
          try {
            BucketInfo deleteMeBucket=new BucketInfo();
            deleteMeBucket.setBucketName(deleteMe.getBucketName());
            List<BucketInfo> deleteMeBuckets=Entities.query(deleteMeBucket);
            if (deleteMeBuckets != null && deleteMeBuckets.size() > 0) {
              BucketInfo bucket=deleteMeBuckets.get(0);
              if (bucket != null && bucket.getOwnerId() != null) {
                ListenerRegistry.getInstance().fireEvent(S3ObjectEvent.with(S3ObjectEvent.S3ObjectAction.OBJECTDELETE,deleteMe.getBucketName(),deleteMe.getObjectKey(),deleteMe.getVersionId(),bucket.getUserId(),deleteMe.getSize()));
              }
 else {
                LOG.error("failed to fire usage event when deleting object with key - " + deleteMe.getObjectKey() + " in bucket - "+ deleteMe.getBucketName()+ " because the bucket's owner was not able to be found");
              }
            }
 else {
              LOG.error("failed to fire usage event when deleting object with key - " + deleteMe.getObjectKey() + " in bucket - "+ deleteMe.getBucketName()+ " because the bucket could not be found in the database");
            }
            buckInfoTran.commit();
          }
 catch (          Exception ex) {
            LOG.error("failed to fire usage event when deleting object with key - " + deleteMe.getObjectKey() + " in bucket - "+ deleteMe.getBucketName()+ " because exception was encountered with message "+ ex.getMessage());
            if (buckInfoTran.isActive()) {
              buckInfoTran.rollback();
            }
          }
        }
      }
    }
    tran=Entities.get(ObjectInfo.class);
    try {
      ObjectInfo needsMarkedExample=new ObjectInfo();
      needsMarkedExample.setLifecycleStatus(LifecycleStatus.EXPIRED);
      List<ObjectInfo> needsMarked=Entities.query(needsMarkedExample);
      if (needsMarked != null && needsMarked.size() > 0) {
        for (        ObjectInfo objectInfo : needsMarked) {
          if (objectInfo.getGrants() != null) {
            objectInfo.getGrants().clear();
            try {
              Entities.merge(objectInfo);
            }
 catch (            Exception ex) {
              LOG.error("attempting to clear the grants from object with key - " + objectInfo.getObjectKey() + " in bucket - "+ objectInfo.getBucketName()+ " the message on the exception is - "+ ex.getMessage());
            }
          }
        }
      }
      tran.commit();
    }
 catch (    Exception ex) {
      LOG.error("an exception occurred while attempting to clear grants on objects, message - " + ex.getMessage());
    }
 finally {
      if (tran.isActive()) {
        tran.rollback();
      }
    }
    tran=Entities.get(ObjectInfo.class);
    try {
      Map<String,LifecycleStatus> criteria=new HashMap<>();
      criteria.put("lifecycleStatus",LifecycleStatus.EXPIRED);
      Entities.deleteAllMatching(ObjectInfo.class,"WHERE lifecycleStatus = :lifecycleStatus",criteria);
      tran.commit();
    }
 catch (    Exception ex) {
      LOG.error("exception encountered while attempting to delete objects from database that have been reaped");
      if (tran.isActive()) {
        tran.rollback();
      }
    }
  }
 else {
    LOG.error("unable to proceed with second phase of object lifecycle reaping because no storage manager was found");
  }
}
