{
  if (value != null) {
    int beginPos=value.indexOf("${");
    if (beginPos != -1 && value.length() != beginPos + 2) {
      if (value.charAt(beginPos + 2) == '!') {
        builder.append(value.substring(0,beginPos + 2));
        recursivelyReplaceVariablesWithStringBuilder(value.substring(beginPos + 3),variableMapping,builder);
      }
 else {
        int endPos=value.indexOf("}",beginPos + 2);
        if (endPos != -1) {
          String variable=value.substring(beginPos + 2,endPos);
          Pattern pattern=Pattern.compile("[A-Za-z0-9_\\:\\.]+");
          if (!pattern.matcher(variable).matches()) {
            throw new ValidationErrorException("Template error: variable names in Fn::Sub syntax must contain only " + "alphanumeric characters, underscores, periods, and colons");
          }
          if (!variableMapping.containsKey(variable)) {
            throw new ValidationErrorException("Template error: unmapped variable " + variable + " in string for Fn::Sub");
          }
          builder.append(value.substring(0,beginPos));
          builder.append(variableMapping.get(variable));
          recursivelyReplaceVariablesWithStringBuilder(value.substring(endPos + 1),variableMapping,builder);
        }
 else {
          builder.append(value);
        }
      }
    }
 else {
      builder.append(value);
    }
  }
}
