{
  try (TransactionResource trans=Entities.transactionFor(ObjectEntity.class)){
    PaginatedResult<ObjectEntity> result=new PaginatedResult<ObjectEntity>();
    HashSet<String> commonPrefixes=new HashSet<String>();
    if (maxUploads >= 0) {
      final int queryStrideSize=maxUploads + 1;
      ObjectEntity searchObj=new ObjectEntity();
      searchObj.withBucket(bucket);
      searchObj.withState(ObjectState.mpu_pending);
      Criteria objCriteria=Entities.createCriteria(ObjectEntity.class);
      objCriteria.setReadOnly(true);
      objCriteria.setFetchSize(queryStrideSize);
      objCriteria.add(Example.create(searchObj));
      objCriteria.addOrder(Order.asc("objectKey"));
      objCriteria.setMaxResults(queryStrideSize);
      if (!Strings.isNullOrEmpty(keyMarker)) {
        objCriteria.add(Restrictions.gt("objectKey",keyMarker));
      }
 else {
        keyMarker="";
      }
      if (!Strings.isNullOrEmpty(uploadIdMarker)) {
        objCriteria.add(Restrictions.gt("uploadId",uploadIdMarker));
      }
 else {
        uploadIdMarker="";
      }
      if (!Strings.isNullOrEmpty(prefix)) {
        objCriteria.add(Restrictions.like("objectKey",prefix,MatchMode.START));
      }
 else {
        prefix="";
      }
      objCriteria=getSearchByBucket(objCriteria,bucket);
      if (Strings.isNullOrEmpty(delimiter)) {
        delimiter="";
      }
      List<ObjectEntity> objectInfos=null;
      int resultKeyCount=0;
      String[] parts=null;
      String prefixString=null;
      boolean useDelimiter=!Strings.isNullOrEmpty(delimiter);
      int pages=0;
      do {
        parts=null;
        prefixString=null;
        objCriteria.setFirstResult(pages++ * queryStrideSize);
        objectInfos=(List<ObjectEntity>)objCriteria.list();
        if (objectInfos == null) {
          break;
        }
        for (        ObjectEntity objectRecord : objectInfos) {
          if (useDelimiter) {
            parts=objectRecord.getObjectKey().substring(prefix.length()).split(delimiter);
            if (parts.length > 1) {
              prefixString=prefix + parts[0] + delimiter;
              if (!prefixString.equals(keyMarker) && !commonPrefixes.contains(prefixString)) {
                if (resultKeyCount == maxUploads) {
                  result.setIsTruncated(true);
                  resultKeyCount++;
                  break;
                }
 else {
                  commonPrefixes.add(prefixString);
                  result.setLastEntry(prefixString);
                  resultKeyCount++;
                }
              }
 else {
              }
              continue;
            }
          }
          if (resultKeyCount == maxUploads) {
            result.setIsTruncated(true);
            resultKeyCount++;
            break;
          }
          result.getEntityList().add(objectRecord);
          result.setLastEntry(objectRecord);
          resultKeyCount++;
        }
        if (resultKeyCount <= maxUploads && objectInfos.size() <= maxUploads) {
          break;
        }
      }
 while (resultKeyCount <= maxUploads);
      if (commonPrefixes != null) {
        result.getCommonPrefixes().addAll(commonPrefixes);
        Collections.sort(result.getCommonPrefixes());
      }
    }
 else {
      throw new IllegalArgumentException("max uploads must be positive integer");
    }
    return result;
  }
 catch (  Exception e) {
    LOG.error("Error generating paginated multipart upload list for bucket " + bucket.getBucketName(),e);
    throw e;
  }
}
