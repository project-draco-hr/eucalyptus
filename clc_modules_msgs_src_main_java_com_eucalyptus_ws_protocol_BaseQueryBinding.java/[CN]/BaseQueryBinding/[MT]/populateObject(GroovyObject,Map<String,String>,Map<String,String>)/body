{
  final List<String> failedMappings=new ArrayList<String>();
  for (  final Map.Entry<String,String> e : paramFieldMap.entrySet()) {
    try {
      if (getRecursiveField(obj.getClass(),e.getValue()).getType().equals(ArrayList.class)) {
        failedMappings.addAll(this.populateObjectList(obj,e,params,params.size()));
      }
    }
 catch (    final Exception e1) {
      LOG.debug("Failed mapping : ",e1);
      failedMappings.add(e.getKey());
    }
  }
  for (  final Map.Entry<String,String> e : paramFieldMap.entrySet()) {
    Field field=null;
    Class<?> declaredType=null;
    try {
      field=getRecursiveField(obj.getClass(),e.getValue());
      declaredType=field.getType();
    }
 catch (    final Exception e2) {
      LOG.debug("Field not found: " + e.getValue(),e2);
    }
    if (params.containsKey(e.getKey()) && (declaredType == null || !EucalyptusData.class.isAssignableFrom(declaredType)) && !this.populateObjectField(obj,e,params)) {
      failedMappings.add(e.getKey());
    }
 else     if ((declaredType != null) && EucalyptusData.class.isAssignableFrom(declaredType)) {
      try {
        final Map<String,String> fieldMap=this.buildFieldMap(declaredType);
        final Object newInstance=declaredType.newInstance();
        Map<String,String> subParams=Maps.newHashMap();
        HttpEmbedded httpEmbedded=null;
        if (field != null && (field.isAnnotationPresent(HttpEmbedded.class) || field.isAnnotationPresent(HttpEmbeddeds.class))) {
          httpEmbedded=getHttpEmbeddedAnnotation(field);
        }
        if (httpEmbedded != null && !httpEmbedded.multiple()) {
          subParams=params;
        }
 else {
          for (          final String item : Sets.newHashSet(params.keySet())) {
            if (item.startsWith(e.getKey())) {
              params.get(item);
              subParams.put(item.replace(e.getKey() + ".",""),params.remove(item));
            }
          }
        }
        if (!subParams.isEmpty()) {
          this.populateObject((GroovyObject)newInstance,fieldMap,subParams);
          obj.setProperty(e.getValue(),newInstance);
        }
 else         if (params.containsKey(e.getKey())) {
          obj.setProperty(e.getValue(),newInstance);
        }
      }
 catch (      final Exception e1) {
        LOG.debug("Error binding object",e1);
      }
    }
 else {
      failedMappings.remove(e.getKey());
    }
  }
  return failedMappings;
}
