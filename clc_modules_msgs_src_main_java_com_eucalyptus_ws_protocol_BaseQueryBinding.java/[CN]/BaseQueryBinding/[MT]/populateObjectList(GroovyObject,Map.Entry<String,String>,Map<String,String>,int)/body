{
  final List<String> failedMappings=new ArrayList<String>();
  try {
    final Field declaredField=getRecursiveField(obj.getClass(),paramFieldPair.getValue());
    final ArrayList theList=(ArrayList)obj.getProperty(paramFieldPair.getValue());
    final Class genericType=(Class)((ParameterizedType)declaredField.getGenericType()).getActualTypeArguments()[0];
    if (String.class.equals(genericType) || Boolean.class.equals(genericType) || Integer.class.equals(genericType)|| Long.class.equals(genericType)|| Double.class.equals(genericType)|| Date.class.equals(genericType)) {
      if (params.containsKey(paramFieldPair.getKey())) {
        theList.add(convertToType(Suppliers.ofInstance(params.remove(paramFieldPair.getKey())),genericType));
      }
 else {
        final List<String> keys=Lists.newArrayList(params.keySet());
        final Pattern paramPattern=Pattern.compile(Pattern.quote(paramFieldPair.getKey()) + "\\.([0-9]{1,7})");
        final Map<String,Object> indexToValueMap=new TreeMap<String,Object>(Ordering.natural().onResultOf(FunctionToInteger.INSTANCE));
        for (        final String k : keys) {
          final Matcher matcher=paramPattern.matcher(k);
          if (matcher.matches()) {
            indexToValueMap.put(matcher.group(1),convertToType(Suppliers.ofInstance(params.remove(k)),genericType));
          }
        }
        theList.addAll(indexToValueMap.values());
      }
    }
 else     if (declaredField.isAnnotationPresent(HttpEmbedded.class) || declaredField.isAnnotationPresent(HttpEmbeddeds.class)) {
      final HttpEmbedded annoteEmbedded=getHttpEmbeddedAnnotation(declaredField);
      if (annoteEmbedded.multiple()) {
        final List<String> keys=Lists.newArrayList(params.keySet());
        final Map<String,Map<String,String>> subParamMaps=new TreeMap<>(Ordering.natural().onResultOf(FunctionToInteger.INSTANCE));
        final Map<String,String> valueMap=new TreeMap<>(Ordering.natural().onResultOf(FunctionToInteger.INSTANCE));
        for (        final String k : keys) {
          if (k.matches(Pattern.quote(paramFieldPair.getKey()) + "\\.[0-9]{1,7}\\..*")) {
            final String currentValue=params.remove(k);
            final String setKey=k.replaceAll("^" + paramFieldPair.getKey() + "\\.([0-9]{1,7})\\..*","$1");
            if (setKey.length() > 7)             continue;
            final String subKey=k.replaceAll("^" + paramFieldPair.getKey() + "\\.[0-9]{1,7}\\.","");
            Map<String,String> subMap=subParamMaps.get(setKey);
            if (subMap == null) {
              subParamMaps.put(setKey,subMap=Maps.newHashMap());
            }
            subMap.put(subKey,currentValue);
          }
 else           if (k.matches(Pattern.quote(paramFieldPair.getKey()) + "\\.[0-9]{1,7}")) {
            final String currentValue=params.remove(k);
            final String orderKey=k.replaceAll("^" + paramFieldPair.getKey() + "\\.([0-9]{1,7})","$1");
            if (orderKey.length() > 7)             continue;
            valueMap.put(orderKey,currentValue);
          }
        }
        if (subParamMaps.isEmpty()) {
          for (          final String value : valueMap.values()) {
            failedMappings.addAll(this.populateEmbedded(genericType,value,theList));
          }
        }
 else {
          for (          final Map<String,String> subParams : subParamMaps.values()) {
            failedMappings.addAll(this.populateEmbedded(genericType,subParams,theList));
          }
        }
      }
 else {
        failedMappings.addAll(this.populateEmbedded(genericType,params,theList));
      }
    }
  }
 catch (  final Exception e1) {
    LOG.debug("FAILED HERE : ",e1);
    failedMappings.add(paramFieldPair.getKey());
  }
  return failedMappings;
}
