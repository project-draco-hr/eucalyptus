{
  if (simpleMetricEntity == null)   return new ArrayList<MetricEntity>();
  TreeSet<DimensionEntity> dimensions=new TreeSet<DimensionEntity>();
  for (  Map.Entry<String,String> entry : simpleMetricEntity.getDimensionMap().entrySet()) {
    DimensionEntity d=new DimensionEntity();
    d.setName(entry.getKey());
    d.setValue(entry.getValue());
    dimensions.add(d);
  }
  Set<Set<DimensionEntity>> permutations=null;
  if (simpleMetricEntity.getMetricType() == MetricType.System) {
    permutations=Sets.powerSet(dimensions);
  }
 else {
    permutations=Sets.newHashSet();
    permutations.add(dimensions);
  }
  ArrayList<MetricEntity> returnValue=new ArrayList<MetricEntity>();
  for (  Set<DimensionEntity> dimensionsPermutation : permutations) {
    String dimensionHash=hash(dimensionsPermutation);
    MetricEntity metric=MetricEntityFactory.getNewMetricEntity(simpleMetricEntity.getMetricType(),dimensionHash);
    metric.setAccountId(simpleMetricEntity.getAccountId());
    metric.setMetricName(simpleMetricEntity.getMetricName());
    metric.setNamespace(simpleMetricEntity.getNamespace());
    metric.setDimensions(dimensions);
    metric.setDimensionHash(dimensionHash);
    metric.setMetricType(simpleMetricEntity.getMetricType());
    metric.setUnits(simpleMetricEntity.getUnits());
    metric.setTimestamp(simpleMetricEntity.getTimestamp());
    metric.setSampleMax(simpleMetricEntity.getSampleMax());
    metric.setSampleMin(simpleMetricEntity.getSampleMin());
    metric.setSampleSum(simpleMetricEntity.getSampleSum());
    metric.setSampleSize(simpleMetricEntity.getSampleSize());
    returnValue.add(metric);
  }
  return returnValue;
}
