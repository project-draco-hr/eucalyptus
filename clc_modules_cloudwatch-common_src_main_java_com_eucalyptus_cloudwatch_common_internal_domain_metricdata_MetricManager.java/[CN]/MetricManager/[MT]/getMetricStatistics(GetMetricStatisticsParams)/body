{
  if (getMetricStatisticsParams == null)   throw new IllegalArgumentException("getMetricStatisticsParams can not be null");
  Date now=new Date();
  getMetricStatisticsParams.validate(now);
  Class metricEntityClass=MetricEntityFactory.getClassForEntitiesGet(getMetricStatisticsParams.getMetricType(),getMetricStatisticsParams.getDimensionHash());
  Map<GetMetricStatisticsAggregationKey,MetricStatistics> aggregationMap=new TreeMap<GetMetricStatisticsAggregationKey,MetricStatistics>(GetMetricStatisticsAggregationKey.COMPARATOR_WITH_NULLS.INSTANCE);
  try (final TransactionResource db=Entities.transactionFor(metricEntityClass)){
    Criteria criteria=Entities.createCriteria(metricEntityClass);
    criteria=criteria.add(Restrictions.eq("accountId",getMetricStatisticsParams.getAccountId()));
    criteria=criteria.add(Restrictions.eq("metricName",getMetricStatisticsParams.getMetricName()));
    criteria=criteria.add(Restrictions.eq("namespace",getMetricStatisticsParams.getNamespace()));
    criteria=criteria.add(Restrictions.lt("timestamp",getMetricStatisticsParams.getEndTime()));
    criteria=criteria.add(Restrictions.ge("timestamp",getMetricStatisticsParams.getStartTime()));
    criteria=criteria.add(Restrictions.eq("dimensionHash",getMetricStatisticsParams.getDimensionHash()));
    if (getMetricStatisticsParams.getUnits() != null) {
      criteria=criteria.add(Restrictions.eq("units",getMetricStatisticsParams.getUnits()));
    }
    ProjectionList projectionList=Projections.projectionList();
    projectionList.add(Projections.max("sampleMax"));
    projectionList.add(Projections.min("sampleMin"));
    projectionList.add(Projections.sum("sampleSize"));
    projectionList.add(Projections.sum("sampleSum"));
    projectionList.add(Projections.groupProperty("units"));
    projectionList.add(Projections.groupProperty("timestamp"));
    criteria.setProjection(projectionList);
    criteria.addOrder(Order.asc("timestamp"));
    ScrollableResults results=criteria.setCacheMode(CacheMode.IGNORE).scroll(ScrollMode.FORWARD_ONLY);
    while (results.next()) {
      MetricEntity me=getMetricEntity(getMetricStatisticsParams.getAccountId(),getMetricStatisticsParams.getMetricName(),getMetricStatisticsParams.getNamespace(),getMetricStatisticsParams.getMetricType(),getMetricStatisticsParams.getDimensionHash(),results);
      GetMetricStatisticsAggregationKey key=new GetMetricStatisticsAggregationKey(me,getMetricStatisticsParams.getStartTime(),getMetricStatisticsParams.getPeriod(),getMetricStatisticsParams.getDimensionHash());
      MetricStatistics item=new MetricStatistics(me,getMetricStatisticsParams.getStartTime(),getMetricStatisticsParams.getPeriod(),getMetricStatisticsParams.getDimensions());
      if (!aggregationMap.containsKey(key)) {
        aggregationMap.put(key,item);
      }
 else {
        MetricStatistics totalSoFar=aggregationMap.get(key);
        totalSoFar.setSampleMax(Math.max(item.getSampleMax(),totalSoFar.getSampleMax()));
        totalSoFar.setSampleMin(Math.min(item.getSampleMin(),totalSoFar.getSampleMin()));
        totalSoFar.setSampleSize(totalSoFar.getSampleSize() + item.getSampleSize());
        totalSoFar.setSampleSum(totalSoFar.getSampleSum() + item.getSampleSum());
      }
    }
  }
   return Lists.newArrayList(aggregationMap.values());
}
