{
  String bucketOneName="my-unit-test-bucket";
  List<LifecycleRule> testOneRules=new ArrayList<>();
  for (int idx=0; idx < 10; idx++) {
    LifecycleRule testRule=new LifecycleRule();
    testRule.setId(bucketOneName + "-test-rule-" + idx);
    testRule.setStatus(BucketLifecycleManager.RULE_STATUS_ENABLED);
    testRule.setPrefix("/" + bucketOneName + "/"+ idx);
    boolean oddIdx=idx % 2 == 0;
    Expiration expiration=new Expiration();
    Transition transition=new Transition();
    transition.setDestinationClass("GLACIER");
    if (oddIdx) {
      expiration.setCreationDelayDays(idx);
      Calendar now=Calendar.getInstance();
      now.add(Calendar.DATE,idx);
      Date dtNow=now.getTime();
      transition.setEffectiveDate(dtNow);
      testRule.setExpiration(expiration);
      testRule.setTransition(transition);
    }
 else {
      transition.setCreationDelayDays(idx);
      Calendar now=Calendar.getInstance();
      now.add(Calendar.DATE,idx);
      Date dtNow=now.getTime();
      expiration.setEffectiveDate(dtNow);
      testRule.setExpiration(expiration);
      testRule.setTransition(transition);
    }
    testOneRules.add(testRule);
  }
  String bucketTwoName="my-other-unit-test-bucket";
  List<LifecycleRule> testTwoRules=new ArrayList<>();
  for (int idx=0; idx < 10; idx++) {
    LifecycleRule testRule=new LifecycleRule();
    testRule.setId(bucketTwoName + "-test-rule-" + idx);
    testRule.setStatus(BucketLifecycleManager.RULE_STATUS_ENABLED);
    testRule.setPrefix("/" + bucketTwoName + "/"+ idx);
    boolean oddIdx=idx % 2 == 0;
    Expiration expiration=new Expiration();
    Transition transition=new Transition();
    transition.setDestinationClass("GLACIER");
    if (oddIdx) {
      expiration.setCreationDelayDays(idx);
      Calendar now=Calendar.getInstance();
      now.add(Calendar.DATE,idx);
      Date dtNow=now.getTime();
      transition.setEffectiveDate(dtNow);
      testRule.setExpiration(expiration);
      testRule.setTransition(transition);
    }
 else {
      transition.setCreationDelayDays(idx);
      Calendar now=Calendar.getInstance();
      now.add(Calendar.DATE,idx);
      Date dtNow=now.getTime();
      expiration.setEffectiveDate(dtNow);
      testRule.setExpiration(expiration);
      testRule.setTransition(transition);
    }
    testTwoRules.add(testRule);
  }
  mgr.addLifecycleRules(testOneRules,bucketOneName);
  mgr.addLifecycleRules(testTwoRules,bucketTwoName);
  List<LifecycleRule> retrievedRulesOne=mgr.getLifecycleRules(bucketOneName);
  assertTrue("expected to be able to retrieve rules after adding",retrievedRulesOne != null);
  assertTrue("expected 10 rules to be retrieved after adding 10 rules",retrievedRulesOne.size() == 10);
  for (  LifecycleRule rule : retrievedRulesOne) {
    assertTrue("expected rule id to be correct",rule.getId().startsWith(bucketOneName + "-test-rule-"));
    assertTrue("expected prefix to match",rule.getPrefix().startsWith("/" + bucketOneName + "/"));
  }
  List<LifecycleRule> retrievedRulesTwo=mgr.getLifecycleRules(bucketTwoName);
  assertTrue("expected to be able to retrieve rules after adding",retrievedRulesTwo != null);
  assertTrue("expected 10 rules to be retrieved after adding 10 rules",retrievedRulesTwo.size() == 10);
  for (  LifecycleRule rule : retrievedRulesTwo) {
    assertTrue("expected rule id to be correct",rule.getId().startsWith(bucketTwoName + "-test-rule-"));
    assertTrue("expected prefix to match",rule.getPrefix().startsWith("/" + bucketTwoName + "/"));
  }
  mgr.addLifecycleRules(testOneRules,bucketTwoName);
  retrievedRulesTwo=mgr.getLifecycleRules(bucketTwoName);
  assertTrue("expected to be able to retrieve rules after adding",retrievedRulesTwo != null);
  assertTrue("expected 10 rules to be retrieved after adding 10 rules",retrievedRulesTwo.size() == 10);
  for (  LifecycleRule rule : retrievedRulesTwo) {
    assertTrue("expected rule id to be correct",rule.getId().startsWith(bucketOneName + "-test-rule-"));
    assertTrue("expected prefix to match",rule.getPrefix().startsWith("/" + bucketOneName + "/"));
  }
  retrievedRulesOne=mgr.getLifecycleRules(bucketOneName);
  assertTrue("expected to be able to retrieve rules after adding",retrievedRulesOne != null);
  assertTrue("expected 10 rules to be retrieved after adding 10 rules",retrievedRulesOne.size() == 10);
  for (  LifecycleRule rule : retrievedRulesOne) {
    assertTrue("expected rule id to be correct",rule.getId().startsWith(bucketOneName + "-test-rule-"));
    assertTrue("expected prefix to match",rule.getPrefix().startsWith("/" + bucketOneName + "/"));
  }
  cleanRules(bucketOneName);
  cleanRules(bucketTwoName);
}
