{
  LifecycleRule testRule=new LifecycleRule();
  testRule.setId("test-rule");
  testRule.setStatus(BucketLifecycleManager.RULE_STATUS_ENABLED);
  testRule.setPrefix("/some/test/data");
  Expiration expiration=new Expiration();
  Transition transition=new Transition();
  transition.setDestinationClass("GLACIER");
  expiration.setCreationDelayDays(3);
  Calendar now=Calendar.getInstance();
  now.add(Calendar.DATE,2);
  Date dtNow=now.getTime();
  transition.setEffectiveDate(dtNow);
  testRule.setExpiration(expiration);
  testRule.setTransition(transition);
  List<LifecycleRule> rules=new ArrayList<>();
  rules.add(testRule);
  mgr.addLifecycleRules(rules,"my-unit-test-bucket");
  com.eucalyptus.objectstorage.entities.LifecycleRule retrievedFirst=mgr.getLifecycleRuleForReaping("test-rule","my-unit-test-bucket");
  com.eucalyptus.objectstorage.entities.LifecycleRule retrievedSecond=mgr.getLifecycleRuleForReaping("test-rule","my-unit-test-bucket");
  assertTrue("expected the lifecycle rule to be retrievable on the first call",retrievedFirst != null);
  assertTrue("expected the lifecycle rule to be unretrievable on the second call",retrievedSecond == null);
  Thread.sleep(BucketLifecycleManager.MAX_WAIT_TIME_FOR_PROCESSING + 1000l);
  com.eucalyptus.objectstorage.entities.LifecycleRule retrievedThird=mgr.getLifecycleRuleForReaping("test-rule","my-unit-test-bucket");
  assertTrue("expected the lifecycle rule to be retrievable now on the third call",retrievedThird != null);
}
