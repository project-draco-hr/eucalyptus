{
  List<AbsoluteMetricQueueItem> dataToInsert=new ArrayList<AbsoluteMetricQueueItem>();
  EntityTransaction db=Entities.get(AbsoluteMetricHistory.class);
  try {
    AbsoluteMetricCache cache=new AbsoluteMetricCache(db);
    for (    final AbsoluteMetricQueueItem item : dataBatch) {
      String accountId=item.getAccountId();
      String nameSpace=item.getNamespace();
      MetricDatum datum=item.getMetricDatum();
      if ("AWS/EBS".equals(nameSpace)) {
        String volumeId=null;
        if ((datum.getDimensions() != null) && (datum.getDimensions().getMember() != null)) {
          for (          Dimension dimension : datum.getDimensions().getMember()) {
            if ("VolumeId".equals(dimension.getName())) {
              volumeId=dimension.getValue();
              cache.load(nameSpace,"VolumeId",volumeId);
            }
          }
        }
        if (EBS_ABSOLUTE_METRICS.containsKey(datum.getMetricName())) {
          if (!adjustAbsoluteVolumeStatisticSet(cache,datum,datum.getMetricName(),EBS_ABSOLUTE_METRICS.get(datum.getMetricName()),volumeId))           continue;
        }
        if ("VolumeReadOps".equals(datum.getMetricName())) {
          dataToInsert.add(createVolumeThroughputMetric(accountId,nameSpace,datum));
        }
        if ("VolumeTotalReadWriteTime".equals(datum.getMetricName())) {
          convertVolumeTotalReadWriteTimeToVolumeIdleTime(datum);
        }
        if ("VolumeQueueLength".equals(datum.getMetricName())) {
          if (!adjustAbsoluteVolumeQueueLengthStatisticSet(cache,datum,volumeId))           continue;
        }
      }
      if ("AWS/EC2".equals(nameSpace)) {
        String instanceId=null;
        if ((datum.getDimensions() != null) && (datum.getDimensions().getMember() != null)) {
          for (          Dimension dimension : datum.getDimensions().getMember()) {
            if ("InstanceId".equals(dimension.getName())) {
              instanceId=dimension.getValue();
              cache.load(nameSpace,"InstanceId",instanceId);
            }
          }
        }
        if (EC2_ABSOLUTE_METRICS.containsKey(datum.getMetricName())) {
          if (!adjustAbsoluteInstanceStatisticSet(cache,datum,datum.getMetricName(),EC2_ABSOLUTE_METRICS.get(datum.getMetricName()),instanceId))           continue;
        }
 else         if ("CPUUtilizationMSAbsolute".equals(datum.getMetricName())) {
          if (!adjustAbsoluteInstanceCPUStatisticSet(cache,datum,"CPUUtilizationMSAbsolute","CPUUtilization",instanceId))           continue;
        }
      }
      dataToInsert.add(item);
    }
    db.commit();
  }
 catch (  RuntimeException ex) {
    Logs.extreme().error(ex,ex);
    throw ex;
  }
 finally {
    if (db.isActive())     db.rollback();
  }
  return dataToInsert;
}
