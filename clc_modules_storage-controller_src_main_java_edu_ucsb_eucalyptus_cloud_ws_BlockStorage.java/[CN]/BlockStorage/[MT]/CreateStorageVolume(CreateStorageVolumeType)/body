{
  CreateStorageVolumeResponseType reply=(CreateStorageVolumeResponseType)request.getReply();
  if (!StorageProperties.enableStorage) {
    LOG.error("BlockStorage has been disabled. Please check your setup");
    return reply;
  }
  String snapshotId=request.getSnapshotId();
  String userId=request.getUserId();
  String volumeId=request.getVolumeId();
  String size=request.getSize();
  int sizeAsInt=0;
  if (StorageProperties.shouldEnforceUsageLimits && StorageProperties.trackUsageStatistics) {
    if (size != null) {
      sizeAsInt=Integer.parseInt(size);
      int totalVolumeSize=(int)(blockStorageStatistics.getTotalSpaceUsed() / StorageProperties.GB);
      ;
      if (((totalVolumeSize + sizeAsInt) > StorageProperties.MAX_TOTAL_VOLUME_SIZE) || (sizeAsInt > StorageProperties.MAX_VOLUME_SIZE))       throw new EntityTooLargeException(volumeId);
    }
  }
  EntityWrapper<VolumeInfo> db=StorageController.getEntityWrapper();
  VolumeInfo volumeInfo=new VolumeInfo(volumeId);
  List<VolumeInfo> volumeInfos=db.query(volumeInfo);
  if (volumeInfos.size() > 0) {
    db.rollback();
    throw new VolumeAlreadyExistsException(volumeId);
  }
  volumeInfo.setUserName(userId);
  volumeInfo.setSize(sizeAsInt);
  volumeInfo.setStatus(StorageProperties.Status.creating.toString());
  Date creationDate=new Date();
  volumeInfo.setCreateTime(creationDate);
  if (snapshotId != null) {
    volumeInfo.setSnapshotId(snapshotId);
    reply.setSnapshotId(snapshotId);
  }
  db.add(volumeInfo);
  reply.setVolumeId(volumeId);
  reply.setCreateTime(DateUtils.format(creationDate.getTime(),DateUtils.ISO8601_DATETIME_PATTERN) + ".000Z");
  reply.setSize(size);
  reply.setStatus(volumeInfo.getStatus());
  db.commit();
  VolumeCreator volumeCreator=new VolumeCreator(volumeId,"snapset",snapshotId,sizeAsInt);
  volumeCreator.start();
  return reply;
}
