{
  UnexportVolumeResponseType reply=request.getReply();
  String token=request.getToken();
  final String volumeId=request.getVolumeId();
  final String nodeIqn=request.getIqn();
  final String nodeIp=request.getIp();
  LOG.info("Processing UnexportVolume request for volume " + volumeId + " from node "+ nodeIp+ " with iqn "+ nodeIqn);
  if (token.startsWith(StorageProperties.TOKEN_PREFIX)) {
    token=token.substring(StorageProperties.TOKEN_PREFIX.length(),token.length());
  }
  if (ENCRYPT_TOKEN) {
    token=BlockStorageUtil.decryptWithCloud(token);
  }
  final String tokenValue=token;
  final Function<String,VolumeInfo> unexport=new Function<String,VolumeInfo>(){
    @Override public VolumeInfo apply(    String volumeId){
      VolumeInfo volumeEntity=null;
      try {
        VolumeInfo foundVolume=Entities.uniqueResult(new VolumeInfo(volumeId));
        volumeEntity=Entities.merge(foundVolume);
        volumeEntity.invalidateExport(tokenValue,nodeIp,nodeIqn);
      }
 catch (      Exception e) {
        LOG.error("Could not remove export for volume " + volumeId + " due to: "+ e.getMessage(),e);
        return null;
      }
      return volumeEntity;
    }
  }
;
  final Function<String,VolumeInfo> tearDown=new Function<String,VolumeInfo>(){
    @Override public VolumeInfo apply(    String volumeId){
      VolumeInfo volumeEntity=null;
      try {
        VolumeInfo foundVolume=Entities.uniqueResult(new VolumeInfo(volumeId));
        volumeEntity=Entities.merge(foundVolume);
        VolumeToken validToken=null;
        validToken=volumeEntity.getCurrentValidToken();
        if (validToken == null) {
          blockManager.unexportVolumeFromAll(volumeId);
        }
 else {
          try {
            blockManager.unexportVolume(volumeEntity.getVolumeId(),nodeIqn);
          }
 catch (          UnsupportedOperationException e) {
            LOG.debug("UnexportVolume for single host not supported by backend. Treating as no-op");
          }
catch (          Exception e) {
            LOG.error("Could not detach volume " + volumeEntity.getVolumeId(),e);
            throw e;
          }
        }
      }
 catch (      Exception e) {
        LOG.error("Could not remove export for volume " + volumeId + " due to: "+ e.getMessage(),e);
        return null;
      }
      return volumeEntity;
    }
  }
;
  try {
    Entities.asTransaction(VolumeInfo.class,unexport).apply(volumeId);
    Entities.asTransaction(VolumeInfo.class,tearDown).apply(volumeId);
    reply.set_return(true);
  }
 catch (  NoSuchElementException e) {
    LOG.error("No volume found",e);
    throw new EucalyptusCloudException("Volume not found " + volumeId);
  }
catch (  Exception e) {
    LOG.error("Failed unexportAndDetach transaction due to: " + e.getMessage(),e);
    throw new EucalyptusCloudException(e);
  }
  return reply;
}
