{
  CreateStorageSnapshotResponseType reply=(CreateStorageSnapshotResponseType)request.getReply();
  StorageProperties.updateWalrusUrl();
  if (!StorageProperties.enableSnapshots) {
    LOG.error("Snapshots have been disabled. Please check connection to Walrus.");
    return reply;
  }
  String volumeId=request.getVolumeId();
  String snapshotId=request.getSnapshotId();
  EntityWrapper<VolumeInfo> db=StorageProperties.getEntityWrapper();
  VolumeInfo volumeInfo=new VolumeInfo(volumeId);
  List<VolumeInfo> volumeInfos=db.query(volumeInfo);
  if (volumeInfos.size() > 0) {
    VolumeInfo foundVolumeInfo=volumeInfos.get(0);
    if (foundVolumeInfo.getStatus().equals(StorageProperties.Status.available.toString())) {
      if (StorageProperties.shouldEnforceUsageLimits) {
        int volSize=foundVolumeInfo.getSize();
        int totalSnapshotSize=0;
        SnapshotInfo snapInfo=new SnapshotInfo();
        snapInfo.setStatus(StorageProperties.Status.available.toString());
        EntityWrapper<SnapshotInfo> dbSnap=db.recast(SnapshotInfo.class);
        List<SnapshotInfo> snapInfos=dbSnap.query(snapInfo);
        for (        SnapshotInfo sInfo : snapInfos) {
          try {
            totalSnapshotSize+=blockManager.getSnapshotSize(sInfo.getSnapshotId());
          }
 catch (          EucalyptusCloudException e) {
            LOG.error(e);
          }
        }
        if ((totalSnapshotSize + volSize) > WalrusInfo.getWalrusInfo().getStorageMaxTotalSnapshotSizeInGb()) {
          db.rollback();
          throw new EntityTooLargeException(snapshotId);
        }
      }
      EntityWrapper<SnapshotInfo> db2=StorageProperties.getEntityWrapper();
      SnapshotInfo snapshotInfo=new SnapshotInfo(snapshotId);
      snapshotInfo.setUserName(foundVolumeInfo.getUserName());
      snapshotInfo.setVolumeId(volumeId);
      Date startTime=new Date();
      snapshotInfo.setStartTime(startTime);
      snapshotInfo.setProgress("0");
      snapshotInfo.setStatus(StorageProperties.Status.creating.toString());
      db2.add(snapshotInfo);
      String snapshotSet="snapset-" + UUID.randomUUID();
      Snapshotter snapshotter=new Snapshotter(snapshotSet,volumeId,snapshotId);
      snapshotService.add(snapshotter);
      db2.commit();
      db.commit();
      reply.setSnapshotId(snapshotId);
      reply.setVolumeId(volumeId);
      reply.setStatus(snapshotInfo.getStatus());
      reply.setStartTime(DateUtils.format(startTime.getTime(),DateUtils.ISO8601_DATETIME_PATTERN) + ".000Z");
      reply.setProgress(snapshotInfo.getProgress());
    }
 else {
      db.rollback();
      throw new VolumeNotReadyException(volumeId);
    }
  }
 else {
    db.rollback();
    throw new NoSuchVolumeException(volumeId);
  }
  return reply;
}
