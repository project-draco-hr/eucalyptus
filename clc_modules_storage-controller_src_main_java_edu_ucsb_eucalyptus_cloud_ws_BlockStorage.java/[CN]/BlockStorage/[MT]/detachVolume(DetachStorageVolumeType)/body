{
  DetachStorageVolumeResponseType reply=request.getReply();
  String volumeId=request.getVolumeId();
  LOG.info("Processing DetachVolume request for volume " + volumeId);
  final Predicate<VolumeToken> invalidateExports=new Predicate<VolumeToken>(){
    @Override public boolean apply(    VolumeToken volToken){
      VolumeToken tokenEntity=Entities.merge(volToken);
      try {
        tokenEntity.invalidateAllExportsAndToken();
        return true;
      }
 catch (      Exception e) {
        LOG.error("Failed invalidating exports for token " + tokenEntity.getToken());
        return false;
      }
    }
  }
;
  final Function<String,VolumeInfo> invalidateAndDetachAll=new Function<String,VolumeInfo>(){
    @Override public VolumeInfo apply(    String volumeId){
      try {
        VolumeInfo volumeEntity=Entities.uniqueResult(new VolumeInfo(volumeId));
        try {
          LOG.debug("Invalidating all tokens and all exports for " + volumeId);
          if (!Iterables.all(volumeEntity.getAttachmentTokens(),invalidateExports)) {
            LOG.error("Failed to invalidate all tokens and exports");
          }
        }
 catch (        Exception e) {
          LOG.error("Error invalidating tokens",e);
        }
        try {
          LOG.debug("Unexporting volume " + volumeId + "from all hosts");
          blockManager.unexportVolumeFromAll(volumeId);
        }
 catch (        EucalyptusCloudException ex) {
          LOG.error("Detaching volume " + volumeId + " from all hosts failed",ex);
        }
      }
 catch (      NoSuchElementException e) {
        LOG.error("Cannot force detach of volume " + volumeId + " because it is not found in database");
        return null;
      }
catch (      TransactionException e) {
        LOG.error("Failed to lookup volume " + volumeId);
      }
      return null;
    }
  }
;
  try {
    LOG.info("Detaching volume " + volumeId + " from all hosts");
    Entities.asTransaction(VolumeInfo.class,invalidateAndDetachAll).apply(volumeId);
  }
 catch (  final Exception e) {
    LOG.error("Failed to fully detach volume " + volumeId);
    reply.set_return(false);
  }
  return reply;
}
