{
  DescribeStorageVolumesResponseType reply=(DescribeStorageVolumesResponseType)request.getReply();
  List<String> volumeSet=request.getVolumeSet();
  ArrayList<VolumeInfo> volumeInfos=new ArrayList<VolumeInfo>();
  EntityWrapper<VolumeInfo> db=new EntityWrapper<VolumeInfo>();
  if ((volumeSet != null) && !volumeSet.isEmpty()) {
    for (    String volumeSetEntry : volumeSet) {
      VolumeInfo volumeInfo=new VolumeInfo(volumeSetEntry);
      List<VolumeInfo> foundVolumeInfos=db.query(volumeInfo);
      if (foundVolumeInfos.size() > 0) {
        volumeInfos.add(foundVolumeInfos.get(0));
      }
    }
  }
 else {
    VolumeInfo volumeInfo=new VolumeInfo();
    List<VolumeInfo> foundVolumeInfos=db.query(volumeInfo);
    for (    VolumeInfo volInfo : foundVolumeInfos) {
      volumeInfos.add(volInfo);
    }
  }
  ArrayList<StorageVolume> volumes=reply.getVolumeSet();
  for (  VolumeInfo volumeInfo : volumeInfos) {
    volumes.add(convertVolumeInfo(volumeInfo));
    if (volumeInfo.getStatus().equals(StorageProperties.Status.failed.toString())) {
      LOG.warn("Volume looks like it has failed removing it: " + volumeInfo.getVolumeId());
      checker.cleanFailedVolume(volumeInfo.getVolumeId());
    }
  }
  db.commit();
  return reply;
}
