{
  AWSEC2InstanceResourceAction action=(AWSEC2InstanceResourceAction)resourceAction;
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
  DescribeInstancesType describeInstancesType=MessageHelper.createMessage(DescribeInstancesType.class,action.info.getEffectiveUserId());
  describeInstancesType.getFilterSet().add(Filter.filter("instance-id",action.info.getPhysicalResourceId()));
  DescribeInstancesResponseType describeInstancesResponseType=AsyncRequests.sendSync(configuration,describeInstancesType);
  if (describeInstancesResponseType.getReservationSet().size() == 0) {
    throw new RetryAfterConditionCheckFailedException("Instance " + action.info.getPhysicalResourceId() + " does not yet exist");
  }
  RunningInstancesItemType runningInstancesItemType=describeInstancesResponseType.getReservationSet().get(0).getInstancesSet().get(0);
  if ("running".equals(runningInstancesItemType.getStateName())) {
    action.info.setPrivateIp(JsonHelper.getStringFromJsonNode(new TextNode(runningInstancesItemType.getPrivateIpAddress())));
    action.info.setPublicIp(JsonHelper.getStringFromJsonNode(new TextNode(runningInstancesItemType.getIpAddress())));
    action.info.setAvailabilityZone(JsonHelper.getStringFromJsonNode(new TextNode(runningInstancesItemType.getPlacement())));
    action.info.setPrivateDnsName(JsonHelper.getStringFromJsonNode(new TextNode(runningInstancesItemType.getPrivateDnsName())));
    action.info.setPublicDnsName(JsonHelper.getStringFromJsonNode(new TextNode(runningInstancesItemType.getDnsName())));
    action.info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(action.info.getPhysicalResourceId())));
    return action;
  }
  throw new RetryAfterConditionCheckFailedException(("Instance " + action.info.getPhysicalResourceId() + " is not yet running, currently "+ runningInstancesItemType.getStateName()));
}
