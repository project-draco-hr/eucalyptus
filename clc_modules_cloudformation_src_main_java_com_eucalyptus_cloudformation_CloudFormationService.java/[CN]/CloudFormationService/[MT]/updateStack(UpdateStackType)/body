{
  UpdateStackResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    final User user=ctx.getUser();
    final String userId=user.getUserId();
    final String accountId=user.getAccountNumber();
    final String accountAlias=ctx.getAccountAlias();
    if (request.getStackName() == null) {
      throw new ValidationErrorException("StackName must not be null");
    }
    checkStackPermission(ctx,request.getStackName(),accountId);
    SomeUpdateStackVars someUpdateStackVars=new SomeUpdateStackVars();
    someUpdateStackVars.populate(request,user,accountId,userId);
    final String stackId=someUpdateStackVars.getStackId();
    final String realStackName=someUpdateStackVars.getRealStackName();
    final Template nextTemplate=someUpdateStackVars.getNextTemplate();
    final String nextTemplateText=someUpdateStackVars.getNextTemplateText();
    int previousStackVersion=someUpdateStackVars.getPreviousStackVersion();
    final Template previousTemplate=someUpdateStackVars.getPreviousTemplate();
    boolean requiresUpdate=someUpdateStackVars.isRequiresUpdate();
    String outerStackArn=StackResourceEntityManager.findOuterStackArnIfExists(stackId,accountId);
    if (outerStackArn != null) {
      requiresUpdate=true;
    }
    if (!requiresUpdate) {
      throw new ValidationErrorException("No updates are to be performed.");
    }
    final StackEntity nextStackEntity=StackEntityManager.checkValidUpdateStatusAndUpdateStack(stackId,accountId,nextTemplate,nextTemplateText,request,previousStackVersion);
    for (    ResourceInfo resourceInfo : nextTemplate.getResourceInfoMap().values()) {
      StackResourceEntity stackResourceEntity=new StackResourceEntity();
      stackResourceEntity=StackResourceEntityManager.updateResourceInfo(stackResourceEntity,resourceInfo);
      stackResourceEntity.setDescription("");
      stackResourceEntity.setResourceStatus(Status.NOT_STARTED);
      stackResourceEntity.setStackId(stackId);
      stackResourceEntity.setStackName(realStackName);
      stackResourceEntity.setRecordDeleted(Boolean.FALSE);
      stackResourceEntity.setResourceVersion(nextStackEntity.getStackVersion());
      StackResourceEntityManager.addStackResource(stackResourceEntity);
    }
    String previousResourceDependencyManagerJson=StackEntityHelper.resourceDependencyManagerToJson(previousTemplate.getResourceDependencyManager());
    StackUpdateInfoEntityManager.createUpdateInfo(stackId,accountId,previousResourceDependencyManagerJson,nextStackEntity.getResourceDependencyManagerJson(),nextStackEntity.getStackVersion(),realStackName,accountAlias);
    StackWorkflowTags stackWorkflowTags=new StackWorkflowTags(stackId,realStackName,accountId,accountAlias);
    WorkflowClientFactory updateStackWorkflowClientFactory=new WorkflowClientFactory(WorkflowClientManager.getSimpleWorkflowClient(),CloudFormationProperties.SWF_DOMAIN,CloudFormationProperties.SWF_TASKLIST);
    WorkflowDescriptionTemplate updateStackWorkflowDescriptionTemplate=new UpdateStackWorkflowDescriptionTemplate();
    InterfaceBasedWorkflowClient<UpdateStackWorkflow> updateStackWorkflowClient=updateStackWorkflowClientFactory.getNewWorkflowClient(UpdateStackWorkflow.class,updateStackWorkflowDescriptionTemplate,stackWorkflowTags);
    UpdateStackWorkflow updateStackWorkflow=new UpdateStackWorkflowClient(updateStackWorkflowClient);
    updateStackWorkflow.updateStack(nextStackEntity.getStackId(),nextStackEntity.getAccountId(),nextStackEntity.getResourceDependencyManagerJson(),userId,nextStackEntity.getStackVersion());
    StackWorkflowEntityManager.addOrUpdateStackWorkflowEntity(stackId,StackWorkflowEntity.WorkflowType.UPDATE_STACK_WORKFLOW,CloudFormationProperties.SWF_DOMAIN,updateStackWorkflowClient.getWorkflowExecution().getWorkflowId(),updateStackWorkflowClient.getWorkflowExecution().getRunId());
    WorkflowClientFactory monitorUpdateStackWorkflowClientFactory=new WorkflowClientFactory(WorkflowClientManager.getSimpleWorkflowClient(),CloudFormationProperties.SWF_DOMAIN,CloudFormationProperties.SWF_TASKLIST);
    WorkflowDescriptionTemplate monitorUpdateStackWorkflowDescriptionTemplate=new MonitorUpdateStackWorkflowDescriptionTemplate();
    InterfaceBasedWorkflowClient<MonitorUpdateStackWorkflow> monitorUpdateStackWorkflowClient=monitorUpdateStackWorkflowClientFactory.getNewWorkflowClient(MonitorUpdateStackWorkflow.class,monitorUpdateStackWorkflowDescriptionTemplate,stackWorkflowTags);
    MonitorUpdateStackWorkflow monitorUpdateStackWorkflow=new MonitorUpdateStackWorkflowClient(monitorUpdateStackWorkflowClient);
    monitorUpdateStackWorkflow.monitorUpdateStack(nextStackEntity.getStackId(),nextStackEntity.getAccountId(),userId,nextStackEntity.getStackVersion(),outerStackArn);
    StackWorkflowEntityManager.addOrUpdateStackWorkflowEntity(stackId,StackWorkflowEntity.WorkflowType.MONITOR_UPDATE_STACK_WORKFLOW,CloudFormationProperties.SWF_DOMAIN,monitorUpdateStackWorkflowClient.getWorkflowExecution().getWorkflowId(),monitorUpdateStackWorkflowClient.getWorkflowExecution().getRunId());
    UpdateStackResult updateStackResult=new UpdateStackResult();
    updateStackResult.setStackId(stackId);
    reply.setUpdateStackResult(updateStackResult);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}
