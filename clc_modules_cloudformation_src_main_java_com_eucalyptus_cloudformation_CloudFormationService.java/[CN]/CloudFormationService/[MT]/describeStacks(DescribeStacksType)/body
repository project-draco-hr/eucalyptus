{
  DescribeStacksResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    final User user=ctx.getUser();
    final String accountId=user.getAccountNumber();
    final String stackName=request.getStackName();
    final List<StackEntity> stackEntities=StackEntityManager.describeStacks(ctx.isAdministrator() && stackName != null && ("verbose".equals(stackName) || stackName.startsWith(STACK_ID_PREFIX)) ? null : accountId,ctx.isAdministrator() && "verbose".equals(stackName) ? null : stackName);
    final ArrayList<Stack> stackList=new ArrayList<Stack>();
    for (    final StackEntity stackEntity : Iterables.filter(stackEntities,RestrictedTypes.filterPrivileged())) {
      Stack stack=new Stack();
      if (stackEntity.getCapabilitiesJson() != null && !stackEntity.getCapabilitiesJson().isEmpty()) {
        ResourceList capabilities=new ResourceList();
        ArrayList<String> member=StackEntityHelper.jsonToCapabilities(stackEntity.getCapabilitiesJson());
        capabilities.setMember(member);
        stack.setCapabilities(capabilities);
      }
      stack.setCreationTime(stackEntity.getCreateOperationTimestamp());
      stack.setDescription(stackEntity.getDescription());
      stack.setStackName(stackEntity.getStackName());
      stack.setDisableRollback(stackEntity.getDisableRollback());
      stack.setLastUpdatedTime(stackEntity.getLastUpdateTimestamp());
      if (stackEntity.getNotificationARNsJson() != null && !stackEntity.getNotificationARNsJson().isEmpty()) {
        ResourceList notificationARNs=new ResourceList();
        ArrayList<String> member=StackEntityHelper.jsonToNotificationARNs(stackEntity.getNotificationARNsJson());
        notificationARNs.setMember(member);
        stack.setNotificationARNs(notificationARNs);
      }
      if (stackEntity.getOutputsJson() != null && !stackEntity.getOutputsJson().isEmpty()) {
        boolean somethingNotReady=false;
        ArrayList<StackEntity.Output> stackEntityOutputs=StackEntityHelper.jsonToOutputs(stackEntity.getOutputsJson());
        ArrayList<Output> member=Lists.newArrayList();
        for (        StackEntity.Output stackEntityOutput : stackEntityOutputs) {
          if (!stackEntityOutput.isReady()) {
            somethingNotReady=true;
            break;
          }
 else           if (stackEntityOutput.isAllowedByCondition()) {
            Output output=new Output();
            output.setDescription(stackEntityOutput.getDescription());
            output.setOutputKey(stackEntityOutput.getKey());
            output.setOutputValue(stackEntityOutput.getStringValue());
            member.add(output);
          }
        }
        if (!somethingNotReady) {
          Outputs outputs=new Outputs();
          outputs.setMember(member);
          stack.setOutputs(outputs);
        }
      }
      if (stackEntity.getParametersJson() != null && !stackEntity.getParametersJson().isEmpty()) {
        ArrayList<StackEntity.Parameter> stackEntityParameters=StackEntityHelper.jsonToParameters(stackEntity.getParametersJson());
        ArrayList<Parameter> member=Lists.newArrayList();
        for (        StackEntity.Parameter stackEntityParameter : stackEntityParameters) {
          Parameter parameter=new Parameter();
          parameter.setParameterKey(stackEntityParameter.getKey());
          parameter.setParameterValue(stackEntityParameter.isNoEcho() ? NO_ECHO_PARAMETER_VALUE : stackEntityParameter.getStringValue());
          member.add(parameter);
        }
        Parameters parameters=new Parameters();
        parameters.setMember(member);
        stack.setParameters(parameters);
      }
      stack.setStackId(stackEntity.getStackId());
      stack.setStackName(stackEntity.getStackName());
      stack.setStackStatus(stackEntity.getStackStatus().toString());
      stack.setStackStatusReason(stackEntity.getStackStatusReason());
      if (stackEntity.getTagsJson() != null && !stackEntity.getTagsJson().isEmpty()) {
        Tags tags=new Tags();
        ArrayList<Tag> member=StackEntityHelper.jsonToTags(stackEntity.getTagsJson());
        tags.setMember(member);
        stack.setTags(tags);
      }
      stack.setTimeoutInMinutes(stackEntity.getTimeoutInMinutes());
      stackList.add(stack);
    }
    DescribeStacksResult describeStacksResult=new DescribeStacksResult();
    Stacks stacks=new Stacks();
    stacks.setMember(stackList);
    describeStacksResult.setStacks(stacks);
    reply.setDescribeStacksResult(describeStacksResult);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}
