{
  CreateStackResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    checkActionPermission(PolicySpec.CLOUDFORMATION_CREATESTACK,ctx);
    final User user=ctx.getUser();
    final String userId=user.getUserId();
    final String accountId=user.getAccount().getAccountNumber();
    final String stackName=request.getStackName();
    final String templateBody=request.getTemplateBody();
    if (stackName == null)     throw new ValidationErrorException("Stack name is null");
    if (templateBody == null)     throw new ValidationErrorException("template body is null");
    List<Parameter> parameters=null;
    if (request.getParameters() != null && request.getParameters().getMember() != null) {
      parameters=request.getParameters().getMember();
    }
    final String stackIdLocal=UUID.randomUUID().toString();
    final String stackId="arn:aws:cloudformation:" + REGION + ":"+ accountId+ ":stack/"+ stackName+ "/"+ stackIdLocal;
    final PseudoParameterValues pseudoParameterValues=new PseudoParameterValues();
    pseudoParameterValues.setAccountId(accountId);
    pseudoParameterValues.setStackName(stackName);
    pseudoParameterValues.setStackId(stackId);
    if (request.getNotificationARNs() != null && request.getNotificationARNs().getMember() != null) {
      ArrayList<String> notificationArns=Lists.newArrayList();
      for (      String notificationArn : request.getNotificationARNs().getMember()) {
        notificationArns.add(notificationArn);
      }
      pseudoParameterValues.setNotificationArns(notificationArns);
    }
    pseudoParameterValues.setRegion(REGION);
    final List<String> defaultRegionAvailabilityZones=describeAvailabilityZones(userId);
    final Map<String,List<String>> availabilityZones=Maps.newHashMap();
    availabilityZones.put(REGION,defaultRegionAvailabilityZones);
    availabilityZones.put("",defaultRegionAvailabilityZones);
    pseudoParameterValues.setAvailabilityZones(availabilityZones);
    ArrayList<String> capabilities=Lists.newArrayList();
    if (request.getCapabilities() != null && request.getCapabilities().getMember() != null) {
      capabilities=request.getCapabilities().getMember();
    }
    final Template template=new TemplateParser().parse(templateBody,parameters,capabilities,pseudoParameterValues);
    StackEntity stackEntity=new StackEntity();
    StackEntityHelper.populateStackEntityWithTemplate(stackEntity,template);
    stackEntity.setStackName(stackName);
    stackEntity.setStackId(stackId);
    stackEntity.setAccountId(accountId);
    stackEntity.setStackStatus(StackEntity.Status.CREATE_IN_PROGRESS);
    stackEntity.setStackStatusReason("User initiated");
    stackEntity.setDisableRollback(request.getDisableRollback() == Boolean.TRUE);
    stackEntity.setCreationTimestamp(new Date());
    if (request.getCapabilities() != null && request.getCapabilities().getMember() != null) {
      stackEntity.setCapabilitiesJson(StackEntityHelper.capabilitiesToJson(capabilities));
    }
    if (request.getNotificationARNs() != null && request.getNotificationARNs().getMember() != null) {
      stackEntity.setNotificationARNsJson(StackEntityHelper.notificationARNsToJson(request.getNotificationARNs().getMember()));
    }
    if (request.getTags() != null && request.getTags().getMember() != null) {
      for (      Tag tag : request.getTags().getMember()) {
        if (Strings.isNullOrEmpty(tag.getKey()) || Strings.isNullOrEmpty(tag.getValue())) {
          throw new ValidationErrorException("Tags can not be null or empty");
        }
 else         if (tag.getKey().startsWith("aws:")) {
          throw new ValidationErrorException("Invalid tag key.  \"aws:\" is a reserved prefix.");
        }
      }
      stackEntity.setTagsJson(StackEntityHelper.tagsToJson(request.getTags().getMember()));
    }
    if (request.getDisableRollback() != null && request.getOnFailure() != null && !request.getOnFailure().isEmpty()) {
      throw new ValidationErrorException("Either DisableRollback or OnFailure can be specified, not both.");
    }
    stackEntity.setRecordDeleted(Boolean.FALSE);
    String onFailure="ROLLBACK";
    if (request.getOnFailure() != null && !request.getOnFailure().isEmpty()) {
      if (!request.getOnFailure().equals("ROLLBACK") && !request.getOnFailure().equals("DELETE") && !request.getOnFailure().equals("DO_NOTHING")) {
        throw new ValidationErrorException("Value '" + request.getOnFailure() + "' at 'onFailure' failed to satisfy "+ "constraint: Member must satisfy enum value set: [ROLLBACK, DELETE, DO_NOTHING]");
      }
 else {
        onFailure=request.getOnFailure();
      }
    }
 else {
      onFailure=(request.getDisableRollback() == Boolean.TRUE) ? "DO_NOTHING" : "ROLLBACK";
    }
    StackEntityManager.addStack(stackEntity);
    for (    ResourceInfo resourceInfo : template.getResourceInfoMap().values()) {
      StackResourceEntity stackResourceEntity=new StackResourceEntity();
      stackResourceEntity=StackResourceEntityManager.updateResourceInfo(stackResourceEntity,resourceInfo);
      stackResourceEntity.setDescription("");
      stackResourceEntity.setResourceStatus(StackResourceEntity.Status.NOT_STARTED);
      stackResourceEntity.setStackId(stackId);
      stackResourceEntity.setStackName(stackName);
      stackResourceEntity.setRecordDeleted(Boolean.FALSE);
      StackResourceEntityManager.addStackResource(stackResourceEntity);
    }
    new StackCreator(stackEntity,userId,onFailure).start();
    CreateStackResult createStackResult=new CreateStackResult();
    createStackResult.setStackId(stackId);
    reply.setCreateStackResult(createStackResult);
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    handleException(ex);
  }
  return reply;
}
