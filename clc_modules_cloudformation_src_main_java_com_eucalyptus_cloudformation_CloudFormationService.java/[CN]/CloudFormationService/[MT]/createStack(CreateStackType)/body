{
  CreateStackResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    User user=ctx.getUser();
    String userId=user.getUserId();
    String accountId=user.getAccount().getAccountNumber();
    String stackName=request.getStackName();
    String templateBody=request.getTemplateBody();
    if (stackName == null)     throw new ValidationErrorException("Stack name is null");
    if (templateBody == null)     throw new ValidationErrorException("template body is null");
    List<Parameter> parameters=null;
    if (request.getParameters() != null && request.getParameters().getMember() != null) {
      parameters=request.getParameters().getMember();
    }
    String stackIdLocal=UUID.randomUUID().toString();
    String stackId="arn:aws:cloudformation:" + REGION + ":"+ accountId+ ":stack/"+ stackName+ "/"+ stackIdLocal;
    PseudoParameterValues pseudoParameterValues=new PseudoParameterValues();
    pseudoParameterValues.setAccountId(accountId);
    pseudoParameterValues.setStackName(stackName);
    pseudoParameterValues.setStackId(stackId);
    if (request.getNotificationARNs() != null && request.getNotificationARNs().getMember() != null) {
      ArrayList<String> notificationArns=Lists.newArrayList();
      for (      String notificationArn : request.getNotificationARNs().getMember()) {
        notificationArns.add(notificationArn);
      }
      pseudoParameterValues.setNotificationArns(notificationArns);
    }
    pseudoParameterValues.setRegion(REGION);
    List<String> defaultRegionAvailabilityZones=describeAvailabilityZones(userId);
    Map<String,List<String>> availabilityZones=Maps.newHashMap();
    availabilityZones.put(REGION,defaultRegionAvailabilityZones);
    availabilityZones.put("",defaultRegionAvailabilityZones);
    pseudoParameterValues.setAvailabilityZones(availabilityZones);
    Template template=new TemplateParser().parse(templateBody,parameters,pseudoParameterValues);
    for (    ResourceInfo resourceInfo : template.getResourceMap().values()) {
      resourceInfo.setEffectiveUserId(userId);
      resourceInfo.setAccountId(accountId);
    }
    Stack stack=new Stack();
    stack.setStackName(stackName);
    stack.setStackId(stackId);
    stack.setDescription(template.getDescription());
    ArrayList<Parameter> templateParameters=Lists.newArrayList();
    for (    Parameter templateParameter : template.getNoEchoFilteredParameterList()) {
      Parameter parameter=new Parameter();
      parameter.setParameterValue(templateParameter.getParameterValue());
      parameter.setParameterKey(templateParameter.getParameterKey());
    }
    Parameters stackParameters=new Parameters();
    stackParameters.setMember(templateParameters);
    stack.setParameters(stackParameters);
    stack.setStackStatus(StackEntity.Status.CREATE_IN_PROGRESS.toString());
    stack.setStackStatusReason("User initiated");
    stack.setDisableRollback(request.getDisableRollback());
    StackEntityManager.addStack(stack,accountId);
    if (request.getDisableRollback() != null && request.getOnFailure() != null && !request.getOnFailure().isEmpty()) {
      throw new ValidationErrorException("Either DisableRollback or OnFailure can be specified, not both.");
    }
    String onFailure="ROLLBACK";
    if (request.getOnFailure() != null && !request.getOnFailure().isEmpty()) {
      if (!request.getOnFailure().equals("ROLLBACK") && !request.getOnFailure().equals("DELETE") && !request.getOnFailure().equals("DO_NOTHING")) {
        throw new ValidationErrorException("Value '" + request.getOnFailure() + "' at 'onFailure' failed to satisfy "+ "constraint: Member must satisfy enum value set: [ROLLBACK, DELETE, DO_NOTHING]");
      }
 else {
        onFailure=request.getOnFailure();
      }
    }
 else {
      onFailure=request.getDisableRollback() == false ? "DO_NOTHING" : "ROLLBACK";
    }
    new StackCreator(template,onFailure).start();
    CreateStackResult createStackResult=new CreateStackResult();
    createStackResult.setStackId(stack.getStackId());
    reply.setCreateStackResult(createStackResult);
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    throw new ValidationErrorException(ex.getMessage());
  }
  return reply;
}
