{
  CreateStackResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    final User user=ctx.getUser();
    final String userId=user.getUserId();
    final String accountId=ctx.getAccountNumber();
    final String accountName=ctx.getAccountAlias();
    final String stackName=request.getStackName();
    final String templateBody=request.getTemplateBody();
    final String templateUrl=request.getTemplateURL();
    if (stackName == null)     throw new ValidationErrorException("Stack name is null");
    if (!stackName.matches("^[\\p{Alpha}][\\p{Alnum}-]*$")) {
      throw new ValidationErrorException("Stack name " + stackName + " must contain only letters, numbers, dashes and start with an alpha character.");
    }
    if (stackName.length() > Limits.STACK_NAME_MAX_LENGTH_CHARS) {
      throw new ValidationErrorException("Stack name " + stackName + " must be no longer than "+ Limits.STACK_NAME_MAX_LENGTH_CHARS+ " characters.");
    }
    if (templateBody == null && templateUrl == null)     throw new ValidationErrorException("Either TemplateBody or TemplateURL must be set.");
    if (templateBody != null && templateUrl != null)     throw new ValidationErrorException("Exactly one of TemplateBody or TemplateURL must be set.");
    List<Parameter> parameters=null;
    if (request.getParameters() != null && request.getParameters().getMember() != null) {
      parameters=request.getParameters().getMember();
    }
    final String stackIdLocal=UUID.randomUUID().toString();
    final String stackId=STACK_ID_PREFIX + REGION + ":"+ accountId+ ":stack/"+ stackName+ "/"+ stackIdLocal;
    final PseudoParameterValues pseudoParameterValues=new PseudoParameterValues();
    pseudoParameterValues.setAccountId(accountId);
    pseudoParameterValues.setStackName(stackName);
    pseudoParameterValues.setStackId(stackId);
    if (request.getNotificationARNs() != null && request.getNotificationARNs().getMember() != null) {
      ArrayList<String> notificationArns=Lists.newArrayList();
      for (      String notificationArn : request.getNotificationARNs().getMember()) {
        notificationArns.add(notificationArn);
      }
      pseudoParameterValues.setNotificationArns(notificationArns);
    }
    pseudoParameterValues.setRegion(REGION);
    final ArrayList<String> capabilities=Lists.newArrayList();
    if (request.getCapabilities() != null && request.getCapabilities().getMember() != null) {
      capabilities.addAll(request.getCapabilities().getMember());
    }
    if (templateBody != null) {
      if (templateBody.getBytes().length > Limits.REQUEST_TEMPLATE_BODY_MAX_LENGTH_BYTES) {
        throw new ValidationErrorException("Template body may not exceed " + Limits.REQUEST_TEMPLATE_BODY_MAX_LENGTH_BYTES + " bytes in a request.");
      }
    }
    if (request.getTags() != null && request.getTags().getMember() != null) {
      for (      Tag tag : request.getTags().getMember()) {
        if (Strings.isNullOrEmpty(tag.getKey()) || Strings.isNullOrEmpty(tag.getValue())) {
          throw new ValidationErrorException("Tags can not be null or empty");
        }
 else         if (tag.getKey().startsWith("aws:")) {
          throw new ValidationErrorException("Invalid tag key.  \"aws:\" is a reserved prefix.");
        }
 else         if (tag.getKey().startsWith("euca:")) {
          throw new ValidationErrorException("Invalid tag key.  \"euca:\" is a reserved prefix.");
        }
      }
    }
    final String templateText=(templateBody != null) ? templateBody : extractTemplateTextFromURL(templateUrl,user);
    final Template template=new TemplateParser().parse(templateText,parameters,capabilities,pseudoParameterValues,userId);
    final Supplier<StackEntity> allocator=new Supplier<StackEntity>(){
      @Override public StackEntity get(){
        try {
          StackEntity stackEntity=new StackEntity();
          StackEntityHelper.populateStackEntityWithTemplate(stackEntity,template);
          stackEntity.setStackName(stackName);
          stackEntity.setStackId(stackId);
          stackEntity.setNaturalId(stackIdLocal);
          stackEntity.setAccountId(accountId);
          stackEntity.setTemplateBody(templateText);
          stackEntity.setStackStatus(StackEntity.Status.CREATE_IN_PROGRESS);
          stackEntity.setStackStatusReason("User initiated");
          stackEntity.setDisableRollback(request.getDisableRollback() == Boolean.TRUE);
          stackEntity.setCreationTimestamp(new Date());
          if (request.getCapabilities() != null && request.getCapabilities().getMember() != null) {
            stackEntity.setCapabilitiesJson(StackEntityHelper.capabilitiesToJson(capabilities));
          }
          if (request.getNotificationARNs() != null && request.getNotificationARNs().getMember() != null) {
            stackEntity.setNotificationARNsJson(StackEntityHelper.notificationARNsToJson(request.getNotificationARNs().getMember()));
          }
          if (request.getTags() != null && request.getTags().getMember() != null) {
            stackEntity.setTagsJson(StackEntityHelper.tagsToJson(request.getTags().getMember()));
          }
          stackEntity.setRecordDeleted(Boolean.FALSE);
          stackEntity=StackEntityManager.addStack(stackEntity);
          String onFailure;
          if (request.getOnFailure() != null && !request.getOnFailure().isEmpty()) {
            if (!request.getOnFailure().equals("ROLLBACK") && !request.getOnFailure().equals("DELETE") && !request.getOnFailure().equals("DO_NOTHING")) {
              throw new ValidationErrorException("Value '" + request.getOnFailure() + "' at 'onFailure' failed to satisfy "+ "constraint: Member must satisfy enum value set: [ROLLBACK, DELETE, DO_NOTHING]");
            }
 else {
              onFailure=request.getOnFailure();
            }
          }
 else {
            onFailure=(request.getDisableRollback() == Boolean.TRUE) ? "DO_NOTHING" : "ROLLBACK";
          }
          for (          ResourceInfo resourceInfo : template.getResourceInfoMap().values()) {
            StackResourceEntity stackResourceEntity=new StackResourceEntity();
            stackResourceEntity=StackResourceEntityManager.updateResourceInfo(stackResourceEntity,resourceInfo);
            stackResourceEntity.setDescription("");
            stackResourceEntity.setResourceStatus(StackResourceEntity.Status.NOT_STARTED);
            stackResourceEntity.setStackId(stackId);
            stackResourceEntity.setStackName(stackName);
            stackResourceEntity.setRecordDeleted(Boolean.FALSE);
            StackResourceEntityManager.addStackResource(stackResourceEntity);
          }
          StackWorkflowTags stackWorkflowTags=new StackWorkflowTags(stackId,stackName,accountId,accountName);
          Long timeoutInSeconds=(request.getTimeoutInMinutes() != null && request.getTimeoutInMinutes() > 0 ? 60L * request.getTimeoutInMinutes() : null);
          StartTimeoutPassableWorkflowClientFactory createStackWorkflowClientFactory=new StartTimeoutPassableWorkflowClientFactory(WorkflowClientManager.getSimpleWorkflowClient(),CloudFormationProperties.SWF_DOMAIN,CloudFormationProperties.SWF_TASKLIST);
          WorkflowDescriptionTemplate createStackWorkflowDescriptionTemplate=new CreateStackWorkflowDescriptionTemplate();
          InterfaceBasedWorkflowClient<CreateStackWorkflow> createStackWorkflowClient=createStackWorkflowClientFactory.getNewWorkflowClient(CreateStackWorkflow.class,createStackWorkflowDescriptionTemplate,stackWorkflowTags,timeoutInSeconds,null);
          CreateStackWorkflow createStackWorkflow=new CreateStackWorkflowClient(createStackWorkflowClient);
          createStackWorkflow.createStack(stackEntity.getStackId(),stackEntity.getAccountId(),stackEntity.getResourceDependencyManagerJson(),userId,onFailure);
          StackWorkflowEntityManager.addOrUpdateStackWorkflowEntity(stackId,StackWorkflowEntity.WorkflowType.CREATE_STACK_WORKFLOW,CloudFormationProperties.SWF_DOMAIN,createStackWorkflowClient.getWorkflowExecution().getWorkflowId(),createStackWorkflowClient.getWorkflowExecution().getRunId());
          WorkflowClientFactory monitorCreateStackWorkflowClientFactory=new WorkflowClientFactory(WorkflowClientManager.getSimpleWorkflowClient(),CloudFormationProperties.SWF_DOMAIN,CloudFormationProperties.SWF_TASKLIST);
          WorkflowDescriptionTemplate monitorCreateStackWorkflowDescriptionTemplate=new MonitorCreateStackWorkflowDescriptionTemplate();
          InterfaceBasedWorkflowClient<MonitorCreateStackWorkflow> monitorCreateStackWorkflowClient=monitorCreateStackWorkflowClientFactory.getNewWorkflowClient(MonitorCreateStackWorkflow.class,monitorCreateStackWorkflowDescriptionTemplate,stackWorkflowTags);
          MonitorCreateStackWorkflow monitorCreateStackWorkflow=new MonitorCreateStackWorkflowClient(monitorCreateStackWorkflowClient);
          monitorCreateStackWorkflow.monitorCreateStack(stackEntity.getStackId(),stackEntity.getAccountId(),stackEntity.getResourceDependencyManagerJson(),userId,onFailure);
          StackWorkflowEntityManager.addOrUpdateStackWorkflowEntity(stackId,StackWorkflowEntity.WorkflowType.MONITOR_CREATE_STACK_WORKFLOW,CloudFormationProperties.SWF_DOMAIN,monitorCreateStackWorkflowClient.getWorkflowExecution().getWorkflowId(),monitorCreateStackWorkflowClient.getWorkflowExecution().getRunId());
          return stackEntity;
        }
 catch (        CloudFormationException e) {
          throw Exceptions.toUndeclared(e);
        }
      }
    }
;
    final StackEntity stackEntity=RestrictedTypes.allocateUnitlessResource(allocator);
    CreateStackResult createStackResult=new CreateStackResult();
    createStackResult.setStackId(stackId);
    reply.setCreateStackResult(createStackResult);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}
