{
  ContinueUpdateRollbackResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    final User user=ctx.getUser();
    final String userId=user.getUserId();
    final String accountId=ctx.getAccountNumber();
    final String accountAlias=ctx.getAccountAlias();
    final String stackName=request.getStackName();
    if (stackName == null)     throw new ValidationErrorException("Stack name is null");
    StackEntity stackEntity=StackEntityManager.getNonDeletedStackByNameOrId(stackName,accountId);
    if (stackEntity == null && ctx.isAdministrator() && stackName.startsWith(STACK_ID_PREFIX)) {
      stackEntity=StackEntityManager.getNonDeletedStackByNameOrId(stackName,null);
    }
    if (stackEntity == null) {
      throw new ValidationErrorException("Stack " + stackName + " does not exist");
    }
    if (!RestrictedTypes.filterPrivileged().apply(stackEntity)) {
      throw new AccessDeniedException("Not authorized.");
    }
    String outerStackArn=StackResourceEntityManager.findOuterStackArnIfExists(stackEntity.getStackId(),accountId);
    if (outerStackArn != null) {
      throw new ValidationErrorException("Failed to rollback: RollbackUpdatedStack cannot be invoked on child stacks");
    }
    final String stackAccountId=stackEntity.getAccountId();
    if (stackEntity.getStackStatus() != Status.UPDATE_ROLLBACK_FAILED) {
      throw new ValidationErrorException("Stack " + stackEntity.getStackId() + " is in "+ stackEntity.getStackStatus()+ " state and can not continue to update rollback.");
    }
    boolean existingOpenContinueUpdateRollbackWorkflow=false;
    List<StackWorkflowEntity> continueUpdateRollbackWorkflows=StackWorkflowEntityManager.getStackWorkflowEntities(stackEntity.getStackId(),StackWorkflowEntity.WorkflowType.UPDATE_ROLLBACK_STACK_WORKFLOW);
    if (continueUpdateRollbackWorkflows != null && !continueUpdateRollbackWorkflows.isEmpty()) {
      if (continueUpdateRollbackWorkflows.size() > 1) {
        throw new ValidationErrorException("More than one continue update rollback workflow exists for " + stackEntity.getStackId());
      }
      try {
        AmazonSimpleWorkflow simpleWorkflowClient=WorkflowClientManager.getSimpleWorkflowClient();
        StackWorkflowEntity continueUpdateRollbackWorkflowEntity=continueUpdateRollbackWorkflows.get(0);
        DescribeWorkflowExecutionRequest describeWorkflowExecutionRequest=new DescribeWorkflowExecutionRequest();
        describeWorkflowExecutionRequest.setDomain(continueUpdateRollbackWorkflowEntity.getDomain());
        WorkflowExecution execution=new WorkflowExecution();
        execution.setRunId(continueUpdateRollbackWorkflowEntity.getRunId());
        execution.setWorkflowId(continueUpdateRollbackWorkflowEntity.getWorkflowId());
        describeWorkflowExecutionRequest.setExecution(execution);
        WorkflowExecutionDetail workflowExecutionDetail=simpleWorkflowClient.describeWorkflowExecution(describeWorkflowExecutionRequest);
        if ("OPEN".equals(workflowExecutionDetail.getExecutionInfo().getExecutionStatus())) {
          existingOpenContinueUpdateRollbackWorkflow=true;
        }
      }
 catch (      Exception ex) {
        LOG.error("Unable to get status of continue update rollback workflow for " + stackEntity.getStackId() + ", assuming not open");
        LOG.debug(ex);
      }
    }
    if (!existingOpenContinueUpdateRollbackWorkflow) {
      String stackId=stackEntity.getStackId();
      StackUpdateInfoEntity stackUpdateInfoEntity=StackUpdateInfoEntityManager.getStackUpdateInfoEntity(stackId,accountId);
      StackWorkflowTags stackWorkflowTags=new StackWorkflowTags(stackId,stackName,stackAccountId,accountAlias);
      WorkflowClientFactory workflowClientFactory=new WorkflowClientFactory(WorkflowClientManager.getSimpleWorkflowClient(),CloudFormationProperties.SWF_DOMAIN,CloudFormationProperties.SWF_TASKLIST);
      WorkflowDescriptionTemplate workflowDescriptionTemplate=new UpdateRollbackStackWorkflowDescriptionTemplate();
      InterfaceBasedWorkflowClient<UpdateRollbackStackWorkflow> client=workflowClientFactory.getNewWorkflowClient(UpdateRollbackStackWorkflow.class,workflowDescriptionTemplate,stackWorkflowTags);
      UpdateRollbackStackWorkflow updateRollbackStackWorkflow=new UpdateRollbackStackWorkflowClient(client);
      updateRollbackStackWorkflow.performUpdateRollbackStack(stackId,accountId,outerStackArn,stackUpdateInfoEntity.getOldResourceDependencyManagerJson(),userId,stackUpdateInfoEntity.getUpdatedStackVersion().intValue() + 1);
      StackWorkflowEntityManager.addOrUpdateStackWorkflowEntity(stackEntity.getStackId(),StackWorkflowEntity.WorkflowType.UPDATE_ROLLBACK_STACK_WORKFLOW,CloudFormationProperties.SWF_DOMAIN,client.getWorkflowExecution().getWorkflowId(),client.getWorkflowExecution().getRunId());
    }
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}
