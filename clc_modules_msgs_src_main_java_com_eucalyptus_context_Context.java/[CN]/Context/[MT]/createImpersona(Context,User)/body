{
  return new DelegatingContextSupport(ctx){
    private Boolean isSystemAdmin;
    private Boolean isSystemUser;
    private Subject subject=new Subject();
    @Override public User getUser(){
      return user;
    }
    @Override public Account getAccount(){
      try {
        return user.getAccount();
      }
 catch (      AuthException ex) {
        LOG.error(ex,ex);
        throw new IllegalStateException("Context populated with ill-defined user:  no corresponding account found.",ex);
      }
    }
    @Override public UserFullName getUserFullName(){
      return UserFullName.getInstance(user);
    }
    @Override public boolean isPrivileged(){
      return Principals.systemUser().getName().equals(ctx.request.getEffectiveUserId());
    }
    @Override public boolean isAdministrator(){
      if (isSystemUser == null) {
        isSystemUser=this.getUser().isSystemUser();
      }
      return isSystemUser;
    }
    @Override public boolean hasAdministrativePrivileges(){
      if (isSystemAdmin == null) {
        isSystemAdmin=user.isSystemAdmin();
      }
      return isSystemAdmin;
    }
    @Override public Subject getSubject(){
      return subject;
    }
    @Override public void setSubject(    final Subject subject){
      this.subject=subject;
    }
    @Override public String getSecurityToken(){
      return null;
    }
  }
;
}
