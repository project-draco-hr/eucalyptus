{
  super(builderFor(RouteTable.class).withTagFiltering(RouteTableTag.class,"routeTable").withStringSetProperty("association.route-table-association-id",FilterStringSetFunctions.ASSOCIATION_ID).withStringSetProperty("association.route-table-id",FilterStringSetFunctions.ASSOCIATION_ROUTE_TABLE_ID).withStringSetProperty("association.subnet-id",FilterStringSetFunctions.ASSOCIATION_SUBNET_ID).withBooleanSetProperty("association.main",FilterBooleanSetFunctions.ASSOCIATION_MAIN).withStringSetProperty("route.destination-cidr-block",FilterStringSetFunctions.ROUTE_DESTINATION_CIDR).withStringSetProperty("route.gateway-id",FilterStringSetFunctions.ROUTE_GATEWAY_ID).withStringSetProperty("route.instance-id",FilterStringSetFunctions.ROUTE_INSTANCE_ID).withUnsupportedProperty("route.vpc-peering-connection-id").withStringSetProperty("route.origin",FilterStringSetFunctions.ROUTE_ORIGIN).withStringSetProperty("route.state",FilterStringSetFunctions.ROUTE_STATE).withStringProperty("route-table-id",CloudMetadatas.toDisplayName()).withStringProperty("vpc-id",FilterStringFunctions.VPC_ID).withPersistenceAlias("routeTableAssociations","routeTableAssociations").withPersistenceAlias("routes","routes").withPersistenceAlias("vpc","vpc").withPersistenceFilter("association.route-table-association-id","routeTableAssociations.associationId").withPersistenceFilter("association.route-table-id","routeTableAssociations.routeTableId").withPersistenceFilter("association.subnet-id","routeTableAssociations.subnetId").withPersistenceFilter("association.main","routeTableAssociations.main",PersistenceFilter.Type.Boolean).withPersistenceFilter("route.destination-cidr-block","routes.destinationCidr").withPersistenceFilter("route.gateway-id","routes.destinationCidr").withPersistenceFilter("route.origin","routes.origin",FUtils.valueOfFunction(Route.RouteOrigin.class)).withPersistenceFilter("route.state","routes.state",FUtils.valueOfFunction(Route.State.class)).withPersistenceFilter("route-table-id","displayName").withPersistenceFilter("vpc-id","vpc.displayName"));
}
