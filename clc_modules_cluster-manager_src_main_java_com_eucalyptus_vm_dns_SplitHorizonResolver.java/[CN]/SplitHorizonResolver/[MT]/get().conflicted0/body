{
  Predicate<InetAddress> predicate=Predicates.alwaysFalse();
  final Optional<NetworkConfiguration> config=NetworkConfigurations.getNetworkConfiguration();
  if (config.isPresent())   try {
    final List<IPRange> ranges=ImmutableList.copyOf(Optional.presentInstances(Iterables.transform(config.get().getPublicIps(),IPRange.parse())));
    predicate=new Predicate<InetAddress>(){
      @Override public boolean apply(      @Nullable final InetAddress inetAddress){
        final IPRange addressAsRange=IPRange.parse(inetAddress.getHostAddress());
        boolean contained=false;
        for (        final IPRange range : ranges) {
          contained=range.contains(addressAsRange);
          if (contained)           break;
        }
        return contained;
      }
    }
;
  }
 catch (  Exception e) {
    LOG.error("Error building public address predicate",e);
  }
  return predicate;
}
