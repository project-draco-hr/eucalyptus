{
  final DescribeInstanceAttributeResponseType reply=request.getReply();
  final String instanceId=normalizeInstanceIdentifier(request.getInstanceId());
  final String attribute=request.getAttribute();
  if (attribute == null) {
    throw new ComputeServiceClientException(" MissingParameter","Attribute parameter is required");
  }
  try (final TransactionResource tx=Entities.transactionFor(VmInstance.class)){
    final VmInstance vm=RestrictedTypes.doPrivileged(instanceId,VmInstance.class);
    reply.setInstanceId(instanceId);
switch (attribute) {
case "blockDeviceMapping":
      if (vm.getBootRecord().getMachine() instanceof BlockStorageImageInfo) {
        final BlockStorageImageInfo bfebsInfo=(BlockStorageImageInfo)vm.getBootRecord().getMachine();
        for (        final VmVolumeAttachment volumeAttachment : vm.getBootRecord().getPersistentVolumes()) {
          reply.getBlockDeviceMapping().add(new InstanceBlockDeviceMapping(volumeAttachment.getIsRootDevice() ? bfebsInfo.getRootDeviceName() : volumeAttachment.getDevice(),volumeAttachment.getVolumeId(),volumeAttachment.getStatus(),volumeAttachment.getAttachTime(),volumeAttachment.getDeleteOnTerminate()));
        }
      }
    break;
case "disableApiTermination":
  reply.setDisableApiTermination(Optional.fromNullable(vm.getDisableApiTermination()).or(Boolean.FALSE));
break;
case "ebsOptimized":
reply.setEbsOptimized(false);
break;
case "groupSet":
Iterables.addAll(reply.getGroupSet(),Iterables.transform(vm.getNetworkGroupIds(),TypeMappers.lookup(NetworkGroupId.class,GroupItemType.class)));
break;
case "instanceInitiatedShutdownBehavior":
reply.setInstanceInitiatedShutdownBehavior("stop");
break;
case "instanceType":
reply.setInstanceType(vm.getBootRecord().getVmType().getDisplayName());
break;
case "kernel":
reply.setKernel(vm.getKernelId());
break;
case "productCodes":
reply.setProductCodes(false);
break;
case "ramdisk":
reply.setRamdisk(vm.getRamdiskId());
break;
case "rootDeviceName":
reply.setRootDeviceName(vm.getBootRecord().getMachine() == null ? null : vm.getBootRecord().getMachine().getRootDeviceName());
break;
case "sourceDestCheck":
reply.setSourceDestCheck(true);
break;
case "sriovNetSupport":
reply.setSriovNetSupport(false);
break;
case "userData":
reply.setUserData(vm.getUserData() == null ? "" : Base64.toBase64String(vm.getUserData()));
break;
default :
throw new ComputeServiceClientException(" InvalidParameterValue","Invalid value for attribute (" + attribute + ")");
}
}
 catch (Exception ex) {
LOG.error(ex);
throw new ComputeServiceClientException("InvalidInstanceID.NotFound","The instance ID '" + instanceId + "' does not exist");
}
return reply;
}
