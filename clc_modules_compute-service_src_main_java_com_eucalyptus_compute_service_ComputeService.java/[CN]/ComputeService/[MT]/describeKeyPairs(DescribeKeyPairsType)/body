{
  final DescribeKeyPairsResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final List<String> keyNames=request.getKeySet();
  final boolean showAll=keyNames.remove("verbose");
  final OwnerFullName ownerFullName=ctx.isAdministrator() && showAll ? null : Contexts.lookup().getUserFullName().asAccountFullName();
  final Filter filter=Filters.generate(request.getFilterSet(),SshKeyPair.class);
  final Filter persistenceFilter=getPersistenceFilter(SshKeyPair.class,keyNames,"key-name",filter);
  final Predicate<? super SshKeyPair> requestedAndAccessible=CloudMetadatas.filteringFor(SshKeyPair.class).byId(keyNames).byPredicate(filter.asPredicate()).byPrivileges().buildPredicate();
  final Iterable<SshKeyPair> keyPairs=KeyPairs.list(ownerFullName,Predicates.and(new TrackingPredicate<SshKeyPair>(keyNames),requestedAndAccessible),persistenceFilter.asCriterion(),persistenceFilter.getAliases());
  for (  final SshKeyPair kp : keyPairs) {
    reply.getKeySet().add(new DescribeKeyPairsResponseItemType(kp.getDisplayName(),kp.getFingerPrint()));
  }
  errorIfNotFound("InvalidKeyPair.NotFound","key pair",keyNames);
  return reply;
}
