{
  final DescribeKeyPairsResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final boolean showAll=request.getKeySet().remove("verbose");
  final OwnerFullName ownerFullName=ctx.isAdministrator() && showAll ? null : Contexts.lookup().getUserFullName().asAccountFullName();
  final Filter filter=Filters.generate(request.getFilterSet(),SshKeyPair.class);
  final Predicate<? super SshKeyPair> requestedAndAccessible=CloudMetadatas.filteringFor(SshKeyPair.class).byId(request.getKeySet()).byPredicate(filter.asPredicate()).byPrivileges().buildPredicate();
  final List<String> foundKeyNameList=new ArrayList<>();
  for (  final SshKeyPair kp : KeyPairs.list(ownerFullName,requestedAndAccessible,filter.asCriterion(),filter.getAliases())) {
    reply.getKeySet().add(new DescribeKeyPairsResponseItemType(kp.getDisplayName(),kp.getFingerPrint()));
    foundKeyNameList.add(kp.getDisplayName());
  }
  if (!request.getKeySet().isEmpty() && request.getKeySet().size() != reply.getKeySet().size()) {
    List<String> reverseRequestedKeySet=ImmutableList.copyOf(request.getKeySet()).reverse();
    for (    String requestedKey : reverseRequestedKeySet) {
      if (!foundKeyNameList.contains(requestedKey)) {
        throw new ComputeServiceClientException("InvalidKeyPair.NotFound","The key pair '" + requestedKey + "' does not exist");
      }
    }
  }
  return reply;
}
