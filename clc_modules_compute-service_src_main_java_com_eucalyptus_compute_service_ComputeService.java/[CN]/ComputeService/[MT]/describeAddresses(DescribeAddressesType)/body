{
  final Context ctx=Contexts.lookup();
  final boolean isAdmin=ctx.isAdministrator();
  final boolean verbose=isAdmin && request.getPublicIpsSet().contains("verbose");
  if (verbose) {
    return (DescribeAddressesResponseType)proxy(request);
  }
  final DescribeAddressesResponseType reply=request.getReply();
  final AccountFullName accountFullName=ctx.getUserFullName().asAccountFullName();
  final Filter filter=Filters.generateFor(request.getFilterSet(),AllocatedAddressEntity.class).withOptionalInternalFilter("public-ip",request.getPublicIpsSet()).withOptionalInternalFilter("allocation-id",request.getAllocationIds()).generate();
  final Predicate<? super AllocatedAddressEntity> requestedAndAccessible=CloudMetadatas.filteringFor(AllocatedAddressEntity.class).byId(request.getPublicIpsSet()).byProperty(request.getAllocationIds(),AllocatedAddressEntity.allocation()).byPredicate(filter.asPredicate()).byOwningAccount(Collections.singleton(accountFullName.getAccountNumber())).byPrivileges().buildPredicate();
  try (final TransactionResource tx=Entities.readOnlyDistinctTransactionFor(AllocatedAddressEntity.class)){
    final Iterable<AddressInfoType> addresses=Transactions.filteredTransform(AllocatedAddressEntity.exampleWithOwnerAndAddress(accountFullName,null),filter.asCriterion(),filter.getAliases(),requestedAndAccessible,TypeMappers.lookup(AddressI.class,AddressInfoType.class));
    Iterables.addAll(reply.getAddressesSet(),addresses);
  }
 catch (  final Exception e) {
    Exceptions.findAndRethrow(e,ComputeServiceException.class);
    LOG.error(e);
    LOG.debug(e,e);
    throw new EucalyptusCloudException(e.getMessage());
  }
  return reply;
}
