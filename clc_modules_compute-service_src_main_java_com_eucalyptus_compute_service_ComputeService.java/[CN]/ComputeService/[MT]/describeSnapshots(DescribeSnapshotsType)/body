{
  final DescribeSnapshotsResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final String requestAccountId=ctx.getUserFullName().getAccountNumber();
  request.getSnapshotSet().remove("verbose");
  final Set<String> snapshotIds=Sets.newHashSet(normalizeSnapshotIdentifiers(request.getSnapshotSet()));
  final List<String> ownersSet=request.getOwnersSet();
  if (ownersSet.remove(Snapshots.SELF)) {
    ownersSet.add(requestAccountId);
  }
  final Filter filter=Filters.generate(request.getFilterSet(),Snapshot.class);
  final Filter persistenceFilter=getPersistenceFilter(Snapshot.class,snapshotIds,"snapshot-id",filter);
  try (final TransactionResource tx=Entities.readOnlyDistinctTransactionFor(Snapshot.class)){
    final List<Snapshot> unfilteredSnapshots=Entities.query(Snapshot.named(null,null),true,persistenceFilter.asCriterion(),persistenceFilter.getAliases());
    final Predicate<? super Snapshot> requestedAndAccessible=CloudMetadatas.filteringFor(Snapshot.class).byId(snapshotIds).byOwningAccount(request.getOwnersSet()).byPredicate(Snapshots.filterRestorableBy(request.getRestorableBySet(),requestAccountId)).byPredicate(filter.asPredicate()).byPredicate(Snapshots.FilterPermissions.INSTANCE).byPrivilegesWithoutOwner().buildPredicate();
    final List<Snapshot> snapshots=Lists.newArrayList(Iterables.filter(unfilteredSnapshots,Predicates.and(new TrackingPredicate<>(snapshotIds),requestedAndAccessible)));
    errorIfNotFound("InvalidSnapshot.NotFound","snapshot",snapshotIds);
    final Map<String,List<Tag>> tagsMap=TagSupport.forResourceClass(Snapshot.class).getResourceTagMap(AccountFullName.getInstance(ctx.getAccountNumber()),Iterables.transform(snapshots,CloudMetadatas.toDisplayName()));
    for (    final Snapshot snap : snapshots) {
      try {
        final com.eucalyptus.compute.common.Snapshot snapReply=snap.morph(new com.eucalyptus.compute.common.Snapshot());
        Tags.addFromTags(snapReply.getTagSet(),ResourceTag.class,tagsMap.get(snapReply.getSnapshotId()));
        snapReply.setVolumeId(snap.getParentVolume());
        snapReply.setOwnerId(snap.getOwnerAccountNumber());
        reply.getSnapshotSet().add(snapReply);
      }
 catch (      NoSuchElementException e) {
        LOG.warn("Error getting snapshot information from the Storage Controller: " + e);
        LOG.debug(e,e);
      }
    }
  }
   return reply;
}
