{
  final DescribeVolumesResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final boolean showAll=request.getVolumeSet().remove("verbose");
  final Set<String> volumeIds=Sets.newLinkedHashSet(normalizeVolumeIdentifiers(request.getVolumeSet()));
  final AccountFullName ownerFullName=(ctx.isAdministrator() && (showAll || !volumeIds.isEmpty())) ? null : ctx.getUserFullName().asAccountFullName();
  final Filters.FiltersBuilder filtersBuilder=Filters.generateFor(request.getFilterSet(),Volume.class);
  if (!ctx.isAdministrator()) {
    filtersBuilder.withOptionalInternalFilter("system-managed",Collections.singleton("false"));
  }
  final Filter filter=filtersBuilder.generate();
  final Filter persistenceFilter=getPersistenceFilter(Volume.class,volumeIds,"volume-id",filter);
  final Predicate<? super Volume> requestedAndAccessible=CloudMetadatas.filteringFor(Volume.class).byId(volumeIds).byPredicate(filter.asPredicate()).byPrivileges().buildPredicate();
  final Function<Set<String>,Pair<Set<String>,ArrayList<com.eucalyptus.compute.common.Volume>>> populateVolumeSet=new Function<Set<String>,Pair<Set<String>,ArrayList<com.eucalyptus.compute.common.Volume>>>(){
    public Pair<Set<String>,ArrayList<com.eucalyptus.compute.common.Volume>> apply(    final Set<String> input){
      final Set<String> allowedVolumeIds=Sets.newHashSet();
      final ArrayList<com.eucalyptus.compute.common.Volume> replyVolumes=Lists.newArrayList();
      final List<Volume> volumes=Entities.query(Volume.named(ownerFullName,null),true,persistenceFilter.asCriterion(),persistenceFilter.getAliases());
      final Iterable<Volume> filteredVolumes=Iterables.filter(volumes,Predicates.and(new TrackingPredicate<Volume>(volumeIds),requestedAndAccessible));
      final Criterion attachmentCriterion;
      final Map<String,String> attachmentAliases;
      if (Iterables.isEmpty(filteredVolumes)) {
        attachmentCriterion=Restrictions.disjunction();
        attachmentAliases=Collections.emptyMap();
      }
 else       if (Iterables.size(Iterables.limit(filteredVolumes,51)) < 50) {
        attachmentCriterion=Restrictions.in("volumeId",Sets.newHashSet(Iterables.transform(filteredVolumes,RestrictedTypes.toDisplayName())));
        attachmentAliases=Collections.emptyMap();
      }
 else       if (ownerFullName == null) {
        attachmentCriterion=Restrictions.conjunction();
        attachmentAliases=Collections.emptyMap();
      }
 else {
        attachmentCriterion=Restrictions.eq("vmInstance.ownerAccountNumber",ownerFullName.getAccountNumber());
        ;
        attachmentAliases=Collections.singletonMap("vmInstance","vmInstance");
      }
      final Map<String,VmVolumeAttachment> attachmentMap=CollectionUtils.putAll(Iterables.concat(Entities.query(VmBootVolumeAttachment.example(),true,attachmentCriterion,attachmentAliases),Entities.query(VmStandardVolumeAttachment.example(),true,attachmentCriterion,attachmentAliases)),Maps.<String,VmVolumeAttachment>newHashMap(),VmVolumeAttachment.volumeId(),Functions.<VmVolumeAttachment>identity());
      for (      final Volume foundVol : filteredVolumes) {
        allowedVolumeIds.add(foundVol.getDisplayName());
        if (State.ANNIHILATED.equals(foundVol.getState())) {
          Entities.delete(foundVol);
          replyVolumes.add(foundVol.morph(new com.eucalyptus.compute.common.Volume()));
        }
 else {
          VmVolumeAttachment attachment=attachmentMap.get(foundVol.getDisplayName());
          AttachedVolume attachedVolume=null;
          if (attachment != null) {
            attachedVolume=VmVolumeAttachment.asAttachedVolume(attachment.getVmInstance()).apply(attachment);
          }
 else {
            if (State.BUSY.equals(foundVol.getState())) {
              foundVol.setState(State.EXTANT);
            }
          }
          com.eucalyptus.compute.common.Volume msgTypeVolume=foundVol.morph(new com.eucalyptus.compute.common.Volume());
          if (attachedVolume != null) {
            msgTypeVolume.setStatus("in-use");
            msgTypeVolume.getAttachmentSet().add(attachedVolume);
          }
          replyVolumes.add(msgTypeVolume);
        }
      }
      return Pair.pair(allowedVolumeIds,replyVolumes);
    }
  }
;
  final Pair<Set<String>,ArrayList<com.eucalyptus.compute.common.Volume>> volumeIdsAndVolumes=Entities.asTransaction(Volume.class,populateVolumeSet).apply(volumeIds);
  errorIfNotFound("InvalidVolume.NotFound","volume",volumeIds);
  @SuppressWarnings("ConstantConditions") final Set<String> allowedVolumeIds=volumeIdsAndVolumes.getLeft();
  reply.setVolumeSet(volumeIdsAndVolumes.getRight());
  Map<String,List<Tag>> tagsMap=TagSupport.forResourceClass(Volume.class).getResourceTagMap(AccountFullName.getInstance(ctx.getAccountNumber()),allowedVolumeIds);
  for (  final com.eucalyptus.compute.common.Volume volume : reply.getVolumeSet()) {
    Tags.addFromTags(volume.getTagSet(),ResourceTag.class,tagsMap.get(volume.getVolumeId()));
  }
  return reply;
}
