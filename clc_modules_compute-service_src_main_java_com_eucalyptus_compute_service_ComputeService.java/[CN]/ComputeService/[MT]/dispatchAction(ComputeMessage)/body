{
  LOG.debug(request.toSimpleString());
  final AuthContextSupplier user=Contexts.lookup().getAuthContext();
  if (!Permissions.perhapsAuthorized(PolicySpec.VENDOR_EC2,getIamActionByMessageType(request),user)) {
    throw new ComputeServiceAuthorizationException("UnauthorizedOperation","You are not authorized to perform this operation.");
  }
  if (request instanceof ValidatableMessage) {
    final Map<String,String> validationErrorsByField=((ValidatableMessage)request).validate();
    if (!validationErrorsByField.isEmpty()) {
      final String error=validationErrorsByField.values().iterator().next();
      throw new ComputeServiceClientException("InvalidParameterValue",error);
    }
  }
  try {
    BaseMessage backendRequest=BaseMessages.deepCopy(request,getBackendMessageClass(request));
    final BaseMessage backendResponse=send(backendRequest);
    final ComputeMessage response=(ComputeMessage)BaseMessages.deepCopy(backendResponse,request.getReply().getClass());
    response.setCorrelationId(request.getCorrelationId());
    LOG.debug(response.toSimpleString());
    return response;
  }
 catch (  Exception e) {
    handleRemoteException(e);
    Exceptions.findAndRethrow(e,EucalyptusWebServiceException.class,EucalyptusCloudException.class);
    throw new EucalyptusCloudException(e);
  }
}
