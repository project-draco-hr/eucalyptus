{
  final DescribeInstanceHealthResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final String lbName=request.getLoadBalancerName();
  final Instances instances=request.getInstances();
  LoadBalancer lb;
  try {
    lb=lookupAuthorizedByNameOrDnsName(ctx.getAccountNumber(),lbName);
  }
 catch (  final LoadBalancingException e) {
    throw e;
  }
catch (  Exception ex) {
    throw new InternalFailureException("Failed to find the loadbalancer");
  }
  List<LoadBalancerBackendInstanceCoreView> lbInstances=Lists.newArrayList(lb.getBackendInstances());
  List<LoadBalancerBackendInstanceCoreView> instancesFound;
  List<LoadBalancerBackendInstanceCoreView> stateOutdated=Lists.newArrayList();
  final int healthUpdateTimeoutSec=5 * Math.max(lb.getHealthCheckInterval(),InstanceStatusWorkflowImpl.MIN_POLLING_PERIOD_SEC);
  final long currentTime=System.currentTimeMillis();
  if (instances != null && instances.getMember() != null && instances.getMember().size() > 0) {
    instancesFound=Lists.newArrayList();
    for (    Instance inst : instances.getMember()) {
      String instId=inst.getInstanceId();
      for (      final LoadBalancerBackendInstanceCoreView lbInstance : lbInstances) {
        if (instId.equals(lbInstance.getInstanceId())) {
          instancesFound.add(lbInstance);
          break;
        }
      }
    }
  }
 else {
    instancesFound=Lists.newArrayList(lb.getBackendInstances());
  }
  final ArrayList<InstanceState> stateList=Lists.newArrayList();
  for (  final LoadBalancerBackendInstanceCoreView instance : instancesFound) {
    boolean outdated=false;
    Date lastUpdated=instance.instanceStateLastUpdated();
    if (lastUpdated == null)     lastUpdated=instance.instanceCreationTimestamp();
    final int diffSec=(int)((currentTime - lastUpdated.getTime()) / 1000.0);
    if (diffSec > healthUpdateTimeoutSec) {
      stateOutdated.add(instance);
      outdated=true;
    }
    InstanceState state=new InstanceState();
    state.setInstanceId(instance.getDisplayName());
    if (outdated) {
      state.setState(LoadBalancerBackendInstance.STATE.Unknown.toString());
      state.setReasonCode("ELB");
      state.setDescription("Internal error: ELB VMs are not reachable. Contact administrator if problem continues");
    }
 else {
      state.setState(instance.getState().name());
      if (instance.getState().equals(LoadBalancerBackendInstance.STATE.OutOfService) && instance.getReasonCode() != null)       state.setReasonCode(instance.getReasonCode());
      if (instance.getDescription() != null)       state.setDescription(instance.getDescription());
    }
    stateList.add(state);
  }
  if (!stateOutdated.isEmpty()) {
    try (TransactionResource db=Entities.transactionFor(LoadBalancerBackendInstance.class)){
      for (      final LoadBalancerBackendInstanceCoreView instanceView : stateOutdated) {
        final LoadBalancerBackendInstance sample=LoadBalancerBackendInstance.LoadBalancerBackendInstanceEntityTransform.INSTANCE.apply(instanceView);
        final LoadBalancerBackendInstance update=Entities.uniqueResult(sample);
        update.setState(LoadBalancerBackendInstance.STATE.Unknown);
        update.setReasonCode("ELB");
        update.setDescription("Internal error: ELB VMs are not reachable. Contact administrator if problem continues");
        Entities.persist(update);
      }
      db.commit();
    }
 catch (    final Exception ex) {
      ;
    }
  }
  final InstanceStates states=new InstanceStates();
  states.setMember(stateList);
  final DescribeInstanceHealthResult result=new DescribeInstanceHealthResult();
  result.setInstanceStates(states);
  reply.setDescribeInstanceHealthResult(result);
  return reply;
}
