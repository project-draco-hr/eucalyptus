{
  final DeleteLoadBalancerListenersResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final String lbName=request.getLoadBalancerName();
  final Collection<Integer> listenerPorts;
  try {
    listenerPorts=Collections2.transform(request.getLoadBalancerPorts().getMember(),new Function<String,Integer>(){
      @Override public Integer apply(      final String input){
        return new Integer(input);
      }
    }
);
  }
 catch (  Exception ex) {
    throw new InvalidConfigurationRequestException("Invalid port number");
  }
  final LoadBalancer lb;
  try {
    lb=LoadBalancers.getLoadbalancer(ctx,lbName);
  }
 catch (  NoSuchElementException ex) {
    throw new AccessPointNotFoundException();
  }
catch (  Exception ex) {
    LOG.error("failed to query loadbalancer due to unknown reason",ex);
    final String reason=ex.getCause() != null && ex.getCause().getMessage() != null ? ex.getMessage() : "internal error";
    throw new InternalFailure400Exception(String.format("Failed to delete the listener: %s",reason),ex);
  }
  if (!LoadBalancingMetadatas.filterPrivileged().apply(lb)) {
    throw new AccessPointNotFoundException();
  }
  final Function<Void,Collection<Integer>> filter=new Function<Void,Collection<Integer>>(){
    @Override public Collection<Integer> apply(    Void v){
      final Collection<Integer> filtered=Sets.newHashSet();
      for (      Integer port : listenerPorts) {
        final LoadBalancerListenerCoreView found=lb.findListener(port);
        if (found != null)         filtered.add(port);
      }
      return filtered;
    }
  }
;
  final Collection<Integer> toDelete=Entities.asTransaction(LoadBalancer.class,filter).apply(null);
  final Predicate<Collection<Integer>> remover=new Predicate<Collection<Integer>>(){
    @Override public boolean apply(    Collection<Integer> listeners){
      for (      Integer port : listeners) {
        try {
          final LoadBalancerListener exist=Entities.uniqueResult(LoadBalancerListener.named(lb,port));
          Entities.delete(exist);
        }
 catch (        NoSuchElementException ex) {
        }
catch (        Exception ex) {
          LOG.error("Failed to delete the listener",ex);
          throw Exceptions.toUndeclared(ex);
        }
      }
      return true;
    }
  }
;
  try {
    if (!LoadBalancingWorkflows.deleteListenersSync(ctx.getAccountNumber(),lbName,Lists.newArrayList(toDelete)))     throw new Exception("Workflow for deleting listeners has failed");
  }
 catch (  final Exception e) {
    final String reason=e.getCause() != null && e.getCause().getMessage() != null ? e.getCause().getMessage() : "internal error";
    throw new InternalFailure400Exception(String.format("Failed to delete listener: %s",reason),e);
  }
  try {
    Entities.asTransaction(LoadBalancerListener.class,remover).apply(toDelete);
  }
 catch (  final Exception ex) {
    final String reason=ex.getCause() != null && ex.getCause().getMessage() != null ? ex.getCause().getMessage() : "internal error";
    throw new InternalFailure400Exception(String.format("Failed to delete listener: %s",reason),ex);
  }
  LoadBalancingWorkflows.updateLoadBalancer(ctx.getAccountNumber(),lbName);
  reply.set_return(true);
  return reply;
}
