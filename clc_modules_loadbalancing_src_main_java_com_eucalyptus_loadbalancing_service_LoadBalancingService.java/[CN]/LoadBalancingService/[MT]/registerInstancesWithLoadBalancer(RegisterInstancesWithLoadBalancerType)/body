{
  final RegisterInstancesWithLoadBalancerResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final UserFullName ownerFullName=ctx.getUserFullName();
  final String lbName=request.getLoadBalancerName();
  final Collection<Instance> instances=request.getInstances().getMember();
  final LoadBalancer lb;
  try {
    lb=LoadBalancers.getLoadbalancer(ctx,lbName);
  }
 catch (  final Exception ex) {
    throw new AccessPointNotFoundException();
  }
  if (!LoadBalancingMetadatas.filterPrivileged().apply(lb)) {
    throw new AccessPointNotFoundException();
  }
  final Set<String> backends=Sets.newHashSet(Iterables.transform(lb.getBackendInstances(),LoadBalancerBackendInstanceCoreView.instanceId()));
  if (lb.getVpcId() != null) {
    final List<RunningInstancesItemType> instanceItems=EucalyptusActivityTasks.getInstance().describeUserInstances(ctx.getAccountNumber(),Lists.newArrayList(Iterables.transform(instances,Instance.instanceId())));
    for (    final RunningInstancesItemType instanceItem : instanceItems) {
      if (!lb.getVpcId().equals(instanceItem.getVpcId())) {
        throw new InvalidConfigurationRequestException("Invalid instance(s) for load balancer.");
      }
    }
  }
  final Collection<LoadBalancerZoneCoreView> enabledZones=Collections2.filter(lb.getZones(),new Predicate<LoadBalancerZoneCoreView>(){
    @Override public boolean apply(    LoadBalancerZoneCoreView arg0){
      return LoadBalancerZone.STATE.InService.equals(arg0.getState());
    }
  }
);
  final Set<String> lbZones=Sets.newHashSet(Collections2.transform(enabledZones,new Function<LoadBalancerZoneCoreView,String>(){
    @Override public String apply(    LoadBalancerZoneCoreView arg0){
      return arg0.getName();
    }
  }
));
  final String acctNumber=ctx.getAccountNumber();
  final List<String> requestedInstanceIds=Lists.newArrayList(Collections2.transform(instances,new Function<Instance,String>(){
    @Override public String apply(    Instance arg0){
      return arg0.getInstanceId();
    }
  }
));
  List<RunningInstancesItemType> eucaInstances=Lists.newArrayList();
  try {
    eucaInstances=EucalyptusActivityTasks.getInstance().describeUserInstances(acctNumber,requestedInstanceIds);
  }
 catch (  final Exception ex) {
    throw new InvalidConfigurationRequestException("Failed to look up requested instances");
  }
  for (  final RunningInstancesItemType instance : eucaInstances) {
    if (!lbZones.contains(instance.getPlacement())) {
      throw new InvalidConfigurationRequestException("Instance " + instance.getInstanceId() + "'s availaibility zone is not enabled for the loadbalancer");
    }
  }
  final Predicate<LoadBalancer> creator=new Predicate<LoadBalancer>(){
    @Override public boolean apply(    LoadBalancer lb){
      for (      Instance vm : instances) {
        if (lb.hasBackendInstance(vm.getInstanceId()))         continue;
        try {
          final LoadBalancerBackendInstance beInstance=LoadBalancerBackendInstance.newInstance(ownerFullName,lb,vm.getInstanceId());
          beInstance.setState(LoadBalancerBackendInstance.STATE.OutOfService);
          Entities.persist(beInstance);
        }
 catch (        final LoadBalancingException ex) {
          throw Exceptions.toUndeclared(ex);
        }
      }
      return true;
    }
  }
;
  try {
    Entities.asTransaction(LoadBalancerBackendInstance.class,creator).apply(lb);
    Iterables.addAll(backends,Iterables.transform(instances,Instance.instanceId()));
  }
 catch (  Exception ex) {
    throw handleException(ex);
  }
 finally {
    if (lb != null)     LoadBalancingServoCache.getInstance().invalidate(lb);
  }
  LoadBalancingWorkflows.updateLoadBalancer(ctx.getAccountNumber(),lbName);
  final Instances returnInstances=new Instances();
  Iterables.addAll(returnInstances.getMember(),Iterables.transform(backends,Instance.instance()));
  reply.getRegisterInstancesWithLoadBalancerResult().setInstances(returnInstances);
  return reply;
}
