{
  final DescribeLoadBalancerAttributesResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final String accountNumber=ctx.getAccount().getAccountNumber();
  final Function<String,LoadBalancerAttributes> lookupAttributes=new Function<String,LoadBalancerAttributes>(){
    @Override public LoadBalancerAttributes apply(    final String identifier){
      try {
        final LoadBalancer loadBalancer=lookupAuthorizedByNameOrDnsName(accountNumber,identifier);
        return TypeMappers.transform(loadBalancer,LoadBalancerAttributes.class);
      }
 catch (      Exception e) {
        throw Exceptions.toUndeclared(e);
      }
    }
  }
;
  try {
    final LoadBalancerAttributes attributes=Entities.asTransaction(LoadBalancer.class,lookupAttributes).apply(request.getLoadBalancerName());
    reply.getDescribeLoadBalancerAttributesResult().setLoadBalancerAttributes(attributes);
  }
 catch (  RuntimeException e) {
    Exceptions.findAndRethrow(e,LoadBalancingException.class);
    throw e;
  }
  return reply;
}
