{
  final EnableAvailabilityZonesForLoadBalancerResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final String lbName=request.getLoadBalancerName();
  final Collection<String> requestedZones=request.getAvailabilityZones().getMember();
  LoadBalancer lb;
  try {
    lb=LoadBalancers.getLoadbalancer(ctx,lbName);
  }
 catch (  final Exception ex) {
    throw new AccessPointNotFoundException();
  }
  if (!LoadBalancingMetadatas.filterPrivileged().apply(lb)) {
    throw new AccessPointNotFoundException();
  }
  final Set<String> allZones=Sets.newHashSet(Iterables.transform(lb.getZones(),LoadBalancerZoneCoreView.name()));
  final Optional<VpcType> vpcOptional=EucalyptusActivityTasks.getInstance().defaultVpc(ctx.getAccount());
  final Map<String,String> zoneToSubnetIdMap=Maps.newHashMap();
  if (vpcOptional.isPresent() && Objects.equals(lb.getVpcId(),vpcOptional.get().getVpcId())) {
    final List<SubnetType> subnets=EucalyptusActivityTasks.getInstance().describeSubnetsByZone(lb.getVpcId(),true,requestedZones);
    CollectionUtils.putAll(subnets,zoneToSubnetIdMap,SubnetType.zone(),SubnetType.id());
    if (requestedZones.size() != zoneToSubnetIdMap.size()) {
      throw new InvalidConfigurationRequestException("Cannot enable zone for VPC loadbalancer, default subnet not found.");
    }
  }
 else   if (lb.getVpcId() != null) {
    throw new InvalidConfigurationRequestException("Cannot enable zone for VPC loadbalancer");
  }
  LoadBalancers.checkVersion(lb,DeploymentVersion.v4_2_0);
  if (lb.getVpcId() != null) {
    LoadBalancers.checkVersion(lb,DeploymentVersion.v4_3_0);
  }
  final List<LoadBalancerZoneCoreView> enabledZones=Lists.newArrayList(Collections2.filter(lb.getZones(),new Predicate<LoadBalancerZoneCoreView>(){
    @Override public boolean apply(    @Nullable LoadBalancerZoneCoreView arg0){
      return arg0.getState().equals(LoadBalancerZone.STATE.InService);
    }
  }
));
  final List<String> enabledZoneNames=Lists.newArrayList(Iterables.transform(enabledZones,LoadBalancerZoneCoreView.name()));
  requestedZones.removeAll(enabledZoneNames);
  final List<ClusterInfoType> clusters=EucalyptusActivityTasks.getInstance().describeAvailabilityZones(false);
  final List<String> foundZones=Lists.transform(clusters,new Function<ClusterInfoType,String>(){
    @Override public String apply(    @Nullable ClusterInfoType arg0){
      return arg0.getZoneName();
    }
  }
);
  for (  final String zone : requestedZones) {
    if (!foundZones.contains(zone)) {
      throw new InvalidConfigurationRequestException(String.format("The requested zone %s is not valid",zone));
    }
  }
  if (!requestedZones.isEmpty()) {
    try {
      if (!LoadBalancingWorkflows.enableZonesSync(ctx.getAccountNumber(),lbName,Lists.newArrayList(requestedZones),zoneToSubnetIdMap))       throw new Exception("Workflow for enabling availability zone has failed");
    }
 catch (    final Exception e) {
      final String reason=e.getCause() != null && e.getCause().getMessage() != null ? e.getCause().getMessage() : "internal error";
      throw new InternalFailure400Exception(String.format("Failed to enable zones: %s",reason),e);
    }
  }
  allZones.addAll(requestedZones);
  final EnableAvailabilityZonesForLoadBalancerResult result=new EnableAvailabilityZonesForLoadBalancerResult();
  final AvailabilityZones availZones=new AvailabilityZones();
  availZones.getMember().addAll(allZones);
  reply.getEnableAvailabilityZonesForLoadBalancerResult().setAvailabilityZones(availZones);
  return reply;
}
