{
  Assertions.assertArgumentNotNull(componentType);
  Assertions.assertArgumentNotNull(partition);
  Assertions.assertArgumentNotNull(name);
  this.componentId=componentType;
  this.partition=partition;
  this.name=name;
  List<String> temp=Lists.newArrayList();
  if (componentType != null) {
    temp.add(componentType.name());
  }
 else {
    temp.add(ComponentIds.lookup(Eucalyptus.class).name());
  }
  temp.add(name);
  temp.addAll(Arrays.asList(pathPartsArray));
  this.authority=new StringBuilder().append(PREFIX).append(SEP).append(VENDOR).append(SEP).append(partition).append(SEP).append(FullName.SYSTEM_ID).append(SEP).toString();
  StringBuilder rId=new StringBuilder();
  String prefix="";
  for (  String pathPart : pathPartsArray) {
    rId.append("".equals(prefix) ? (prefix=SEP_PATH).substring(0,0) : prefix).append(pathPart);
  }
  this.relativeId=rId.toString();
  this.qName=this.authority + this.relativeId;
}
