{
  Assertions.assertNotNull(componentType);
  Assertions.assertNotNull(partition);
  Assertions.assertNotNull(name);
  this.realComponentId=componentType;
  this.name=name;
  boolean hasParentComponent=!this.realComponentId.serviceDependencies().isEmpty();
  ComponentId tempComponentId=Empyrean.INSTANCE;
  String tempPartition="";
  if (hasParentComponent || this.realComponentId.isPartitioned()) {
    if (this.realComponentId.serviceDependencies().contains(Eucalyptus.class)) {
      tempComponentId=Eucalyptus.INSTANCE;
    }
 else     if (this.realComponentId.serviceDependencies().contains(Any.class) || this.realComponentId.serviceDependencies().contains(Empyrean.class)) {
      tempComponentId=Empyrean.INSTANCE;
    }
    tempPartition=partition;
  }
 else   if (!hasParentComponent && !this.realComponentId.isPartitioned()) {
    tempComponentId=this.realComponentId;
    tempPartition=this.realComponentId.name();
  }
 else   if (!this.realComponentId.isPartitioned() && hasParentComponent) {
    ComponentId parentId=ComponentIds.lookup(this.realComponentId.serviceDependencies().get(0));
    if (parentId.getClass().equals(Eucalyptus.class)) {
      tempComponentId=Eucalyptus.INSTANCE;
      tempPartition=tempComponentId.name();
    }
 else {
      tempComponentId=Empyrean.INSTANCE;
      tempPartition=tempComponentId.name();
    }
  }
  this.componentId=tempComponentId;
  this.partition=tempPartition;
  String displayPartition=(this.componentId.name().equals(this.partition)) ? "" : this.partition;
  String displayCompType=(this.realComponentId.equals(this.componentId)) ? "" : this.realComponentId.name();
  this.authority=Joiner.on(SEP).join(PREFIX,this.componentId.name(),displayPartition,displayCompType,this.name);
  this.relativeId=Joiner.on(SEP_PATH).join(pathPartsArray);
  this.qName=this.authority + this.relativeId;
}
