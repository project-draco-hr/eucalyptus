{
  this.definingClass=definingClass;
  this.field=field;
  try {
    this.noArgConstructor=this.definingClass.getConstructor(new Class[]{});
    this.noArgConstructor.setAccessible(true);
  }
 catch (  Exception ex) {
    LOG.debug("Known declared constructors: " + this.getDefiningClass().getDeclaredConstructors());
    LOG.debug("Known constructors: " + this.getDefiningClass().getConstructors());
    LOG.debug(ex,ex);
    throw new RuntimeException(ex);
  }
  this.setArgs=new Class[]{this.field.getType()};
  try {
    this.get=definingClass.getDeclaredMethod("get" + this.baseMethodName);
    this.get.setAccessible(true);
  }
 catch (  Exception e) {
    LOG.debug("Known declared methods: " + this.getDefiningClass().getDeclaredMethods());
    LOG.debug("Known methods: " + this.getDefiningClass().getMethods());
    LOG.debug(e,e);
    throw new RuntimeException(e);
  }
  try {
    this.set=definingClass.getDeclaredMethod("set" + this.baseMethodName,this.setArgs);
    this.set.setAccessible(true);
  }
 catch (  Exception e) {
    LOG.debug("Known declared methods: " + this.getDefiningClass().getDeclaredMethods());
    LOG.debug("Known methods: " + this.getDefiningClass().getMethods());
    LOG.debug(e,e);
    throw new RuntimeException(e);
  }
  this.entrySetName=entrySetName.toLowerCase();
  this.fieldName=propertyName.toLowerCase();
  this.baseMethodName=this.field.getName().substring(0,1).toUpperCase() + this.field.getName().substring(1);
  this.qualifiedName=this.entrySetName + "." + this.fieldName;
  this.description=description;
  this.typeParser=typeParser;
  this.defaultValue=defaultValue;
  this.readOnly=readOnly;
  this.displayName=displayName;
  this.widgetType=widgetType;
  this.alias=alias;
  this.changeListener=changeListener;
}
