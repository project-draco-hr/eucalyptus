{
  this.definingClass=definingClass;
  this.field=field;
  this.fieldName=this.field.getName().toLowerCase();
  this.entrySetName=entrySetName.toLowerCase();
  this.baseMethodName=this.field.getName().substring(0,1).toUpperCase() + this.field.getName().substring(1);
  this.qualifiedName=this.entrySetName + "." + this.fieldName;
  this.description=description;
  this.typeParser=typeParser;
  this.defaultValue=defaultValue;
  this.readOnly=readOnly;
  this.displayName=displayName;
  this.widgetType=widgetType;
  this.alias=alias;
  this.changeListener=changeListener;
  try {
    this.noArgConstructor=this.definingClass.getConstructor(new Class[]{});
    this.noArgConstructor.setAccessible(true);
  }
 catch (  Exception ex) {
    LOG.debug("Known declared constructors: " + this.getDefiningClass().getDeclaredConstructors());
    LOG.debug("Known constructors: " + this.getDefiningClass().getConstructors());
    LOG.debug(ex,ex);
    throw new RuntimeException(ex);
  }
  this.setArgs=new Class[]{this.field.getType()};
  this.get=this.getReflectedMethod("get" + this.baseMethodName);
  this.set=this.getReflectedMethod("set" + this.baseMethodName,this.setArgs);
}
