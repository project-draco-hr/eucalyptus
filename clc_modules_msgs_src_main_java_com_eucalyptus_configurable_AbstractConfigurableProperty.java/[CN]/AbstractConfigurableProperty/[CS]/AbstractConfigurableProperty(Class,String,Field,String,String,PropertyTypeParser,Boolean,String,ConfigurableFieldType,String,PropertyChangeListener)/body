{
  this.definingClass=definingClass;
  this.field=field;
  this.fieldName=this.field.getName().toLowerCase();
  this.entrySetName=entrySetName.toLowerCase();
  this.qualifiedName=this.entrySetName + "." + this.fieldName;
  this.description=description;
  this.typeParser=typeParser;
  this.defaultValue=defaultValue;
  this.readOnly=readOnly;
  this.displayName=displayName;
  this.widgetType=widgetType;
  this.alias=alias;
  this.changeListener=changeListener;
  Constructor cons=null;
  try {
    cons=this.definingClass.getConstructor(new Class[]{});
    cons.setAccessible(true);
  }
 catch (  Exception ex) {
    if (!Modifier.isStatic(field.getModifiers())) {
      LOG.debug("Known declared constructors: " + this.getDefiningClass().getDeclaredConstructors());
      LOG.debug("Known constructors: " + this.getDefiningClass().getConstructors());
      LOG.debug(ex,ex);
      throw new RuntimeException(ex);
    }
 else {
    }
  }
  this.noArgConstructor=cons;
  this.setArgs=new Class[]{this.field.getType()};
  this.getter=this.getReflectedMethod("get",this.field);
  this.setter=this.getReflectedMethod("set",this.field,this.setArgs);
  ConfigurableClass configurableAnnot=(ConfigurableClass)definingClass.getAnnotation(ConfigurableClass.class);
  this.deferred=configurableAnnot.deferred();
}
