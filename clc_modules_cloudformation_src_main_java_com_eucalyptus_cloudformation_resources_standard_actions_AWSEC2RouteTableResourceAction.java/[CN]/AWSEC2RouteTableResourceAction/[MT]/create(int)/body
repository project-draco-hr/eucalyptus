{
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
switch (stepNum) {
case 0:
    CreateRouteTableType createRouteTableType=new CreateRouteTableType();
  createRouteTableType.setEffectiveUserId(info.getEffectiveUserId());
createRouteTableType.setVpcId(properties.getVpcId());
CreateRouteTableResponseType createRouteTableResponseType=AsyncRequests.<CreateRouteTableType,CreateRouteTableResponseType>sendSync(configuration,createRouteTableType);
info.setPhysicalResourceId(createRouteTableResponseType.getRouteTable().getRouteTableId());
info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(info.getPhysicalResourceId())));
break;
case 1:
if (properties.getTags() != null && !properties.getTags().isEmpty()) {
CreateTagsType createTagsType=new CreateTagsType();
createTagsType.setEffectiveUserId(info.getEffectiveUserId());
createTagsType.setResourcesSet(Lists.newArrayList(info.getPhysicalResourceId()));
createTagsType.setTagSet(createTagSet(properties.getTags()));
AsyncRequests.<CreateTagsType,CreateTagsResponseType>sendSync(configuration,createTagsType);
}
break;
default :
throw new IllegalStateException("Invalid step " + stepNum);
}
}
