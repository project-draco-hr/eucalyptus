{
  if (c.isAnnotationPresent(Entity.class) && !((ConfigurableClass)c.getAnnotation(ConfigurableClass.class)).singleton()) {
    ConfigurableClass classAnnote=(ConfigurableClass)c.getAnnotation(ConfigurableClass.class);
    Field identifierField=findIdentifierField(c);
    if (identifierField == null) {
      return null;
    }
    if (f.isAnnotationPresent(ConfigurableField.class)) {
      LOG.trace("Checking field: " + c.getName() + "."+ f.getName());
      ConfigurableField annote=f.getAnnotation(ConfigurableField.class);
      String fqPrefix=classAnnote.root();
      String alias=classAnnote.alias();
      String description=annote.description();
      String defaultValue=annote.initial();
      PropertyTypeParser p=PropertyTypeParser.get(f.getType());
      PropertyChangeListener listener=PropertyChangeListeners.getListenerFromClass(annote.changeListener());
      try {
        if (!Modifier.isStatic(f.getModifiers()) && !f.isAnnotationPresent(Transient.class)) {
          ConfigurableProperty prop=new MultiDatabasePropertyEntry(c,fqPrefix,f,identifierField,description,defaultValue,p,annote.readonly(),annote.displayName(),annote.type(),alias,null,listener);
          return prop;
        }
      }
 catch (      Exception e) {
        LOG.debug(e,e);
        return null;
      }
    }
  }
 else {
    return null;
  }
  return null;
}
