{
  String[] imagePathParts=imgInfo.getImageLocation().split("/");
  GetObjectResponseType reply=null;
  GetObjectType msg=new GetObjectType(imagePathParts[0],imagePathParts[1],true,false,true);
  msg.setUserId(Component.eucalyptus.name());
  msg.setEffectiveUserId(Component.eucalyptus.name());
  try {
    reply=(GetObjectResponseType)ServiceDispatcher.lookupSingle(Component.walrus).send(msg);
  }
 catch (  EucalyptusCloudException e) {
    ImageManager.LOG.error(e);
    ImageManager.LOG.debug(e,e);
    throw new EucalyptusCloudException("Invalid manifest reference: " + imgInfo.getImageLocation(),e);
  }
  if (reply == null || reply.getBase64Data() == null)   throw new EucalyptusCloudException("Invalid manifest reference: " + imgInfo.getImageLocation());
  XMLParser parser=new XMLParser(Hashes.base64decode(reply.getBase64Data()));
  String encryptedKey=parser.getValue("//ec2_encrypted_key");
  String encryptedIV=parser.getValue("//ec2_encrypted_iv");
  String signature=parser.getValue("//signature");
  String image=parser.getXML("image");
  String machineConfiguration=parser.getXML("machine_configuration");
  User user=null;
  try {
    user=Users.lookupUser(imgInfo.getImageOwnerId());
  }
 catch (  NoSuchUserException e) {
    throw new EucalyptusCloudException("Invalid Manifest: Failed to verify signature because of missing (deleted?) user certificate.",e);
  }
  boolean found=false;
  found|=ImageUtil.verifyManifestSignature(signature,user.getX509Certificate(),machineConfiguration + image);
  if (!found)   throw new EucalyptusCloudException("Invalid Manifest: Failed to verify signature.");
  try {
    PrivateKey pk=SystemCredentialProvider.getCredentialProvider(Component.eucalyptus).getPrivateKey();
    Cipher cipher=Cipher.getInstance("RSA/ECB/PKCS1Padding");
    cipher.init(Cipher.DECRYPT_MODE,pk);
    cipher.doFinal(Hashes.hexToBytes(encryptedKey));
    cipher.doFinal(Hashes.hexToBytes(encryptedIV));
  }
 catch (  Exception ex) {
    throw new EucalyptusCloudException("Invalid Manifest: Failed to recover keys.",ex);
  }
}
