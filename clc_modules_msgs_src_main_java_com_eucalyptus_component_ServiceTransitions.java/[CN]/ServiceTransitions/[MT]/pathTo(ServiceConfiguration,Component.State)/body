{
  try {
    State[] path=null;
    State initialState=configuration.lookupState();
switch (goalState) {
case LOADED:
      path=pathToLoaded(initialState);
    break;
case DISABLED:
  path=pathToDisabled(initialState);
break;
case ENABLED:
path=pathToEnabled(initialState);
break;
case STOPPED:
path=pathToStopped(initialState);
break;
case NOTREADY:
path=pathToStarted(initialState);
break;
case PRIMORDIAL:
path=pathToPrimordial(initialState);
break;
case BROKEN:
path=pathToBroken(initialState);
break;
case INITIALIZED:
path=pathToInitialized(initialState);
break;
}
if (!initialState.equals(goalState)) {
Logs.extreme().debug(configuration.getName() + " transitioning " + initialState+ "->"+ goalState+ " using path "+ Joiner.on("->").join(path));
}
CheckedListenableFuture<ServiceConfiguration> result=executeTransition(configuration,Automata.sequenceTransitions(configuration,path));
return result;
}
 catch (RuntimeException ex) {
Logs.extreme().error(configuration.getName() + " failed to transition to " + goalState+ " because of: "+ Exceptions.causeString(ex));
Logs.extreme().error(ex,ex);
throw ex;
}
}
