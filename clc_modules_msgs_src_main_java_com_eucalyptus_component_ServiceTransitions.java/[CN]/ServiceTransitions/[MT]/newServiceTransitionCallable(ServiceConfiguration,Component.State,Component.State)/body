{
  if (toStates.length < 1) {
    throw new IllegalArgumentException("At least one toState must be specified");
  }
  final Component.State toState=(toStates.length == 0) ? toStates[0] : null;
  final Component.State nextFromState=toState;
  final Component.State[] nextStates=(toStates.length > 1) ? Arrays.copyOfRange(toStates,1,toStates.length) : new Component.State[]{};
  final Callable<CheckedListenableFuture<ServiceConfiguration>> nextTransition=(nextStates.length > 1) ? newServiceTransitionCallable(config,nextFromState,nextStates) : null;
  return new Callable<CheckedListenableFuture<ServiceConfiguration>>(){
    @Override public CheckedListenableFuture<ServiceConfiguration> call() throws Exception {
      Service service=config.lookupComponent().lookupRegisteredService(config);
      if (!fromState.equals(service.getState())) {
        throw new IllegalStateException("Attempt to transition from " + fromState + "->"+ toState+ " when service is currently in "+ service.getState()+ " for "+ config.toString());
      }
 else {
        EventRecord.here(Component.class,EventType.CALLBACK,EventType.COMPONENT_SERVICE_TRANSITION.toString(),config.getFullName().toString()).debug();
        CheckedListenableFuture<ServiceConfiguration> future;
        try {
          future=service.transition(toState);
          if (nextTransition != null) {
            return future.addListener(nextTransition).get();
          }
 else {
            return future;
          }
        }
 catch (        Exception ex) {
          LOG.error(ex,ex);
          throw ex;
        }
      }
    }
  }
;
}
