{
  HoldMe.canHas.lock();
  try {
    final Element secNode=WSSecurity.getSecurityElement(wrappedCredentials.getLoginData());
    final XMLSignature sig=WSSecurity.getXMLSignature(secNode);
    SecurityContext.enqueueSignature(sig.getTextFromTextChild());
    final X509Certificate cert=WSSecurity.verifySignature(secNode,sig);
    try {
      final User user=Accounts.lookupUserByCertificate(cert);
      super.setCredential(cert);
      super.setPrincipal(user);
    }
 catch (    AuthException e) {
      try {
        if (!Accounts.lookupCertificate(cert).isActive()) {
          throw new AuthException("Certificate is inactive or revoked: " + e.getMessage(),e);
        }
 else {
          throw e;
        }
      }
 catch (      Exception ex) {
        throw e;
      }
    }
  }
  finally {
    HoldMe.canHas.unlock();
  }
  return true;
}
