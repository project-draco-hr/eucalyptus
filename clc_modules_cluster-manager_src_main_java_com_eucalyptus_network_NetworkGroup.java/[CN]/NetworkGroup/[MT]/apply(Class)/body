{
  EntityTransaction db=Entities.get(NetworkGroup.class);
  try {
    List<NetworkGroup> networkGroupList=Entities.query(new NetworkGroup());
    for (    NetworkGroup networkGroup : networkGroupList) {
      LOG.debug("Upgrading " + networkGroup.getDisplayName());
      if (networkGroup.getGroupId() == null) {
        networkGroup.setGroupId(Crypto.generateId(Integer.toHexString(networkGroup.getDisplayName().hashCode()),"sg"));
      }
    }
    db.commit();
  }
 catch (  Exception ex) {
    db.rollback();
    throw Exceptions.toUndeclared(ex);
  }
  db=Entities.get(NetworkRule.class);
  try {
    List<NetworkRule> networkRuleList=Entities.query(NetworkRule.named());
    for (    final NetworkRule networkRule : networkRuleList) {
      LOG.debug("Upgrading " + networkRule);
      if (networkRule.getNetworkPeers() != null && networkRule.getNetworkPeers().size() > 0) {
        final Set<NetworkPeer> updatedPeers=Sets.newHashSet();
        for (        final NetworkPeer networkPeer : networkRule.getNetworkPeers()) {
          if (networkPeer.getGroupId() == null) {
            String groupId=null;
            try {
              if (Accounts.getAccountProvider() == null) {
                DatabaseAuthProvider dbAuth=new DatabaseAuthProvider();
                Accounts.setAccountProvider(dbAuth);
              }
              final NetworkGroup networkGroup=NetworkGroups.lookup(AccountFullName.getInstance(networkPeer.getUserQueryKey()),networkPeer.getGroupName());
              groupId=networkGroup.getGroupId();
            }
 catch (            final NoSuchMetadataException ex) {
              LOG.error(String.format("unable to find the network group (%s-%s)",networkPeer.getUserQueryKey(),networkPeer.getGroupName()));
            }
catch (            final Exception ex) {
              LOG.error("failed to query network group",ex);
            }
            if (groupId != null) {
              networkPeer.setGroupId(groupId);
              LOG.debug("network peer upgraded: " + networkPeer);
            }
          }
          updatedPeers.add(networkPeer);
        }
        networkRule.getNetworkPeers().clear();
        networkRule.setNetworkPeers(updatedPeers);
      }
    }
    db.commit();
    return true;
  }
 catch (  Exception ex) {
    db.rollback();
    throw Exceptions.toUndeclared(ex);
  }
}
