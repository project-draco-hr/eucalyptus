{
  AWSEC2NetworkAclEntryResourceAction oldAction=(AWSEC2NetworkAclEntryResourceAction)oldResourceAction;
  AWSEC2NetworkAclEntryResourceAction newAction=(AWSEC2NetworkAclEntryResourceAction)newResourceAction;
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
  ReplaceNetworkAclEntryType replaceNetworkAclEntryType=MessageHelper.createMessage(ReplaceNetworkAclEntryType.class,newAction.info.getEffectiveUserId());
  replaceNetworkAclEntryType.setCidrBlock(newAction.properties.getCidrBlock());
  if (newAction.properties.getEgress() != null) {
    replaceNetworkAclEntryType.setEgress(newAction.properties.getEgress());
  }
  replaceNetworkAclEntryType.setIcmpTypeCode(newAction.convertIcmpTypeCode(newAction.properties.getIcmp()));
  replaceNetworkAclEntryType.setNetworkAclId(newAction.properties.getNetworkAclId());
  replaceNetworkAclEntryType.setPortRange(newAction.convertPortRange(newAction.properties.getPortRange()));
  replaceNetworkAclEntryType.setProtocol(newAction.properties.getProtocol() == null ? null : String.valueOf(newAction.properties.getProtocol()));
  replaceNetworkAclEntryType.setRuleAction(newAction.properties.getRuleAction());
  replaceNetworkAclEntryType.setRuleNumber(newAction.properties.getRuleNumber());
  ReplaceNetworkAclEntryResponseType replaceNetworkAclEntryResponseType=AsyncRequests.<ReplaceNetworkAclEntryType,ReplaceNetworkAclEntryResponseType>sendSync(configuration,replaceNetworkAclEntryType);
  return newAction;
}
