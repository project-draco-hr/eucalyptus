{
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
switch (stepNum) {
case 0:
    if (properties.getNetworkAclId().isEmpty()) {
      throw new ValidationErrorException("NetworkAclId is a required field");
    }
  DescribeNetworkAclsType describeNetworkAclsType=new DescribeNetworkAclsType();
describeNetworkAclsType.setEffectiveUserId(info.getEffectiveUserId());
NetworkAclIdSetType networkAclIdSet=new NetworkAclIdSetType();
NetworkAclIdSetItemType networkAclIdSetItem=new NetworkAclIdSetItemType();
networkAclIdSetItem.setNetworkAclId(properties.getNetworkAclId());
networkAclIdSet.setItem(Lists.newArrayList(networkAclIdSetItem));
describeNetworkAclsType.setNetworkAclIdSet(networkAclIdSet);
DescribeNetworkAclsResponseType describeNetworkAclsResponseType=AsyncRequests.<DescribeNetworkAclsType,DescribeNetworkAclsResponseType>sendSync(configuration,describeNetworkAclsType);
if (describeNetworkAclsResponseType.getNetworkAclSet() == null || describeNetworkAclsResponseType.getNetworkAclSet().getItem() == null || describeNetworkAclsResponseType.getNetworkAclSet().getItem().isEmpty()) {
throw new ValidationErrorException("No such network acl with id '" + properties.getNetworkAclId());
}
CreateNetworkAclEntryType createNetworkAclEntryType=new CreateNetworkAclEntryType();
createNetworkAclEntryType.setEffectiveUserId(info.getEffectiveUserId());
createNetworkAclEntryType.setCidrBlock(properties.getCidrBlock());
createNetworkAclEntryType.setEgress(properties.getEgress());
createNetworkAclEntryType.setIcmpTypeCode(convertIcmpTypeCode(properties.getIcmp()));
createNetworkAclEntryType.setNetworkAclId(properties.getNetworkAclId());
createNetworkAclEntryType.setPortRange(convertPortRange(properties.getPortRange()));
createNetworkAclEntryType.setProtocol(properties.getProtocol() == null ? null : String.valueOf(properties.getProtocol()));
createNetworkAclEntryType.setRuleAction(properties.getRuleAction());
createNetworkAclEntryType.setRuleNumber(properties.getRuleNumber());
CreateNetworkAclEntryResponseType CreateNetworkAclEntryResponseType=AsyncRequests.<CreateNetworkAclEntryType,CreateNetworkAclEntryResponseType>sendSync(configuration,createNetworkAclEntryType);
info.setPhysicalResourceId(getDefaultPhysicalResourceId());
info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(info.getPhysicalResourceId())));
break;
default :
throw new IllegalStateException("Invalid step " + stepNum);
}
}
