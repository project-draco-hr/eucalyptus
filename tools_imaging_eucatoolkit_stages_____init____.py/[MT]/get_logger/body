def get_logger(loglevel=None, logfile=None, force_stderr=False, debug=False):
    '\n    Attempts to setup a logger based up on the provided inputs; loglevel,\n    logfile, debug.\n    :param loglevel: optional str log level. ie DEBUG, INFO, etc\n    :param logfile: optional file path to be logged to\n    :param debug: boolean. If true log level is set to debug,\n                  and streamhandler will write to stderr.\n    '
    log = logging.getLogger(_logger_name)
    if (log.handlers and (not loglevel) and (not logfile)):
        return log
    loglevel = str((loglevel or 'INFO')).upper()
    loglevel = _str_to_log_level(loglevel)
    if debug:
        if (loglevel > logging.DEBUG):
            loglevel = logging.DEBUG
    fmt = logging.Formatter((('%(asctime)s-%(levelname)s:%(name)s(' + str(os.getpid())) + '): %(message)s'))
    log.setLevel(loglevel)
    if (not log.handlers):
        if logfile:
            log.handlers.append(logging.FileHandler(logfile))
        if (debug or force_stderr):
            log.handlers.append(logging.StreamHandler(sys.stderr))
        else:
            log.handlers.append(logging.StreamHandler(sys.stdout))
    for hndlr in log.handlers:
        hndlr.setLevel(loglevel)
        hndlr.setFormatter(fmt)
        log.addHandler(hndlr)
    return log
