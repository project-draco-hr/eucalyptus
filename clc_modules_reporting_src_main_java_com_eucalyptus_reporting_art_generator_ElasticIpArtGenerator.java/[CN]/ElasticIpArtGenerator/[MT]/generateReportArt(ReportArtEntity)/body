{
  log.debug("GENERATING REPORT ART");
  EntityWrapper wrapper=EntityWrapper.get(ReportingElasticIpCreateEvent.class);
  Map<String,ElasticIpArtEntity> elasticIpEntities=new HashMap<String,ElasticIpArtEntity>();
  Map<String,StartEndTimes> ipStartEndTimes=new HashMap<String,StartEndTimes>();
  Iterator iter=wrapper.scanWithNativeQuery("scanElasticIpCreateEvents");
  while (iter.hasNext()) {
    ReportingElasticIpCreateEvent createEvent=(ReportingElasticIpCreateEvent)iter.next();
    ReportingUser reportingUser=ReportingUserDao.getInstance().getReportingUser(createEvent.getUserId());
    if (reportingUser == null) {
      log.error("No user corresponding to event:" + createEvent.getUserId());
    }
    ReportingAccount reportingAccount=ReportingAccountDao.getInstance().getReportingAccount(reportingUser.getAccountId());
    if (reportingAccount == null) {
      log.error("No account corresponding to user:" + reportingUser.getAccountId());
    }
    AccountArtEntity account=new AccountArtEntity();
    if (!report.getAccounts().containsKey(reportingAccount.getName())) {
      report.getAccounts().put(reportingAccount.getName(),account);
    }
    UserArtEntity user=new UserArtEntity();
    if (!account.getUsers().containsKey(reportingUser.getName())) {
      account.getUsers().put(reportingUser.getName(),user);
    }
    ElasticIpArtEntity elasticIp=new ElasticIpArtEntity();
    if (!user.getElasticIps().containsKey(createEvent.getIp())) {
      user.getElasticIps().put(createEvent.getIp(),elasticIp);
    }
    elasticIpEntities.put(createEvent.getUuid(),elasticIp);
    ipStartEndTimes.put(createEvent.getUuid(),new StartEndTimes(createEvent.getTimestampMs(),report.getEndMs()));
  }
  iter=wrapper.scanWithNativeQuery("scanElasticIpDeleteEvents");
  while (iter.hasNext()) {
    ReportingElasticIpDeleteEvent deleteEvent=(ReportingElasticIpDeleteEvent)iter.next();
    long endTime=Math.min(deleteEvent.getTimestampMs(),report.getEndMs());
    if (endTime >= report.getBeginMs() && ipStartEndTimes.containsKey(deleteEvent.getUuid())) {
      StartEndTimes startEndTimes=ipStartEndTimes.get(deleteEvent.getUuid());
      startEndTimes.setEndTimeMs(endTime);
      elasticIpEntities.remove(deleteEvent.getUuid());
      ipStartEndTimes.remove(deleteEvent.getUuid());
    }
  }
  for (  String uuid : elasticIpEntities.keySet()) {
    ElasticIpArtEntity elasticIp=elasticIpEntities.get(uuid);
    StartEndTimes startEndTimes=ipStartEndTimes.get(uuid);
    if (uuid == null) {
      log.error("elasticIp without corresponding start end times:" + uuid);
      continue;
    }
    elasticIp.getUsage().setDurationMs(startEndTimes.getEndTimeMs() - startEndTimes.getStartTimeMs());
    elasticIp.getUsage().setIpNum(1);
  }
  Map<String,InstanceArtEntity> instanceEntities=new HashMap<String,InstanceArtEntity>();
  iter=wrapper.scanWithNativeQuery("scanInstanceCreateEvents");
  while (iter.hasNext()) {
    ReportingInstanceCreateEvent createEvent=(ReportingInstanceCreateEvent)iter.next();
    InstanceArtEntity instance=new InstanceArtEntity(createEvent.getInstanceType(),createEvent.getInstanceId());
    instanceEntities.put(createEvent.getUuid(),instance);
  }
  AttachDurationCalculator durationCalc=new AttachDurationCalculator(report.getBeginMs(),report.getEndMs());
  iter=wrapper.scanWithNativeQuery("scanElasticIpAttachEvents");
  while (iter.hasNext()) {
    ReportingElasticIpAttachEvent attachEvent=(ReportingElasticIpAttachEvent)iter.next();
    durationCalc.attach(attachEvent.getInstanceUuid(),attachEvent.getIpUuid(),attachEvent.getTimestampMs());
  }
  iter=wrapper.scanWithNativeQuery("scanElasticIpDetachEvents");
  while (iter.hasNext()) {
    ReportingElasticIpDetachEvent detachEvent=(ReportingElasticIpDetachEvent)iter.next();
    long duration=durationCalc.detach(detachEvent.getInstanceUuid(),detachEvent.getIpUuid(),detachEvent.getTimestampMs());
    if (duration == 0)     continue;
    if (!elasticIpEntities.containsKey(detachEvent.getIpUuid()))     continue;
    ElasticIpArtEntity elasticIp=elasticIpEntities.get(detachEvent.getIpUuid());
    String instanceId=instanceEntities.get(detachEvent.getInstanceUuid()).getInstanceId();
    if (elasticIp.getInstanceAttachments().containsKey(instanceId)) {
      duration+=elasticIp.getInstanceAttachments().get(instanceId).getDurationMs();
    }
    ElasticIpUsageArtEntity usage=new ElasticIpUsageArtEntity();
    usage.setDurationMs(duration);
    elasticIp.getInstanceAttachments().put(instanceId,usage);
  }
  for (  String zoneName : report.getZones().keySet()) {
    AvailabilityZoneArtEntity zone=report.getZones().get(zoneName);
    for (    String accountName : zone.getAccounts().keySet()) {
      AccountArtEntity account=zone.getAccounts().get(accountName);
      for (      String userName : account.getUsers().keySet()) {
        UserArtEntity user=account.getUsers().get(userName);
        for (        String ipUuid : user.getElasticIps().keySet()) {
          ElasticIpArtEntity ip=user.getElasticIps().get(ipUuid);
          updateUsageTotals(user.getUsageTotals().getElasticIpTotals(),ip.getUsage());
          updateUsageTotals(account.getUsageTotals().getElasticIpTotals(),ip.getUsage());
          updateUsageTotals(zone.getUsageTotals().getElasticIpTotals(),ip.getUsage());
        }
      }
    }
  }
  return report;
}
