{
  if ((request.getSnapshotId() == null && request.getSize() == null) || (request.getSnapshotId() != null && request.getSize() == null)) {
    throw new EucalyptusCloudException("Size is a required parameter.");
  }
  try {
    Configuration.getClusterConfiguration(request.getAvailabilityZone());
  }
 catch (  Exception e) {
    throw new EucalyptusCloudException("Zone does not exist: " + request.getAvailabilityZone(),e);
  }
  StorageControllerConfiguration sc;
  try {
    sc=Configuration.getStorageControllerConfiguration(request.getAvailabilityZone());
  }
 catch (  Exception e) {
    throw new EucalyptusCloudException("Storage services are not available for the requested availability zone.",e);
  }
  EntityWrapper<Volume> db=VolumeManager.getEntityWrapper();
  if (request.getSnapshotId() != null) {
    String userName=request.isAdministrator() ? null : request.getUserId();
    try {
      db.recast(Snapshot.class).getUnique(Snapshot.named(userName,request.getSnapshotId()));
    }
 catch (    EucalyptusCloudException e) {
      LOG.debug(e,e);
      db.rollback();
      throw new EucalyptusCloudException("Snapshot does not exist: " + request.getSnapshotId());
    }
  }
  String newId=null;
  Volume newVol=null;
  while (true) {
    newId=Hashes.generateId(request.getUserId(),ID_PREFIX);
    try {
      db.getUnique(Volume.ownedBy(newId));
    }
 catch (    EucalyptusCloudException e) {
      newVol=new Volume(request.getUserId(),newId,new Integer(request.getSize() != null ? request.getSize() : "-1"),request.getAvailabilityZone(),request.getSnapshotId());
      db.add(newVol);
      break;
    }
  }
  newVol.setState(State.GENERATING);
  try {
    CreateStorageVolumeType req=new CreateStorageVolumeType(newId,request.getSize(),request.getSnapshotId());
    req.setUserId(request.getUserId());
    req.setEffectiveUserId(request.getEffectiveUserId());
    StorageUtil.lookup(sc.getHostName()).send(req,CreateStorageVolumeResponseType.class);
  }
 catch (  EucalyptusCloudException e) {
    LOG.debug(e,e);
    db.rollback();
    throw new EucalyptusCloudException("Error communicating with Storage Controller: CreateStorageVolume:" + e.getMessage());
  }
  db.commit();
  CreateVolumeResponseType reply=(CreateVolumeResponseType)request.getReply();
  reply.setVolume(newVol.morph(new edu.ucsb.eucalyptus.msgs.Volume()));
  return reply;
}
