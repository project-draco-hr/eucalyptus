{
  final Collection<Integer> portsToDelete=evt.getPorts();
  LoadBalancer lb;
  try {
    lb=LoadBalancers.getLoadbalancer(evt.getLoadBalancerAccountNumber(),evt.getLoadBalancer());
  }
 catch (  Exception ex) {
    throw new EventHandlerException("could not find the loadbalancer",ex);
  }
  final Set<String> allArns=Sets.newHashSet();
  final Set<String> arnsToKeep=Sets.newHashSet();
  for (  final LoadBalancerListenerCoreView listener : lb.getListeners()) {
    final PROTOCOL protocol=listener.getProtocol();
    if (protocol.equals(PROTOCOL.HTTPS) || protocol.equals(PROTOCOL.SSL)) {
      allArns.add(listener.getCertificateId());
      if (!portsToDelete.contains(listener.getLoadbalancerPort())) {
        arnsToKeep.add(listener.getCertificateId());
      }
    }
  }
  final Set<String> arnToDelete=Sets.difference(allArns,arnsToKeep);
  if (arnToDelete.size() <= 0)   return;
  final String roleName=String.format("%s-%s-%s",EventHandlerChainNew.IAMRoleSetup.ROLE_NAME_PREFIX,evt.getLoadBalancerAccountNumber(),evt.getLoadBalancer());
  final String prefix=String.format("arn:aws:iam::%s:server-certificate",evt.getLoadBalancerAccountNumber());
  for (  final String arn : arnToDelete) {
    if (!arn.startsWith(prefix))     continue;
    String pathAndName=arn.replace(prefix,"");
    String certName=pathAndName.substring(pathAndName.lastIndexOf("/") + 1);
    String policyName=String.format("%s-%s-%s-%s",EventHandlerChainNewListeners.AuthorizeSSLCertificate.SERVER_CERT_ROLE_POLICY_NAME_PREFIX,evt.getLoadBalancerAccountNumber(),evt.getLoadBalancer(),certName);
    try {
      EucalyptusActivityTasks.getInstance().deleteRolePolicy(roleName,policyName,lb.useSystemAccount());
    }
 catch (    final Exception ex) {
      LOG.warn(String.format("Failed to delete role (%s) policy (%s)",roleName,policyName),ex);
    }
  }
}
