{
  RemoteCallback<?,?> callback=address.unassign().getCallback();
  Callback.Failure failureHander;
  if (rollbackNetworkingOnFailure) {
    callback=DelegatingRemoteCallback.suppressException(callback);
    failureHander=new Callback.Failure<java.lang.Object>(){
      @Override public void fireException(      final Throwable t){
        LOG.info("Unable to assign address " + address.getName() + " for "+ vm.getInstanceId()+ ", will retry.");
        if (address.isPending()) {
          try {
            address.clearPending();
          }
 catch (          Exception ex) {
          }
        }
        try {
          if (!address.isAllocated()) {
            address.pendingAssignment();
          }
          address.assign(vm).clearPending();
        }
 catch (        Exception e) {
          LOG.error(e,e);
          LOG.warn("Address potentially in an inconsistent state: " + LogUtil.dumpObject(address));
        }
      }
    }
;
  }
 else {
    failureHander=Callbacks.noopFailure();
  }
  AsyncRequests.dispatchSafely(AsyncRequests.newRequest(callback).then(failureHander),vm.getPartition());
}
