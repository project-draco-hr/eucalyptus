{
  BaseMessage originReq=null;
  try {
    originReq=MessageContexts.lookupLast(vm.getInstanceId(),Sets.<Class>newHashSet(TerminateInstancesType.class,StopInstancesType.class));
  }
 catch (  final Exception ex) {
    ;
  }
  final VmState vmLastState=vm.getLastState();
  final VmState vmState=vm.getState();
  RuntimeException logEx=new RuntimeException("Cleaning up instance: " + vm.getInstanceId() + " "+ vmLastState+ " -> "+ vmState);
  LOG.debug(logEx.getMessage());
  Logs.extreme().info(logEx,logEx);
  try {
    VmInstances.cleanUpAttachedVolumes(vm);
  }
 catch (  Exception ex) {
    LOG.error(ex);
    Logs.extreme().error(ex,ex);
  }
  try (final TransactionResource db=Entities.distinctTransactionFor(VmInstance.class)){
    VmInstanceLifecycleHelpers.get().cleanUpInstance(Entities.merge(vm),vmState);
    db.commit();
  }
 catch (  Exception ex) {
    LOG.error(ex);
    Logs.extreme().error(ex,ex);
  }
  if (!rollbackNetworkingOnFailure && VmStateSet.TORNDOWN.apply(vm)) {
    try (final TransactionResource db=Entities.distinctTransactionFor(VmInstance.class)){
      clearServiceTag(vm);
      if (VmStateSet.DONE.apply(vm)) {
        Entities.merge(vm).clearReferences();
      }
 else {
        Entities.merge(vm).clearRunReferences();
      }
      db.commit();
    }
 catch (    Exception ex) {
      LOG.error(ex);
      Logs.extreme().error(ex,ex);
    }
  }
  sendTerminate(vm.getInstanceId(),vm.getPartition());
}
