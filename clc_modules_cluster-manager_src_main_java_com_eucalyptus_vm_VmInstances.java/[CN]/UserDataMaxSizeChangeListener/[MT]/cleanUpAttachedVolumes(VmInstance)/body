{
  if (VmStateSet.DONE.apply(vm)) {
    final Collection<String> volumesToDelete=Sets.newTreeSet();
    try (final TransactionResource db=Entities.distinctTransactionFor(VmInstance.class)){
      final VmInstance instance=Entities.merge(vm);
      if (instance.getTransientVolumeState() != null) {
        cleanUpAttachedVolumes(instance.getInstanceId(),"transient",instance.getTransientVolumeState().getAttachments(),deleteOnTerminateFilter(false));
        addMatchingVolumeIds(volumesToDelete,instance.getTransientVolumeState().getAttachments(),deleteOnTerminateFilter(true));
      }
      if (instance.getBootRecord() != null) {
        cleanUpAttachedVolumes(instance.getInstanceId(),"persistent",instance.getBootRecord().getPersistentVolumes(),deleteOnTerminateFilter(false));
        addMatchingVolumeIds(volumesToDelete,instance.getBootRecord().getPersistentVolumes(),deleteOnTerminateFilter(true));
      }
      db.commit();
    }
 catch (    Exception ex) {
      LOG.error(vm.getInstanceId() + ": Failed to cleanup attached volumes",ex);
    }
    try {
      if (!volumesToDelete.isEmpty()) {
        LOG.debug(vm.getInstanceId() + ": Cleanup for delete on terminate volumes.");
        for (        final String volumeId : volumesToDelete) {
          try {
            LOG.debug(vm.getInstanceId() + ": Firing delete request for " + volumeId);
            AsyncRequests.newRequest(new MessageCallback<DeleteStorageVolumeType,DeleteStorageVolumeResponseType>(new DeleteStorageVolumeType(volumeId)){
              @Override public void initialize(              final DeleteStorageVolumeType request){
              }
              @Override public void fire(              final DeleteStorageVolumeResponseType response){
                Function<DeleteStorageVolumeResponseType,Void> deleteVolume=new Function<DeleteStorageVolumeResponseType,Void>(){
                  @Nullable @Override public Void apply(                  final DeleteStorageVolumeResponseType deleteStorageVolumeResponseType){
                    final Volume volume=Volumes.lookup(null,volumeId);
                    if (null != response && response.get_return()) {
                      Volumes.annihilateStorageVolume(volume);
                    }
 else {
                      LOG.error(vm.getInstanceId() + ": Failed to delete volume " + volumeId);
                    }
                    VmInstance instance=Entities.merge(vm);
                    if (instance.getTransientVolumeState() != null && instance.getTransientVolumeState().getAttachments() != null) {
                      Iterables.removeIf(instance.getTransientVolumeState().getAttachments(),volumeIdFilter(volumeId));
                    }
                    if (instance.getBootRecord() != null && instance.getBootRecord().getPersistentVolumes() != null) {
                      Iterables.removeIf(instance.getBootRecord().getPersistentVolumes(),volumeIdFilter(volumeId));
                    }
                    return null;
                  }
                }
;
                Entities.asTransaction(Volume.class,deleteVolume).apply(response);
              }
              @Override public void fireException(              final Throwable throwable){
                LOG.error(vm.getInstanceId() + ": Failed to delete volume " + volumeId,throwable);
              }
            }
).dispatch(Topology.lookup(Storage.class,vm.lookupPartition()));
          }
 catch (          NoSuchElementException e) {
            LOG.debug(vm.getInstanceId() + ": Persistent volume not found for cleanup " + volumeId);
          }
catch (          Exception ex) {
            LOG.error(vm.getInstanceId() + ": Failed to cleanup persistent volume attachment for " + volumeId,ex);
          }
        }
      }
    }
 catch (    Exception ex) {
      LOG.error(vm.getInstanceId() + ": Failed to cleanup attached volumes",ex);
    }
  }
}
