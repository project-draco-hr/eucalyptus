{
  if (vm.isBlockStorage()) {
    final String vmId=vm.getInstanceId();
    final ServiceConfiguration scConfig=Topology.lookup(Storage.class,vm.lookupPartition());
    final ServiceConfiguration ccConfig=Topology.lookup(ClusterController.class,vm.lookupPartition());
    final Predicate<VmVolumeAttachment> attachVolumes=new Predicate<VmVolumeAttachment>(){
      public boolean apply(      VmVolumeAttachment input){
        final String volumeId=input.getVolumeId();
        final String vmDevice=input.getDevice();
        try {
          LOG.debug(vmId + ": attaching volume: " + input);
          GetVolumeTokenType tokenRequest=new GetVolumeTokenType(volumeId);
          final CheckedListenableFuture<GetVolumeTokenResponseType> scGetTokenReplyFuture=AsyncRequests.dispatch(scConfig,tokenRequest);
          final Callable<Boolean> ncAttachRequest=new Callable<Boolean>(){
            public Boolean call(){
              try {
                LOG.debug(vmId + ": waiting for storage volume: " + volumeId);
                GetVolumeTokenResponseType scReply=scGetTokenReplyFuture.get();
                String token=StorageProperties.formatVolumeAttachmentTokenForTransfer(scReply.getToken(),volumeId);
                LOG.debug(vmId + ": " + volumeId+ " => "+ scGetTokenReplyFuture.get());
                AsyncRequests.dispatch(ccConfig,new ClusterAttachVolumeType(volumeId,vmId,vmDevice,token));
              }
 catch (              Exception ex) {
                Exceptions.maybeInterrupted(ex);
                LOG.error(vmId + ": " + ex);
                Logs.extreme().error(ex,ex);
              }
              return true;
            }
          }
;
          Threads.enqueue(Eucalyptus.class,VmRuntimeState.class,ncAttachRequest);
        }
 catch (        Exception ex) {
          LOG.error(vmId + ": " + ex);
          Logs.extreme().error(ex,ex);
        }
        return true;
      }
    }
;
    try {
      vm.getTransientVolumeState().eachVolumeAttachment(attachVolumes);
    }
 catch (    Exception ex) {
      LOG.error(vm.getInstanceId() + ": " + ex);
      Logs.extreme().error(vm.getInstanceId() + ": " + ex,ex);
    }
  }
}
