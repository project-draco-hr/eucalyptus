{
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
switch (stepNum) {
case 0:
    CreateInternetGatewayType createInternetGatewayType=new CreateInternetGatewayType();
  createInternetGatewayType.setEffectiveUserId(info.getEffectiveUserId());
CreateInternetGatewayResponseType createInternetGatewayResponseType=AsyncRequests.<CreateInternetGatewayType,CreateInternetGatewayResponseType>sendSync(configuration,createInternetGatewayType);
info.setPhysicalResourceId(createInternetGatewayResponseType.getInternetGateway().getInternetGatewayId());
info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(info.getPhysicalResourceId())));
break;
case 1:
List<EC2Tag> tags=TagHelper.getEC2StackTags(info,getStackEntity());
if (properties.getTags() != null && !properties.getTags().isEmpty()) {
TagHelper.checkReservedEC2TemplateTags(properties.getTags());
tags.addAll(properties.getTags());
}
CreateTagsType createTagsType=new CreateTagsType();
createTagsType.setUserId(info.getEffectiveUserId());
createTagsType.markPrivileged();
createTagsType.setResourcesSet(Lists.newArrayList(info.getPhysicalResourceId()));
createTagsType.setTagSet(EC2Helper.createTagSet(tags));
AsyncRequests.<CreateTagsType,CreateTagsResponseType>sendSync(configuration,createTagsType);
break;
default :
throw new IllegalStateException("Invalid step " + stepNum);
}
}
