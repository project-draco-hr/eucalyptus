{
  LOG.warn("Change occurred to property " + t.getQualifiedName() + " with new value "+ newValue+ ".");
  String newValueStr=(String)newValue;
  int newValueId=-1;
  if (newValueStr != null && !newValueStr.trim().isEmpty()) {
    try {
      newValueId=Integer.parseInt(newValueStr);
    }
 catch (    Exception ex) {
      throw new ConfigurablePropertyException("Unable to set fault id to " + newValue);
    }
  }
  if (newValueId == -1) {
    newValueStr="";
  }
  try {
    t.getField().set(null,t.getTypeParser().apply(newValue));
  }
 catch (  IllegalArgumentException e1) {
    e1.printStackTrace();
    throw new ConfigurablePropertyException(e1);
  }
catch (  IllegalAccessException e1) {
    e1.printStackTrace();
    throw new ConfigurablePropertyException(e1);
  }
  LOG.info("While setting the fault id, properties file is set to " + TEST_FAULT_VAR_PROPERTIES_FILE);
  if (newValueId > -1) {
    Properties varProps=null;
    if (TEST_FAULT_VAR_PROPERTIES_FILE != null && !TEST_FAULT_VAR_PROPERTIES_FILE.trim().isEmpty()) {
      File propsFile=new File(TEST_FAULT_VAR_PROPERTIES_FILE);
      if (propsFile.exists()) {
        varProps=new Properties();
        InputStream in=null;
        try {
          in=new FileInputStream(propsFile);
          varProps.load(in);
        }
 catch (        IOException ex) {
          ex.printStackTrace();
        }
 finally {
          if (in != null) {
            try {
              in.close();
            }
 catch (            IOException ignore) {
              ;
            }
          }
        }
      }
 else {
        LOG.warn("Properties file for fault trigger test " + TEST_FAULT_VAR_PROPERTIES_FILE + " does not exist");
      }
    }
 else {
      LOG.warn("No properties file set for fault trigger test");
    }
    TestFaultTrigger.triggerFault(newValueId,varProps);
  }
}
