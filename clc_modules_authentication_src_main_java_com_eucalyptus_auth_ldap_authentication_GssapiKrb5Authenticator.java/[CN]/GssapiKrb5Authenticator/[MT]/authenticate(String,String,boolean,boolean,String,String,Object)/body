{
  if (Strings.isNullOrEmpty(login) || Strings.isNullOrEmpty(password)) {
    throw new LdapException("LDAP login failed: empty login name or password");
  }
  if (extraArgs.length < 1 || !(extraArgs[0] instanceof String) || Strings.isNullOrEmpty((String)extraArgs[0])) {
    throw new LdapException("GSSAPI w/ Kerberos V5 requires krb5.conf argument");
  }
  System.setProperty(KRB5_CONF_PROPERTY,(String)extraArgs[0]);
  final Map<String,String> options=new HashMap<String,String>();
  options.put(JAAS_CONF_OPTION_CLIENT,"TRUE");
  final Configuration configuration=new Configuration(){
    @Override public AppConfigurationEntry[] getAppConfigurationEntry(    String name){
      return new AppConfigurationEntry[]{new AppConfigurationEntry(KRB5_LOGIN_MODULE,AppConfigurationEntry.LoginModuleControlFlag.REQUIRED,options)};
    }
  }
;
  final CallbackHandler callbackHandler=new CallbackHandler(){
    @Override public void handle(    Callback[] callbacks) throws IOException, UnsupportedCallbackException {
      for (int i=0; i < callbacks.length; i++) {
        if (callbacks[i] instanceof NameCallback) {
          NameCallback cb=(NameCallback)callbacks[i];
          cb.setName(login);
        }
 else         if (callbacks[i] instanceof PasswordCallback) {
          PasswordCallback cb=(PasswordCallback)callbacks[i];
          char[] pwBytes=new char[password.length()];
          password.getChars(0,pwBytes.length,pwBytes,0);
          cb.setPassword(pwBytes);
        }
      }
    }
  }
;
  LoginContext loginContext=null;
  try {
    loginContext=new LoginContext(KRB5_LOGIN_CONTEXT_NAME,null,callbackHandler,configuration);
    loginContext.login();
  }
 catch (  LoginException e) {
    LOG.error(e,e);
    throw new LdapException("Failed to login to Kerberos",e);
  }
  LdapContext ldapContext=Subject.<LdapContext>doAs(loginContext.getSubject(),new PrivilegedAction<LdapContext>(){
    @Override public LdapContext run(){
      Properties env=new Properties();
      env.put(Context.INITIAL_CONTEXT_FACTORY,LDAP_CONTEXT_FACTORY);
      env.put(Context.REFERRAL,"follow");
      env.put(Context.PROVIDER_URL,serverUrl);
      env.put(Context.SECURITY_AUTHENTICATION,LicParser.LDAP_AUTH_METHOD_SASL_GSSAPI);
      if (useSsl) {
        env.put(Context.SECURITY_PROTOCOL,SSL_PROTOCOL);
        if (ignoreSslCert) {
          env.put(SOCKET_FACTORY,EasySSLSocketFactory.class.getCanonicalName());
        }
      }
      try {
        return new InitialLdapContext(env,null);
      }
 catch (      NamingException e) {
        LOG.error(e,e);
      }
      return null;
    }
  }
);
  if (ldapContext == null) {
    throw new LdapException("LDAP login failed, possibly wrong credential");
  }
  return ldapContext;
}
