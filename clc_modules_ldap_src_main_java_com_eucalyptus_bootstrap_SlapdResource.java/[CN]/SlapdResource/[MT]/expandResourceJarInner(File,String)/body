{
  InputStream is=this.getClass().getResourceAsStream(name);
  is=(is == null) ? this.getClass().getResourceAsStream("/" + name) : is;
  if (is == null) {
    throw new MissingResourceException("Resource '" + name + "' not found",this.getClass().getName(),name);
  }
  JarInputStream jis=new JarInputStream(is);
  try {
    JarEntry entry=null;
    while ((entry=jis.getNextJarEntry()) != null) {
      File file=new File(outputDir,entry.getName());
      if (!file.exists()) {
        if (entry.isDirectory()) {
          LOG.info("Creating directory: " + file.getCanonicalPath());
          file.mkdirs();
        }
 else {
          File parentFile=file.getParentFile();
          if (parentFile != null) {
            if (parentFile.exists() || parentFile.mkdirs()) {
              LOG.info("Creating entry:     " + file.getCanonicalPath());
              FileOutputStream to=new FileOutputStream(file);
              try {
                byte[] buf=new byte[8192];
                for (int i=0; (i=jis.read(buf)) != -1; to.write(buf,0,i))                 ;
                to.flush();
              }
 catch (              IOException e) {
                LOG.error(e,e);
                throw e;
              }
catch (              Exception e) {
                LOG.error(e,e);
                throw new RuntimeException(e);
              }
 finally {
                to.close();
              }
              if (entry.getName().matches("([^/]|\\./)*bin/[^/]*")) {
                LOG.info("Marking executable: " + file.getCanonicalPath());
                file.setExecutable(true);
              }
            }
 else {
              LOG.warn("Failed to create directory: " + parentFile.getAbsolutePath() + " for resource: "+ entry.getName());
            }
          }
        }
      }
    }
    while (entry != null)     ;
  }
  finally {
    jis.close();
    is.close();
  }
}
