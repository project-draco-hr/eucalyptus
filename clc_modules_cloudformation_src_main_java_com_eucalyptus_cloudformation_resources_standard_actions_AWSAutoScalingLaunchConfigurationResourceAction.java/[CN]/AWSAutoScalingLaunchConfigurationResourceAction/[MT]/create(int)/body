{
  ServiceConfiguration configuration=Topology.lookup(AutoScaling.class);
switch (stepNum) {
case 0:
    CreateLaunchConfigurationType createLaunchConfigurationType=new CreateLaunchConfigurationType();
  if (properties.getBlockDeviceMappings() != null) {
    createLaunchConfigurationType.setBlockDeviceMappings(convertBlockDeviceMappings(properties.getBlockDeviceMappings()));
  }
createLaunchConfigurationType.setEbsOptimized(properties.getEbsOptimized() != null ? properties.getEbsOptimized() : Boolean.FALSE);
createLaunchConfigurationType.setIamInstanceProfile(properties.getIamInstanceProfile());
createLaunchConfigurationType.setImageId(properties.getImageId());
InstanceMonitoring instanceMonitoring=new InstanceMonitoring();
instanceMonitoring.setEnabled(properties.getInstanceMonitoring() != null ? properties.getInstanceMonitoring() : Boolean.TRUE);
createLaunchConfigurationType.setInstanceMonitoring(instanceMonitoring);
createLaunchConfigurationType.setInstanceType(properties.getInstanceType());
createLaunchConfigurationType.setKernelId(properties.getKernelId());
createLaunchConfigurationType.setKeyName(properties.getKeyName());
createLaunchConfigurationType.setRamdiskId(properties.getRamDiskId());
if (properties.getSecurityGroups() != null) {
SecurityGroups securityGroups=new SecurityGroups();
ArrayList<String> member=Lists.newArrayList();
member.addAll(properties.getSecurityGroups());
securityGroups.setMember(member);
createLaunchConfigurationType.setSecurityGroups(securityGroups);
}
createLaunchConfigurationType.setSpotPrice(properties.getSpotPrice());
createLaunchConfigurationType.setUserData(properties.getUserData());
String launchConfigurationName=getDefaultPhysicalResourceId();
createLaunchConfigurationType.setLaunchConfigurationName(launchConfigurationName);
createLaunchConfigurationType.setEffectiveUserId(info.getEffectiveUserId());
AsyncRequests.<CreateLaunchConfigurationType,CreateLaunchConfigurationResponseType>sendSync(configuration,createLaunchConfigurationType);
info.setPhysicalResourceId(launchConfigurationName);
info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(info.getPhysicalResourceId())));
break;
default :
throw new IllegalStateException("Invalid step " + stepNum);
}
}
