{
  AWSAutoScalingLaunchConfigurationResourceAction action=(AWSAutoScalingLaunchConfigurationResourceAction)resourceAction;
  ServiceConfiguration configuration=Topology.lookup(AutoScaling.class);
  CreateLaunchConfigurationType createLaunchConfigurationType=MessageHelper.createMessage(CreateLaunchConfigurationType.class,action.info.getEffectiveUserId());
  if (action.properties.getInstanceId() != null) {
    throw new ValidationErrorException("InstanceId not supported");
  }
  if (action.properties.getBlockDeviceMappings() != null) {
    createLaunchConfigurationType.setBlockDeviceMappings(action.convertBlockDeviceMappings(action.properties.getBlockDeviceMappings()));
  }
  if (action.properties.getAssociatePublicIpAddress() != null) {
    createLaunchConfigurationType.setAssociatePublicIpAddress(action.properties.getAssociatePublicIpAddress());
  }
  createLaunchConfigurationType.setEbsOptimized(action.properties.getEbsOptimized() != null ? action.properties.getEbsOptimized() : Boolean.FALSE);
  createLaunchConfigurationType.setIamInstanceProfile(action.properties.getIamInstanceProfile());
  createLaunchConfigurationType.setImageId(action.properties.getImageId());
  InstanceMonitoring instanceMonitoring=new InstanceMonitoring();
  instanceMonitoring.setEnabled(action.properties.getInstanceMonitoring() != null ? action.properties.getInstanceMonitoring() : Boolean.TRUE);
  createLaunchConfigurationType.setInstanceMonitoring(instanceMonitoring);
  createLaunchConfigurationType.setInstanceType(action.properties.getInstanceType());
  createLaunchConfigurationType.setKernelId(action.properties.getKernelId());
  createLaunchConfigurationType.setKeyName(action.properties.getKeyName());
  createLaunchConfigurationType.setRamdiskId(action.properties.getRamDiskId());
  if (action.properties.getSecurityGroups() != null) {
    createLaunchConfigurationType.setSecurityGroups(new SecurityGroups(action.properties.getSecurityGroups()));
  }
  createLaunchConfigurationType.setSpotPrice(action.properties.getSpotPrice());
  createLaunchConfigurationType.setUserData(action.properties.getUserData());
  String launchConfigurationName=action.getDefaultPhysicalResourceId();
  createLaunchConfigurationType.setLaunchConfigurationName(launchConfigurationName);
  AsyncRequests.<CreateLaunchConfigurationType,CreateLaunchConfigurationResponseType>sendSync(configuration,createLaunchConfigurationType);
  action.info.setPhysicalResourceId(launchConfigurationName);
  action.info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(action.info.getPhysicalResourceId())));
  return action;
}
