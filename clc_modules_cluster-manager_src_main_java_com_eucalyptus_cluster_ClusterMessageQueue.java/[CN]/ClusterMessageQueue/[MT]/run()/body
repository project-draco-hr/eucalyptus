{
  while (!this.finished.get()) {
    final String clusterName=this.clusterName;
    try {
      final QueuedEvent event=this.msgQueue.poll(this.pollInterval,TimeUnit.MILLISECONDS);
      final long start=System.currentTimeMillis();
      if (event != null) {
        LOG.debug("-> Dequeued message of type " + event.getCallback().getClass().getSimpleName());
        try {
          final int queueLength=this.msgQueue.size();
          workers.execute(new Runnable(){
            @Override public void run(){
              Clusters.sendClusterEvent(clusterName,event);
              event.getCallback().waitForResponse();
              LOG.debug(EventRecord.here(event.getCallback().getClass(),EventType.QUEUE,clusterName,EventType.QUEUE_TIME.name(),Long.toString(start - event.getStartTime()),EventType.SERVICE_TIME.name(),Long.toString(System.currentTimeMillis() - start),EventType.QUEUE_LENGTH.name(),Long.toString(queueLength)));
            }
          }
);
        }
 catch (        final Throwable e) {
          LOG.debug(e,e);
        }
      }
    }
 catch (    final Throwable e) {
      LOG.error(e,e);
    }
  }
}
