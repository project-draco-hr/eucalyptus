{
  while (!this.finished.get()) {
    try {
      final long start=System.currentTimeMillis();
      final QueuedEvent event=this.msgQueue.poll(this.pollInterval,TimeUnit.MILLISECONDS);
      if (event != null) {
        LOG.trace("Dequeued message of type " + event.getCallback().getClass().getSimpleName());
        final Client nioClient=Clusters.getClusterClient(this.clusterName,event);
        final long msgStart=System.currentTimeMillis();
        try {
          final QueuedEventCallback q=event.getCallback();
          if (event instanceof QueuedLogEvent) {
            event.trigger(nioClient);
          }
 else {
            if ((q instanceof MultiClusterCallback) && !((MultiClusterCallback)q).isSplit()) {
              final MultiClusterCallback multi=(MultiClusterCallback)q;
              multi.prepare(event.getEvent());
            }
 else {
              event.trigger(nioClient);
            }
          }
        }
 catch (        final Exception e) {
          LOG.error(e);
          LOG.debug(e,e);
        }
        LOG.debug(String.format("[q=%04dms,send=%04dms,qlen=%02d] message type %s, cluster %s",msgStart - start,System.currentTimeMillis() - msgStart,this.msgQueue.size(),event.getCallback().getClass().getSimpleName(),this.clusterName));
      }
    }
 catch (    final Exception e) {
      LOG.error(e,e);
    }
  }
}
