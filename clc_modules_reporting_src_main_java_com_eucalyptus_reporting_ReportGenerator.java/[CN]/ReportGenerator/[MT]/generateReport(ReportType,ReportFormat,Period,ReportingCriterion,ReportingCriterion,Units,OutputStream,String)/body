{
  if (reportType == null)   throw new IllegalArgumentException("ReportType can't be null");
  if (criterion == null)   throw new IllegalArgumentException("Criterion can't be null");
  if (displayUnits == null)   displayUnits=Units.DEFAULT_DISPLAY_UNITS;
  final Map<String,String> params=new HashMap<String,String>();
  params.put("criterion",criterion.toString());
  params.put("timeUnit",displayUnits.getTimeUnit().toString());
  params.put("sizeUnit",displayUnits.getSizeUnit().toString());
  params.put("sizeTimeTimeUnit",displayUnits.getSizeTimeTimeUnit().toString());
  params.put("sizeTimeSizeUnit",displayUnits.getSizeTimeSizeUnit().toString());
  if (groupByCriterion != null) {
    params.put("groupByCriterion",groupByCriterion.toString());
  }
  final String jrxmlFilename=(groupByCriterion == null) ? reportType.getJrxmlFilename() : reportType.getNestedJrxmlFilename();
  final File jrxmlFile=new File(SubDirectory.REPORTS.toString() + File.separator + jrxmlFilename);
  @SuppressWarnings("rawtypes") ReportLineGenerator generator=null;
switch (reportType) {
case INSTANCE:
    generator=InstanceReportLineGenerator.getInstance();
  break;
case STORAGE:
generator=StorageReportLineGenerator.getInstance();
break;
case S3:
generator=S3ReportLineGenerator.getInstance();
break;
}
List<ReportLine> reportLines=null;
ReportKey key=new ReportKey(reportType,period,criterion,groupByCriterion,displayUnits,System.currentTimeMillis());
if (lineListMap.containsKey(key)) {
log.info("Gathered report data from cache:" + key);
reportLines=lineListMap.get(key);
}
 else {
while (lineListMap.size() >= DEFAULT_CACHE_SIZE) {
ReportKey oldestKey=null;
for (ReportKey oldKey : lineListMap.keySet()) {
if (oldestKey == null || oldestKey.getTimestampMs() > oldKey.getTimestampMs()) {
oldestKey=oldKey;
}
}
if (oldestKey != null) {
lineListMap.remove(oldestKey);
log.info("Removed report data from cache:" + oldestKey);
}
}
reportLines=generator.getReportLines(period,groupByCriterion,criterion,displayUnits,accountId);
log.info("Generated report data from db:" + key);
lineListMap.put(key,reportLines);
}
JRDataSource dataSource=new JRBeanCollectionDataSource(reportLines);
try {
JasperReport report=JasperCompileManager.compileReport(jrxmlFile.getAbsolutePath());
JasperPrint jasperPrint=JasperFillManager.fillReport(report,params,dataSource);
JRExporter exporter=format.getExporter();
exporter.setParameter(JRExporterParameter.OUTPUT_STREAM,out);
exporter.setParameter(JRExporterParameter.JASPER_PRINT,jasperPrint);
exporter.exportReport();
}
 catch (Exception ex) {
throw new RuntimeException(ex);
}
}
