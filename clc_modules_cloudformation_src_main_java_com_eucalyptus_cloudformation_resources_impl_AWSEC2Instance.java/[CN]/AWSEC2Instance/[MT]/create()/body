{
  RunInstancesType runInstancesType=new RunInstancesType();
  runInstancesType.setImageId(resourceProperties.getImageId());
  if (resourceProperties.getAvailabilityZone() != null && !resourceProperties.getAvailabilityZone().isEmpty()) {
    runInstancesType.setAvailabilityZone(resourceProperties.getAvailabilityZone());
  }
  if (resourceProperties.getBlockDeviceMappings() != null && !resourceProperties.getBlockDeviceMappings().isEmpty()) {
    runInstancesType.setBlockDeviceMapping(convertBlockDeviceMappings(resourceProperties.getBlockDeviceMappings()));
  }
  if (resourceProperties.getBlockDeviceMappings() != null) {
    runInstancesType.setDisableTerminate(resourceProperties.getDisableApiTermination());
  }
  if (resourceProperties.getEbsOptimized() != null) {
    runInstancesType.setEbsOptimized(resourceProperties.getEbsOptimized());
  }
  if (resourceProperties.getIamInstanceProfile() != null && !resourceProperties.getIamInstanceProfile().isEmpty()) {
    runInstancesType.setIamInstanceProfileName(resourceProperties.getIamInstanceProfile());
  }
  if (resourceProperties.getInstanceType() != null && !resourceProperties.getInstanceType().isEmpty()) {
    runInstancesType.setInstanceType(resourceProperties.getInstanceType());
  }
  if (resourceProperties.getKernelId() != null && !resourceProperties.getKernelId().isEmpty()) {
    runInstancesType.setKernelId(resourceProperties.getKernelId());
  }
  if (resourceProperties.getKeyName() != null && !resourceProperties.getKeyName().isEmpty()) {
    runInstancesType.setKeyName(resourceProperties.getKeyName());
  }
  if (resourceProperties.getMonitoring() != null) {
    runInstancesType.setMonitoring(resourceProperties.getMonitoring());
  }
  if (resourceProperties.getPlacementGroupName() != null && !resourceProperties.getPlacementGroupName().isEmpty()) {
    runInstancesType.setPlacementGroup(resourceProperties.getPlacementGroupName());
  }
  if (resourceProperties.getPrivateIpAddress() != null && !resourceProperties.getPrivateIpAddress().isEmpty()) {
    runInstancesType.setPrivateIpAddress(resourceProperties.getPrivateIpAddress());
  }
  if (resourceProperties.getRamdiskId() != null && !resourceProperties.getRamdiskId().isEmpty()) {
    runInstancesType.setRamdiskId(resourceProperties.getRamdiskId());
  }
  if (resourceProperties.getSecurityGroups() != null && !resourceProperties.getSecurityGroups().isEmpty()) {
    runInstancesType.setSecurityGroups(convertSecurityGroups(resourceProperties.getSecurityGroups()));
  }
  if (resourceProperties.getSubnetId() != null && !resourceProperties.getSubnetId().isEmpty()) {
    runInstancesType.setSubnetId(resourceProperties.getSubnetId());
  }
  if (resourceProperties.getUserData() != null && !resourceProperties.getUserData().isEmpty()) {
    runInstancesType.setUserData(resourceProperties.getUserData());
  }
  runInstancesType.setMinCount(1);
  runInstancesType.setMaxCount(1);
  final ComponentId componentId=ComponentIds.lookup(Eucalyptus.class);
  ServiceConfiguration configuration;
  if (componentId.isAlwaysLocal() || (BootstrapArgs.isCloudController() && componentId.isCloudLocal() && !componentId.isRegisterable())) {
    configuration=ServiceConfigurations.createEphemeral(componentId);
  }
 else {
    configuration=Topology.lookup(Eucalyptus.class);
  }
  runInstancesType.setEffectiveUserId(getEffectiveUserId());
  RunInstancesResponseType runInstancesResponseType=AsyncRequests.<RunInstancesType,RunInstancesResponseType>sendSync(configuration,runInstancesType);
  setPhysicalResourceId(runInstancesResponseType.getRsvInfo().getInstancesSet().get(0).getInstanceId());
  for (int i=0; i < 24; i++) {
    Thread.sleep(5000L);
    DescribeInstancesType describeInstancesType=new DescribeInstancesType();
    describeInstancesType.setInstancesSet(Lists.newArrayList(getPhysicalResourceId()));
    describeInstancesType.setEffectiveUserId(getEffectiveUserId());
    DescribeInstancesResponseType describeInstancesResponseType=AsyncRequests.<DescribeInstancesType,DescribeInstancesResponseType>sendSync(configuration,describeInstancesType);
    RunningInstancesItemType runningInstancesItemType=describeInstancesResponseType.getReservationSet().get(0).getInstancesSet().get(0);
    if ("running".equals(runningInstancesItemType.getStateName())) {
      resourceAttributes.setPrivateIp(new TextNode(runningInstancesItemType.getPrivateIpAddress()));
      resourceAttributes.setPublicIp(new TextNode(runningInstancesItemType.getIpAddress()));
      resourceAttributes.setAvailabilityZone(new TextNode(runningInstancesItemType.getPlacement()));
      resourceAttributes.setPrivateDnsName(new TextNode(runningInstancesItemType.getPrivateDnsName()));
      resourceAttributes.setPublicDnsName(new TextNode(runningInstancesItemType.getDnsName()));
      return;
    }
  }
  throw new Exception("Timeout");
}
