{
  if (this.dependsRemote != null) {
    return this.dependsRemote;
  }
 else {
    if (!Ats.from(this.getClass()).has(DependsRemote.class)) {
      this.dependsRemote=Lists.newArrayListWithExpectedSize(0);
    }
 else {
      this.dependsRemote=Lists.newArrayList();
      for (      final Class<?> compIdClass : Ats.from(this.getClass()).get(DependsRemote.class).value()) {
        if (!ComponentId.class.isAssignableFrom(compIdClass)) {
          LOG.error("Ignoring specified @Depends which does not use ComponentId");
        }
 else {
          try {
            this.dependsRemote.add((ComponentId)compIdClass.newInstance());
          }
 catch (          final InstantiationException ex) {
            LOG.error(ex,ex);
          }
catch (          final IllegalAccessException ex) {
            LOG.error(ex,ex);
          }
        }
      }
    }
    return this.dependsRemote;
  }
}
