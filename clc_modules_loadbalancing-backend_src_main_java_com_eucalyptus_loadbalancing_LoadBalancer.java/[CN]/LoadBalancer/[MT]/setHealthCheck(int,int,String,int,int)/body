{
  final String[] targetParts=target.split(":",2);
  final String canonicalizedTarget=targetParts.length == 2 ? targetParts[0].toUpperCase() + ":" + targetParts[1] : target;
  if (healthyThreshold < 0)   throw new IllegalArgumentException("healthyThreshold must be > 0");
  if (interval < 0)   throw new IllegalArgumentException("interval must be > 0");
  if (timeout < 0)   throw new IllegalArgumentException("timeout must be > 0");
  if (unhealthyThreshold < 0)   throw new IllegalArgumentException("unhealthyThreshold must be > 0");
  if (!Iterables.any(Lists.newArrayList("HTTP","HTTPS","TCP","SSL"),isPrefixOf(canonicalizedTarget)))   throw new IllegalArgumentException("target must starts with one of HTTP, HTTPS, TCP, SSL");
  if (canonicalizedTarget.startsWith("HTTP") || canonicalizedTarget.startsWith("HTTPS")) {
    int idxPort=canonicalizedTarget.indexOf(":");
    int idxPath=canonicalizedTarget.indexOf("/");
    if (idxPort < 0 || idxPath < 0 || (idxPath - idxPort) <= 1)     throw new IllegalArgumentException("Port and Path must be specified for HTTP");
    String port=canonicalizedTarget.substring(idxPort + 1,idxPath);
    try {
      int portNum=Integer.parseInt(port);
      if (!(portNum > 0 && portNum < 65536))       throw new Exception("invalid port number");
    }
 catch (    Exception ex) {
      throw new IllegalArgumentException("Invalid target specified",ex);
    }
  }
 else   if (canonicalizedTarget.startsWith("TCP") || canonicalizedTarget.startsWith("SSL")) {
    String portStr=trimPrefix(":",canonicalizedTarget.substring(3));
    try {
      int portNum=Integer.parseInt(portStr);
      if (!(portNum > 0 && portNum < 65536))       throw new Exception("invalid port number");
    }
 catch (    Exception ex) {
      throw new IllegalArgumentException("Invalid target specified",ex);
    }
  }
  this.healthConfig=new LoadBalancerHealthCheckConfig(healthyThreshold,interval,canonicalizedTarget,timeout,unhealthyThreshold);
  this.healthConfig.setLoadBalancer(this);
}
