{
  if (AuthorizationProvider.class.isAssignableFrom(candidate) && !Modifier.isAbstract(candidate.getModifiers()) && Modifier.isPublic(candidate.getModifiers())) {
    try {
      final AuthorizationProvider provider=(AuthorizationProvider)candidate.newInstance();
      AuthorizationProviders.register(provider);
    }
 catch (    InstantiationException|IllegalAccessException e) {
      logger.error("Error registering authorization provider class: " + candidate,e);
    }
    return true;
  }
  return false;
}
