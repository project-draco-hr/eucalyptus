{
  final Map<String,ReportingUser> users=Maps.newHashMap();
  final Map<String,String> accounts=Maps.newHashMap();
  final ReportingUser reportingUser=getUserById(users,createEvent.getUserId());
  if (reportingUser == null) {
    log.error("No user corresponding to event:" + createEvent.getUserId());
    return false;
  }
  final String accountName=getAccountNameById(accounts,reportingUser.getAccountId());
  if (accountName == null) {
    log.error("No account corresponding to user:" + reportingUser.getAccountId());
    return false;
  }
  if (!report.getZones().containsKey(createEvent.getAvailabilityZone())) {
    report.getZones().put(createEvent.getAvailabilityZone(),new AvailabilityZoneArtEntity());
  }
  final AvailabilityZoneArtEntity zone=report.getZones().get(createEvent.getAvailabilityZone());
  if (!zone.getAccounts().containsKey(accountName)) {
    zone.getAccounts().put(accountName,new AccountArtEntity());
  }
  final AccountArtEntity account=zone.getAccounts().get(accountName);
  if (!account.getUsers().containsKey(reportingUser.getName())) {
    account.getUsers().put(reportingUser.getName(),new UserArtEntity());
  }
  final UserArtEntity user=account.getUsers().get(reportingUser.getName());
  if (!user.getInstances().containsKey(createEvent.getUuid())) {
    final InstanceArtEntity instance=new InstanceArtEntity(createEvent.getInstanceType(),createEvent.getInstanceId(),usageEntity);
    user.getInstances().put(createEvent.getUuid(),instance);
    instance.getUsage().addInstanceCnt(1);
  }
  return true;
}
