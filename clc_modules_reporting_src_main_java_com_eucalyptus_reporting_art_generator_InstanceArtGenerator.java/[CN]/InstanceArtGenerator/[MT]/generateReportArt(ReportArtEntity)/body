{
  log.debug("GENERATING REPORT ART");
  EntityWrapper wrapper=EntityWrapper.get(ReportingInstanceCreateEvent.class);
  Map<String,InstanceArtEntity> instanceEntities=new HashMap<String,InstanceArtEntity>();
  Iterator iter=wrapper.scanWithNativeQuery("scanInstanceCreateEvents");
  while (iter.hasNext()) {
    ReportingInstanceCreateEvent createEvent=(ReportingInstanceCreateEvent)iter.next();
    if (!report.getZones().containsKey(createEvent.getAvailabilityZone())) {
      report.getZones().put(createEvent.getAvailabilityZone(),new AvailabilityZoneArtEntity());
    }
    AvailabilityZoneArtEntity zone=report.getZones().get(createEvent.getAvailabilityZone());
    if (!zone.getClusters().containsKey(createEvent.getClusterName())) {
      zone.getClusters().put(createEvent.getClusterName(),new ClusterArtEntity());
    }
    ClusterArtEntity cluster=zone.getClusters().get(createEvent.getClusterName());
    ReportingUser reportingUser=ReportingUserDao.getInstance().getReportingUser(createEvent.getUserId());
    if (reportingUser == null) {
      log.error("No user corresponding to event:" + createEvent.getUserId());
    }
    ReportingAccount reportingAccount=ReportingAccountDao.getInstance().getReportingAccount(reportingUser.getAccountId());
    if (reportingAccount == null) {
      log.error("No account corresponding to user:" + reportingUser.getAccountId());
    }
    if (!cluster.getAccounts().containsKey(reportingAccount.getName())) {
      cluster.getAccounts().put(reportingAccount.getName(),new AccountArtEntity());
    }
    AccountArtEntity account=cluster.getAccounts().get(reportingAccount.getName());
    if (!account.getUsers().containsKey(reportingUser.getName())) {
      account.getUsers().put(reportingUser.getName(),new UserArtEntity());
    }
    UserArtEntity user=account.getUsers().get(reportingUser.getName());
    if (!user.getInstances().containsKey(createEvent.getUuid())) {
      user.getInstances().put(createEvent.getUuid(),new InstanceArtEntity(createEvent.getInstanceType(),createEvent.getInstanceId()));
    }
    InstanceArtEntity instance=user.getInstances().get(createEvent.getUuid());
    instanceEntities.put(createEvent.getUuid(),instance);
  }
  Map<String,ReportingInstanceUsageEvent> lastEvents=new HashMap<String,ReportingInstanceUsageEvent>();
  iter=wrapper.scanWithNativeQuery("scanInstanceUsageEvents");
  while (iter.hasNext()) {
    ReportingInstanceUsageEvent usageEvent=(ReportingInstanceUsageEvent)iter.next();
    ReportingInstanceUsageEvent lastEvent=lastEvents.get(usageEvent.getUuid());
    lastEvents.put(usageEvent.getUuid(),usageEvent);
    InstanceArtEntity instance=instanceEntities.get(usageEvent.getUuid());
    if (instance == null) {
      log.error("instance usage without corresponding instance:" + usageEvent.getUuid());
      continue;
    }
    InstanceUsageArtEntity usage=instance.getUsage();
    usage.setInstanceCnt(1);
    if (lastEvent != null) {
      long lastMs=lastEvent.getTimestampMs();
      long timeMs=usage.getDurationMs();
      timeMs+=Math.min(report.getEndMs(),usageEvent.getTimestampMs()) - Math.max(report.getBeginMs(),lastEvent.getTimestampMs());
      usage.setDurationMs(usage.getDurationMs() + timeMs);
      Long rawValue=plus(usage.getDiskIoMegs(),subtract(usageEvent.getCumulativeDiskIoMegs(),lastEvent.getCumulativeDiskIoMegs()));
      usage.setDiskIoMegs(interpolate(report.getBeginMs(),report.getEndMs(),lastMs,usageEvent.getTimestampMs(),rawValue));
      rawValue=plus(usage.getNetIoWithinZoneInMegs(),subtract(usageEvent.getCumulativeNetIncomingMegsWithinZone(),lastEvent.getCumulativeNetIncomingMegsWithinZone()));
      usage.setNetIoWithinZoneInMegs(interpolate(report.getBeginMs(),report.getEndMs(),lastMs,usageEvent.getTimestampMs(),rawValue));
      rawValue=plus(usage.getNetIoBetweenZoneInMegs(),subtract(usageEvent.getCumulativeNetIncomingMegsBetweenZones(),lastEvent.getCumulativeNetIncomingMegsBetweenZones()));
      usage.setNetIoBetweenZoneInMegs(interpolate(report.getBeginMs(),report.getEndMs(),lastMs,usageEvent.getTimestampMs(),rawValue));
      rawValue=plus(usage.getNetIoPublicIpInMegs(),subtract(usageEvent.getCumulativeNetIncomingMegsPublic(),lastEvent.getCumulativeNetIncomingMegsPublic()));
      usage.setNetIoPublicIpInMegs(interpolate(report.getBeginMs(),report.getEndMs(),lastMs,usageEvent.getTimestampMs(),rawValue));
      rawValue=plus(usage.getNetIoWithinZoneOutMegs(),subtract(usageEvent.getCumulativeNetOutgoingMegsWithinZone(),lastEvent.getCumulativeNetOutgoingMegsWithinZone()));
      usage.setNetIoWithinZoneOutMegs(interpolate(report.getBeginMs(),report.getEndMs(),lastMs,usageEvent.getTimestampMs(),rawValue));
      rawValue=plus(usage.getNetIoBetweenZoneOutMegs(),subtract(usageEvent.getCumulativeNetOutgoingMegsBetweenZones(),lastEvent.getCumulativeNetOutgoingMegsBetweenZones()));
      usage.setNetIoBetweenZoneOutMegs(interpolate(report.getBeginMs(),report.getEndMs(),lastMs,usageEvent.getTimestampMs(),rawValue));
      rawValue=plus(usage.getNetIoPublicIpOutMegs(),subtract(usageEvent.getCumulativeNetOutgoingMegsPublic(),lastEvent.getCumulativeNetOutgoingMegsPublic()));
      usage.setNetIoPublicIpOutMegs(interpolate(report.getBeginMs(),report.getEndMs(),lastMs,usageEvent.getTimestampMs(),rawValue));
      long durationMs=Math.min(report.getEndMs(),usageEvent.getTimestampMs()) - Math.max(report.getBeginMs(),lastMs);
      if (usage.getCpuPercentAvg() == null && usageEvent.getCpuUtilizationPercent() != null) {
        usage.setCpuPercentAvg((double)usageEvent.getCpuUtilizationPercent());
        usage.addDurationMs(durationMs);
      }
 else       if (usage.getCpuPercentAvg() != null && usageEvent.getCpuUtilizationPercent() != null) {
        double newWeightedAverage=(usage.getCpuPercentAvg() * (double)usage.getDurationMs() + (double)usageEvent.getCpuUtilizationPercent() * (double)durationMs) / ((double)usage.getDurationMs() + (double)durationMs);
        usage.setCpuPercentAvg(newWeightedAverage);
        usage.addDurationMs(durationMs);
      }
    }
  }
  for (  String zoneName : report.getZones().keySet()) {
    AvailabilityZoneArtEntity zone=report.getZones().get(zoneName);
    UsageTotalsArtEntity zoneUsage=zone.getUsageTotals();
    for (    String clusterName : zone.getClusters().keySet()) {
      ClusterArtEntity cluster=zone.getClusters().get(clusterName);
      UsageTotalsArtEntity clusterUsage=cluster.getUsageTotals();
      for (      String accountName : cluster.getAccounts().keySet()) {
        AccountArtEntity account=cluster.getAccounts().get(accountName);
        UsageTotalsArtEntity accountUsage=account.getUsageTotals();
        for (        String userName : account.getUsers().keySet()) {
          UserArtEntity user=account.getUsers().get(userName);
          UsageTotalsArtEntity userUsage=user.getUsageTotals();
          for (          String instanceUuid : user.getInstances().keySet()) {
            InstanceArtEntity instance=user.getInstances().get(instanceUuid);
            updateUsageTotals(userUsage,instance);
            updateUsageTotals(accountUsage,instance);
            updateUsageTotals(clusterUsage,instance);
            updateUsageTotals(zoneUsage,instance);
          }
        }
      }
    }
  }
  return report;
}
