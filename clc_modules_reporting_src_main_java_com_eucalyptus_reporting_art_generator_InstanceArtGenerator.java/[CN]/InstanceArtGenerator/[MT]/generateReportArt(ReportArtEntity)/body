{
  log.debug("GENERATING REPORT ART");
  EntityWrapper wrapper=EntityWrapper.get(ReportingInstanceCreateEvent.class);
  Map<String,InstanceUsageArtEntity> usageEntities=new HashMap<String,InstanceUsageArtEntity>();
  Iterator iter=wrapper.scanWithNativeQuery("scanInstanceCreateEvents");
  while (iter.hasNext()) {
    ReportingInstanceCreateEvent createEvent=(ReportingInstanceCreateEvent)iter.next();
    if (!report.getZones().containsKey(createEvent.getAvailabilityZone())) {
      report.getZones().put(createEvent.getAvailabilityZone(),new AvailabilityZoneArtEntity());
    }
    AvailabilityZoneArtEntity zone=report.getZones().get(createEvent.getAvailabilityZone());
    ReportingUser reportingUser=ReportingUserDao.getInstance().getReportingUser(createEvent.getUserId());
    if (reportingUser == null) {
      log.error("No user corresponding to event:" + createEvent.getUserId());
    }
    ReportingAccount reportingAccount=ReportingAccountDao.getInstance().getReportingAccount(reportingUser.getAccountId());
    if (reportingAccount == null) {
      log.error("No account corresponding to user:" + reportingUser.getAccountId());
    }
    if (!zone.getAccounts().containsKey(reportingAccount.getName())) {
      zone.getAccounts().put(reportingAccount.getName(),new AccountArtEntity());
    }
    AccountArtEntity account=zone.getAccounts().get(reportingAccount.getName());
    if (!account.getUsers().containsKey(reportingUser.getName())) {
      account.getUsers().put(reportingUser.getName(),new UserArtEntity());
    }
    UserArtEntity user=account.getUsers().get(reportingUser.getName());
    if (!user.getInstances().containsKey(createEvent.getUuid())) {
      user.getInstances().put(createEvent.getUuid(),new InstanceArtEntity(createEvent.getInstanceType(),createEvent.getInstanceId()));
    }
    InstanceArtEntity instance=user.getInstances().get(createEvent.getUuid());
    instance.getUsage().addInstanceCnt(1);
    usageEntities.put(createEvent.getUuid(),instance.getUsage());
  }
  Map<UsageEventKey,ReportingInstanceUsageEvent> lastEvents=new HashMap<UsageEventKey,ReportingInstanceUsageEvent>();
  Map<String,StartEndTime> startEndTimes=new HashMap<String,StartEndTime>();
  iter=wrapper.scanWithNativeQuery("scanInstanceUsageEvents");
  while (iter.hasNext()) {
    ReportingInstanceUsageEvent usageEvent=(ReportingInstanceUsageEvent)iter.next();
    if (!startEndTimes.containsKey(usageEvent.getUuid())) {
      startEndTimes.put(usageEvent.getUuid(),new StartEndTime(Math.max(report.getBeginMs(),usageEvent.getTimestampMs()),Math.min(report.getEndMs(),usageEvent.getTimestampMs())));
    }
 else {
      StartEndTime seTime=startEndTimes.get(usageEvent.getUuid());
      seTime.setStartTimeMs(Math.max(report.getBeginMs(),Math.min(seTime.getStartTimeMs(),usageEvent.getTimestampMs())));
      seTime.setEndTimeMs(Math.min(report.getEndMs(),Math.max(seTime.getEndTimeMs(),usageEvent.getTimestampMs())));
    }
    UsageEventKey key=new UsageEventKey(usageEvent.getUuid(),usageEvent.getMetric(),usageEvent.getDimension());
    if (!lastEvents.containsKey(key)) {
      lastEvents.put(key,usageEvent);
      continue;
    }
    ReportingInstanceUsageEvent lastEvent=lastEvents.get(key);
    if (!usageEntities.containsKey(usageEvent.getUuid())) {
      log.error("usage event without corresponding instance:" + usageEvent.getUuid());
      continue;
    }
    InstanceUsageArtEntity usage=usageEntities.get(usageEvent.getUuid());
    String metric=usageEvent.getMetric();
    String dim=usageEvent.getDimension();
    if (usageEvent.getValue() == null || lastEvent.getValue() == null) {
      log.debug("Null metric values shouldn't occur");
      continue;
    }
    Double value=null;
    if (usageEvent.getValue() != null && lastEvent.getValue() != null) {
      value=usageEvent.getValue() - lastEvent.getValue();
    }
 else     if (usageEvent.getValue() != null) {
      value=usageEvent.getValue();
    }
    Double valueMB=(value == null) ? null : value / 1024 / 1024;
    if (metric.equals(METRIC_NET_IN_BYTES) && dim.equals(DIM_TOTAL)) {
      usage.addNetTotalInMegs(interpolate(report.getBeginMs(),report.getEndMs(),lastEvent.getTimestampMs(),usageEvent.getTimestampMs(),valueMB).longValue());
    }
 else     if (metric.equals(METRIC_NET_OUT_BYTES) && dim.equals(DIM_TOTAL)) {
      usage.addNetTotalOutMegs(interpolate(report.getBeginMs(),report.getEndMs(),lastEvent.getTimestampMs(),usageEvent.getTimestampMs(),valueMB).longValue());
    }
 else     if (metric.equals(METRIC_NET_IN_BYTES) && dim.equals(DIM_INTERNAL)) {
      usage.addNetInternalInMegs(interpolate(report.getBeginMs(),report.getEndMs(),lastEvent.getTimestampMs(),usageEvent.getTimestampMs(),valueMB).longValue());
    }
 else     if (metric.equals(METRIC_NET_OUT_BYTES) && dim.equals(DIM_INTERNAL)) {
      usage.addNetTotalInMegs(interpolate(report.getBeginMs(),report.getEndMs(),lastEvent.getTimestampMs(),usageEvent.getTimestampMs(),valueMB).longValue());
    }
 else     if (metric.equals(METRIC_DISK_IN_BYTES) && (dim.equals(DIM_ROOT) || dim.startsWith(DIM_EPHEMERAL))) {
      usage.addDiskInMegs(interpolate(report.getBeginMs(),report.getEndMs(),lastEvent.getTimestampMs(),usageEvent.getTimestampMs(),valueMB).longValue());
    }
 else     if (metric.equals(METRIC_DISK_OUT_BYTES) && (dim.equals(DIM_ROOT) || dim.startsWith(DIM_EPHEMERAL))) {
      usage.addDiskOutMegs(interpolate(report.getBeginMs(),report.getEndMs(),lastEvent.getTimestampMs(),usageEvent.getTimestampMs(),valueMB).longValue());
    }
 else     if (metric.equals(METRIC_CPU_USAGE_MS) && (dim.equals(DIM_DEFAULT))) {
      usage.addCpuUtilizationMs(interpolate(report.getBeginMs(),report.getEndMs(),lastEvent.getTimestampMs(),usageEvent.getTimestampMs(),value).longValue());
    }
 else {
      log.debug("Unrecognized metric for report:" + metric + "/"+ dim);
    }
    lastEvents.put(key,usageEvent);
  }
  for (  String uuid : startEndTimes.keySet()) {
    StartEndTime seTime=startEndTimes.get(uuid);
    if (usageEntities.containsKey(uuid)) {
      long durationMs=seTime.getEndTimeMs() - seTime.getStartTimeMs();
      usageEntities.get(uuid).setDurationMs(durationMs);
    }
 else {
      log.error("startEndTime without corresponding instance:" + uuid);
    }
  }
  for (  String zoneName : report.getZones().keySet()) {
    AvailabilityZoneArtEntity zone=report.getZones().get(zoneName);
    UsageTotalsArtEntity zoneUsage=zone.getUsageTotals();
    for (    String accountName : zone.getAccounts().keySet()) {
      AccountArtEntity account=zone.getAccounts().get(accountName);
      UsageTotalsArtEntity accountUsage=account.getUsageTotals();
      for (      String userName : account.getUsers().keySet()) {
        UserArtEntity user=account.getUsers().get(userName);
        UsageTotalsArtEntity userUsage=user.getUsageTotals();
        for (        String instanceUuid : user.getInstances().keySet()) {
          InstanceArtEntity instance=user.getInstances().get(instanceUuid);
          updateUsageTotals(userUsage,instance);
          updateUsageTotals(accountUsage,instance);
          updateUsageTotals(zoneUsage,instance);
        }
      }
    }
  }
  return report;
}
