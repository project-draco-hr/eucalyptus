{
  log.debug("Generating report ART");
  final Map<String,UsageCollator> usageCollators=findUsageEventsForReport(report);
  final Map<String,InstanceUsageArtEntity> usageEntities=Maps.newHashMap();
  foreachInstanceCreateEventInReverse(report.getEndMs(),new Predicate<ReportingInstanceCreateEvent>(){
    @Override public boolean apply(    final ReportingInstanceCreateEvent createEvent){
      if (!usageCollators.keySet().contains(createEvent.getUuid())) {
        return true;
      }
      if (!report.getZones().containsKey(createEvent.getAvailabilityZone())) {
        report.getZones().put(createEvent.getAvailabilityZone(),new AvailabilityZoneArtEntity());
      }
      final AvailabilityZoneArtEntity zone=report.getZones().get(createEvent.getAvailabilityZone());
      final ReportingUser reportingUser=getUserById(createEvent.getUserId());
      if (reportingUser == null) {
        log.error("No user corresponding to event:" + createEvent.getUserId());
        usageCollators.remove(createEvent.getUuid());
        return true;
      }
      final ReportingAccount reportingAccount=getAccountById(reportingUser.getAccountId());
      if (reportingAccount == null) {
        log.error("No account corresponding to user:" + reportingUser.getAccountId());
        usageCollators.remove(createEvent.getUuid());
        return true;
      }
      usageCollators.get(createEvent.getUuid()).created(report.getBeginMs(),createEvent.getTimestampMs());
      if (!zone.getAccounts().containsKey(reportingAccount.getName())) {
        zone.getAccounts().put(reportingAccount.getName(),new AccountArtEntity());
      }
      final AccountArtEntity account=zone.getAccounts().get(reportingAccount.getName());
      if (!account.getUsers().containsKey(reportingUser.getName())) {
        account.getUsers().put(reportingUser.getName(),new UserArtEntity());
      }
      final UserArtEntity user=account.getUsers().get(reportingUser.getName());
      if (!user.getInstances().containsKey(createEvent.getUuid())) {
        user.getInstances().put(createEvent.getUuid(),new InstanceArtEntity(createEvent.getInstanceType(),createEvent.getInstanceId()));
      }
      final InstanceArtEntity instance=user.getInstances().get(createEvent.getUuid());
      instance.getUsage().addInstanceCnt(1);
      usageEntities.put(createEvent.getUuid(),instance.getUsage());
      return !usageEntities.keySet().containsAll(usageCollators.keySet());
    }
  }
);
  for (  final Map.Entry<String,UsageCollator> usageCollatorEntry : usageCollators.entrySet()) {
    final String instanceUuid=usageCollatorEntry.getKey();
    final UsageCollator usageCollator=usageCollatorEntry.getValue();
    final InstanceUsageArtEntity usage=usageEntities.get(instanceUuid);
    if (usage == null) {
      log.error("Missing create event for instance: " + instanceUuid);
      continue;
    }
    usage.setDurationMs(usageCollator.getDuration(report.getBeginMs(),report.getEndMs()));
    for (    final Map.Entry<UsageMetricDimensionKey,UsageMetricDimension> metricsEntry : usageCollator.usage.entrySet()) {
      final UsageMetricDimensionKey key=metricsEntry.getKey();
      final UsageMetricDimension usageMetricDimension=metricsEntry.getValue();
      final String metric=key.metric;
      final String dim=key.dimension;
      ReportingInstanceUsageEvent lastEvent=null;
      for (      final ReportingInstanceUsageEvent usageEvent : usageMetricDimension) {
        if (lastEvent == null) {
          lastEvent=usageEvent;
          continue;
        }
        if (lastEvent.getSequenceNum() >= usageEvent.getSequenceNum()) {
          lastEvent=usageEvent.zero(lastEvent.getTimestampMs());
        }
        final Double value=usageEvent.getValue() - Objects.firstNonNull(lastEvent.getValue(),0d);
        final Double valueMB=value / 1024 / 1024;
        if (metric.equals(METRIC_NET_IN_BYTES) && dim.equals(DIM_TOTAL)) {
          usage.addNetTotalInMegs(interpolate(report.getBeginMs(),report.getEndMs(),lastEvent.getTimestampMs(),usageEvent.getTimestampMs(),valueMB).longValue());
        }
 else         if (metric.equals(METRIC_NET_OUT_BYTES) && dim.equals(DIM_TOTAL)) {
          usage.addNetTotalOutMegs(interpolate(report.getBeginMs(),report.getEndMs(),lastEvent.getTimestampMs(),usageEvent.getTimestampMs(),valueMB).longValue());
        }
 else         if (metric.equals(METRIC_DISK_IN_BYTES)) {
          usage.addDiskReadMegs(interpolate(report.getBeginMs(),report.getEndMs(),lastEvent.getTimestampMs(),usageEvent.getTimestampMs(),valueMB).longValue());
        }
 else         if (metric.equals(METRIC_DISK_OUT_BYTES)) {
          usage.addDiskWriteMegs(interpolate(report.getBeginMs(),report.getEndMs(),lastEvent.getTimestampMs(),usageEvent.getTimestampMs(),valueMB).longValue());
        }
 else         if (metric.equals(METRIC_DISK_READ_OPS)) {
          usage.addDiskReadOps(interpolate(report.getBeginMs(),report.getEndMs(),lastEvent.getTimestampMs(),usageEvent.getTimestampMs(),value).longValue());
        }
 else         if (metric.equals(METRIC_DISK_WRITE_OPS)) {
          usage.addDiskWriteOps(interpolate(report.getBeginMs(),report.getEndMs(),lastEvent.getTimestampMs(),usageEvent.getTimestampMs(),value).longValue());
        }
 else         if (metric.equals(METRIC_VOLUME_READ)) {
          usage.addDiskReadTime(interpolate(report.getBeginMs(),report.getEndMs(),lastEvent.getTimestampMs(),usageEvent.getTimestampMs(),value).longValue());
        }
 else         if (metric.equals(METRIC_VOLUME_WRITE)) {
          usage.addDiskWriteTime(interpolate(report.getBeginMs(),report.getEndMs(),lastEvent.getTimestampMs(),usageEvent.getTimestampMs(),value).longValue());
        }
 else         if (metric.equals(METRIC_CPU_USAGE_MS) && (dim.equals(DIM_DEFAULT))) {
          usage.addCpuUtilizationMs(interpolate(report.getBeginMs(),report.getEndMs(),lastEvent.getTimestampMs(),usageEvent.getTimestampMs(),value).longValue());
        }
 else {
          log.debug("Unrecognized metric for report:" + metric + "/"+ dim);
        }
        lastEvent=usageEvent;
      }
    }
  }
  for (  final AvailabilityZoneArtEntity zone : report.getZones().values()) {
    final UsageTotalsArtEntity zoneUsage=zone.getUsageTotals();
    for (    final AccountArtEntity account : zone.getAccounts().values()) {
      final UsageTotalsArtEntity accountUsage=account.getUsageTotals();
      for (      final UserArtEntity user : account.getUsers().values()) {
        final UsageTotalsArtEntity userUsage=user.getUsageTotals();
        for (        final InstanceArtEntity instance : user.getInstances().values()) {
          updateUsageTotals(userUsage,instance);
          updateUsageTotals(accountUsage,instance);
          updateUsageTotals(zoneUsage,instance);
        }
      }
    }
  }
  return report;
}
