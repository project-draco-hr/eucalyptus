{
  log.debug("GENERATING REPORT ART");
  final Map<String,InstanceUsageArtEntity> usageEntities=new HashMap<String,InstanceUsageArtEntity>();
  final Map<String,Long> instanceStartTimes=new HashMap<String,Long>();
  foreachInstanceCreateEvent(report.getEndMs(),new Predicate<ReportingInstanceCreateEvent>(){
    @Override public boolean apply(    final ReportingInstanceCreateEvent createEvent){
      if (!report.getZones().containsKey(createEvent.getAvailabilityZone())) {
        report.getZones().put(createEvent.getAvailabilityZone(),new AvailabilityZoneArtEntity());
      }
      AvailabilityZoneArtEntity zone=report.getZones().get(createEvent.getAvailabilityZone());
      ReportingUser reportingUser=ReportingUserDao.getInstance().getReportingUser(createEvent.getUserId());
      if (reportingUser == null) {
        log.error("No user corresponding to event:" + createEvent.getUserId());
      }
      ReportingAccount reportingAccount=ReportingAccountDao.getInstance().getReportingAccount(reportingUser.getAccountId());
      if (reportingAccount == null) {
        log.error("No account corresponding to user:" + reportingUser.getAccountId());
      }
      if (!zone.getAccounts().containsKey(reportingAccount.getName())) {
        zone.getAccounts().put(reportingAccount.getName(),new AccountArtEntity());
      }
      AccountArtEntity account=zone.getAccounts().get(reportingAccount.getName());
      if (!account.getUsers().containsKey(reportingUser.getName())) {
        account.getUsers().put(reportingUser.getName(),new UserArtEntity());
      }
      UserArtEntity user=account.getUsers().get(reportingUser.getName());
      if (!user.getInstances().containsKey(createEvent.getUuid())) {
        user.getInstances().put(createEvent.getUuid(),new InstanceArtEntity(createEvent.getInstanceType(),createEvent.getInstanceId()));
      }
      InstanceArtEntity instance=user.getInstances().get(createEvent.getUuid());
      instance.getUsage().addInstanceCnt(1);
      usageEntities.put(createEvent.getUuid(),instance.getUsage());
      instanceStartTimes.put(createEvent.getUuid(),createEvent.getTimestampMs());
      return true;
    }
  }
);
  final Map<InstanceMetricDimensionKey,TimestampValueAccumulator> accumulators=new HashMap<InstanceMetricDimensionKey,TimestampValueAccumulator>();
  foreachInstanceUsageEvent(report.getBeginMs() - USAGE_SEARCH_PERIOD,report.getEndMs() + USAGE_SEARCH_PERIOD,new Predicate<ReportingInstanceUsageEvent>(){
    @Override public boolean apply(    final ReportingInstanceUsageEvent usageEvent){
      InstanceMetricDimensionKey key=new InstanceMetricDimensionKey(usageEvent.getUuid(),usageEvent.getMetric(),usageEvent.getDimension());
      if (!accumulators.containsKey(key)) {
        accumulators.put(key,new TimestampValueAccumulator(report.getBeginMs(),report.getEndMs()));
      }
      if (usageEvent.getValue() != null) {
        TimestampValue tv=new TimestampValue(usageEvent.getTimestampMs(),usageEvent.getValue());
        accumulators.get(key).addTimestampValue(tv);
      }
      if (instanceStartTimes.containsKey(usageEvent.getUuid()) && (accumulators.get(key).lastBeforeBeginning == null || accumulators.get(key).firstAfterBeginning == null)) {
        accumulators.get(key).addTimestampValue(new TimestampValue(instanceStartTimes.get(usageEvent.getUuid()),0d));
      }
      return true;
    }
  }
);
  for (  InstanceMetricDimensionKey key : accumulators.keySet()) {
    TimestampValueAccumulator acc=accumulators.get(key);
    if (acc.firstAfterBeginning == null || acc.lastBeforeEnd == null)     continue;
    double val=0;
    val+=(acc.lastBeforeEnd.val - acc.firstAfterBeginning.val);
    if (acc.lastBeforeBeginning != null) {
      long durationMs=acc.firstAfterBeginning.timeMs - acc.lastBeforeBeginning.timeMs;
      double factor=((double)acc.firstAfterBeginning.timeMs - report.getBeginMs()) / durationMs;
      val+=(acc.firstAfterBeginning.val - acc.lastBeforeBeginning.val) * factor;
    }
    if (acc.firstAfterEnd != null) {
      long durationMs=acc.firstAfterEnd.timeMs - acc.lastBeforeEnd.timeMs;
      double factor=((double)report.getEndMs() - acc.lastBeforeEnd.timeMs) / durationMs;
      val+=(acc.firstAfterEnd.val - acc.lastBeforeEnd.val) * factor;
    }
    InstanceUsageArtEntity usageEntity=usageEntities.get(key.instanceUuid);
    addMetricValueToUsageEntity(usageEntity,key.metric,key.dimension,val);
    long startMs=acc.lastBeforeBeginning != null ? report.getBeginMs() : acc.firstAfterBeginning.timeMs;
    long endMs=acc.firstAfterEnd != null ? report.getEndMs() : acc.lastBeforeEnd.timeMs;
    usageEntity.setDurationMs(Math.max(usageEntity.getDurationMs(),endMs - startMs));
  }
  for (  final AvailabilityZoneArtEntity zone : report.getZones().values()) {
    final UsageTotalsArtEntity zoneUsage=zone.getUsageTotals();
    for (    final AccountArtEntity account : zone.getAccounts().values()) {
      final UsageTotalsArtEntity accountUsage=account.getUsageTotals();
      for (      final UserArtEntity user : account.getUsers().values()) {
        final UsageTotalsArtEntity userUsage=user.getUsageTotals();
        for (        final InstanceArtEntity instance : user.getInstances().values()) {
          updateUsageTotals(userUsage,instance);
          updateUsageTotals(accountUsage,instance);
          updateUsageTotals(zoneUsage,instance);
        }
      }
    }
  }
  return report;
}
