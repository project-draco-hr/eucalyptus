{
  final String ACCESSLOG_ROLE_POLICY_DOCUMENT="{\"Statement\":" + "[ {" + "\"Effect\":\"Allow\","+ "\"Action\":[\"s3:ListBucket\"],"+ "\"Resource\":\"arn:aws:s3:::BUCKETNAME_PLACEHOLDER\""+ " },{"+ "\"Action\": [\"s3:GetObject\", \"s3:PutObject\", \"s3:GetObjectAcl\", \"s3:PutObjectAcl\"],"+ "\"Effect\": \"Allow\","+ "\"Resource\": [\"arn:aws:s3:::BUCKETNAME_PLACEHOLDER/BUCKETPREFIX_PLACEHOLDER\"]"+ "}]}";
  AccessLogPolicyActivityResult result=new AccessLogPolicyActivityResult();
  result.setShouldRollback(false);
  if (accessLog == null || !accessLog.getEnabled())   return result;
  final String bucketName=accessLog.getS3BucketName();
  final String bucketPrefix=com.google.common.base.Objects.firstNonNull(accessLog.getS3BucketPrefix(),"");
  final String roleName=getRoleName(accountNumber,lbName);
  final String policyName=ACCESSLOG_ROLE_POLICY_NAME;
  try {
    final List<String> policies=EucalyptusActivityTasks.getInstance().listRolePolicies(roleName);
    if (policies.contains(policyName)) {
      EucalyptusActivityTasks.getInstance().deleteRolePolicy(roleName,policyName);
    }
  }
 catch (  final Exception ex) {
    ;
  }
  String policyDocument=ACCESSLOG_ROLE_POLICY_DOCUMENT.replace("BUCKETNAME_PLACEHOLDER",bucketName);
  if (bucketPrefix.length() > 0) {
    policyDocument=policyDocument.replace("BUCKETPREFIX_PLACEHOLDER",bucketPrefix + "/*");
  }
 else {
    policyDocument=policyDocument.replace("BUCKETPREFIX_PLACEHOLDER","*");
  }
  try {
    EucalyptusActivityTasks.getInstance().putRolePolicy(roleName,policyName,policyDocument);
    result.setRoleName(roleName);
    result.setPolicyName(policyName);
    result.setShouldRollback(true);
  }
 catch (  final Exception ex) {
    throw new LoadBalancingActivityException("failed to put role policy for loadbalancer vm's access to S3 buckets");
  }
  return result;
}
