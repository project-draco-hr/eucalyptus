{
  Preconditions.checkNotNull(event,"Event is required");
  final long timeInMs=getCurrentTimeMillis();
  try {
    final User user=lookupUser(event.getOwnerUserId());
    getReportingAccountCrud().createOrUpdateAccount(user.getAccount().getAccountNumber(),user.getAccount().getName());
    getReportingUserCrud().createOrUpdateUser(user.getUserId(),user.getAccount().getAccountNumber(),user.getName());
    final ReportingS3ObjectEventStore eventStore=getReportingS3ObjectEventStore();
switch (event.getAction()) {
case OBJECTCREATE:
      eventStore.insertS3ObjectCreateEvent(event.getBucketName(),event.getObjectKey(),toReportingVersion(event.getVersion()),event.getSize(),timeInMs,event.getOwnerUserId());
    break;
case OBJECTDELETE:
  eventStore.insertS3ObjectDeleteEvent(event.getBucketName(),event.getObjectKey(),toReportingVersion(event.getVersion()),timeInMs);
break;
}
}
 catch (AuthException e) {
LOG.error("Unable fire s3 object reporting event",e.getCause());
}
}
