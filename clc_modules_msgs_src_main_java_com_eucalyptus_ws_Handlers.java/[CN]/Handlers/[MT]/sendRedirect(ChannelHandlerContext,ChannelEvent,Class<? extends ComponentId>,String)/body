{
  e.getFuture().cancel();
  String redirectUri=null;
  if (Topology.isEnabled(compClass)) {
    final URI serviceUri=ServiceUris.remote(Topology.lookup(compClass));
    redirectUri=serviceUri.toASCIIString() + originalPath.replace(serviceUri.getPath(),"");
  }
 else   if (ComponentIds.lookup(compClass).isCloudLocal() && Topology.isEnabled(Eucalyptus.class)) {
    final URI serviceUri=ServiceUris.remote(Topology.lookup(Eucalyptus.class));
    redirectUri=serviceUri.toASCIIString().replace(Eucalyptus.INSTANCE.getServicePath(),"") + originalPath.replace(serviceUri.getPath(),"");
  }
 else   if (Topology.isEnabled(Eucalyptus.class)) {
    final URI serviceUri=ServiceUris.remote(Topology.lookup(Eucalyptus.class));
    redirectUri=serviceUri.toASCIIString() + originalPath.replace(serviceUri.getPath(),"");
  }
  HttpResponse response=null;
  if (redirectUri == null) {
    response=new DefaultHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.SERVICE_UNAVAILABLE);
    if (Logs.isDesbug()) {
      String errorMessage="Failed to lookup service for " + Components.lookup(compClass).getName() + " for path "+ originalPath+ ".\nCurrent state: \n\t"+ Joiner.on("\n\t").join(Topology.enabledServices());
      byte[] errorBytes=Exceptions.string(new ServiceStateException(errorMessage)).getBytes();
      response.setContent(ChannelBuffers.wrappedBuffer(errorBytes));
    }
  }
 else {
    response=new DefaultHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.TEMPORARY_REDIRECT);
    response.setHeader(HttpHeaders.Names.LOCATION,redirectUri);
  }
  final ChannelFuture writeFuture=Channels.future(ctx.getChannel());
  writeFuture.addListener(ChannelFutureListener.CLOSE);
  if (ctx.getChannel().isConnected()) {
    Channels.write(ctx,writeFuture,response);
  }
}
