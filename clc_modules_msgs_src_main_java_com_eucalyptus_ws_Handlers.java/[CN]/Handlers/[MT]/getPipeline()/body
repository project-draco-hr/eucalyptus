{
  final ChannelPipeline pipeline=new ChannelPipeline(){
    private final ChannelPipeline delegate=Channels.pipeline();
    @Override public void addFirst(    final String name,    final ChannelHandler handler){
      this.delegate.addFirst(name,Handlers.wrapHandler(handler));
    }
    @Override public void addLast(    final String name,    final ChannelHandler handler){
      this.delegate.addLast(name,Handlers.wrapHandler(handler));
    }
    @Override public void addBefore(    final String baseName,    final String name,    final ChannelHandler handler){
      this.delegate.addBefore(baseName,name,Handlers.wrapHandler(handler));
    }
    @Override public void addAfter(    final String baseName,    final String name,    final ChannelHandler handler){
      this.delegate.addAfter(baseName,name,Handlers.wrapHandler(handler));
    }
    @Override public void remove(    final ChannelHandler handler){
      this.delegate.remove(handler);
    }
    @Override public ChannelHandler remove(    final String name){
      return this.delegate.remove(name);
    }
    @Override public <T extends ChannelHandler>T remove(    final Class<T> handlerType){
      return this.delegate.remove(handlerType);
    }
    @Override public ChannelHandler removeFirst(){
      return this.delegate.removeFirst();
    }
    @Override public ChannelHandler removeLast(){
      return this.delegate.removeLast();
    }
    @Override public void replace(    final ChannelHandler oldHandler,    final String newName,    final ChannelHandler newHandler){
      this.delegate.replace(oldHandler,newName,newHandler);
    }
    @Override public ChannelHandler replace(    final String oldName,    final String newName,    final ChannelHandler newHandler){
      return this.delegate.replace(oldName,newName,newHandler);
    }
    @Override public <T extends ChannelHandler>T replace(    final Class<T> oldHandlerType,    final String newName,    final ChannelHandler newHandler){
      return this.delegate.replace(oldHandlerType,newName,newHandler);
    }
    @Override public ChannelHandler getFirst(){
      return this.delegate.getFirst();
    }
    @Override public ChannelHandler getLast(){
      return this.delegate.getLast();
    }
    @Override public ChannelHandler get(    final String name){
      return this.delegate.get(name);
    }
    @Override public <T extends ChannelHandler>T get(    final Class<T> handlerType){
      return this.delegate.get(handlerType);
    }
    @Override public ChannelHandlerContext getContext(    final ChannelHandler handler){
      return this.delegate.getContext(Handlers.wrapHandler(handler));
    }
    @Override public ChannelHandlerContext getContext(    final String name){
      return this.delegate.getContext(name);
    }
    @Override public ChannelHandlerContext getContext(    final Class<? extends ChannelHandler> handlerType){
      return this.delegate.getContext(handlerType);
    }
    @Override public void sendUpstream(    final ChannelEvent e){
      this.delegate.sendUpstream(e);
    }
    @Override public void sendDownstream(    final ChannelEvent e){
      this.delegate.sendDownstream(e);
    }
    @Override public Channel getChannel(){
      return this.delegate.getChannel();
    }
    @Override public ChannelSink getSink(){
      return this.delegate.getSink();
    }
    @Override public void attach(    final Channel channel,    final ChannelSink sink){
      this.delegate.attach(channel,sink);
    }
    @Override public boolean isAttached(){
      return this.delegate.isAttached();
    }
    @Override public Map<String,ChannelHandler> toMap(){
      return this.delegate.toMap();
    }
  }
;
  pipeline.addLast("ssl",Handlers.newSslHandler());
  pipeline.addLast("decoder",new NioHttpDecoder());
  pipeline.addLast("encoder",new HttpResponseEncoder());
  pipeline.addLast("chunkedWriter",new ChunkedWriteHandler());
  pipeline.addLast("bootstrap-fence",Handlers.bootstrapFence());
  pipeline.addLast("handler",new NioServerHandler());
  return pipeline;
}
