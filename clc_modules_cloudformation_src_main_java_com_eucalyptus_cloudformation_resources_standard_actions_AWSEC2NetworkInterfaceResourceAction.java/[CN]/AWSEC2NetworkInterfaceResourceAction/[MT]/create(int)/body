{
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
switch (stepNum) {
case 0:
    CreateNetworkInterfaceType createNetworkInterfaceType=new CreateNetworkInterfaceType();
  createNetworkInterfaceType.setEffectiveUserId(info.getEffectiveUserId());
createNetworkInterfaceType.setSubnetId(properties.getSubnetId());
if (!Strings.isNullOrEmpty(properties.getDescription())) {
createNetworkInterfaceType.setDescription(properties.getDescription());
}
if (!Strings.isNullOrEmpty(properties.getPrivateIpAddress())) {
createNetworkInterfaceType.setPrivateIpAddress(properties.getPrivateIpAddress());
}
if (properties.getPrivateIpAddresses() != null && !properties.getPrivateIpAddresses().isEmpty()) {
createNetworkInterfaceType.setPrivateIpAddressesSet(convertPrivateIpAddresses(properties.getPrivateIpAddresses()));
}
if (properties.getGroupSet() != null && !properties.getGroupSet().isEmpty()) {
createNetworkInterfaceType.setGroupSet(convertGroupSet(properties.getGroupSet()));
}
if (properties.getSecondaryPrivateIpAddressCount() != null) {
properties.setSecondaryPrivateIpAddressCount(properties.getSecondaryPrivateIpAddressCount());
}
CreateNetworkInterfaceResponseType createNetworkInterfaceResponseType=AsyncRequests.<CreateNetworkInterfaceType,CreateNetworkInterfaceResponseType>sendSync(configuration,createNetworkInterfaceType);
info.setPhysicalResourceId(createNetworkInterfaceResponseType.getNetworkInterface().getNetworkInterfaceId());
break;
case 1:
DescribeNetworkInterfacesType describeNetworkInterfacesType=new DescribeNetworkInterfacesType();
describeNetworkInterfacesType.setEffectiveUserId(info.getEffectiveUserId());
describeNetworkInterfacesType.setNetworkInterfaceIdSet(convertNetworkInterfaceIdSet(info.getPhysicalResourceId()));
DescribeNetworkInterfacesResponseType describeNetworkInterfacesResponseType=AsyncRequests.<DescribeNetworkInterfacesType,DescribeNetworkInterfacesResponseType>sendSync(configuration,describeNetworkInterfacesType);
if (describeNetworkInterfacesResponseType.getNetworkInterfaceSet() == null || describeNetworkInterfacesResponseType.getNetworkInterfaceSet().getItem() == null || describeNetworkInterfacesResponseType.getNetworkInterfaceSet().getItem().size() != 1) {
throw new ValidationErrorException("Network interface " + info.getPhysicalResourceId() + " either does not exist or is not unique");
}
String primaryIp=null;
boolean foundPrimary=false;
ArrayNode secondaryIpArrayNode=new ObjectMapper().createArrayNode();
for (NetworkInterfacePrivateIpAddressesSetItemType networkInterfacePrivateIpAddressesSetItemType : describeNetworkInterfacesResponseType.getNetworkInterfaceSet().getItem().get(0).getPrivateIpAddressesSet().getItem()) {
if (networkInterfacePrivateIpAddressesSetItemType.getPrimary()) {
if (foundPrimary) {
throw new ValidationErrorException("Network interface " + info.getPhysicalResourceId() + " has a non-unique primary private ip address");
}
 else {
primaryIp=networkInterfacePrivateIpAddressesSetItemType.getPrivateIpAddress();
foundPrimary=true;
}
}
 else {
secondaryIpArrayNode.add(networkInterfacePrivateIpAddressesSetItemType.getPrivateIpAddress());
}
}
if (!foundPrimary) {
throw new ValidationErrorException("Network interface " + info.getPhysicalResourceId() + " has no primary private ip address");
}
info.setPrimaryPrivateIpAddress(JsonHelper.getStringFromJsonNode(new TextNode(primaryIp)));
info.setSecondaryPrivateIpAddresses(JsonHelper.getStringFromJsonNode(secondaryIpArrayNode));
break;
case 2:
List<EC2Tag> tags=TagHelper.getEC2StackTags(info,getStackEntity());
if (properties.getTags() != null && !properties.getTags().isEmpty()) {
tags.addAll(properties.getTags());
}
CreateTagsType createTagsType=new CreateTagsType();
createTagsType.setEffectiveUserId(info.getEffectiveUserId());
createTagsType.setResourcesSet(Lists.newArrayList(info.getPhysicalResourceId()));
createTagsType.setTagSet(EC2Helper.createTagSet(tags));
AsyncRequests.<CreateTagsType,CreateTagsResponseType>sendSync(configuration,createTagsType);
break;
default :
throw new IllegalStateException("Invalid step " + stepNum);
}
}
