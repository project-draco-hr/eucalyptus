{
  Context ctx=Contexts.lookup();
  String cleanLocation=imageLocation.replaceAll("^/*","");
  this.imageLocation=cleanLocation;
  int index=cleanLocation.indexOf('/');
  if (index < 2 || index + 1 >= cleanLocation.length()) {
    throw new EucalyptusCloudException("Image registration failed:  Invalid image location: " + imageLocation);
  }
  String bucketName=cleanLocation.substring(0,index);
  String manifestKey=cleanLocation.substring(index + 1);
  final String manifestName=manifestKey.replaceAll(".*/","");
  this.manifest=ImageManifests.requestManifestData(ctx.getUserFullName(),bucketName,manifestKey);
  try {
    DocumentBuilder builder=XMLParser.getDocBuilder();
    this.inputSource=builder.parse(new ByteArrayInputStream(this.manifest.getBytes()));
  }
 catch (  Exception e) {
    throw new EucalyptusCloudException("Failed to read manifest file: " + bucketName + "/"+ manifestKey,e);
  }
  this.xpath=XPathFactory.newInstance().newXPath();
  this.xpathHelper=new Function<String,String>(){
    @Override public String apply(    String input){
      try {
        return (String)ImageManifest.this.xpath.evaluate(input,ImageManifest.this.inputSource,XPathConstants.STRING);
      }
 catch (      XPathExpressionException ex) {
        return null;
      }
    }
  }
;
  String temp;
  this.name=((temp=this.xpathHelper.apply("/manifest/image/name/text()")) != null) ? temp : manifestName.replace(".manifest.xml","");
  this.checksum=((temp=this.xpathHelper.apply("/manifest/image/digest/text()")) != null) ? temp : "0000000000000000000000000000000000000000";
  this.checksumType=((temp=this.xpathHelper.apply("/manifest/image/digest/@algorithm")) != null) ? temp : "SHA1";
  this.signature=((temp=this.xpathHelper.apply("//signature")) != null) ? temp : null;
  this.encryptedKey=this.xpathHelper.apply("//ec2_encrypted_key");
  this.encryptedIV=this.xpathHelper.apply("//ec2_encrypted_iv");
  Predicate<ImageMetadata.Type> checkIdType=new Predicate<ImageMetadata.Type>(){
    @Override public boolean apply(    ImageMetadata.Type input){
      String value=ImageManifest.this.xpathHelper.apply(input.getManifestPath());
      if ("yes".equals(value) || "true".equals(value) || manifestName.startsWith(input.getNamePrefix())) {
        return true;
      }
 else {
        return false;
      }
    }
  }
;
  String typeInManifest=this.xpathHelper.apply(ImageMetadata.TYPE_MANIFEST_XPATH);
  this.size=((temp=this.xpathHelper.apply("/manifest/image/size/text()")) != null) ? Long.parseLong(temp) : -1l;
  this.bundledSize=((temp=this.xpathHelper.apply("/manifest/image/bundled_size/text()")) != null) ? Long.parseLong(temp) : -1l;
  String arch=this.xpathHelper.apply("/manifest/machine_configuration/architecture/text()");
  this.architecture=ImageMetadata.Architecture.valueOf(((arch == null) ? "i386" : arch));
  try {
    NodeList ancestorNodes=(NodeList)xpath.evaluate("/manifest/image/ancestry/ancestor_ami_id/text()",inputSource,XPathConstants.NODESET);
    if (ancestorNodes != null) {
      for (int i=0; i < ancestorNodes.getLength(); i++) {
        for (        String ancestorId : ancestorNodes.item(i).getNodeValue().split(",")) {
          this.ancestors.add(ancestorId);
        }
      }
    }
  }
 catch (  XPathExpressionException ex) {
    LOG.error(ex,ex);
  }
  try {
    NodeList devMapList=(NodeList)this.xpath.evaluate("/manifest/machine_configuration/block_device_mapping/mapping",inputSource,XPathConstants.NODESET);
    for (int i=0; i < devMapList.getLength(); i++) {
      Node node=devMapList.item(i);
      NodeList children=node.getChildNodes();
      String virtualName=null;
      String device=null;
      for (int j=0; j < children.getLength(); j++) {
        Node childNode=children.item(j);
        String nodeType=childNode.getNodeName();
        if ("virtual".equals(nodeType) && childNode.getTextContent() != null) {
          virtualName=childNode.getTextContent();
        }
 else         if ("device".equals(nodeType) && childNode.getTextContent() != null) {
          device=childNode.getTextContent();
        }
      }
      if (virtualName != null && device != null) {
        if ("ami".equals(virtualName)) {
          continue;
        }
 else         if ("root".equals(virtualName)) {
          this.deviceMappings.add(new ManifestDeviceMapping(DeviceMappingType.root,virtualName,device));
        }
 else         if ("swap".equals(virtualName)) {
          this.deviceMappings.add(new ManifestDeviceMapping(DeviceMappingType.swap,virtualName,device));
        }
 else         if (virtualName.startsWith("ephemeral")) {
          this.deviceMappings.add(new ManifestDeviceMapping(DeviceMappingType.ephemeral,virtualName,device));
        }
      }
    }
  }
 catch (  XPathExpressionException ex) {
    LOG.error(ex,ex);
  }
  if ((checkIdType.apply(ImageMetadata.Type.kernel) || checkIdType.apply(ImageMetadata.Type.ramdisk)) && !ctx.isAdministrator()) {
    throw new EucalyptusCloudException("Only administrators can register kernel images.");
  }
 else {
    if (checkIdType.apply(ImageMetadata.Type.kernel)) {
      this.imageType=ImageMetadata.Type.kernel;
      this.platform=ImageMetadata.Platform.linux;
      this.virtualizationType=ImageMetadata.VirtualizationType.paravirtualized;
      this.kernelId=null;
      this.ramdiskId=null;
    }
 else     if (checkIdType.apply(ImageMetadata.Type.ramdisk)) {
      this.imageType=ImageMetadata.Type.ramdisk;
      this.platform=ImageMetadata.Platform.linux;
      this.virtualizationType=ImageMetadata.VirtualizationType.paravirtualized;
      this.kernelId=null;
      this.ramdiskId=null;
    }
 else {
      String kId=this.xpathHelper.apply(ImageMetadata.Type.kernel.getManifestPath());
      String rId=this.xpathHelper.apply(ImageMetadata.Type.ramdisk.getManifestPath());
      this.imageType=ImageMetadata.Type.machine;
      if (!manifestName.startsWith(ImageMetadata.Platform.windows.toString()) && !(kId != null && ImageMetadata.Platform.windows.name().equals(kId))) {
        this.platform=ImageMetadata.Platform.linux;
        this.virtualizationType=ImageMetadata.VirtualizationType.paravirtualized;
        if (kId != null && kId.startsWith(ImageMetadata.Type.kernel.getTypePrefix())) {
          ImageManifests.checkPrivileges(this.kernelId);
          this.kernelId=kId;
        }
 else {
          this.kernelId=null;
        }
        if (kId != null && kId.startsWith(ImageMetadata.Type.kernel.getTypePrefix())) {
          ImageManifests.checkPrivileges(this.ramdiskId);
          this.ramdiskId=rId;
        }
 else {
          this.ramdiskId=null;
        }
      }
 else {
        this.platform=ImageMetadata.Platform.windows;
        this.virtualizationType=ImageMetadata.VirtualizationType.hvm;
        this.kernelId=null;
        this.ramdiskId=null;
      }
    }
  }
}
