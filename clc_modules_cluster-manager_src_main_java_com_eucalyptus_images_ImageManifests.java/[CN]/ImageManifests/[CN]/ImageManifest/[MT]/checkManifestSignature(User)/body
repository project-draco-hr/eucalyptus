{
  int idxImgOpen=this.manifest.indexOf("<image>");
  int idxImgClose=this.manifest.lastIndexOf("</image>");
  if (idxImgOpen < 0 || idxImgClose < 0 || idxImgOpen > idxImgClose)   throw new EucalyptusCloudException("Manifest in wrong format");
  String image=this.manifest.substring(idxImgOpen,idxImgClose + "</image>".length());
  int idxConfOpen=this.manifest.indexOf("<machine_configuration>");
  int idxConfClose=this.manifest.lastIndexOf("</machine_configuration>");
  if (idxConfOpen < 0 || idxConfClose < 0 || idxConfOpen > idxConfClose)   throw new EucalyptusCloudException("Manifest in wrong format");
  String machineConfiguration=this.manifest.substring(idxConfOpen,idxConfClose + "</machine_configuration>".length());
  final String pad=(machineConfiguration + image);
  Predicate<Certificate> tryVerifyWithCert=new Predicate<Certificate>(){
    @Override public boolean apply(    Certificate checkCert){
      if (checkCert instanceof X509Certificate) {
        X509Certificate cert=(X509Certificate)checkCert;
        Signature sigVerifier;
        try {
          sigVerifier=Signature.getInstance("SHA1withRSA");
          PublicKey publicKey=cert.getPublicKey();
          sigVerifier.initVerify(publicKey);
          sigVerifier.update((pad).getBytes());
          return sigVerifier.verify(hexToBytes(ImageManifest.this.signature));
        }
 catch (        Exception ex) {
          LOG.error(ex,ex);
          return false;
        }
      }
 else {
        return false;
      }
    }
  }
;
  Function<com.eucalyptus.auth.principal.Certificate,X509Certificate> activeEuareToX509=new Function<com.eucalyptus.auth.principal.Certificate,X509Certificate>(){
    @Override public X509Certificate apply(    com.eucalyptus.auth.principal.Certificate input){
      return input.isActive() ? input.getX509Certificate() : null;
    }
  }
;
  try {
    if (Iterables.any(Lists.transform(user.getCertificates(),activeEuareToX509),tryVerifyWithCert)) {
      return true;
    }
 else     if (tryVerifyWithCert.apply(SystemCredentials.lookup(Eucalyptus.class).getCertificate())) {
      return true;
    }
 else {
      if (Iterables.any(Accounts.lookupAccountCertificatesByAccountNumber(user.getAccountNumber()),tryVerifyWithCert)) {
        return true;
      }
      for (      Partition p : Partitions.list()) {
        if (tryVerifyWithCert.apply(p.getNodeCertificate()))         return true;
      }
    }
  }
 catch (  AuthException e) {
    throw new EucalyptusCloudException("Invalid Manifest: Failed to verify signature because of missing (deleted?) user certificate.",e);
  }
  return false;
}
