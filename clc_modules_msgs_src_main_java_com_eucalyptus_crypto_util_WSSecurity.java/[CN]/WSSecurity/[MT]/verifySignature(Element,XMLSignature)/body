{
  final SecurityTokenReference secRef=WSSecurity.getSecurityTokenReference(sig.getKeyInfo());
  final Reference tokenRef=secRef.getReference();
  Element bstDirect=WSSecurityUtil.getElementByWsuId(securityNode.getOwnerDocument(),tokenRef.getURI());
  if (bstDirect == null) {
    bstDirect=WSSecurityUtil.getElementByGenId(securityNode.getOwnerDocument(),tokenRef.getURI());
    if (bstDirect == null) {
      throw new WSSecurityException(WSSecurityException.INVALID_SECURITY,"noCert");
    }
  }
  BinarySecurity token=new BinarySecurity(bstDirect);
  String type=token.getValueType();
  X509Certificate cert=null;
  try {
    if (useBc) {
      Node node=bstDirect.getFirstChild();
      String certStr=("-----BEGIN CERTIFICATE-----\n" + (node == null || !(node instanceof Text) ? null : ((Text)node).getData()) + "\n-----END CERTIFICATE-----\n");
      ByteArrayInputStream pemByteIn=new ByteArrayInputStream(certStr.getBytes());
      PEMReader in=new PEMReader(new InputStreamReader(pemByteIn));
      try {
        cert=(X509Certificate)in.readObject();
      }
 catch (      Throwable e) {
        LOG.error(e,e);
      }
    }
 else {
      X509Security x509=new X509Security(bstDirect);
      byte[] bstToken=x509.getToken();
      CertificateFactory factory=getCertificateFactory();
      cert=(X509Certificate)factory.generateCertificate(new ByteArrayInputStream(bstToken));
    }
  }
 catch (  Exception e) {
    LOG.error(e,e);
    throw new WSSecurityException(WSSecurityException.UNSUPPORTED_SECURITY_TOKEN,"unsupportedBinaryTokenType",new Object[]{type});
  }
  if (!sig.checkSignatureValue(cert)) {
    throw new WSSecurityException(WSSecurityException.FAILED_CHECK);
  }
  verifyReferences(sig);
  return cert;
}
