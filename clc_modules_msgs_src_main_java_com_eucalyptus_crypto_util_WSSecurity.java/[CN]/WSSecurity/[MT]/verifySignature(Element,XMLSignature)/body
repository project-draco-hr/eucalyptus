{
  final SecurityTokenReference secRef=WSSecurity.getSecurityTokenReference(sig.getKeyInfo());
  final Reference tokenRef=secRef.getReference();
  Element bstDirect=WSSecurityUtil.findElementById(securityNode.getOwnerDocument(),tokenRef.getURI(),true);
  if (bstDirect == null) {
    throw new WSSecurityException(WSSecurityException.INVALID_SECURITY,"noCert");
  }
  BinarySecurity token=new BinarySecurity(bstDirect);
  String type=token.getValueType();
  final X509Certificate cert;
  try {
    if (useBc) {
      Node node=bstDirect.getFirstChild();
      String certStr=("-----BEGIN CERTIFICATE-----\n" + (node == null || !(node instanceof Text) ? null : ((Text)node).getData()) + "\n-----END CERTIFICATE-----\n");
      cert=PEMFiles.getCert(certStr.getBytes());
    }
 else {
      final X509Security x509=new X509Security(bstDirect);
      final byte[] bstToken=x509.getToken();
      cert=cache.get(new CertificateKey(bstToken),new Callable<X509Certificate>(){
        @Override public X509Certificate call() throws Exception {
          CertificateFactory factory=getCertificateFactory();
          return (X509Certificate)factory.generateCertificate(new ByteArrayInputStream(bstToken));
        }
      }
);
    }
  }
 catch (  Exception e) {
    LOG.error(e,e);
    throw new WSSecurityException(WSSecurityException.UNSUPPORTED_SECURITY_TOKEN,"unsupportedBinaryTokenType",new Object[]{type});
  }
  if (!sig.checkSignatureValue(cert)) {
    throw new WSSecurityException(WSSecurityException.FAILED_CHECK);
  }
  verifyReferences(sig);
  return cert;
}
