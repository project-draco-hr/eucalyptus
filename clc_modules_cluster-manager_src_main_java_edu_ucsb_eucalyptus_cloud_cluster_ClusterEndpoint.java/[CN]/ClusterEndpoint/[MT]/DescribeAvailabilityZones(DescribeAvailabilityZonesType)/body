{
  DescribeAvailabilityZonesResponseType reply=(DescribeAvailabilityZonesResponseType)request.getReply();
  if (request.isAdministrator() && request.getAvailabilityZoneSet().lastIndexOf("help") == 0) {
    reply.getAvailabilityZoneInfo().addAll(this.addHelpInfo());
    return reply;
  }
  Collection<Cluster> clusterList=Clusters.getInstance().getEntries();
  for (  Cluster c : clusterList) {
    reply.getAvailabilityZoneInfo().add(new ClusterInfoType(c.getConfiguration().getName(),c.getConfiguration().getHostName()));
    List<String> args=request.getAvailabilityZoneSet();
    NavigableSet<String> tagList=new ConcurrentSkipListSet<String>(request.getAvailabilityZoneSet());
    if (tagList.size() == 1)     tagList=c.getNodeTags();
 else     tagList.retainAll(c.getNodeTags());
    if (tagList.isEmpty())     continue;
    if (request.isAdministrator() && args.lastIndexOf("verbose") == 0)     reply.getAvailabilityZoneInfo().addAll(this.addSystemInfo(c));
 else     if (request.isAdministrator() && args.lastIndexOf("certs") == 0)     for (    String tag : tagList)     reply.getAvailabilityZoneInfo().addAll(this.addCertInfo(tag,c));
 else     if (request.isAdministrator() && args.lastIndexOf("logs") == 0)     for (    String tag : tagList)     reply.getAvailabilityZoneInfo().addAll(this.addLogInfo(tag,c));
 else     if (request.isAdministrator() && args.lastIndexOf("coredump") == 0)     reply.getAvailabilityZoneInfo().addAll(this.dumpState());
  }
  return reply;
}
