{
  final Object o=event.getMessage();
  if (o instanceof MappingHttpMessage) {
    final MappingHttpMessage httpRequest=(MappingHttpMessage)o;
    SOAPEnvelope envelope=httpRequest.getSoapEnvelope();
    final StAXOMBuilder doomBuilder=new StAXOMBuilder(DOOMAbstractFactory.getOMFactory(),httpRequest.getSoapEnvelope().getXMLStreamReader());
    final OMElement elem=doomBuilder.getDocumentElement();
    elem.build();
    final Document doc=((Element)elem).getOwnerDocument();
    final Element env=((Element)elem);
    final SOAPConstants soapConstants=WSSecurityUtil.getSOAPConstants(env);
    final Element soapHeaderElement=(Element)WSSecurityUtil.getDirectChildElement(doc.getFirstChild(),soapConstants.getHeaderQName().getLocalPart(),soapConstants.getEnvelopeURI());
    final Element securityNode=(Element)WSSecurityUtil.getDirectChildElement(soapHeaderElement,WSConstants.WSSE_LN,WSConstants.WSSE_NS);
    final Element signatureNode=(Element)WSSecurityUtil.getDirectChildElement(securityNode,WSConstants.SIG_LN,WSConstants.SIG_NS);
    XMLSignature sig=null;
    try {
      sig=new XMLSignature((Element)signatureNode,null);
    }
 catch (    XMLSecurityException e2) {
      throw new WSSecurityException(WSSecurityException.FAILED_CHECK,"noXMLSig",null,e2);
    }
    sig.addResourceResolver(EnvelopeIdResolver.getInstance());
    KeyInfo info=sig.getKeyInfo();
    if (info != null) {
      Node node=WSSecurityUtil.getDirectChild(info.getElement(),SecurityTokenReference.SECURITY_TOKEN_REFERENCE,WSConstants.WSSE_NS);
      if (node == null) {
        throw new WSSecurityException(WSSecurityException.INVALID_SECURITY,"unsupportedKeyInfo");
      }
      SecurityTokenReference secRef=new SecurityTokenReference((Element)node);
      if (secRef.containsReference()) {
        Reference tokenRef=secRef.getReference();
        Element bstDirect=WSSecurityUtil.getElementByWsuId(securityNode.getOwnerDocument(),tokenRef.getURI());
        if (bstDirect == null) {
          bstDirect=WSSecurityUtil.getElementByGenId(securityNode.getOwnerDocument(),tokenRef.getURI());
          if (bstDirect == null) {
            throw new WSSecurityException(WSSecurityException.INVALID_SECURITY,"noCert");
          }
        }
        BinarySecurity token=new BinarySecurity(bstDirect);
        String type=token.getValueType();
        X509Security x509=null;
        X509Certificate cert=null;
        try {
          x509=new X509Security(bstDirect);
          byte[] bstToken=x509.getToken();
          CertificateFactory factory=getCertificateFactory();
          cert=(X509Certificate)factory.generateCertificate(new ByteArrayInputStream(bstToken));
        }
 catch (        Exception e) {
          LOG.error(e,e);
          throw new WSSecurityException(WSSecurityException.UNSUPPORTED_SECURITY_TOKEN,"unsupportedBinaryTokenType",new Object[]{type});
        }
        if (!sig.checkSignatureValue(cert)) {
          throw new WSSecurityException(WSSecurityException.FAILED_CHECK);
        }
        String userName=Credentials.Users.getUserName(cert);
        User user=Credentials.getUser(userName);
        httpRequest.setUser(user);
      }
    }
  }
}
