{
  if (!ReportingService.DATA_COLLECTION_ENABLED) {
    ReportingService.faultDisableReportingServiceIfNecessary();
    LOG.trace("Reporting service data collection disabled....SnapShotEvent discarded");
    return;
  }
  Preconditions.checkNotNull(event,"Event is required");
  final long timeInMs=getCurrentTimeMillis();
  try {
    final User user=lookupUser(event.getUserId());
    getReportingAccountCrud().createOrUpdateAccount(user.getAccountNumber(),lookupAccountAliasById(user.getAccountNumber()));
    getReportingUserCrud().createOrUpdateUser(user.getUserId(),user.getAccountNumber(),user.getName());
    final ReportingVolumeSnapshotEventStore eventStore=getReportingVolumeSnapshotEventStore();
switch (event.getActionInfo().getAction()) {
case SNAPSHOTCREATE:
      CreateActionInfo eventActionInfo=(CreateActionInfo)event.getActionInfo();
    eventStore.insertCreateEvent(event.getUuid(),eventActionInfo.getVolumeUuid(),event.getSnapshotId(),timeInMs,event.getUserId(),eventActionInfo.getSize());
  break;
case SNAPSHOTDELETE:
eventStore.insertDeleteEvent(event.getUuid(),timeInMs);
break;
}
}
 catch (AuthException e) {
LOG.error("Unable fire snap shot reporting event",e.getCause());
}
}
