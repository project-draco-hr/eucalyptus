{
  if (e instanceof MessageEvent) {
    Object message=((MessageEvent)e).getMessage();
    if (message instanceof HttpRequest) {
      HttpRequest request=((HttpRequest)message);
      if (HttpMethod.GET.equals(request.getMethod())) {
        MappingHttpResponse response=new MappingHttpResponse(request.getProtocolVersion(),HttpResponseStatus.OK);
        String resp="";
        for (        Component c : Component.values()) {
          resp+=String.format("name=%-20.20s enabled=%-10.10s local=%-10.10s\n",c.name(),c.isEnabled(),c.isLocal());
        }
        ChannelBuffer buf=ChannelBuffers.copiedBuffer(resp.getBytes());
        response.setContent(buf);
        response.addHeader(HttpHeaders.Names.CONTENT_LENGTH,String.valueOf(buf.readableBytes()));
        response.addHeader(HttpHeaders.Names.CONTENT_TYPE,"text/plain; charset=UTF-8");
        ChannelFuture writeFuture=ctx.getChannel().write(response);
        writeFuture.addListener(ChannelFutureListener.CLOSE);
      }
 else       if (!initialized) {
        initialize(ctx,request);
      }
 else {
        ChannelFuture writeFuture=ctx.getChannel().write(new DefaultHttpResponse(request.getProtocolVersion(),HttpResponseStatus.NOT_ACCEPTABLE));
        writeFuture.addListener(ChannelFutureListener.CLOSE);
      }
    }
  }
}
