{
  InetSocketAddress addr=(InetSocketAddress)ctx.getChannel().getRemoteAddress();
  LOG.info(LogUtil.subheader("Using " + addr.getHostName() + " as the database address."));
  try {
    this.prepareComponent(Components.delegate.db,addr);
    this.prepareComponent(Components.delegate.dns,addr);
    this.prepareComponent(Components.delegate.eucalyptus,addr);
    this.prepareComponent(Components.delegate.cluster,addr);
    this.prepareComponent(Components.delegate.jetty,addr);
    HeartbeatType msg=(HeartbeatType)request.getMessage();
    LOG.info(LogUtil.header("Got heartbeat event: " + LogUtil.dumpObject(msg)));
    for (    HeartbeatComponentType component : msg.getComponents()) {
      LOG.info(LogUtil.subheader("Registering local component: " + LogUtil.dumpObject(component)));
      System.setProperty("euca." + component.getComponent() + ".name",component.getName());
      Components.lookup(component.getName()).buildService();
      initializedComponents.add(component.getComponent());
    }
    if (!initializedComponents.contains(Components.delegate.storage.name())) {
      Components.lookup(Components.delegate.storage).markDisabled();
    }
    if (!initializedComponents.contains(Components.delegate.walrus.name())) {
      Components.lookup(Components.delegate.walrus).markDisabled();
    }
    if (!initializedComponents.contains(Components.delegate.vmwarebroker.name())) {
      Components.lookup(Components.delegate.vmwarebroker).markDisabled();
    }
    System.setProperty("euca.db.password",Hmacs.generateSystemSignature());
    System.setProperty("euca.db.url",String.format("jdbc:mysql://%s:%d/eucalyptus",addr.getHostName(),8777));
    try {
      GroovyUtil.evaluateScript("after_database.groovy");
    }
 catch (    ScriptExecutionFailedException e1) {
      LOG.debug(e1,e1);
      System.exit(123);
    }
    boolean foundDb=false;
    try {
      foundDb=NetworkUtil.testReachability(addr.getHostName());
      LOG.debug("Initializing SSL just in case: " + SslSetup.class);
      foundDb=true;
    }
 catch (    Throwable e) {
      foundDb=false;
    }
    if (foundDb) {
      HttpResponse response=new DefaultHttpResponse(request.getProtocolVersion(),HttpResponseStatus.OK);
      ChannelFuture writeFuture=ctx.getChannel().write(response);
      writeFuture.addListener(ChannelFutureListener.CLOSE);
      initialized.set(true);
      if (this.channel != null) {
        this.channel.close();
      }
    }
 else {
      HttpResponse response=new DefaultHttpResponse(request.getProtocolVersion(),HttpResponseStatus.NOT_ACCEPTABLE);
      ChannelFuture writeFuture=ctx.getChannel().write(response);
      writeFuture.addListener(ChannelFutureListener.CLOSE);
    }
  }
 catch (  ServiceRegistrationException e) {
    LOG.error(e,e);
    System.exit(123);
  }
catch (  NoSuchElementException e) {
    LOG.error(e,e);
    System.exit(123);
  }
}
