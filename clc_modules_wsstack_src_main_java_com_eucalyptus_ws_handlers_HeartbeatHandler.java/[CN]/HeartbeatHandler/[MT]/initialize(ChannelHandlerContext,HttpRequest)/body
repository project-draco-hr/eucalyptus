{
  ByteArrayInputStream bis=new ByteArrayInputStream(request.getContent().toByteBuffer().array());
  Properties props=new Properties();
  props.load(bis);
  InetSocketAddress addr=(InetSocketAddress)ctx.getChannel().getRemoteAddress();
  LOG.info(LogUtil.subheader("Using " + addr.getHostName() + " as the database address."));
  Component.db.setHostAddress(addr.getHostName());
  Component.dns.setHostAddress(addr.getHostName());
  Component.eucalyptus.setHostAddress(addr.getHostName());
  Component.cluster.setHostAddress(addr.getHostName());
  Component.jetty.setHostAddress(addr.getHostName());
  System.setProperty("euca.db.password","");
  System.setProperty("euca.db.url",Component.db.getUri().toASCIIString());
  boolean foundDb=false;
  try {
    foundDb=NetworkUtil.testReachability(addr.getHostName());
    Credentials.getEntityWrapper();
    foundDb=true;
  }
 catch (  Throwable e) {
    foundDb=false;
  }
  if (foundDb) {
    ChannelFuture writeFuture=ctx.getChannel().write(new DefaultHttpResponse(request.getProtocolVersion(),HttpResponseStatus.OK));
    writeFuture.addListener(ChannelFutureListener.CLOSE);
    writeFuture.addListener(new ChannelFutureListener(){
      @Override public void operationComplete(      ChannelFuture future) throws Exception {
        channel.close();
      }
    }
);
    initialized=true;
  }
 else {
    ChannelFuture writeFuture=ctx.getChannel().write(new DefaultHttpResponse(request.getProtocolVersion(),HttpResponseStatus.NOT_ACCEPTABLE));
    writeFuture.addListener(ChannelFutureListener.CLOSE);
  }
}
