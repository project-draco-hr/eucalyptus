def download(self, dest_fileobj, chunk_size=None, connection_timeout=30, max_attempts=2, max_buffer_size=None):
    "\n        Attempts to download/get() self.get_url and write to 'dest_fileobj'\n        Attempts to validate the downloaded content against self.digest using\n        self.digest_algorithm. If self.digest is not provided and attempt\n        to compare the calcluated digest against content_md5 or the etag is\n        done. Failure to match self.digest or content_md5 will result in\n        an error, while failure to match the etag will only print a warning.\n        :param dest_fileobj: the file like object to write/download to\n        :param chunk_size: the size to read/write per iteration\n        :param connection_timeout: int timeout for establishing connection\n        :param max_attempts: attempts to connect upon failure\n        :param max_buffer_size: size in bytes\n        returns bytes downloaded/written\n        "
    attempt = 0
    response = None
    max_buffer_size = (max_buffer_size or self.max_buffer_size)
    self.log.debug('Downloading part:{0}'.format(self.debug_url))
    chunk_size = (chunk_size or self.chunk_size)
    digest = _get_digest_algorithm_from_string(self.digest_algorithm)
    while (attempt < max_attempts):
        attempt += 1
        part_buffer = ''
        content_length = None
        bytes = 0
        self.written_digest = None
        response = self._get_respsonse(url=self.get_url, max_attempts=max_attempts, connection_timeout=connection_timeout)
        try:
            content_length = response.headers.get('content-length', None)
            if (content_length is not None):
                content_length = long(content_length)
            if (content_length <= max_buffer_size):
                for chunk in response.iter_content(chunk_size):
                    part_buffer += chunk
                    digest.update(chunk)
                    bytes += len(chunk)
            else:
                for chunk in response.iter_content(chunk_size):
                    dest_fileobj.write(chunk)
                    digest.update(chunk)
                    bytes += len(chunk)
                dest_fileobj.flush()
            if (bytes != content_length):
                raise ValueError('Part:"{0}". Expected Size:"{1}", Downloaded:"{2}"'.format(self.part_index, content_length, bytes))
            self.bytes_written = bytes
            self.written_digest = self._validate_written_digest(response=response, digest=digest)
            if part_buffer:
                dest_fileobj.write(part_buffer)
                dest_fileobj.flush()
        except ValueError as VE:
            if (attempt <= max_attempts):
                raise
            else:
                self.log.warn('Attempt:{0}/{1}, {2}'.format(attempt, max_attempts, str(VE)))
            time.sleep(10)
        else:
            return bytes
