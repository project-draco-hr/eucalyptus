{
  final Set<String> currentZones=Sets.newHashSet(this.availabilityZones);
  final Set<String> newZones=Sets.newHashSet(availabilityZones);
  if (!currentZones.equals(newZones)) {
    final String removedZones=Joiner.on(",").join(Sets.difference(currentZones,newZones));
    final String addedZones=Joiner.on(",").join(Sets.difference(newZones,currentZones));
    scalingCauses.add(new GroupScalingCause(String.format("a user request removed the zones %1$s from this AutoScalingGroup making them invalid",removedZones)));
    scalingCauses.add(new GroupScalingCause(String.format("a user request added the zones %1$s to this AutoScalingGroup and the group may require rebalancing",addedZones)));
  }
  this.scalingRequired=scalingRequired || !currentZones.equals(newZones);
  this.availabilityZones=availabilityZones;
}
