{
  final Multimap<String,String> groupNameToInstances=HashMultimap.create();
  final Set<String> taggedInstanceIds=Sets.newHashSet();
  for (  final UntrackedInstanceTerminationScalingActivityTask task : tasks) {
    groupNameToInstances.putAll(task.knownAutoScalingInstanceIds.get());
    taggedInstanceIds.addAll(task.knownAutoScalingInstanceIds.get().values());
  }
  try {
    final Set<String> knownInstanceIds=autoScalingInstances.verifyInstanceIds(getGroup().getOwnerAccountNumber(),taggedInstanceIds);
    groupNameToInstances.values().removeAll(knownInstanceIds);
    clearUntrackedInstances(knownInstanceIds);
    final Map<String,Collection<String>> groupMap=groupNameToInstances.asMap();
    for (    final Map.Entry<String,Collection<String>> entry : groupMap.entrySet()) {
      if (Iterables.all(entry.getValue(),Predicates.not(shouldTerminateUntrackedInstance()))) {
        groupMap.remove(entry.getKey());
      }
    }
    int entryIndex=-1;
    if (groupMap.size() == 1) {
      entryIndex=0;
    }
 else     if (!groupMap.isEmpty()) {
      final Random random=new Random();
      entryIndex=random.nextInt(groupMap.size());
    }
    if (entryIndex >= 0) {
      final Map.Entry<String,Collection<String>> entry=Iterables.get(groupMap.entrySet(),entryIndex);
      this.groupName=entry.getKey();
      this.instanceIds=Lists.newArrayList(entry.getValue());
      clearUntrackedInstances(this.instanceIds);
    }
  }
 catch (  Exception e) {
    logger.error(e,e);
  }
}
