{
  final Set<String> transitionToInService=Sets.newHashSet(pendingInstanceIds);
  final Set<String> transitionToUnhealthy=Sets.newHashSet(pendingInstanceIds);
  final Set<String> transitionToUnhealthyIfExpired=Sets.newHashSet(pendingInstanceIds);
  final Set<String> healthyInstanceIds=Sets.newHashSet();
  final Set<String> knownInstanceIds=Sets.newHashSet();
  for (  final MonitoringScalingActivityTask task : tasks) {
    knownInstanceIds.addAll(task.getKnownInstanceIds());
    healthyInstanceIds.addAll(task.getHealthyInstanceIds());
  }
  transitionToInService.retainAll(healthyInstanceIds);
  transitionToUnhealthy.removeAll(knownInstanceIds);
  transitionToUnhealthyIfExpired.removeAll(healthyInstanceIds);
  if (scalingProcessEnabled(ScalingProcessType.HealthCheck,getGroup()))   try {
    autoScalingInstances.markMissingInstancesUnhealthy(getGroup(),healthyInstanceIds);
  }
 catch (  AutoScalingMetadataException e) {
    logger.error(e,e);
  }
  try {
    autoScalingInstances.markExpiredPendingUnhealthy(getGroup(),transitionToUnhealthy,timestamp());
    autoScalingInstances.markExpiredPendingUnhealthy(getGroup(),transitionToUnhealthyIfExpired,timestamp() - AutoScalingConfiguration.getPendingInstanceTimeoutMillis());
  }
 catch (  AutoScalingMetadataException e) {
    logger.error(e,e);
  }
  if (!transitionToInService.isEmpty())   try {
    autoScalingInstances.transitionState(getGroup(),LifecycleState.Pending,LifecycleState.InService,transitionToInService);
  }
 catch (  AutoScalingMetadataException e) {
    logger.error(e,e);
  }
}
