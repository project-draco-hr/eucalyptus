{
  final Map<String,AutoScalingGroup> autoScalingAccounts=Maps.newHashMap();
  try {
    for (    final AutoScalingGroup group : autoScalingGroups.listRequiringMonitoring(10000L)) {
      autoScalingAccounts.put(group.getOwnerAccountNumber(),group);
      final List<AutoScalingInstance> groupInstances=autoScalingInstances.listByGroup(group);
      if (!groupInstances.isEmpty())       runTask(new MonitoringScalingProcessTask(group,Lists.newArrayList(Iterables.transform(Iterables.filter(groupInstances,LifecycleState.Pending),instanceId())),Lists.newArrayList(Iterables.transform(Iterables.filter(groupInstances,LifecycleState.InService),instanceId()))));
    }
  }
 catch (  Exception e) {
    logger.error(e,e);
  }
  try {
    for (    final AutoScalingGroup group : autoScalingAccounts.values()) {
      runTask(new UntrackedInstanceTerminationScalingProcessTask(group));
    }
  }
 catch (  Exception e) {
    logger.error(e,e);
  }
  expireValues(launchFailureCounters,AutoScalingConfiguration.getActivityMaxBackoffMillis() * AutoScalingConfiguration.getSuspensionLaunchAttemptsThreshold());
  expireValues(untrackedInstanceTimestamps,AutoScalingConfiguration.getUntrackedInstanceTimeoutMillis() + TimeUnit.MINUTES.toMillis(10));
}
