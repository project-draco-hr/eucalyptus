{
  final String arn=group.getArn();
  return new TaskWithBackOff(arn,"Monitor"){
    @Override void runTask(){
      logger.info("Running EC2 monitoring activity for " + group.getArn());
      boolean processInitiated=false;
      try {
        final String userId=Accounts.lookupAccountById(group.getOwnerAccountNumber()).lookupUserByName(User.ACCOUNT_ADMIN).getUserId();
        final EucalyptusClient client=new EucalyptusClient(userId);
        final ScalingActivity activity=ScalingActivity.create(group,"Monitor");
        scalingActivities.save(activity);
        processInitiated=true;
        client.dispatch(monitorInstances(group.getAutoScalingGroupName()),new Callback.Checked<DescribeInstancesResponseType>(){
          @Override public void fireException(          final Throwable e){
            failure();
            logger.error("Error monitoring instances",e);
            setScalingActivityFinalStatus(ActivityStatusCode.Failed,activity);
          }
          @Override public void fire(          final DescribeInstancesResponseType response){
            success();
            final List<String> runningInstanceIds=Lists.newArrayList();
            for (            final ReservationInfoType reservation : response.getReservationSet()) {
              for (              final RunningInstancesItemType instance : reservation.getInstancesSet()) {
                runningInstanceIds.add(instance.getInstanceId());
              }
            }
            try {
              autoScalingInstances.markMissingInstancesUnhealthy(group,runningInstanceIds);
            }
 catch (            AutoScalingMetadataException e) {
              logger.error(e,e);
            }
            setScalingActivityFinalStatus(ActivityStatusCode.Successful,activity);
          }
        }
);
      }
 catch (      final Exception e) {
        logger.error(e,e);
      }
 finally {
        if (!processInitiated) {
          failure();
        }
      }
    }
  }
;
}
