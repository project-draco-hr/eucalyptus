{
  final List<String> instancesToTerminate=Lists.newArrayList();
  int currentCapacity=0;
  try {
    final List<AutoScalingInstance> currentInstances=autoScalingInstances.listByGroup(group);
    currentCapacity=currentInstances.size();
    if (currentInstances.size() == terminateCount) {
      Iterables.addAll(instancesToTerminate,Iterables.transform(currentInstances,AutoScalingInstances.instanceId()));
    }
 else {
      final Set<String> groupZones=Sets.newLinkedHashSet(group.getAvailabilityZones());
      groupZones.removeAll(zoneMonitor.getUnavailableZones(AutoScalingConfiguration.getZoneFailureThresholdMillis()));
      final Set<String> unwantedZones=Sets.newHashSet(Iterables.transform(currentInstances,availabilityZone()));
      unwantedZones.removeAll(groupZones);
      final Set<String> targetZones;
      final List<AutoScalingInstance> remainingInstances=Lists.newArrayList(currentInstances);
      if (!unwantedZones.isEmpty()) {
        int unwantedInstanceCount=CollectionUtils.reduce(currentInstances,0,CollectionUtils.count(withAvailabilityZone(unwantedZones)));
        if (unwantedInstanceCount < terminateCount) {
          Iterable<AutoScalingInstance> unwantedInstances=Iterables.filter(currentInstances,withAvailabilityZone(unwantedZones));
          Iterables.addAll(instancesToTerminate,Iterables.transform(unwantedInstances,instanceId()));
          Iterables.removeAll(remainingInstances,Lists.newArrayList(unwantedInstances));
          targetZones=groupZones;
        }
 else {
          targetZones=unwantedZones;
        }
      }
 else {
        targetZones=groupZones;
      }
      final Map<String,Integer> zoneCounts=buildAvailabilityZoneInstanceCounts(currentInstances,targetZones);
      for (int i=instancesToTerminate.size(); i < terminateCount && remainingInstances.size() >= 1; i++) {
        final Map.Entry<String,Integer> entry=selectEntry(zoneCounts,Ordering.natural().reverse());
        final AutoScalingInstance instanceForTermination=TerminationPolicyType.selectForTermination(group.getTerminationPolicies(),Lists.newArrayList(Iterables.filter(remainingInstances,withAvailabilityZone(entry.getKey()))));
        remainingInstances.remove(instanceForTermination);
        entry.setValue(entry.getValue() - 1);
        instancesToTerminate.add(instanceForTermination.getInstanceId());
      }
    }
  }
 catch (  final Exception e) {
    logger.error(e,e);
  }
  final List<ActivityCause> causes=Lists.newArrayList();
  causes.add(new ActivityCause(String.format("an instance was taken out of service in response to a difference between desired and actual capacity, shrinking the capacity from %1$d to %2$d",group.getCapacity(),group.getCapacity() - instancesToTerminate.size())));
  for (  final String instanceId : instancesToTerminate) {
    causes.add(new ActivityCause(String.format("instance %1$s was selected for termination",instanceId)));
  }
  return removeFromLoadBalancerOrTerminate(group,currentCapacity,instancesToTerminate,causes,false);
}
