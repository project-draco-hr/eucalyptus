{
  Context ctx=Contexts.lookup();
  String cleanLocation=imageLocation.replaceAll("^/*","");
  this.imageLocation=cleanLocation;
  int index=cleanLocation.indexOf('/');
  if (index < 2 || index + 1 >= cleanLocation.length()) {
    throw new EucalyptusCloudException("Image registration failed:  Invalid image location: " + imageLocation);
  }
  String bucketName=cleanLocation.substring(0,index);
  String manifestKey=cleanLocation.substring(index + 1);
  String manifestName=manifestKey.replaceAll(".*/","");
  if (!ImageManifests.verifyBucketAcl(bucketName)) {
    throw new EucalyptusCloudException("Image registration failed: you must own the bucket containing the image.");
  }
  try {
    ImageManifests.verifyManifestIntegrity(ctx.getUser(),imageLocation);
  }
 catch (  EucalyptusCloudException e) {
    LOG.debug(e,e);
    throw new EucalyptusCloudException("Image registration failed because the manifest referenced is invalid or unavailable.");
  }
  Document inputSource=ImageManifests.requestManifestData(ctx.getUserFullName(),bucketName,manifestKey);
  XPath xpath=XPathFactory.newInstance().newXPath();
  String arch=null;
  String kId=null;
  String rId=null;
  try {
    arch=(String)xpath.evaluate("/manifest/machine_configuration/architecture/text()",inputSource,XPathConstants.STRING);
  }
 catch (  XPathExpressionException e) {
    LOG.warn(e.getMessage());
  }
  try {
    kId=(String)xpath.evaluate("/manifest/machine_configuration/kernel_id/text()",inputSource,XPathConstants.STRING);
  }
 catch (  XPathExpressionException e) {
    LOG.warn(e.getMessage());
  }
  try {
    rId=(String)xpath.evaluate("/manifest/machine_configuration/ramdisk_id/text()",inputSource,XPathConstants.STRING);
  }
 catch (  XPathExpressionException e) {
    LOG.warn(e.getMessage());
  }
  String architecture=((arch == null) ? "i386" : arch);
  this.architecture=Image.Architecture.valueOf(architecture);
  if ("yes".equals(kId) || "true".equals(kId) || manifestName.startsWith("vmlinuz")) {
    if (!ctx.hasAdministrativePrivileges()) {
      throw new EucalyptusCloudException("Only administrators can register kernel images.");
    }
    this.imageType=Image.Type.kernel;
    this.platform=Image.Platform.linux;
    this.kernelId=null;
    this.ramdiskId=null;
  }
 else   if ("yes".equals(rId) || "true".equals(rId) || manifestName.startsWith("initrd")) {
    if (!Contexts.lookup().hasAdministrativePrivileges()) {
      throw new EucalyptusCloudException("Only administrators can register ramdisk images.");
    }
    this.imageType=Image.Type.ramdisk;
    this.platform=Image.Platform.linux;
    this.kernelId=null;
    this.ramdiskId=null;
  }
 else {
    this.imageType=Image.Type.machine;
    this.kernelId=kId;
    this.ramdiskId=rId;
    if (!manifestName.startsWith(Image.Platform.windows.toString())) {
      this.platform=Image.Platform.linux;
      if (kId != null) {
        ImageInfo k=null;
        try {
          k=Images.lookupImage(kId);
        }
 catch (        Exception ex) {
          LOG.error(ex,ex);
          throw new EucalyptusCloudException("Referenced kernel id is invalid: " + kId,ex);
        }
        if (!Lookups.checkPrivilege(ctx.getRequest(),PolicySpec.VENDOR_EC2,PolicySpec.EC2_RESOURCE_IMAGE,kId,k.getOwner())) {
          throw new EucalyptusCloudException("Access to kernel image " + kId + " is denied for "+ ctx.getUser().getName());
        }
      }
      if (kId != null) {
        ImageInfo r=null;
        try {
          r=Images.lookupImage(rId);
        }
 catch (        Exception ex) {
          LOG.error(ex,ex);
          throw new EucalyptusCloudException("Referenced ramdisk id is invalid: " + rId,ex);
        }
        if (!Lookups.checkPrivilege(ctx.getRequest(),PolicySpec.VENDOR_EC2,PolicySpec.EC2_RESOURCE_IMAGE,rId,r.getOwner())) {
          throw new EucalyptusCloudException("Access to ramdisk image " + rId + " is denied for "+ ctx.getUser().getName());
        }
      }
    }
 else {
      this.platform=Image.Platform.windows;
    }
  }
}
