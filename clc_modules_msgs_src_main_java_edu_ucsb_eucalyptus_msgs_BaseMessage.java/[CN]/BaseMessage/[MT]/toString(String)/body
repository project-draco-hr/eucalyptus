{
  ByteArrayOutputStream temp=new ByteArrayOutputStream();
  Class targetClass=Classes.findAncestor(this,new Predicate<Class>(){
    @Override public boolean apply(    Class arg0){
      return !arg0.isAnonymousClass();
    }
  }
);
  try {
    IBindingFactory bindingFactory=BindingDirectory.getFactory(namespace,targetClass);
    IMarshallingContext mctx=bindingFactory.createMarshallingContext();
    mctx.setIndent(2);
    mctx.marshalDocument(this,"UTF-8",null,temp);
  }
 catch (  JiBXException e) {
    Logger.getLogger(BaseMessage.class).debug(e,e);
  }
catch (  Throwable e) {
    Logger.getLogger(BaseMessage.class).error(e,e);
  }
  return temp.toString();
}
