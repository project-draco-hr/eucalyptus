{
  boolean asgFound=false;
  final String userId=evt.getUserId();
  String systemUserId=getSystemUserId();
  String acctNumber=null;
  try {
    acctNumber=Accounts.lookupUserById(userId).getAccountNumber();
  }
 catch (  final AuthException ex) {
    throw new EventHandlerException("Failed to lookup system user",ex);
  }
  final String asgName=CreateAutoScalingGroup.getAutoscalingGroupName(acctNumber,evt.getDbInstanceIdentifier());
  try {
    final DescribeAutoScalingGroupsResponseType resp=AutoScalingClient.getInstance().describeAutoScalingGroups(null,Lists.newArrayList(asgName));
    final List<AutoScalingGroupType> groups=resp.getDescribeAutoScalingGroupsResult().getAutoScalingGroups().getMember();
    for (    final AutoScalingGroupType asg : groups) {
      if (asg.getAutoScalingGroupName().contains(asgName)) {
        asgFound=true;
        break;
      }
    }
  }
 catch (  final Exception ex) {
    asgFound=false;
  }
  if (asgFound)   throw new EventHandlerException("Existing autoscaling group (" + asgName + ") found");
  final String emi=DatabaseServerProperties.DB_SERVER_EMI;
  List<ImageDetails> images=null;
  try {
    images=Ec2Client.getInstance().describeImages(systemUserId,Lists.newArrayList(emi));
    if (images == null || images.size() <= 0 || !images.get(0).getImageId().toLowerCase().equals(emi.toLowerCase()))     throw new EventHandlerException("No such EMI is found: " + emi);
  }
 catch (  final EventHandlerException ex) {
    throw ex;
  }
catch (  final Exception ex) {
    throw new EventHandlerException("failed to validate the db server EMI",ex);
  }
  final String volumeId=DatabaseServerProperties.DB_SERVER_VOLUME;
  List<Volume> volumes=null;
  try {
    volumes=Ec2Client.getInstance().describeVolumes(systemUserId,Lists.newArrayList(volumeId));
    if (volumes == null || volumes.size() <= 0 || !volumes.get(0).getVolumeId().toLowerCase().equals(volumeId.toLowerCase()))     throw new EventHandlerException("No such volume id is found: " + volumeId);
    if (!"available".equals(volumes.get(0).getStatus()))     throw new EventHandlerException("Volume is not available");
  }
 catch (  final EventHandlerException ex) {
    throw ex;
  }
catch (  final Exception ex) {
    throw new EventHandlerException("failed to validate the db server volume ID",ex);
  }
  List<ClusterInfoType> clusters=null;
  try {
    clusters=Ec2Client.getInstance().describeAvailabilityZones(null,true);
  }
 catch (  final Exception ex) {
    throw new EventHandlerException("failed to validate the zones",ex);
  }
  final String instanceType=DatabaseServerProperties.DB_SERVER_INSTANCE_TYPE;
  int numVm=1;
  boolean resourceAvailable=false;
  for (  final ClusterInfoType cluster : clusters) {
    final int capacity=findAvailableResources(clusters,cluster.getZoneName(),instanceType);
    if (numVm <= capacity) {
      resourceAvailable=true;
      break;
    }
  }
  if (!resourceAvailable)   throw new EventHandlerException("not enough resource in the cloud");
  final String keyName=DatabaseServerProperties.DB_SERVER_KEYNAME;
  if (keyName != null && keyName.length() > 0) {
    try {
      final List<DescribeKeyPairsResponseItemType> keypairs=Ec2Client.getInstance().describeKeyPairs(systemUserId,Lists.newArrayList(keyName));
      if (keypairs == null || keypairs.size() <= 0 || !keypairs.get(0).getKeyName().equals(keyName))       throw new Exception();
    }
 catch (    Exception ex) {
      throw new EventHandlerException(String.format("The configured keyname %s is not found",DatabaseServerProperties.DB_SERVER_KEYNAME));
    }
  }
}
