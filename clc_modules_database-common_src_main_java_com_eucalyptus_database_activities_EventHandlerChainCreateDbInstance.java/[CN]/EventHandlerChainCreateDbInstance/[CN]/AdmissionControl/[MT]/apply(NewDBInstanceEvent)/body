{
  boolean stackFound=false;
  final String userId=evt.getUserId();
  final String accountId=getAccountByUser(userId);
  String stackName=getStackName(accountId);
  this.dbName=evt.getDbName();
  try {
    Stack stack=CloudFormationClient.getInstance().describeStack(userId,stackName);
    if (stack != null) {
      stackFound=true;
    }
  }
 catch (  final Exception ex) {
    stackFound=false;
  }
  if (stackFound)   throw new EventHandlerException("Existing stack (" + stackName + ") found");
  final String emi=DatabaseServerProperties.IMAGE;
  List<ImageDetails> images=null;
  try {
    images=Ec2Client.getInstance().describeImages(null,Lists.newArrayList(emi));
    if (images == null || images.size() <= 0 || !images.get(0).getImageId().toLowerCase().equals(emi.toLowerCase()))     throw new EventHandlerException("No such EMI is found: " + emi);
  }
 catch (  final EventHandlerException ex) {
    throw ex;
  }
catch (  final Exception ex) {
    throw new EventHandlerException("failed to validate the db server EMI",ex);
  }
  final String volumeId=DatabaseServerProperties.VOLUME;
  Volume volumeToUse=null;
  try {
    List<Volume> volumes=Ec2Client.getInstance().describeVolumes(null,Lists.newArrayList(volumeId));
    if (volumes == null || volumes.size() <= 0 || !volumes.get(0).getVolumeId().toLowerCase().equals(volumeId.toLowerCase()))     throw new EventHandlerException("No such volume id is found: " + volumeId);
    if (!"available".equals(volumes.get(0).getStatus()))     throw new EventHandlerException("Volume is not available");
 else     volumeToUse=volumes.get(0);
  }
 catch (  final EventHandlerException ex) {
    throw ex;
  }
catch (  final Exception ex) {
    throw new EventHandlerException("failed to validate the db server volume ID",ex);
  }
  List<String> configuredZones=null;
  try {
    configuredZones=DatabaseServerProperties.listConfiguredZones();
  }
 catch (  Exception e) {
    LOG.error("Can't validate AZ for volume due to: " + e.getMessage());
  }
  if (configuredZones != null && !configuredZones.contains(volumeToUse.getAvailabilityZone()))   throw new EventHandlerException("Volume is in an AZ that is not configured for database service");
  List<ClusterInfoType> clusters=null;
  try {
    clusters=Ec2Client.getInstance().describeAvailabilityZones(null,true);
  }
 catch (  final Exception ex) {
    throw new EventHandlerException("failed to validate the zones",ex);
  }
  final String instanceType=DatabaseServerProperties.INSTANCE_TYPE;
  int numVm=1;
  final int capacity=findAvailableResources(clusters,volumeToUse.getAvailabilityZone(),instanceType);
  if (capacity < numVm)   throw new EventHandlerException("not enough resource in the zone " + volumeToUse.getAvailabilityZone());
  final String keyName=DatabaseServerProperties.KEYNAME;
  if (keyName != null && keyName.length() > 0) {
    try {
      final List<DescribeKeyPairsResponseItemType> keypairs=Ec2Client.getInstance().describeKeyPairs(null,Lists.newArrayList(keyName));
      if (keypairs == null || keypairs.size() <= 0 || !keypairs.get(0).getKeyName().equals(keyName))       throw new Exception();
    }
 catch (    Exception ex) {
      throw new EventHandlerException(String.format("The configured keyname %s is not found",DatabaseServerProperties.KEYNAME));
    }
  }
}
