{
  DeregisterInstancesFromLoadBalancerResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final String lbName=request.getLoadBalancerName();
  final Collection<Instance> instances=request.getInstances().getMember();
  LoadBalancer lb;
  try {
    lb=LoadBalancers.getLoadbalancer(ctx,lbName);
  }
 catch (  Exception ex) {
    throw new AccessPointNotFoundException();
  }
  if (lb != null && !LoadBalancingMetadatas.filterPrivileged().apply(lb)) {
    throw new AccessPointNotFoundException();
  }
  final List<LoadBalancerBackendInstanceCoreView> allInstances=Lists.newArrayList(lb.getBackendInstances());
  final Function<LoadBalancer,Collection<LoadBalancerBackendInstanceCoreView>> filter=new Function<LoadBalancer,Collection<LoadBalancerBackendInstanceCoreView>>(){
    @Override public Collection<LoadBalancerBackendInstanceCoreView> apply(    LoadBalancer lb){
      Collection<LoadBalancerBackendInstanceCoreView> filtered=Sets.newHashSet();
      for (      final LoadBalancerBackendInstanceCoreView be : lb.getBackendInstances()) {
        for (        Instance inst : instances) {
          if (be.getInstanceId() != null && be.getInstanceId().equals(inst.getInstanceId())) {
            filtered.add(be);
            break;
          }
        }
      }
      return filtered;
    }
  }
;
  final Collection<LoadBalancerBackendInstanceCoreView> instancesToRemove=Entities.asTransaction(LoadBalancer.class,filter).apply(lb);
  if (instancesToRemove == null) {
    reply.set_return(false);
    return reply;
  }
  final Predicate<Void> remover=new Predicate<Void>(){
    @Override public boolean apply(    Void v){
      for (      final LoadBalancerBackendInstanceCoreView instanceView : instancesToRemove) {
        final LoadBalancerBackendInstance sample=LoadBalancerBackendInstanceEntityTransform.INSTANCE.apply(instanceView);
        LoadBalancerBackendInstance toDelete;
        try {
          toDelete=Entities.uniqueResult(sample);
        }
 catch (        NoSuchElementException ex) {
          toDelete=null;
          throw Exceptions.toUndeclared(new InvalidEndPointException());
        }
catch (        Exception ex) {
          LOG.error("Can't query loadbalancer backend instance for " + instanceView.getInstanceId(),ex);
          toDelete=null;
        }
        if (toDelete == null)         continue;
        Entities.delete(toDelete);
      }
      return true;
    }
  }
;
  final Function<Void,ArrayList<Instance>> finder=new Function<Void,ArrayList<Instance>>(){
    @Override public ArrayList<Instance> apply(    Void v){
      LoadBalancer lb;
      try {
        lb=LoadBalancers.getLoadbalancer(ctx,lbName);
      }
 catch (      Exception ex) {
        LOG.warn("No loadbalancer is found with name=" + lbName);
        return Lists.newArrayList();
      }
      Entities.refresh(lb);
      ArrayList<Instance> result=new ArrayList<>(Collections2.transform(lb.getBackendInstances(),new Function<LoadBalancerBackendInstanceCoreView,Instance>(){
        @Override public Instance apply(        final LoadBalancerBackendInstanceCoreView input){
          final Instance newInst=new Instance();
          newInst.setInstanceId(input.getInstanceId());
          return newInst;
        }
      }
));
      return result;
    }
  }
;
  try {
    DeregisterInstancesEvent evt=new DeregisterInstancesEvent();
    evt.setLoadBalancer(lbName);
    evt.setContext(ctx);
    evt.setInstances(instances);
    ActivityManager.getInstance().fire(evt);
  }
 catch (  EventFailedException e) {
    LOG.error("failed to handle DeregisterInstances event",e);
    final String reason=e.getCause() != null && e.getCause().getMessage() != null ? e.getCause().getMessage() : "internal error";
    throw new InternalFailure400Exception(String.format("Failed to deregister instances: %s",reason),e);
  }
  try {
    reply.set_return(Entities.asTransaction(LoadBalancerBackendInstance.class,remover).apply(null));
    allInstances.removeAll(instancesToRemove);
  }
 catch (  final Exception ex) {
    final String reason=ex.getCause() != null && ex.getCause().getMessage() != null ? ex.getCause().getMessage() : "internal error";
    throw new InternalFailure400Exception(String.format("Failed to deregister instances: %s",reason),ex);
  }
  DeregisterInstancesFromLoadBalancerResult result=new DeregisterInstancesFromLoadBalancerResult();
  Instances returnInstances=new Instances();
  returnInstances.setMember(new ArrayList<>(Collections2.transform(allInstances,new Function<LoadBalancerBackendInstanceCoreView,Instance>(){
    @Override public Instance apply(    final LoadBalancerBackendInstanceCoreView input){
      final Instance newInst=new Instance();
      newInst.setInstanceId(input.getInstanceId());
      return newInst;
    }
  }
)));
  result.setInstances(returnInstances);
  reply.setDeregisterInstancesFromLoadBalancerResult(result);
  return reply;
}
