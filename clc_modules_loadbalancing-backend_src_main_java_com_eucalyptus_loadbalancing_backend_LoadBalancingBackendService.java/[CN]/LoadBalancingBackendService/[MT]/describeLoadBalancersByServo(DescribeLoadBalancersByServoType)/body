{
  final DescribeLoadBalancersByServoResponseType reply=request.getReply();
  final String instanceId=request.getInstanceId();
  LoadBalancerZoneCoreView zoneView;
  LoadBalancerZone zone;
  try {
    isValidServoRequest(instanceId,request.getSourceIp());
    final LoadBalancerServoInstance instance=LoadBalancers.lookupServoInstance(instanceId);
    zoneView=instance.getAvailabilityZone();
    zone=LoadBalancerZoneEntityTransform.INSTANCE.apply(zoneView);
  }
 catch (  final Exception ex) {
    throw new InternalFailureException("Failed to verify request sender");
  }
  final Function<LoadBalancerZone,Optional<LoadBalancerServoDescription>> lookupLBDescriptions=new Function<LoadBalancerZone,Optional<LoadBalancerServoDescription>>(){
    @Override public Optional<LoadBalancerServoDescription> apply(    final LoadBalancerZone zone){
      final LoadBalancerCoreView lbView=zone.getLoadbalancer();
      final String lbName=lbView.getDisplayName();
      final LoadBalancerServoDescription desc=new LoadBalancerServoDescription();
      desc.setLoadBalancerName(lbName);
      desc.setCreatedTime(lbView.getCreationTimestamp());
      final LoadBalancer lb;
      try {
        lb=LoadBalancerEntityTransform.INSTANCE.apply(lbView);
      }
 catch (      final Exception ex) {
        return Optional.<LoadBalancerServoDescription>absent();
      }
      final LoadBalancerDnsRecordCoreView dnsView=lb.getDns();
      desc.setDnsName(dnsView.getDnsName());
      desc.setLoadBalancerAttributes(TypeMappers.transform(lb,LoadBalancerAttributes.class));
      Collection<LoadBalancerBackendInstanceCoreView> backendInstancesInSameZone=Collections2.filter(zone.getBackendInstances(),new Predicate<LoadBalancerBackendInstanceCoreView>(){
        @Override public boolean apply(        LoadBalancerBackendInstanceCoreView arg0){
          return !LoadBalancerBackendInstance.STATE.Error.equals(arg0.getBackendState()) && !(arg0.getIpAddress() == null || arg0.getIpAddress().length() <= 0);
        }
      }
);
      Collection<LoadBalancerBackendInstanceCoreView> crossZoneBackendInstances=Lists.newArrayList();
      if (desc.getLoadBalancerAttributes().getCrossZoneLoadBalancing().getEnabled()) {
        crossZoneBackendInstances=Collections2.filter(lb.getBackendInstances(),new Predicate<LoadBalancerBackendInstanceCoreView>(){
          @Override public boolean apply(          LoadBalancerBackendInstanceCoreView arg0){
            final boolean inService=LoadBalancerBackendInstance.STATE.InService.equals(arg0.getBackendState()) && !(arg0.getIpAddress() == null || arg0.getIpAddress().length() <= 0);
            return inService && arg0.getVmInstance() != null && !zone.getName().equals(arg0.getVmInstance().getPlacement());
          }
        }
);
      }
      if (!backendInstancesInSameZone.isEmpty()) {
        desc.setBackendInstances(new BackendInstances());
        desc.getBackendInstances().getMember().addAll(Collections2.transform(backendInstancesInSameZone,new Function<LoadBalancerBackendInstanceCoreView,BackendInstance>(){
          @Override public BackendInstance apply(          final LoadBalancerBackendInstanceCoreView be){
            final BackendInstance instance=new BackendInstance();
            instance.setInstanceId(be.getInstanceId());
            instance.setInstanceIpAddress(be.getIpAddress());
            instance.setReportHealthCheck(true);
            return instance;
          }
        }
));
      }
      if (!crossZoneBackendInstances.isEmpty()) {
        if (desc.getBackendInstances() == null)         desc.setBackendInstances(new BackendInstances());
        desc.getBackendInstances().getMember().addAll(Collections2.transform(crossZoneBackendInstances,new Function<LoadBalancerBackendInstanceCoreView,BackendInstance>(){
          @Override public BackendInstance apply(          final LoadBalancerBackendInstanceCoreView be){
            final BackendInstance instance=new BackendInstance();
            instance.setInstanceId(be.getInstanceId());
            instance.setInstanceIpAddress(be.getIpAddress());
            instance.setReportHealthCheck(false);
            return instance;
          }
        }
));
      }
      desc.setAvailabilityZones(new AvailabilityZones());
      desc.getAvailabilityZones().getMember().add(zone.getName());
      final Set<String> policiesOfListener=Sets.newHashSet();
      final Set<String> policiesForBackendServer=Sets.newHashSet();
      if (lb.getListeners().size() > 0) {
        desc.setListenerDescriptions(new ListenerDescriptions());
        desc.getListenerDescriptions().setMember(new ArrayList<>(Collections2.transform(lb.getListeners(),new Function<LoadBalancerListenerCoreView,ListenerDescription>(){
          @Override public ListenerDescription apply(          final LoadBalancerListenerCoreView input){
            ListenerDescription desc=new ListenerDescription();
            Listener listener=new Listener();
            listener.setLoadBalancerPort(input.getLoadbalancerPort());
            listener.setInstancePort(input.getInstancePort());
            if (input.getInstanceProtocol() != PROTOCOL.NONE)             listener.setInstanceProtocol(input.getInstanceProtocol().name());
            listener.setProtocol(input.getProtocol().name());
            if (input.getCertificateId() != null)             listener.setSSLCertificateId(input.getCertificateId());
            desc.setListener(listener);
            final LoadBalancerListener lbListener=LoadBalancerListenerEntityTransform.INSTANCE.apply(input);
            final PolicyNames pnames=new PolicyNames();
            pnames.setMember(new ArrayList<>(Lists.transform(lbListener.getPolicies(),new Function<LoadBalancerPolicyDescriptionCoreView,String>(){
              @Override public String apply(              LoadBalancerPolicyDescriptionCoreView arg0){
                try {
                  return arg0.getPolicyName();
                }
 catch (                final Exception ex) {
                  return "";
                }
              }
            }
)));
            policiesOfListener.addAll(pnames.getMember());
            desc.setPolicyNames(pnames);
            return desc;
          }
        }
)));
      }
      try {
        if (lb.getBackendServers().size() > 0) {
          desc.setBackendServerDescriptions(new BackendServerDescriptions());
          desc.getBackendServerDescriptions().setMember(new ArrayList<>(Collections2.transform(lb.getBackendServers(),new Function<LoadBalancerBackendServerDescriptionCoreView,BackendServerDescription>(){
            @Override public BackendServerDescription apply(            LoadBalancerBackendServerDescriptionCoreView arg0){
              final LoadBalancerBackendServerDescription backend=LoadBalancerBackendServerDescriptionEntityTransform.INSTANCE.apply(arg0);
              final BackendServerDescription desc=new BackendServerDescription();
              desc.setInstancePort(arg0.getInstancePort());
              desc.setPolicyNames(new PolicyNames());
              desc.getPolicyNames().setMember(new ArrayList<>(Collections2.transform(backend.getPolicyDescriptions(),new Function<LoadBalancerPolicyDescriptionCoreView,String>(){
                @Override public String apply(                LoadBalancerPolicyDescriptionCoreView arg0){
                  return arg0.getPolicyName();
                }
              }
)));
              policiesForBackendServer.addAll(desc.getPolicyNames().getMember());
              return desc;
            }
          }
)));
        }
      }
 catch (      final Exception ex) {
        ;
      }
      try {
        int interval=lb.getHealthCheckInterval();
        String target=lb.getHealthCheckTarget();
        int timeout=lb.getHealthCheckTimeout();
        int healthyThresholds=lb.getHealthyThreshold();
        int unhealthyThresholds=lb.getHealthCheckUnhealthyThreshold();
        final HealthCheck hc=new HealthCheck();
        hc.setInterval(interval);
        hc.setHealthyThreshold(healthyThresholds);
        hc.setTarget(target);
        hc.setTimeout(timeout);
        hc.setUnhealthyThreshold(unhealthyThresholds);
        desc.setHealthCheck(hc);
      }
 catch (      Exception ex) {
      }
      List<LoadBalancerPolicyDescription> lbPolicies=Lists.newArrayList();
      try {
        lbPolicies=LoadBalancerPolicies.getLoadBalancerPolicyDescription(lb);
      }
 catch (      final Exception ex) {
        ;
      }
      final List<PolicyDescription> policies=Lists.newArrayList();
      for (      final LoadBalancerPolicyDescription lbPolicy : lbPolicies) {
        if (policiesOfListener.contains(lbPolicy.getPolicyName()) || policiesForBackendServer.contains(lbPolicy.getPolicyName()) || "PublicKeyPolicyType".equals(lbPolicy.getPolicyTypeName()))         policies.add(LoadBalancerPolicies.AsPolicyDescription.INSTANCE.apply(lbPolicy));
      }
      final PolicyDescriptions policyDescs=new PolicyDescriptions();
      policyDescs.setMember((ArrayList<PolicyDescription>)policies);
      desc.setPolicyDescriptions(policyDescs);
      return Optional.of(desc);
    }
  }
;
  Optional<LoadBalancerServoDescription> descs=Optional.<LoadBalancerServoDescription>absent();
  try {
    final LoadBalancer lb=LoadBalancerEntityTransform.INSTANCE.apply(zone.getLoadbalancer());
    if (zone != null && LoadBalancingMetadatas.filterPrivilegedWithoutOwner().apply(lb) && zone.getState().equals(LoadBalancerZone.STATE.InService)) {
      descs=lookupLBDescriptions.apply(zone);
    }
  }
 catch (  final Exception ex) {
  }
  final LoadBalancerServoDescriptions lbDescs=new LoadBalancerServoDescriptions();
  lbDescs.getMember().addAll(descs.asSet());
  reply.getDescribeLoadBalancersResult().setLoadBalancerDescriptions(lbDescs);
  reply.set_return(true);
  return reply;
}
