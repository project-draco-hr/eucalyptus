{
  final DescribeLoadBalancersByServoResponseType reply=request.getReply();
  final String instanceId=request.getInstanceId();
  LoadBalancerZoneCoreView zoneView=null;
  LoadBalancerZone zone=null;
  try {
    isValidServoRequest(instanceId,request.getSourceIp());
    final LoadBalancerServoInstance instance=LoadBalancers.lookupServoInstance(instanceId);
    zoneView=instance.getAvailabilityZone();
    zone=LoadBalancerZoneEntityTransform.INSTANCE.apply(zoneView);
  }
 catch (  NoSuchElementException ex) {
    ;
  }
catch (  Exception ex) {
    LOG.warn("failed to find loadbalancer for servo instance: " + instanceId,ex);
  }
  final Function<LoadBalancerZone,Set<LoadBalancerDescription>> lookupLBDescriptions=new Function<LoadBalancerZone,Set<LoadBalancerDescription>>(){
    @Override public Set<LoadBalancerDescription> apply(    LoadBalancerZone zone){
      final Set<LoadBalancerDescription> descs=Sets.newHashSet();
      final LoadBalancerCoreView lbView=zone.getLoadbalancer();
      final String lbName=lbView.getDisplayName();
      LoadBalancerDescription desc=new LoadBalancerDescription();
      desc.setLoadBalancerName(lbName);
      desc.setCreatedTime(lbView.getCreationTimestamp());
      LoadBalancer lb=null;
      try {
        lb=LoadBalancerEntityTransform.INSTANCE.apply(lbView);
      }
 catch (      final Exception ex) {
        Sets.<LoadBalancerDescription>newHashSet();
      }
      final LoadBalancerDnsRecordCoreView dnsView=lb.getDns();
      desc.setDnsName(dnsView.getDnsName());
      Collection<LoadBalancerBackendInstanceCoreView> notInError=Collections2.filter(zone.getBackendInstances(),new Predicate<LoadBalancerBackendInstanceCoreView>(){
        @Override public boolean apply(        @Nullable LoadBalancerBackendInstanceCoreView arg0){
          return !LoadBalancerBackendInstance.STATE.Error.equals(arg0.getBackendState());
        }
      }
);
      if (notInError.size() > 0) {
        desc.setInstances(new Instances());
        desc.getInstances().setMember(new ArrayList<Instance>(Collections2.transform(notInError,new Function<LoadBalancerBackendInstanceCoreView,Instance>(){
          @Override public Instance apply(          final LoadBalancerBackendInstanceCoreView be){
            Instance instance=new Instance();
            instance.setInstanceId(be.getInstanceId() + ":" + be.getIpAddress());
            return instance;
          }
        }
)));
      }
      desc.setAvailabilityZones(new AvailabilityZones());
      desc.getAvailabilityZones().setMember(Lists.newArrayList(zone.getName()));
      if (lb.getListeners().size() > 0) {
        desc.setListenerDescriptions(new ListenerDescriptions());
        desc.getListenerDescriptions().setMember(new ArrayList<ListenerDescription>(Collections2.transform(lb.getListeners(),new Function<LoadBalancerListenerCoreView,ListenerDescription>(){
          @Override public ListenerDescription apply(          final LoadBalancerListenerCoreView input){
            ListenerDescription desc=new ListenerDescription();
            Listener listener=new Listener();
            listener.setLoadBalancerPort(input.getLoadbalancerPort());
            listener.setInstancePort(input.getInstancePort());
            if (input.getInstanceProtocol() != PROTOCOL.NONE)             listener.setInstanceProtocol(input.getInstanceProtocol().name());
            listener.setProtocol(input.getProtocol().name());
            if (input.getCertificateId() != null)             listener.setSSLCertificateId(input.getCertificateId());
            desc.setListener(listener);
            final LoadBalancerListener lbListener=LoadBalancerListenerEntityTransform.INSTANCE.apply(input);
            final PolicyNames pnames=new PolicyNames();
            pnames.setMember(new ArrayList<String>(Lists.transform(lbListener.getPolicies(),new Function<LoadBalancerPolicyDescriptionCoreView,String>(){
              @Override public String apply(              LoadBalancerPolicyDescriptionCoreView arg0){
                try {
                  final LoadBalancerPolicyDescription policy=LoadBalancerPolicyDescriptionEntityTransform.INSTANCE.apply(arg0);
                  if ("LBCookieStickinessPolicyType".equals(arg0.getPolicyTypeName())) {
                    final String expiration=policy.findAttributeDescription("CookieExpirationPeriod").getAttributeValue();
                    return String.format("LBCookieStickinessPolicyType:%s",expiration);
                  }
 else                   if ("AppCookieStickinessPolicyType".equals(arg0.getPolicyTypeName())) {
                    final String cookieName=policy.findAttributeDescription("CookieName").getAttributeValue();
                    return String.format("AppCookieStickinessPolicyType:%s",cookieName);
                  }
 else {
                    return arg0.getPolicyName();
                  }
                }
 catch (                final Exception ex) {
                  return arg0.getPolicyName();
                }
              }
            }
)));
            desc.setPolicyNames(pnames);
            return desc;
          }
        }
)));
      }
      try {
        int interval=lb.getHealthCheckInterval();
        String target=lb.getHealthCheckTarget();
        int timeout=lb.getHealthCheckTimeout();
        int healthyThresholds=lb.getHealthyThreshold();
        int unhealthyThresholds=lb.getHealthCheckUnhealthyThreshold();
        final HealthCheck hc=new HealthCheck();
        hc.setInterval(interval);
        hc.setHealthyThreshold(healthyThresholds);
        hc.setTarget(target);
        hc.setTimeout(timeout);
        hc.setUnhealthyThreshold(unhealthyThresholds);
        desc.setHealthCheck(hc);
      }
 catch (      IllegalStateException ex) {
        ;
      }
catch (      Exception ex) {
        ;
      }
      descs.add(desc);
      return descs;
    }
  }
;
  Set<LoadBalancerDescription> descs=null;
  LoadBalancer lb=null;
  try {
    lb=LoadBalancerEntityTransform.INSTANCE.apply(zone.getLoadbalancer());
    if (zone != null && LoadBalancingMetadatas.filterPrivilegedWithoutOwner().apply(lb) && zone.getState().equals(LoadBalancerZone.STATE.InService)) {
      descs=lookupLBDescriptions.apply(zone);
    }
 else     descs=Sets.<LoadBalancerDescription>newHashSet();
  }
 catch (  final Exception ex) {
    descs=Sets.<LoadBalancerDescription>newHashSet();
  }
  DescribeLoadBalancersResult descResult=new DescribeLoadBalancersResult();
  LoadBalancerDescriptions lbDescs=new LoadBalancerDescriptions();
  lbDescs.setMember(new ArrayList<LoadBalancerDescription>(descs));
  descResult.setLoadBalancerDescriptions(lbDescs);
  reply.setDescribeLoadBalancersResult(descResult);
  reply.set_return(true);
  return reply;
}
