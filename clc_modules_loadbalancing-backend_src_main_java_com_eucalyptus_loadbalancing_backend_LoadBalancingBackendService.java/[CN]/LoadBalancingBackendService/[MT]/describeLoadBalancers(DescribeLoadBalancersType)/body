{
  DescribeLoadBalancersResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final String accountNumber=ctx.getAccount().getAccountNumber();
  final Set<String> requestedNames=Sets.newHashSet();
  if (request.getLoadBalancerNames() != null) {
    requestedNames.addAll(request.getLoadBalancerNames().getMember());
  }
  final boolean showAll=requestedNames.remove("verbose") && ctx.isAdministrator();
  final Function<Set<String>,Set<LoadBalancer>> lookupAccountLBs=new Function<Set<String>,Set<LoadBalancer>>(){
    @Override public Set<LoadBalancer> apply(    final Set<String> identifiers){
      try {
        final Predicate<? super LoadBalancer> requestedAndAccessible=LoadBalancingMetadatas.filteringFor(LoadBalancer.class).byId(identifiers).byPrivileges().buildPredicate();
        final LoadBalancer example=showAll ? LoadBalancer.named(null,null) : LoadBalancer.namedByAccountId(accountNumber,null);
        final List<LoadBalancer> lbs=Entities.query(example,true);
        return Sets.newHashSet(Iterables.filter(lbs,requestedAndAccessible));
      }
 catch (      EntityNotFoundException e) {
        Entities.evictCache(LoadBalancer.class);
        throw new OptimisticLockException("Error loading load balancers",e);
      }
    }
  }
;
  final Set<LoadBalancer> allowedLBs=Entities.asTransaction(LoadBalancer.class,lookupAccountLBs).apply(requestedNames);
  final Function<Set<LoadBalancer>,Set<LoadBalancerDescription>> lookupLBDescriptions=new Function<Set<LoadBalancer>,Set<LoadBalancerDescription>>(){
    public Set<LoadBalancerDescription> apply(    final Set<LoadBalancer> input){
      final Set<LoadBalancerDescription> descs=Sets.newHashSet();
      for (      final LoadBalancer lb : input) {
        LoadBalancerDescription desc=new LoadBalancerDescription();
        if (lb == null)         continue;
        final String lbName=lb.getDisplayName();
        desc.setLoadBalancerName(lbName);
        desc.setCreatedTime(lb.getCreationTimestamp());
        desc.setDnsName(LoadBalancers.getLoadBalancerDnsName(lb));
        if (lb.getBackendInstances().size() > 0) {
          desc.setInstances(new Instances());
          Iterables.addAll(desc.getInstances().getMember(),Iterables.transform(lb.getBackendInstances(),Functions.compose(Instance.instance(),LoadBalancerBackendInstanceCoreView.instanceId())));
        }
        final List<String> subnetIds=Lists.newArrayList();
        if (!lb.getZones().isEmpty()) {
          desc.setAvailabilityZones(new AvailabilityZones());
          final List<LoadBalancerZoneCoreView> currentZones=Lists.newArrayList(Iterables.filter(lb.getZones(),new Predicate<LoadBalancerZoneCoreView>(){
            @Override public boolean apply(            LoadBalancerZoneCoreView arg0){
              return arg0.getState().equals(LoadBalancerZone.STATE.InService);
            }
          }
));
          Iterables.addAll(desc.getAvailabilityZones().getMember(),Iterables.transform(currentZones,LoadBalancerZoneCoreView.name()));
          Iterables.addAll(subnetIds,Iterables.filter(Iterables.transform(currentZones,LoadBalancerZoneCoreView.subnetId()),Predicates.notNull()));
        }
        if (!subnetIds.isEmpty()) {
          desc.setSubnets(new Subnets(subnetIds));
        }
        desc.setVpcId(lb.getVpcId());
        if (lb.getListeners().size() > 0) {
          desc.setListenerDescriptions(new ListenerDescriptions());
          desc.getListenerDescriptions().setMember(new ArrayList<>(Collections2.transform(lb.getListeners(),new Function<LoadBalancerListenerCoreView,ListenerDescription>(){
            @Override public ListenerDescription apply(            final LoadBalancerListenerCoreView input){
              ListenerDescription desc=new ListenerDescription();
              Listener listener=new Listener();
              listener.setLoadBalancerPort(input.getLoadbalancerPort());
              listener.setInstancePort(input.getInstancePort());
              if (input.getInstanceProtocol() != PROTOCOL.NONE)               listener.setInstanceProtocol(input.getInstanceProtocol().name());
              listener.setProtocol(input.getProtocol().name());
              if (input.getCertificateId() != null)               listener.setSSLCertificateId(input.getCertificateId());
              desc.setListener(listener);
              final LoadBalancerListener lbListener=LoadBalancerListenerEntityTransform.INSTANCE.apply(input);
              final PolicyNames pnames=new PolicyNames();
              pnames.setMember(new ArrayList<>(Lists.transform(lbListener.getPolicies(),new Function<LoadBalancerPolicyDescriptionCoreView,String>(){
                @Override public String apply(                LoadBalancerPolicyDescriptionCoreView arg0){
                  return arg0.getPolicyName();
                }
              }
)));
              desc.setPolicyNames(pnames);
              return desc;
            }
          }
)));
        }
        try {
          int interval=lb.getHealthCheckInterval();
          String target=lb.getHealthCheckTarget();
          int timeout=lb.getHealthCheckTimeout();
          int healthyThresholds=lb.getHealthyThreshold();
          int unhealthyThresholds=lb.getHealthCheckUnhealthyThreshold();
          final HealthCheck hc=new HealthCheck();
          hc.setInterval(interval);
          hc.setHealthyThreshold(healthyThresholds);
          hc.setTarget(target);
          hc.setTimeout(timeout);
          hc.setUnhealthyThreshold(unhealthyThresholds);
          desc.setHealthCheck(hc);
        }
 catch (        Exception ex) {
        }
        try {
          final List<LoadBalancerBackendServerDescription> backendServers=LoadBalancerBackendServers.getLoadBalancerBackendServerDescription(lb);
          final List<BackendServerDescription> backendDescription=Lists.newArrayList();
          for (          final LoadBalancerBackendServerDescription server : backendServers) {
            final BackendServerDescription serverDesc=new BackendServerDescription();
            serverDesc.setInstancePort(server.getInstancePort());
            final PolicyNames polNames=new PolicyNames();
            polNames.setMember(new ArrayList<String>(Lists.transform(server.getPolicyDescriptions(),new Function<LoadBalancerPolicyDescriptionCoreView,String>(){
              @Override public String apply(              LoadBalancerPolicyDescriptionCoreView arg0){
                return arg0.getPolicyName();
              }
            }
)));
            serverDesc.setPolicyNames(polNames);
            backendDescription.add(serverDesc);
          }
          final BackendServerDescriptions backendDescs=new BackendServerDescriptions();
          backendDescs.setMember((ArrayList<BackendServerDescription>)backendDescription);
          desc.setBackendServerDescriptions(backendDescs);
        }
 catch (        final Exception ex) {
          LOG.error("Failed to load backend server description",ex);
        }
        try {
          LoadBalancerSecurityGroupCoreView group=lb.getGroup();
          if (group != null) {
            desc.setSourceSecurityGroup(new SourceSecurityGroup(group.getGroupOwnerAccountId(),group.getName()));
          }
        }
 catch (        Exception ex) {
        }
        if (!lb.getCoreView().getSecurityGroupIdsToNames().isEmpty()) {
          desc.setSecurityGroups(new SecurityGroups(lb.getCoreView().getSecurityGroupIdsToNames().keySet()));
          if (desc.getSourceSecurityGroup() == null) {
            desc.setSourceSecurityGroup(new SourceSecurityGroup(lb.getOwnerAccountNumber(),Iterables.get(lb.getCoreView().getSecurityGroupIdsToNames().values(),0)));
          }
        }
        try {
          final List<LoadBalancerPolicyDescription> lbPolicies=LoadBalancerPolicies.getLoadBalancerPolicyDescription(lb);
          final ArrayList<AppCookieStickinessPolicy> appCookiePolicies=Lists.newArrayList();
          final ArrayList<LBCookieStickinessPolicy> lbCookiePolicies=Lists.newArrayList();
          final ArrayList<String> otherPolicies=Lists.newArrayList();
          for (          final LoadBalancerPolicyDescription policy : lbPolicies) {
            if ("LBCookieStickinessPolicyType".equals(policy.getPolicyTypeName())) {
              final LBCookieStickinessPolicy lbp=new LBCookieStickinessPolicy();
              lbp.setPolicyName(policy.getPolicyName());
              final List<LoadBalancerPolicyAttributeDescription> attrs=policy.findAttributeDescription("CookieExpirationPeriod");
              if (!attrs.isEmpty())               lbp.setCookieExpirationPeriod(Long.parseLong(attrs.get(0).getAttributeValue()));
              lbCookiePolicies.add(lbp);
            }
 else             if ("AppCookieStickinessPolicyType".equals(policy.getPolicyTypeName())) {
              final AppCookieStickinessPolicy app=new AppCookieStickinessPolicy();
              app.setPolicyName(policy.getPolicyName());
              final List<LoadBalancerPolicyAttributeDescription> attrs=policy.findAttributeDescription("CookieName");
              if (!attrs.isEmpty())               app.setCookieName(attrs.get(0).getAttributeValue());
              appCookiePolicies.add(app);
            }
 else             otherPolicies.add(policy.getPolicyName());
          }
          final Policies p=new Policies();
          final LBCookieStickinessPolicies lbp=new LBCookieStickinessPolicies();
          lbp.setMember(lbCookiePolicies);
          final AppCookieStickinessPolicies app=new AppCookieStickinessPolicies();
          app.setMember(appCookiePolicies);
          final PolicyNames other=new PolicyNames();
          other.setMember(otherPolicies);
          p.setAppCookieStickinessPolicies(app);
          p.setLbCookieStickinessPolicies(lbp);
          p.setOtherPolicies(other);
          desc.setPolicies(p);
          desc.setScheme(Objects.toString(lb.getScheme(),"internet-facing"));
        }
 catch (        final Exception ex) {
          LOG.error("Failed to retrieve policies",ex);
        }
        descs.add(desc);
      }
      return descs;
    }
  }
;
  Set<LoadBalancerDescription> descs=lookupLBDescriptions.apply(allowedLBs);
  DescribeLoadBalancersResult descResult=new DescribeLoadBalancersResult();
  LoadBalancerDescriptions lbDescs=new LoadBalancerDescriptions();
  lbDescs.setMember(new ArrayList<>(descs));
  descResult.setLoadBalancerDescriptions(lbDescs);
  reply.setDescribeLoadBalancersResult(descResult);
  reply.set_return(true);
  return reply;
}
