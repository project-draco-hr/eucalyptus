{
  final ModifyLoadBalancerAttributesResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final String accountNumber=ctx.getAccount().getAccountNumber();
  final Function<String,LoadBalancerAttributes> modifyAttributes=new Function<String,LoadBalancerAttributes>(){
    @Override public LoadBalancerAttributes apply(    final String identifier){
      try {
        final LoadBalancer example=LoadBalancer.namedByAccountId(accountNumber,identifier);
        final LoadBalancer loadBalancer=Entities.uniqueResult(example);
        if (RestrictedTypes.filterPrivileged().apply(loadBalancer)) {
          final ConnectionSettings connectionSettings=request.getLoadBalancerAttributes().getConnectionSettings();
          if (connectionSettings != null) {
            loadBalancer.setConnectionIdleTimeout(connectionSettings.getIdleTimeout());
          }
          final CrossZoneLoadBalancing crossZoneLb=request.getLoadBalancerAttributes().getCrossZoneLoadBalancing();
          if (crossZoneLb != null)           loadBalancer.setCrossZoneLoadbalancingEnabled(crossZoneLb.getEnabled());
          final AccessLog accessLog=request.getLoadBalancerAttributes().getAccessLog();
          if (accessLog != null) {
            final boolean accessLogEnabled=accessLog.getEnabled();
            String bucketName=null;
            String bucketPrefix=null;
            Integer emitInterval=null;
            if (accessLogEnabled) {
              bucketName=accessLog.getS3BucketName();
              bucketPrefix=com.google.common.base.Objects.firstNonNull(accessLog.getS3BucketPrefix(),"");
              emitInterval=com.google.common.base.Objects.firstNonNull(accessLog.getEmitInterval(),60);
              if (emitInterval < 5 || emitInterval > 60) {
                throw new InvalidConfigurationRequestException("Access log's emit interval must be between 5 and 60 minutes");
              }
            }
            loadBalancer.setAccessLogEnabled(accessLogEnabled);
            loadBalancer.setAccessLogEmitInterval(emitInterval);
            loadBalancer.setAccessLogS3BucketName(bucketName);
            loadBalancer.setAccessLogS3BucketPrefix(bucketPrefix);
          }
          if (loadBalancer.getAccessLogEnabled() && (loadBalancer.getAccessLogS3BucketName() == null || loadBalancer.getAccessLogS3BucketName().length() <= 0))           throw new InvalidConfigurationRequestException("Bucket name to store access logs must be specified");
          return TypeMappers.transform(loadBalancer,LoadBalancerAttributes.class);
        }
 else {
          throw new NoSuchElementException();
        }
      }
 catch (      LoadBalancingException e) {
        throw Exceptions.toUndeclared(e);
      }
catch (      NoSuchElementException e) {
        throw Exceptions.toUndeclared(new AccessPointNotFoundException());
      }
catch (      TransactionException e) {
        throw Exceptions.toUndeclared(e);
      }
    }
  }
;
  final LoadBalancerAttributes attributes=Entities.asTransaction(LoadBalancer.class,modifyAttributes).apply(request.getLoadBalancerName());
  reply.getModifyLoadBalancerAttributesResult().setLoadBalancerAttributes(attributes);
  return reply;
}
