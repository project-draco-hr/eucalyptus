{
  DeleteLoadBalancerResponseType reply=request.getReply();
  final String candidateLB=request.getLoadBalancerName();
  final Context ctx=Contexts.lookup();
  Function<String,LoadBalancer> findLoadBalancer=new Function<String,LoadBalancer>(){
    @Override @Nullable public LoadBalancer apply(    @Nullable String lbName){
      try {
        return LoadBalancers.getLoadbalancer(ctx,lbName);
      }
 catch (      NoSuchElementException ex) {
        if (ctx.isAdministrator()) {
          try {
            return LoadBalancers.getLoadBalancerByDnsName(lbName);
          }
 catch (          Exception ex2) {
            if (ex2 instanceof NoSuchElementException)             throw Exceptions.toUndeclared(new LoadBalancingException("Unable to find the loadbalancer (use DNS name if you are an administrator)"));
            throw Exceptions.toUndeclared(ex2);
          }
        }
        throw ex;
      }
    }
  }
;
  LoadBalancer lb=null;
  try {
    if (candidateLB != null) {
      String lbToDelete=null;
      try {
        lb=findLoadBalancer.apply(candidateLB);
        lbToDelete=lb.getDisplayName();
      }
 catch (      NoSuchElementException ex) {
      }
catch (      Exception ex) {
        if (ex.getCause() != null && ex.getCause() instanceof LoadBalancingException)         throw (LoadBalancingException)ex.getCause();
 else         throw ex;
      }
      if (lb != null && !LoadBalancingMetadatas.filterPrivileged().apply(lb))       throw new AccessPointNotFoundException();
      if (lb != null) {
        Collection<LoadBalancerListenerCoreView> listeners=lb.getListeners();
        final List<Integer> ports=Lists.newArrayList(Collections2.transform(listeners,new Function<LoadBalancerListenerCoreView,Integer>(){
          @Override public Integer apply(          @Nullable LoadBalancerListenerCoreView arg0){
            return arg0.getLoadbalancerPort();
          }
        }
));
        try {
          DeleteListenerEvent evt=new DeleteListenerEvent();
          evt.setLoadBalancer(lbToDelete);
          evt.setLoadBalancerAccountNumber(lb.getOwnerAccountNumber());
          evt.setContext(ctx);
          evt.setPorts(ports);
          ActivityManager.getInstance().fire(evt);
        }
 catch (        EventFailedException e) {
          LOG.error("failed to handle DeleteListener event",e);
        }
        try {
          DeleteLoadbalancerEvent evt=new DeleteLoadbalancerEvent();
          evt.setLoadBalancer(lbToDelete);
          evt.setLoadBalancerAccountNumber(lb.getOwnerAccountNumber());
          evt.setContext(ctx);
          ActivityManager.getInstance().fire(evt);
        }
 catch (        EventFailedException e) {
          LOG.error("failed to handle DeleteLoadbalancer event",e);
          throw e;
        }
        LoadBalancers.deleteLoadbalancer(UserFullName.getInstance(lb.getOwnerUserId()),lbToDelete);
      }
    }
  }
 catch (  EventFailedException e) {
    LOG.error("Error deleting the loadbalancer: " + e.getMessage(),e);
    final String reason=e.getCause() != null && e.getCause().getMessage() != null ? e.getCause().getMessage() : "internal error";
    throw new InternalFailure400Exception(String.format("Failed to delete the loadbalancer: %s",reason),e);
  }
catch (  LoadBalancingException e) {
    throw new InternalFailure400Exception(e.getMessage());
  }
catch (  Exception e) {
    if (!(e.getCause() instanceof NoSuchElementException)) {
      LOG.error("Error deleting the loadbalancer: " + e.getMessage(),e);
      final String reason="internal error";
      throw new InternalFailure400Exception(String.format("Failed to delete the loadbalancer: %s",reason),e);
    }
  }
 finally {
    if (lb != null)     LoadBalancingServoCache.getInstance().invalidate(lb);
  }
  DeleteLoadBalancerResult result=new DeleteLoadBalancerResult();
  reply.setDeleteLoadBalancerResult(result);
  reply.set_return(true);
  return reply;
}
