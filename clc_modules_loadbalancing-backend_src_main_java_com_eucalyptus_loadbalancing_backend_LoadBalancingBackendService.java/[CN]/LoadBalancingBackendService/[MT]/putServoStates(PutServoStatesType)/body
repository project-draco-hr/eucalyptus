{
  PutServoStatesResponseType reply=request.getReply();
  final String servoId=request.getInstanceId();
  final Instances instances=request.getInstances();
  final MetricData metric=request.getMetricData();
  LoadBalancer lb=null;
  LoadBalancerZone zone=null;
  if (servoId != null) {
    try {
      final LoadBalancerServoInstance servo=LoadBalancingServoCache.getInstance().getLoadBalancerServoInstance(servoId);
      isValidServoRequest(servo,request.getSourceIp());
      zone=LoadBalancingServoCache.getInstance().getLoadBalancerZone(servoId);
      lb=LoadBalancingServoCache.getInstance().getLoadBalancer(servoId);
      if (lb == null)       throw new Exception("Failed to find the loadbalancer");
      if (!zone.getState().equals(LoadBalancerZone.STATE.InService))       lb=null;
    }
 catch (    final LoadBalancingException ex) {
      throw new InternalFailureException("Failed to verify request sender");
    }
catch (    NoSuchElementException ex) {
      LOG.warn("unknown servo VM id is used to query: " + servoId);
    }
catch (    Exception ex) {
      LOG.warn("failed to query servo instance");
    }
  }
  if (lb == null || !LoadBalancingMetadatas.filterPrivileged().apply(lb))   return reply;
  final int healthyTimeoutSec=lb.getHealthCheckInterval() * lb.getHealthyThreshold();
  final long currentTime=System.currentTimeMillis();
  if (instances != null && instances.getMember() != null && instances.getMember().size() > 0) {
    List<LoadBalancerBackendInstance> lbInstances=Lists.newArrayList();
    try {
      lbInstances=LoadBalancingServoCache.getInstance().getLoadBalancerBackendInstances(servoId);
    }
 catch (    final Exception ex) {
      LOG.error("failed to retrieve loadbalancer's backend instances",ex);
    }
    for (    final Instance instance : instances.getMember()) {
      String instanceId=instance.getInstanceId();
      String[] parts=instanceId.split(":");
      if (parts == null || parts.length != 2) {
        LOG.warn("instance id is in wrong format:" + instanceId);
        continue;
      }
      instanceId=parts[0];
      final String state=parts[1];
      LoadBalancerBackendInstance found=null;
      for (      final LoadBalancerBackendInstance lbInstance : lbInstances) {
        if (instanceId.equals(lbInstance.getInstanceId())) {
          found=lbInstance;
          break;
        }
      }
      boolean outdated=false;
      Date lastUpdated;
      if (found != null && (lastUpdated=found.instanceStateLastUpdated()) != null) {
        final int diffSec=(int)((currentTime - lastUpdated.getTime()) / 1000.0);
        if (diffSec > healthyTimeoutSec) {
          outdated=true;
        }
      }
      boolean stateChanged=false;
      if (found != null && !state.equals(found.getState().name()))       stateChanged=true;
      if (outdated || stateChanged) {
        try (final TransactionResource db=Entities.transactionFor(LoadBalancerBackendInstance.class)){
          final LoadBalancerBackendInstance update=Entities.uniqueResult(LoadBalancerBackendInstance.named(lb,found.getInstanceId()));
          update.setState(Enum.valueOf(LoadBalancerBackendInstance.STATE.class,state));
          if (state.equals(LoadBalancerBackendInstance.STATE.OutOfService.name())) {
            update.setReasonCode("Instance");
            update.setDescription("Instance has failed at least the UnhealthyThreshold number of health checks consecutively.");
          }
 else {
            update.setReasonCode("");
            update.setDescription("");
          }
          update.updateInstanceStateTimestamp();
          Entities.persist(update);
          db.commit();
          if (stateChanged) {
            LoadBalancingServoCache.getInstance().invalidate(lb);
          }
 else {
            LoadBalancingServoCache.getInstance().replaceBackendInstance(servoId,found,update);
          }
        }
 catch (        final NoSuchElementException ex) {
          LOG.error("unable to find the loadbancer backend instance");
        }
catch (        final Exception ex) {
          LOG.error("unable to update the state of loadbalancer backend instance");
        }
      }
    }
  }
  List<LoadBalancerBackendInstance> backendInstances=Lists.newArrayList();
  try {
    backendInstances=LoadBalancingServoCache.getInstance().getLoadBalancerBackendInstances(servoId);
  }
 catch (  final Exception ex) {
    LOG.error("failed to retrieve loadbalancer's backend instances",ex);
  }
  for (  final LoadBalancerBackendInstance backend : backendInstances) {
    final String zoneName=backend.getAvailabilityZone().getName();
    if (backend.getState().equals(LoadBalancerBackendInstance.STATE.InService)) {
      LoadBalancerCwatchMetrics.getInstance().updateHealthy(lb.getCoreView(),zoneName,backend.getInstanceId());
    }
 else     if (backend.getState().equals(LoadBalancerBackendInstance.STATE.OutOfService)) {
      LoadBalancerCwatchMetrics.getInstance().updateUnHealthy(lb.getCoreView(),zoneName,backend.getInstanceId());
    }
  }
  if (metric != null && metric.getMember() != null && metric.getMember().size() > 0) {
    try {
      LoadBalancerCwatchMetrics.getInstance().addMetric(zone,metric);
    }
 catch (    Exception ex) {
      LOG.error("Failed to add ELB cloudwatch metric",ex);
    }
  }
  return reply;
}
