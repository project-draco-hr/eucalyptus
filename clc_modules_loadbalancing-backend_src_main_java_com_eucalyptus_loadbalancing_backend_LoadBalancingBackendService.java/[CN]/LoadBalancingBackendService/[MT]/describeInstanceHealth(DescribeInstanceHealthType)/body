{
  DescribeInstanceHealthResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final String lbName=request.getLoadBalancerName();
  Instances instances=request.getInstances();
  LoadBalancer lb;
  try {
    lb=LoadBalancers.getLoadbalancer(ctx,lbName);
  }
 catch (  NoSuchElementException ex) {
    throw new AccessPointNotFoundException();
  }
catch (  Exception ex) {
    throw new InternalFailure400Exception("Failed to find the loadbalancer");
  }
  if (lb != null && !LoadBalancingMetadatas.filterPrivileged().apply(lb)) {
    throw new AccessPointNotFoundException();
  }
  List<LoadBalancerBackendInstanceCoreView> lbInstances=Lists.newArrayList(lb.getBackendInstances());
  List<LoadBalancerBackendInstanceCoreView> instancesFound;
  List<LoadBalancerBackendInstanceCoreView> stateOutdated=Lists.newArrayList();
  final int healthyTimeoutSec=3 * (lb.getHealthCheckInterval() * lb.getHealthyThreshold());
  long currentTime=System.currentTimeMillis();
  if (instances != null && instances.getMember() != null && instances.getMember().size() > 0) {
    instancesFound=Lists.newArrayList();
    for (    Instance inst : instances.getMember()) {
      String instId=inst.getInstanceId();
      for (      final LoadBalancerBackendInstanceCoreView lbInstance : lbInstances) {
        if (instId.equals(lbInstance.getInstanceId())) {
          instancesFound.add(lbInstance);
          break;
        }
      }
    }
  }
 else {
    instancesFound=Lists.newArrayList(lb.getBackendInstances());
  }
  final ArrayList<InstanceState> stateList=Lists.newArrayList();
  for (  final LoadBalancerBackendInstanceCoreView instance : instancesFound) {
    boolean outdated=false;
    Date lastUpdated;
    if ((lastUpdated=instance.instanceStateLastUpdated()) != null) {
      final int diffSec=(int)((currentTime - lastUpdated.getTime()) / 1000.0);
      if (LoadBalancerBackendInstance.STATE.InService.equals(instance.getState()) && diffSec > healthyTimeoutSec) {
        stateOutdated.add(instance);
        outdated=true;
      }
    }
    InstanceState state=new InstanceState();
    state.setInstanceId(instance.getDisplayName());
    if (outdated) {
      state.setState(LoadBalancerBackendInstance.STATE.OutOfService.toString());
      state.setReasonCode("ELB");
      state.setDescription("Internal error: instance health not updated for extended period of time");
    }
 else {
      state.setState(instance.getState().name());
      if (instance.getState().equals(LoadBalancerBackendInstance.STATE.OutOfService) && instance.getReasonCode() != null)       state.setReasonCode(instance.getReasonCode());
      if (instance.getDescription() != null)       state.setDescription(instance.getDescription());
    }
    stateList.add(state);
  }
  if (!stateOutdated.isEmpty()) {
    try (TransactionResource db=Entities.transactionFor(LoadBalancerBackendInstance.class)){
      for (      final LoadBalancerBackendInstanceCoreView instanceView : stateOutdated) {
        final LoadBalancerBackendInstance sample=LoadBalancerBackendInstanceEntityTransform.INSTANCE.apply(instanceView);
        final LoadBalancerBackendInstance update=Entities.uniqueResult(sample);
        update.setState(LoadBalancerBackendInstance.STATE.OutOfService);
        update.setReasonCode("ELB");
        update.setDescription("Internal error: instance health not updated for extended period of time");
        Entities.persist(update);
      }
      db.commit();
    }
 catch (    final Exception ex) {
    }
  }
  final InstanceStates states=new InstanceStates();
  states.setMember(stateList);
  final DescribeInstanceHealthResult result=new DescribeInstanceHealthResult();
  result.setInstanceStates(states);
  reply.setDescribeInstanceHealthResult(result);
  return reply;
}
