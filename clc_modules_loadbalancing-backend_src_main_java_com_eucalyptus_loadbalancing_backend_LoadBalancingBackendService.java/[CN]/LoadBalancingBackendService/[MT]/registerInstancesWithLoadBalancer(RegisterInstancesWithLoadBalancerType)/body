{
  final RegisterInstancesWithLoadBalancerResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final UserFullName ownerFullName=ctx.getUserFullName();
  final String lbName=request.getLoadBalancerName();
  final Collection<Instance> instances=request.getInstances().getMember();
  final LoadBalancer lb;
  try {
    lb=LoadBalancers.getLoadbalancer(ctx,lbName);
  }
 catch (  final Exception ex) {
    throw new AccessPointNotFoundException();
  }
  if (!LoadBalancingMetadatas.filterPrivileged().apply(lb)) {
    throw new AccessPointNotFoundException();
  }
  final Set<String> backends=Sets.newHashSet(Iterables.transform(lb.getBackendInstances(),LoadBalancerBackendInstanceCoreView.instanceId()));
  if (lb.getVpcId() != null) {
    final List<RunningInstancesItemType> instanceItems=EucalyptusActivityTasks.getInstance().describeUserInstances(ctx.getAccountNumber(),Lists.newArrayList(Iterables.transform(instances,Instance.instanceId())));
    for (    final RunningInstancesItemType instanceItem : instanceItems) {
      if (!lb.getVpcId().equals(instanceItem.getVpcId())) {
        throw new InvalidConfigurationRequestException("Invalid instance(s) for load balancer.");
      }
    }
  }
  final Predicate<LoadBalancer> creator=new Predicate<LoadBalancer>(){
    @Override public boolean apply(    LoadBalancer lb){
      for (      Instance vm : instances) {
        if (lb.hasBackendInstance(vm.getInstanceId()))         continue;
        try {
          final LoadBalancerBackendInstance beInstance=LoadBalancerBackendInstance.newInstance(ownerFullName,lb,vm.getInstanceId());
          beInstance.setState(LoadBalancerBackendInstance.STATE.OutOfService);
          Entities.persist(beInstance);
        }
 catch (        final LoadBalancingException ex) {
          throw Exceptions.toUndeclared(ex);
        }
      }
      return true;
    }
  }
;
  try {
    final RegisterInstancesEvent evt=new RegisterInstancesEvent();
    evt.setLoadBalancer(lbName);
    evt.setLoadBalancerAccountNumber(lb.getOwnerAccountNumber());
    evt.setContext(ctx);
    evt.setInstances(instances);
    ActivityManager.getInstance().fire(evt);
  }
 catch (  EventFailedException e) {
    LOG.error("failed to handle RegisterInstances event",e);
    final String reason=e.getCause() != null && e.getCause().getMessage() != null ? e.getCause().getMessage() : "internal error";
    throw new InternalFailure400Exception(String.format("Failed to register instances: %s",reason),e);
  }
  try {
    Entities.asTransaction(LoadBalancerBackendInstance.class,creator).apply(lb);
    Iterables.addAll(backends,Iterables.transform(instances,Instance.instanceId()));
  }
 catch (  Exception ex) {
    throw handleException(ex);
  }
 finally {
    if (lb != null)     LoadBalancingServoCache.getInstance().invalidate(lb);
  }
  final Instances returnInstances=new Instances();
  Iterables.addAll(returnInstances.getMember(),Iterables.transform(backends,Instance.instance()));
  reply.getRegisterInstancesWithLoadBalancerResult().setInstances(returnInstances);
  return reply;
}
