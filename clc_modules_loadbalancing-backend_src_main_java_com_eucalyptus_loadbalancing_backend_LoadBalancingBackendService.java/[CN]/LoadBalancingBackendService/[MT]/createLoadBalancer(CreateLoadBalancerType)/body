{
  final CreateLoadBalancerResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final UserFullName ownerFullName=ctx.getUserFullName();
  final String lbName=request.getLoadBalancerName();
  if (lbName == null || !HostSpecifier.isValid(String.format("%s.com",lbName)) || !lbName.matches("[a-zA-Z0-9-]{1,32}")) {
    throw new InvalidConfigurationRequestException("Invalid character found in the loadbalancer name");
  }
  final Map<String,String> tags=Maps.newHashMap();
  if (request.getTags() != null) {
    for (    final Tag tag : request.getTags().getMember()) {
      if (tags.put(tag.getKey(),Strings.nullToEmpty(tag.getValue())) != null) {
        throw new LoadBalancingBackendClientException("DuplicateTagKeys","Duplicate tag key (" + tag.getKey() + ")");
      }
    }
    final int userTags=Iterables.size(Iterables.filter(tags.keySet(),Predicates.not(isReservedTagPrefix())));
    if (tags.size() - userTags > 0 && !Contexts.lookup().isPrivileged()) {
      throw new InvalidConfigurationRequestException("Invalid tag key (reserved prefix)");
    }
    if (userTags > MAX_TAGS) {
      throw Exceptions.toUndeclared(new LoadBalancingBackendClientException("TooManyTags","Tag limit exceeded"));
    }
  }
  final List<Listener> listeners=request.getListeners() != null ? request.getListeners().getMember() : Collections.<Listener>emptyList();
  LoadBalancers.validateListener(listeners);
  try {
    for (    final Listener l : listeners) {
      if ("HTTPS".equals(l.getProtocol().toUpperCase()) || "SSL".equals(l.getProtocol().toUpperCase())) {
        final String certArn=l.getSSLCertificateId();
        if (certArn == null || certArn.length() <= 0)         throw new InvalidConfigurationRequestException("SSLCertificateId is required for HTTPS or SSL protocol");
        LoadBalancers.checkSSLCertificate(ctx.getAccountNumber(),certArn);
      }
    }
  }
 catch (  Exception ex) {
    if (!(ex instanceof LoadBalancingException)) {
      LOG.error("failed to check SSL certificate Id",ex);
      ex=new InternalFailure400Exception("failed to check SSL certificate Id",ex);
    }
    throw (LoadBalancingException)ex;
  }
  if (request.getAvailabilityZones() != null && !request.getAvailabilityZones().getMember().isEmpty()) {
    final Set<String> validZones=Sets.newHashSet();
    try {
      Iterables.addAll(validZones,Iterables.transform(EucalyptusActivityTasks.getInstance().describeAvailabilityZones(),ClusterInfoType.zoneName()));
    }
 catch (    Exception ex) {
      throw new InternalFailure400Exception("Unable to verify the requested zones");
    }
    for (    final String zone : request.getAvailabilityZones().getMember()) {
      if (!validZones.contains(zone)) {
        throw new InvalidConfigurationRequestException("No cluster named " + zone + " is available");
      }
    }
  }
  String subnetVpcId=null;
  final Map<String,String> zoneToSubnetIdMap=Maps.newHashMap();
  if (request.getSubnets() != null) {
    final List<SubnetType> subnets=EucalyptusActivityTasks.getInstance().describeSubnets(request.getSubnets().getMember());
    if (subnets.size() != request.getSubnets().getMember().size()) {
      throw new LoadBalancingBackendClientException("SubnetNotFound","Invalid subnet(s)");
    }
    for (    final SubnetType subnetType : subnets) {
      if (subnetVpcId == null) {
        subnetVpcId=subnetType.getVpcId();
      }
 else       if (!subnetVpcId.equals(subnetType.getVpcId())) {
        throw new InvalidConfigurationRequestException("Subnets must belong to the same VPC");
      }
      if (zoneToSubnetIdMap.put(subnetType.getAvailabilityZone(),subnetType.getSubnetId()) != null) {
        throw new InvalidConfigurationRequestException("Multiple subnets for zone (" + subnetType.getAvailabilityZone() + ")");
      }
    }
  }
  final AccountFullName accountFullName=ctx.getAccount();
  boolean defaultVpc=false;
  if (subnetVpcId == null) {
    final Optional<VpcType> vpcOptional=EucalyptusActivityTasks.getInstance().defaultVpc(accountFullName);
    subnetVpcId=vpcOptional.transform(VpcType.id()).orNull();
    defaultVpc=subnetVpcId != null;
  }
  final String vpcId=subnetVpcId;
  if (defaultVpc && zoneToSubnetIdMap.isEmpty() && request.getAvailabilityZones() != null) {
    final List<SubnetType> subnets=EucalyptusActivityTasks.getInstance().describeSubnetsByZone(vpcId,true,request.getAvailabilityZones().getMember());
    CollectionUtils.putAll(subnets,zoneToSubnetIdMap,SubnetType.zone(),SubnetType.id());
    if (request.getAvailabilityZones().getMember().size() != zoneToSubnetIdMap.size()) {
      throw new InvalidConfigurationRequestException("Default subnet not found for zone(s)");
    }
  }
  LoadBalancer.Scheme reqScheme=LoadBalancer.Scheme.fromString(request.getScheme()).orNull();
  if (reqScheme == null && !Strings.isNullOrEmpty(request.getScheme())) {
    throw new InvalidConfigurationRequestException("Invalid scheme (" + request.getScheme() + ")");
  }
  if (reqScheme != null && vpcId == null) {
    if (reqScheme != LoadBalancer.Scheme.InternetFacing) {
      throw new InvalidConfigurationRequestException("Scheme (" + request.getScheme() + ") should not be specified for EC2-Classic platform");
    }
 else {
      reqScheme=null;
    }
  }
  final LoadBalancer.Scheme scheme=reqScheme;
  if (vpcId != null && scheme != LoadBalancer.Scheme.Internal)   try {
    final List<InternetGatewayType> internetGateways=EucalyptusActivityTasks.getInstance().describeInternetGateways(Collections.singleton(vpcId));
    if (internetGateways.isEmpty()) {
      throw new LoadBalancingBackendClientException("InvalidSubnet","VPC " + vpcId + " has no internet gateway");
    }
  }
 catch (  final LoadBalancingException e) {
    throw e;
  }
catch (  final Exception e) {
    LOG.error("Error checking internet gateway",e);
    throw new InternalFailureException("Unable to verify VPC configuration");
  }
  final Set<String> securityGroupIds=Sets.newHashSet();
  if (request.getSecurityGroups() != null) {
    securityGroupIds.addAll(request.getSecurityGroups().getMember());
  }
 else   if (vpcId != null && !defaultVpc) {
    final List<SecurityGroupItemType> groups=EucalyptusActivityTasks.getInstance().describeUserSecurityGroupsByName(accountFullName,vpcId,"default");
    if (groups.isEmpty()) {
      throw new InvalidConfigurationRequestException("Default security group not found for VPC " + vpcId);
    }
    securityGroupIds.add(groups.get(0).getGroupId());
  }
  if (!securityGroupIds.isEmpty() && vpcId == null) {
    throw new InvalidConfigurationRequestException("Security groups should not be specified for EC2-Classic platform");
  }
  final List<SecurityGroupItemType> groups=securityGroupIds.isEmpty() ? Collections.<SecurityGroupItemType>emptyList() : EucalyptusActivityTasks.getInstance().describeUserSecurityGroupsById(accountFullName,vpcId,securityGroupIds);
  if (groups.size() != securityGroupIds.size()) {
    throw new LoadBalancingBackendClientException("InvalidSecurityGroup","Invalid security group(s)");
  }
  final Collection<String> zones=Lists.newArrayList();
  if (request.getAvailabilityZones() != null)   zones.addAll(request.getAvailabilityZones().getMember());
  if (zones.isEmpty())   zones.addAll(zoneToSubnetIdMap.keySet());
  if (!zoneToSubnetIdMap.isEmpty() && !zoneToSubnetIdMap.keySet().equals(Sets.newHashSet(zones))) {
    throw new InvalidConfigurationRequestException("Availability zones and subnets are inconsistent");
  }
  final Supplier<LoadBalancer> allocator=new Supplier<LoadBalancer>(){
    @Override public LoadBalancer get(){
      try {
        final Map<String,String> securityGroupIdsToNames=CollectionUtils.putAll(groups,Maps.<String,String>newHashMap(),SecurityGroupItemType.groupId(),SecurityGroupItemType.groupName());
        return LoadBalancers.addLoadbalancer(ownerFullName,lbName,vpcId,scheme,securityGroupIdsToNames,tags);
      }
 catch (      LoadBalancingException e) {
        throw Exceptions.toUndeclared(e);
      }
    }
  }
;
  final LoadBalancer lb;
  try {
    lb=LoadBalancingMetadatas.allocateUnitlessResource(allocator);
  }
 catch (  Exception e) {
    throw handleException(e);
  }
  Function<String,Boolean> rollback=new Function<String,Boolean>(){
    @Override public Boolean apply(    String lbName){
      try {
        LoadBalancers.unsetForeignKeys(ctx,lbName);
      }
 catch (      final Exception ex) {
        LOG.warn("unable to unset foreign keys",ex);
      }
      try {
        LoadBalancers.removeZone(lbName,ctx,zones);
      }
 catch (      final Exception ex) {
        LOG.error("unable to delete availability zones during rollback",ex);
      }
      try {
        LoadBalancers.deleteLoadbalancer(ownerFullName,lbName);
      }
 catch (      LoadBalancingException ex) {
        LOG.error("failed to rollback the loadbalancer: " + lbName,ex);
        return false;
      }
      return true;
    }
  }
;
  if (zones != null && zones.size() > 0) {
    try {
      LoadBalancers.addZone(lbName,ctx,zones,zoneToSubnetIdMap);
    }
 catch (    LoadBalancingException ex) {
      rollback.apply(lbName);
      throw ex;
    }
catch (    Exception ex) {
      rollback.apply(lbName);
      throw new InternalFailure400Exception("Failed to persist the zone");
    }
  }
  Entities.evictCache(LoadBalancer.class);
  try {
    NewLoadbalancerEvent evt=new NewLoadbalancerEvent();
    evt.setLoadBalancer(lbName);
    evt.setLoadBalancerAccountNumber(lb.getOwnerAccountNumber());
    evt.setContext(ctx);
    evt.setZones(zones);
    ActivityManager.getInstance().fire(evt);
  }
 catch (  EventFailedException e) {
    LOG.error("failed to handle new loadbalancer event",e);
    rollback.apply(lbName);
    final String reason=e.getCause() != null && e.getCause().getMessage() != null ? e.getCause().getMessage() : "internal error";
    throw new InternalFailure400Exception(String.format("Failed to create the loadbalancer: %s",reason),e);
  }
  if (!listeners.isEmpty()) {
    LoadBalancers.createLoadbalancerListener(lbName,ctx,Lists.newArrayList(listeners));
    try {
      CreateListenerEvent evt=new CreateListenerEvent();
      evt.setLoadBalancer(lbName);
      evt.setLoadBalancerAccountNumber(lb.getOwnerAccountNumber());
      evt.setListeners(listeners);
      evt.setContext(ctx);
      ActivityManager.getInstance().fire(evt);
    }
 catch (    EventFailedException e) {
      LOG.error("failed to handle createListener event",e);
      final String reason=e.getCause() != null && e.getCause().getMessage() != null ? e.getCause().getMessage() : "internal error";
      throw new InternalFailure400Exception(String.format("Failed to setup the listener: %s",reason),e);
    }
  }
  final CreateLoadBalancerResult result=new CreateLoadBalancerResult();
  result.setDnsName(LoadBalancers.getLoadBalancerDnsName(lb));
  reply.setCreateLoadBalancerResult(result);
  reply.set_return(true);
  return reply;
}
