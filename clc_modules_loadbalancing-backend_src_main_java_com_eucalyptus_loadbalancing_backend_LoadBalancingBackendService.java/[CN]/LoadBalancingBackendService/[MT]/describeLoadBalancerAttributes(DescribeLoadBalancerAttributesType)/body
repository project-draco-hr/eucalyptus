{
  final DescribeLoadBalancerAttributesResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final String accountNumber=ctx.getAccount().getAccountNumber();
  final Function<String,LoadBalancerAttributes> lookupAttributes=new Function<String,LoadBalancerAttributes>(){
    @Override public LoadBalancerAttributes apply(    final String identifier){
      try {
        final LoadBalancer example=LoadBalancer.namedByAccountId(accountNumber,identifier);
        final LoadBalancer loadBalancer=Entities.uniqueResult(example);
        if (RestrictedTypes.filterPrivileged().apply(loadBalancer)) {
          return TypeMappers.transform(loadBalancer,LoadBalancerAttributes.class);
        }
 else {
          throw new NoSuchElementException();
        }
      }
 catch (      NoSuchElementException e) {
        throw Exceptions.toUndeclared(new AccessPointNotFoundException());
      }
catch (      TransactionException e) {
        throw Exceptions.toUndeclared(e);
      }
    }
  }
;
  final LoadBalancerAttributes attributes=Entities.asTransaction(LoadBalancer.class,lookupAttributes).apply(request.getLoadBalancerName());
  reply.getDescribeLoadBalancerAttributesResult().setLoadBalancerAttributes(attributes);
  return reply;
}
