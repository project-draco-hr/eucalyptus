{
  final AWSCredentialsProvider credentialsProvider=new SecurityTokenAWSCredentialsProvider(user);
  final AmazonSimpleWorkflowClient client=new AmazonSimpleWorkflowClient(credentialsProvider,buildConfiguration(text));
  client.setEndpoint(ServiceUris.remote(Topology.lookup(SimpleWorkflow.class)).toString());
  client.addRequestHandler(new RequestHandler2(){
    @Override public void beforeRequest(    final Request<?> request){
      request.addHeader("Euca-Nonce",UUID.randomUUID().toString());
    }
    @Override public void afterResponse(    final Request<?> request,    final Response<?> response){
    }
    @Override public void afterError(    final Request<?> request,    final Response<?> response,    final Exception e){
      final String errorMessage=Strings.nullToEmpty(e.getMessage());
      boolean resetEndpoint=false;
      if (errorMessage.contains("Response Code: 404") || errorMessage.contains("Response Code: 503")) {
        resetEndpoint=true;
      }
 else       if (Exceptions.isCausedBy(e,ConnectException.class)) {
        resetEndpoint=true;
      }
 else       if (Exceptions.isCausedBy(e,NoHttpResponseException.class)) {
        resetEndpoint=true;
      }
      if (resetEndpoint) {
        try {
          client.setEndpoint(ServiceUris.remote(Topology.lookup(SimpleWorkflow.class)).toString());
        }
 catch (        final Exception e2) {
        }
      }
      if (e instanceof AmazonServiceException) {
        final int status=((AmazonServiceException)e).getStatusCode();
        if (status == 403) {
          credentialsProvider.refresh();
        }
      }
    }
  }
);
  return client;
}
