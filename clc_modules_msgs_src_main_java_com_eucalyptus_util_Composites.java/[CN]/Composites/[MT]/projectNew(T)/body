{
  try {
    List<Object> dests=Lists.transform(subTypeCache.get(source).getSourceTypes(),new Function<Class,Object>(){
      @Override public Object apply(      Class arg0){
        try {
          return arg0.newInstance();
        }
 catch (        Exception e) {
          throw new RuntimeException(e);
        }
      }
    }
);
    return project(source,dests);
  }
 catch (  Exception e) {
    throw new RuntimeException("Projection for " + source.getClass().getCanonicalName() + " failed because of "+ e.getMessage(),e);
  }
}
