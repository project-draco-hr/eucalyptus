{
  Interceptor i=new EmptyInterceptor(){
    private static final long serialVersionUID=1L;
    @Override public void onDelete(    Object entity,    Serializable id,    Object[] state,    String[] propertyNames,    Type[] types){
      LOG.debug(String.format("%s(): %s %s",Threads.currentStackFrame().getMethodName(),entity.getClass().getSimpleName(),id));
      super.onDelete(entity,id,state,propertyNames,types);
    }
    @Override public boolean onFlushDirty(    Object entity,    Serializable id,    Object[] currentState,    Object[] previousState,    String[] propertyNames,    Type[] types){
      LOG.debug(String.format("%s(): %s %s",Threads.currentStackFrame().getMethodName(),entity.getClass().getSimpleName(),id));
      return super.onFlushDirty(entity,id,currentState,previousState,propertyNames,types);
    }
    @Override public boolean onLoad(    Object entity,    Serializable id,    Object[] state,    String[] propertyNames,    Type[] types){
      LOG.debug(String.format("%s(): %s %s",Threads.currentStackFrame().getMethodName(),entity.getClass().getSimpleName(),id));
      return super.onLoad(entity,id,state,propertyNames,types);
    }
    @Override public boolean onSave(    Object entity,    Serializable id,    Object[] state,    String[] propertyNames,    Type[] types){
      LOG.debug(String.format("%s(): %s %s",Threads.currentStackFrame().getMethodName(),entity.getClass().getSimpleName(),id));
      return super.onSave(entity,id,state,propertyNames,types);
    }
    @Override public void postFlush(    Iterator entities){
      LOG.debug(String.format("%s()",Threads.currentStackFrame().getMethodName()));
      super.postFlush(entities);
    }
    @Override public void preFlush(    Iterator entities){
      LOG.debug(String.format("%s(): %s",Threads.currentStackFrame().getMethodName(),Iterators.toString(entities,"\n")));
      super.preFlush(entities);
    }
    @Override public Boolean isTransient(    Object entity){
      return super.isTransient(entity);
    }
    @Override public void afterTransactionBegin(    Transaction tx){
      LOG.debug(String.format("%s(): %s",Threads.currentStackFrame().getMethodName(),tx.toString()));
      super.afterTransactionBegin(tx);
    }
    @Override public void afterTransactionCompletion(    Transaction tx){
      LOG.debug(String.format("%s(): %s",Threads.currentStackFrame().getMethodName(),tx.toString()));
      super.afterTransactionCompletion(tx);
    }
    @Override public void beforeTransactionCompletion(    Transaction tx){
      LOG.debug(String.format("%s(): %s",Threads.currentStackFrame().getMethodName(),tx.toString()));
      super.beforeTransactionCompletion(tx);
    }
    @Override public void onCollectionRemove(    Object collection,    Serializable key) throws CallbackException {
      super.onCollectionRemove(collection,key);
    }
    @Override public void onCollectionRecreate(    Object collection,    Serializable key) throws CallbackException {
      LOG.debug(String.format("%s(): %s %s",Threads.currentStackFrame().getMethodName(),key,collection));
      super.onCollectionRecreate(collection,key);
    }
    @Override public void onCollectionUpdate(    Object collection,    Serializable key) throws CallbackException {
      LOG.debug(String.format("%s(): %s %s",Threads.currentStackFrame().getMethodName(),key,collection));
      super.onCollectionUpdate(collection,key);
    }
  }
;
  return interceptor=i;
}
