{
  try (final TransactionResource db=Entities.transactionFor(StaticDatabasePropertyEntry.class)){
    try {
      final StaticDatabasePropertyEntry pipeline_max_query_property=Entities.uniqueResult(new StaticDatabasePropertyEntry(null,"bootstrap.webservices.pipeline_max_query_request_size",null));
      final StaticDatabasePropertyEntry max_chunk_property=Entities.uniqueResult(new StaticDatabasePropertyEntry(null,"bootstrap.webservices.http_max_chunk_bytes",null));
      LOG.info(" Checking to make sure default pipeline_max_query_request_size is not smaller than http_max_chunk_bytes.");
      if (Integer.parseInt(max_chunk_property.getValue()) > Integer.parseInt(pipeline_max_query_property.getValue())) {
        pipeline_max_query_property.setValue(max_chunk_property.getValue());
      }
    }
 catch (    NoSuchElementException e) {
      LOG.info("Property not found, skipped size check for : bootstrap.webservices.pipeline_max_query_request_size");
    }
    try {
      final String expect="RSA:DSS:ECDSA:+RC4:+3DES:TLS_EMPTY_RENEGOTIATION_INFO_SCSV:!NULL:!EXPORT:!EXPORT1024:!MD5:!DES";
      final String update="RSA:DSS:ECDSA:+3DES:TLS_EMPTY_RENEGOTIATION_INFO_SCSV:!NULL:!EXPORT:!EXPORT1024:!MD5:!DES:!RC4";
      for (      final String propName : Lists.newArrayList("bootstrap.webservices.ssl.user_ssl_ciphers","www.https_ciphers","bootstrap.webservices.ssl.server_ssl_ciphers")) {
        final StaticDatabasePropertyEntry ciphersProperty=Entities.uniqueResult(new StaticDatabasePropertyEntry(null,propName,null));
        if (expect.equals(ciphersProperty.getValue())) {
          LOG.info("Updating ciphers property " + propName + " with value "+ update);
          ciphersProperty.setValue(update);
        }
      }
    }
 catch (    Exception e) {
      LOG.error("Error updating cipher suite configuration to remove RC4",e);
    }
    db.commit();
  }
 catch (  Exception ex) {
    throw Exceptions.toUndeclared(ex);
  }
}
