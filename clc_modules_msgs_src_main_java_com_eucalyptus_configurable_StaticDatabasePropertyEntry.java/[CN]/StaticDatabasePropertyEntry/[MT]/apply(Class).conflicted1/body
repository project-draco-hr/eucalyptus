{
  ImmutableMap<String,String[]> changes=ImmutableMap.<String,String[]>builder().put("imaging.imaging_worker_availability_zones",new String[]{"services.imaging.worker.availability_zones","com.eucalyptus.imaging.ImagingServiceProperties.availability_zones"}).put("imaging.imaging_worker_emi",new String[]{"services.imaging.worker.image","com.eucalyptus.imaging.ImagingServiceProperties.image"}).put("imaging.imaging_worker_enabled",new String[]{"services.imaging.worker.configured","com.eucalyptus.imaging.worker.ImagingServiceLaunchers.configured"}).put("imaging.imaging_worker_healthcheck",new String[]{"services.imaging.worker.healthcheck","com.eucalyptus.imaging.ImagingServiceProperties.healthcheck"}).put("imaging.imaging_worker_instance_type",new String[]{"services.imaging.worker.instance_type","com.eucalyptus.imaging.ImagingServiceProperties.instance_type"}).put("imaging.imaging_worker_keyname",new String[]{"services.imaging.worker.keyname","com.eucalyptus.imaging.ImagingServiceProperties.keyname"}).put("imaging.imaging_worker_log_server",new String[]{"services.imaging.worker.log_server","com.eucalyptus.imaging.ImagingServiceProperties.log_server"}).put("imaging.imaging_worker_log_server_port",new String[]{"services.imaging.worker.log_server_port","com.eucalyptus.imaging.ImagingServiceProperties.log_server_port"}).put("imaging.imaging_worker_ntp_server",new String[]{"services.imaging.worker.ntp_server","com.eucalyptus.imaging.ImagingServiceProperties.ntp_server"}).put("imaging.import_task_expiration_hours",new String[]{"services.imaging.import_task_expiration_hours","com.eucalyptus.imaging.ImportTaskProperties.import_task_expiration_hours"}).put("imaging.import_task_timeout_minutes",new String[]{"services.imaging.import_task_timeout_minutes","com.eucalyptus.imaging.ImportTaskProperties.import_task_timeout_minutes"}).put("loadbalancing.loadbalancer_app_cookie_duration",new String[]{"services.loadbalancing.worker.app_cookie_duration","com.eucalyptus.loadbalancing.activities.LoadBalancerASGroupCreator.app_cookie_duration"}).put("loadbalancing.loadbalancer_dns_subdomain",new String[]{"services.loadbalancing.dns_subdomain","com.eucalyptus.loadbalancing.LoadBalancerDnsRecord.dns_subdomain"}).put("loadbalancing.loadbalancer_dns_ttl",new String[]{"services.loadbalancing.dns_ttl","com.eucalyptus.loadbalancing.LoadBalancerDnsRecord.dns_ttl"}).put("loadbalancing.loadbalancer_emi",new String[]{"services.loadbalancing.worker.image","com.eucalyptus.loadbalancing.activities.LoadBalancerASGroupCreator.image"}).put("loadbalancing.loadbalancer_instance_type",new String[]{"services.loadbalancing.worker.instance_type","com.eucalyptus.loadbalancing.activities.LoadBalancerASGroupCreator.instance_type"}).put("loadbalancing.loadbalancer_num_vm",new String[]{"services.loadbalancing.vm_per_zone","com.eucalyptus.loadbalancing.activities.EventHandlerChainNew.vm_per_zone"}).put("loadbalancing.loadbalancer_restricted_ports",new String[]{"services.loadbalancing.restricted_ports","com.eucalyptus.loadbalancing.LoadBalancerListener.restricted_ports"}).put("loadbalancing.loadbalancer_vm_keyname",new String[]{"services.loadbalancing.worker.keyname","com.eucalyptus.loadbalancing.activities.LoadBalancerASGroupCreator.keyname"}).put("loadbalancing.loadbalancer_vm_ntp_server",new String[]{"services.loadbalancing.worker.ntp_server","com.eucalyptus.loadbalancing.activities.LoadBalancerASGroupCreator.ntp_server"}).build();
  EntityTransaction db=Entities.get(StaticDatabasePropertyEntry.class);
  LOG.info("Updating service VM properties");
  try {
    List<StaticDatabasePropertyEntry> entities=Entities.query(new StaticDatabasePropertyEntry());
    for (    StaticDatabasePropertyEntry entry : entities) {
      if (entry.getPropName() != null && changes.containsKey(entry.getPropName())) {
        String[] newProperty=changes.get(entry.getPropName());
        LOG.info("Upgrading: Copying property value of'" + entry.getPropName() + "' to '"+ newProperty[0]+ "'");
        StaticDatabasePropertyEntry.update(newProperty[1],newProperty[0],entry.getValue());
        LOG.info("Deleting old property from DB'" + entry.getPropName() + "'");
        Entities.delete(entry);
      }
    }
    db.commit();
    return true;
  }
 catch (  Exception ex) {
    throw Exceptions.toUndeclared(ex);
  }
 finally {
    if (db.isActive())     db.rollback();
  }
}
