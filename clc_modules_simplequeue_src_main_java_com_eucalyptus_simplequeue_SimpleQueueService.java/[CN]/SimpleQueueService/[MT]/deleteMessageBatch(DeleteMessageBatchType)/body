{
  DeleteMessageBatchResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    Queue queue=getAndCheckPermissionOnQueue(request.getQueueUrl());
    if (request.getDeleteMessageBatchRequestEntry() == null || request.getDeleteMessageBatchRequestEntry().isEmpty()) {
      throw new EmptyBatchRequestException("There should be at least one DeleteMessageBatchRequestEntry in the request.");
    }
    if (request.getDeleteMessageBatchRequestEntry().size() > SimpleQueueProperties.MAX_NUM_BATCH_ENTRIES) {
      throw new TooManyEntriesInBatchRequestException("Maximum number of entries per request are " + SimpleQueueProperties.MAX_NUM_BATCH_ENTRIES + ". You have sent "+ request.getDeleteMessageBatchRequestEntry().size()+ ".");
    }
    Set<String> previousIds=Sets.newHashSet();
    Pattern batchIdPattern=Pattern.compile("[A-Za-z0-9_-]+");
    for (    DeleteMessageBatchRequestEntry batchRequestEntry : request.getDeleteMessageBatchRequestEntry()) {
      if (batchRequestEntry.getId() == null || batchRequestEntry.getId().isEmpty()) {
        throw new MissingParameterException("A batch entry id is a required field");
      }
      if (batchRequestEntry.getId().length() > SimpleQueueProperties.MAX_BATCH_ID_LENGTH || !batchIdPattern.matcher(batchRequestEntry.getId()).matches()) {
        throw new InvalidBatchEntryIdException("A batch entry id can only contain alphanumeric characters, hyphens and underscores. It can be at most " + SimpleQueueProperties.MAX_BATCH_ID_LENGTH + " letters long.");
      }
      if (previousIds.contains(batchRequestEntry.getId())) {
        throw new BatchEntryIdsNotDistinctException("A batch entry id is duplicated in this request");
      }
      previousIds.add(batchRequestEntry.getId());
    }
    Date now=new Date();
    for (    DeleteMessageBatchRequestEntry batchRequestEntry : request.getDeleteMessageBatchRequestEntry()) {
      try {
        handleDeleteMessage(queue,batchRequestEntry.getReceiptHandle(),now);
        DeleteMessageBatchResultEntry success=new DeleteMessageBatchResultEntry();
        success.setId(batchRequestEntry.getId());
        reply.getDeleteMessageBatchResult().getDeleteMessageBatchResultEntry().add(success);
      }
 catch (      Exception ex) {
        try {
          handleException(ex);
        }
 catch (        SimpleQueueException ex1) {
          BatchResultErrorEntry failure=new BatchResultErrorEntry();
          failure.setId(batchRequestEntry.getId());
          failure.setCode(ex1.getCode());
          failure.setMessage(ex1.getMessage());
          failure.setSenderFault(ex1.getRole() != null && ex1.getRole().equals(Role.Sender));
          reply.getDeleteMessageBatchResult().getBatchResultErrorEntry().add(failure);
        }
      }
    }
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}
