{
  ReceiveMessageResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    final String accountId=ctx.getAccountNumber();
    QueueUrlParts queueUrlParts=getQueueUrlParts(request.getQueueUrl());
    if (!queueUrlParts.getAccountId().equals(accountId)) {
      throw new AccessDeniedException("Access to the resource " + request.getQueueUrl() + " is denied.");
    }
    String queueName=queueUrlParts.getQueueName();
    Queue queue=PersistenceFactory.getQueuePersistence().lookupQueue(accountId,queueName);
    if (queue == null) {
      throw new QueueDoesNotExistException("The specified queue does not exist.");
    }
    Map<String,String> receiveAttributes=Maps.newHashMap();
    if (request.getVisibilityTimeout() != null) {
      if (request.getVisibilityTimeout() < 0 || request.getVisibilityTimeout() > MAX_VISIBILITY_TIMEOUT) {
        throw new InvalidParameterValueException("VisibilityTimeout must be between 0 and " + MAX_VISIBILITY_TIMEOUT);
      }
      receiveAttributes.put(Constants.VISIBILITY_TIMEOUT,"" + request.getVisibilityTimeout());
    }
    if (request.getWaitTimeSeconds() != null) {
      if (request.getWaitTimeSeconds() < 0 || request.getWaitTimeSeconds() > MAX_RECEIVE_MESSAGE_WAIT_TIME_SECONDS) {
        throw new InvalidParameterValueException("WaitTimeSeconds must be between 0 and " + MAX_RECEIVE_MESSAGE_WAIT_TIME_SECONDS);
      }
      receiveAttributes.put(Constants.WAIT_TIME_SECONDS,"" + request.getWaitTimeSeconds());
    }
    int maxNumberOfMessages=1;
    if (request.getMaxNumberOfMessages() != null) {
      if (request.getMaxNumberOfMessages() < 1 || request.getMaxNumberOfMessages() > MAX_RECEIVE_MESSAGE_MAX_NUMBER_OF_MESSAGES) {
        throw new InvalidParameterValueException("WaitTimeSeconds must be between 1 and " + MAX_RECEIVE_MESSAGE_MAX_NUMBER_OF_MESSAGES);
      }
      maxNumberOfMessages=request.getMaxNumberOfMessages();
    }
    receiveAttributes.put(Constants.MAX_NUMBER_OF_MESSAGES,"" + maxNumberOfMessages);
    Collection<MessagePersistence.MessageWithReceiveCounts> messagesWithReceiveCounts=PersistenceFactory.getMessagePersistence().receiveMessages(queue,receiveAttributes);
    boolean hasActiveLegalRedrivePolicy=false;
    Queue deadLetterQueue=null;
    int maxReceiveCount=0;
    try {
      if (queue.getRedrivePolicy() != null && queue.getRedrivePolicy().isObject()) {
        Ern deadLetterQueueArn=Ern.parse(queue.getRedrivePolicy().get(Constants.DEAD_LETTER_TARGET_ARN).textValue());
        maxReceiveCount=queue.getRedrivePolicy().get(Constants.MAX_RECEIVE_COUNT).asInt();
        deadLetterQueue=PersistenceFactory.getQueuePersistence().lookupQueue(deadLetterQueueArn.getAccount(),deadLetterQueueArn.getResourceName());
        hasActiveLegalRedrivePolicy=(deadLetterQueue != null && maxReceiveCount > 0);
      }
    }
 catch (    Exception ignore) {
    }
    if (messagesWithReceiveCounts != null) {
      for (      MessagePersistence.MessageWithReceiveCounts messageWithReceiveCounts : messagesWithReceiveCounts) {
        Message message=messageWithReceiveCounts.getMessage();
        if (hasActiveLegalRedrivePolicy && messageWithReceiveCounts.getLocalReceiveCount() > maxReceiveCount) {
          PersistenceFactory.getMessagePersistence().moveMessageToDeadLetterQueue(queue,message,deadLetterQueue);
        }
 else {
          filterReceiveAttributes(message,request.getAttributeName());
          filterReceiveMessageAttributes(message,request.getMessageAttributeName());
          reply.getReceiveMessageResult().getMessage().add(message);
        }
      }
    }
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}
