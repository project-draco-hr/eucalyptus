{
  ReceiveMessageResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    Queue queue=getAndCheckPermissionOnQueue(request.getQueueUrl());
    Map<String,String> receiveAttributes=Maps.newHashMap();
    if (request.getVisibilityTimeout() != null) {
      if (request.getVisibilityTimeout() < 0 || request.getVisibilityTimeout() > MAX_VISIBILITY_TIMEOUT) {
        throw new InvalidParameterValueException("VisibilityTimeout must be between 0 and " + MAX_VISIBILITY_TIMEOUT);
      }
      receiveAttributes.put(Constants.VISIBILITY_TIMEOUT,"" + request.getVisibilityTimeout());
    }
    if (request.getWaitTimeSeconds() != null) {
      if (request.getWaitTimeSeconds() < 0 || request.getWaitTimeSeconds() > MAX_RECEIVE_MESSAGE_WAIT_TIME_SECONDS) {
        throw new InvalidParameterValueException("WaitTimeSeconds must be between 0 and " + MAX_RECEIVE_MESSAGE_WAIT_TIME_SECONDS);
      }
      receiveAttributes.put(Constants.WAIT_TIME_SECONDS,"" + request.getWaitTimeSeconds());
    }
    int maxNumberOfMessages=1;
    if (request.getMaxNumberOfMessages() != null) {
      if (request.getMaxNumberOfMessages() < 1 || request.getMaxNumberOfMessages() > MAX_RECEIVE_MESSAGE_MAX_NUMBER_OF_MESSAGES) {
        throw new InvalidParameterValueException("WaitTimeSeconds must be between 1 and " + MAX_RECEIVE_MESSAGE_MAX_NUMBER_OF_MESSAGES);
      }
      maxNumberOfMessages=request.getMaxNumberOfMessages();
    }
    receiveAttributes.put(Constants.MAX_NUMBER_OF_MESSAGES,"" + maxNumberOfMessages);
    boolean hasActiveLegalRedrivePolicy=false;
    Queue deadLetterQueue=null;
    String deadLetterTargetArn=null;
    int maxReceiveCount=0;
    try {
      if (queue.getRedrivePolicy() != null && queue.getRedrivePolicy().isObject()) {
        deadLetterTargetArn=queue.getRedrivePolicy().get(Constants.DEAD_LETTER_TARGET_ARN).textValue();
        Ern deadLetterQueueErn=Ern.parse(deadLetterTargetArn);
        maxReceiveCount=queue.getRedrivePolicy().get(Constants.MAX_RECEIVE_COUNT).asInt();
        deadLetterQueue=PersistenceFactory.getQueuePersistence().lookupQueue(deadLetterQueueErn.getAccount(),deadLetterQueueErn.getResourceName());
        hasActiveLegalRedrivePolicy=(deadLetterQueue != null && maxReceiveCount > 0);
      }
    }
 catch (    Exception ignore) {
    }
    if (deadLetterQueue != null) {
      receiveAttributes.put(Constants.DEAD_LETTER_TARGET_ARN,deadLetterTargetArn);
      receiveAttributes.put(Constants.MESSAGE_RETENTION_PERIOD,"" + deadLetterQueue.getMessageRetentionPeriod());
      receiveAttributes.put(Constants.MAX_RECEIVE_COUNT,"" + maxReceiveCount);
    }
    Collection<Message> messages=PersistenceFactory.getMessagePersistence().receiveMessages(queue,receiveAttributes);
    ServiceConfiguration cwConfiguration=Topology.lookup(CloudWatch.class);
    Date now=new Date();
    if (messages != null && !messages.isEmpty()) {
      for (      Message message : messages) {
        filterReceiveAttributes(message,request.getAttributeName());
        filterReceiveMessageAttributes(message,request.getMessageAttributeName());
        reply.getReceiveMessageResult().getMessage().add(message);
        if (!"false".equalsIgnoreCase(SimpleQueueService.ENABLE_METRICS_COLLECTION)) {
          PutMetricDataType putMetricDataType=getSQSPutMetricDataType(queue);
          MetricDatum messagesSentMetricDatum=getSQSMetricDatum(queue,now);
          messagesSentMetricDatum.setMetricName(Constants.NUMBER_OF_MESSAGES_RECEIVED);
          messagesSentMetricDatum.setValue(1.0);
          messagesSentMetricDatum.setUnit("Count");
          putMetricDataType.getMetricData().getMember().add(messagesSentMetricDatum);
          AsyncRequests.sendSync(cwConfiguration,putMetricDataType);
        }
      }
    }
 else {
      if (!"false".equalsIgnoreCase(SimpleQueueService.ENABLE_METRICS_COLLECTION)) {
        PutMetricDataType putMetricDataType=getSQSPutMetricDataType(queue);
        MetricDatum messagesSentMetricDatum=getSQSMetricDatum(queue,now);
        messagesSentMetricDatum.setMetricName(Constants.NUMBER_OF_EMPTY_RECEIVES);
        messagesSentMetricDatum.setValue(1.0);
        messagesSentMetricDatum.setUnit("Count");
        putMetricDataType.getMetricData().getMember().add(messagesSentMetricDatum);
        AsyncRequests.sendSync(cwConfiguration,putMetricDataType);
      }
    }
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}
