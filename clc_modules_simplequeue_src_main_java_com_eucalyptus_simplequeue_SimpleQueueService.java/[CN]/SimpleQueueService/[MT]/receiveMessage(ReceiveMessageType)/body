{
  ReceiveMessageResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    final Queue queue=getAndCheckPermissionOnQueue(request.getQueueUrl());
    final Map<String,String> receiveAttributes=Maps.newHashMap();
    if (request.getVisibilityTimeout() != null) {
      if (request.getVisibilityTimeout() < 0 || request.getVisibilityTimeout() > SimpleQueueProperties.MAX_VISIBILITY_TIMEOUT) {
        throw new InvalidParameterValueException("VisibilityTimeout must be between 0 and " + SimpleQueueProperties.MAX_VISIBILITY_TIMEOUT);
      }
      receiveAttributes.put(Constants.VISIBILITY_TIMEOUT,"" + request.getVisibilityTimeout());
    }
    if (request.getWaitTimeSeconds() != null) {
      if (request.getWaitTimeSeconds() < 0 || request.getWaitTimeSeconds() > SimpleQueueProperties.MAX_RECEIVE_MESSAGE_WAIT_TIME_SECONDS) {
        throw new InvalidParameterValueException("WaitTimeSeconds must be between 0 and " + SimpleQueueProperties.MAX_RECEIVE_MESSAGE_WAIT_TIME_SECONDS);
      }
      receiveAttributes.put(Constants.WAIT_TIME_SECONDS,"" + request.getWaitTimeSeconds());
    }
    int maxNumberOfMessages=1;
    if (request.getMaxNumberOfMessages() != null) {
      if (request.getMaxNumberOfMessages() < 1 || request.getMaxNumberOfMessages() > SimpleQueueProperties.MAX_RECEIVE_MESSAGE_MAX_NUMBER_OF_MESSAGES) {
        throw new InvalidParameterValueException("WaitTimeSeconds must be between 1 and " + SimpleQueueProperties.MAX_RECEIVE_MESSAGE_MAX_NUMBER_OF_MESSAGES);
      }
      maxNumberOfMessages=request.getMaxNumberOfMessages();
    }
    receiveAttributes.put(Constants.MAX_NUMBER_OF_MESSAGES,"" + maxNumberOfMessages);
    boolean hasActiveLegalRedrivePolicy=false;
    Queue deadLetterQueue=null;
    String deadLetterTargetArn=null;
    int maxReceiveCount=0;
    try {
      if (queue.getRedrivePolicy() != null && queue.getRedrivePolicy().isObject()) {
        deadLetterTargetArn=queue.getRedrivePolicy().get(Constants.DEAD_LETTER_TARGET_ARN).textValue();
        Ern deadLetterQueueErn=Ern.parse(deadLetterTargetArn);
        maxReceiveCount=queue.getRedrivePolicy().get(Constants.MAX_RECEIVE_COUNT).asInt();
        deadLetterQueue=PersistenceFactory.getQueuePersistence().lookupQueue(deadLetterQueueErn.getAccount(),deadLetterQueueErn.getResourceName());
        hasActiveLegalRedrivePolicy=(deadLetterQueue != null && maxReceiveCount > 0);
      }
    }
 catch (    Exception ignore) {
    }
    if (deadLetterQueue != null) {
      receiveAttributes.put(Constants.DEAD_LETTER_TARGET_ARN,deadLetterTargetArn);
      receiveAttributes.put(Constants.MESSAGE_RETENTION_PERIOD,"" + deadLetterQueue.getMessageRetentionPeriod());
      receiveAttributes.put(Constants.MAX_RECEIVE_COUNT,"" + maxReceiveCount);
    }
    int waitTimeSeconds=request.getWaitTimeSeconds() != null ? request.getWaitTimeSeconds() : queue.getReceiveMessageWaitTimeSeconds();
    Collection<Message> messages=PersistenceFactory.getMessagePersistence().receiveMessages(queue,receiveAttributes);
    if (messages != null && !messages.isEmpty()) {
      sendReceivedMessagesCW(queue,messages,request.getAttributeName(),request.getMessageAttributeName());
      reply.getReceiveMessageResult().getMessage().addAll(messages);
    }
 else {
      if (SimpleQueueProperties.ENABLE_LONG_POLLING && waitTimeSeconds > 0) {
        handleQueuePollingForReceive(queue,reply,new Callable<ReceiveMessageResult>(){
          @Override public ReceiveMessageResult call() throws Exception {
            Collection<Message> messages=PersistenceFactory.getMessagePersistence().receiveMessages(queue,receiveAttributes);
            if (messages != null && !messages.isEmpty()) {
              sendReceivedMessagesCW(queue,messages,request.getAttributeName(),request.getMessageAttributeName());
              ReceiveMessageResult receiveMessageResult=new ReceiveMessageResult();
              receiveMessageResult.getMessage().addAll(messages);
              return receiveMessageResult;
            }
 else {
              return null;
            }
          }
        }
,System.currentTimeMillis() + waitTimeSeconds * 1000L);
        return null;
      }
 else {
        sendEmptyReceiveCW(queue);
      }
    }
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}
