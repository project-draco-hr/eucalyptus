{
  for (  Attribute attribute : requestAttributes) {
switch (attribute.getName()) {
case Constants.DELAY_SECONDS:
      checkAttributeIntMinMax(attribute,0,MAX_DELAY_SECONDS);
    attributeMap.put(attribute.getName(),attribute.getValue());
  break;
case Constants.MAXIMUM_MESSAGE_SIZE:
checkAttributeIntMinMax(attribute,1024,MAX_MAXIMUM_MESSAGE_SIZE);
attributeMap.put(attribute.getName(),attribute.getValue());
break;
case Constants.MESSAGE_RETENTION_PERIOD:
checkAttributeIntMinMax(attribute,60,MAX_MESSAGE_RETENTION_PERIOD);
attributeMap.put(attribute.getName(),attribute.getValue());
break;
case Constants.RECEIVE_MESSAGE_WAIT_TIME_SECONDS:
checkAttributeIntMinMax(attribute,0,MAX_RECEIVE_MESSAGE_WAIT_TIME_SECONDS);
attributeMap.put(attribute.getName(),attribute.getValue());
break;
case Constants.VISIBILITY_TIMEOUT:
checkAttributeIntMinMax(attribute,0,MAX_VISIBILITY_TIMEOUT);
attributeMap.put(attribute.getName(),attribute.getValue());
break;
case Constants.POLICY:
if (Strings.isNullOrEmpty(attribute.getValue())) {
attributeMap.remove(attribute.getName());
continue;
}
try {
minimallyCheckPolicy(attribute.getValue());
PolicyParser.getResourceInstance().parse(attribute.getValue());
}
 catch (PolicyParseException|IOException e) {
throw new InvalidParameterValueException("Invalid value for the parameter Policy. ");
}
attributeMap.put(attribute.getName(),attribute.getValue());
break;
case Constants.REDRIVE_POLICY:
if (Strings.isNullOrEmpty(attribute.getValue())) {
attributeMap.remove(attribute.getName());
continue;
}
JsonNode redrivePolicyJsonNode;
try {
redrivePolicyJsonNode=new ObjectMapper().readTree(attribute.getValue());
}
 catch (IOException e) {
throw new InvalidParameterValueException("Invalid value for the parameter RedrivePolicy. Reason: Redrive policy is not a valid JSON map.");
}
if (redrivePolicyJsonNode == null || !redrivePolicyJsonNode.isObject()) {
throw new InvalidParameterValueException("Invalid value for the parameter RedrivePolicy. Reason: Redrive policy is not a valid JSON map.");
}
if (!redrivePolicyJsonNode.has(Constants.MAX_RECEIVE_COUNT)) {
throw new InvalidParameterValueException("Value " + attribute.getValue() + " for parameter "+ "RedrivePolicy is invalid. Reason: Redrive policy does not contain mandatory attribute: "+ Constants.MAX_RECEIVE_COUNT+ ".");
}
if (!redrivePolicyJsonNode.has(Constants.DEAD_LETTER_TARGET_ARN)) {
throw new InvalidParameterValueException("Value " + attribute.getValue() + " for parameter "+ "RedrivePolicy is invalid. Reason: Redrive policy does not contain mandatory attribute: "+ Constants.DEAD_LETTER_TARGET_ARN+ ".");
}
if (redrivePolicyJsonNode.size() > 2) {
throw new InvalidParameterValueException("Value " + attribute.getValue() + " for parameter "+ "RedrivePolicy is invalid. Reason: Only following attributes are supported: ["+ Constants.DEAD_LETTER_TARGET_ARN+ ", "+ Constants.MAX_RECEIVE_COUNT+ "].");
}
JsonNode maxReceiveCountJsonNode=redrivePolicyJsonNode.get(Constants.MAX_RECEIVE_COUNT);
if (maxReceiveCountJsonNode == null || (maxReceiveCountJsonNode.asInt() < 1) || (maxReceiveCountJsonNode.asInt() > MAX_MAX_RECEIVE_COUNT)) {
throw new InvalidParameterValueException("Value " + attribute.getValue() + " for parameter "+ "RedrivePolicy is invalid. Reason: Invalid value for "+ Constants.MAX_RECEIVE_COUNT+ ": "+ maxReceiveCountJsonNode+ ", valid values are from 1 to"+ MAX_MAX_RECEIVE_COUNT+ " both "+ "inclusive.");
}
JsonNode deadLetterTargetArnJsonNode=redrivePolicyJsonNode.get(Constants.DEAD_LETTER_TARGET_ARN);
if (deadLetterTargetArnJsonNode == null || !(deadLetterTargetArnJsonNode.isTextual())) {
throw new InvalidParameterValueException("Value " + attribute.getValue() + " for parameter "+ "RedrivePolicy is invalid. Reason: Invalid value for "+ Constants.DEAD_LETTER_TARGET_ARN+ ".");
}
Ern simpleQueueArn;
try {
simpleQueueArn=Ern.parse(deadLetterTargetArnJsonNode.textValue());
}
 catch (JSONException e) {
throw new InvalidParameterValueException("Value " + attribute.getValue() + " for parameter "+ "RedrivePolicy is invalid. Reason: Invalid value for "+ Constants.DEAD_LETTER_TARGET_ARN+ ".");
}
if (!simpleQueueArn.getRegion().equals(RegionConfigurations.getRegionNameOrDefault())) {
throw new InvalidParameterValueException("Value " + attribute.getValue() + " for parameter "+ "RedrivePolicy is invalid. Reason: Dead-letter target must be in same region as the source.");
}
if (!simpleQueueArn.getAccount().equals(accountId)) {
throw new InvalidParameterValueException("Value " + attribute.getValue() + " for parameter "+ "RedrivePolicy is invalid. Reason: Dead-letter target owner should be same as the source.");
}
if (PersistenceFactory.getQueuePersistence().lookupQueue(simpleQueueArn.getAccount(),simpleQueueArn.getResourceName()) == null) {
throw new InvalidParameterValueException("Value " + attribute.getValue() + " for parameter "+ "RedrivePolicy is invalid. Reason: Dead letter target does not exist.");
}
attributeMap.put(attribute.getName(),attribute.getValue());
break;
default :
throw new InvalidAttributeNameException("Unknown Attribute " + attribute.getName());
}
}
}
