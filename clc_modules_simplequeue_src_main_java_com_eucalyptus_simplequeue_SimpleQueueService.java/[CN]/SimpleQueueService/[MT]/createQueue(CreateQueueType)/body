{
  CreateQueueResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    final String accountId=ctx.getAccountNumber();
    if (!Permissions.isAuthorized(SimpleQueuePolicySpec.VENDOR_SIMPLEQUEUE,SimpleQueuePolicySpec.SIMPLEQUEUE_CREATEQUEUE,"",ctx.getAccount(),SimpleQueuePolicySpec.SIMPLEQUEUE_CREATEQUEUE,ctx.getAuthContext())) {
      throw new AccessDeniedException("Not authorized.");
    }
    if (request.getQueueName() == null) {
      throw new InvalidParameterValueException("Value for parameter QueueName is invalid. Reason: Must specify a queue name.");
    }
    if (request.getQueueName().isEmpty()) {
      throw new InvalidParameterValueException("Queue name cannot be empty.");
    }
    Pattern queueNamePattern=Pattern.compile("[A-Za-z0-9_-]+");
    if (!queueNamePattern.matcher(request.getQueueName()).matches() || request.getQueueName().length() < 1 || request.getQueueName().length() > MAX_QUEUE_NAME_LENGTH_CHARS) {
      throw new InvalidParameterValueException("Queue name can only include alphanumeric characters, hyphens, or " + "underscores. 1 to " + MAX_QUEUE_NAME_LENGTH_CHARS + " in length");
    }
    Map<String,String> attributeMap=Maps.newTreeMap();
    attributeMap.put(Constants.DELAY_SECONDS,"0");
    attributeMap.put(Constants.MAXIMUM_MESSAGE_SIZE,"262144");
    attributeMap.put(Constants.MESSAGE_RETENTION_PERIOD,"345600");
    attributeMap.put(Constants.RECEIVE_MESSAGE_WAIT_TIME_SECONDS,"0");
    attributeMap.put(Constants.VISIBILITY_TIMEOUT,"30");
    if (request.getAttribute() != null) {
      setAndValidateAttributes(accountId,request.getAttribute(),attributeMap);
      String nowSecs="" + currentTimeSeconds();
      attributeMap.put(Constants.CREATED_TIMESTAMP,nowSecs);
      attributeMap.put(Constants.LAST_MODIFIED_TIMESTAMP,nowSecs);
      Queue queue=PersistenceFactory.getQueuePersistence().lookupQueue(accountId,request.getQueueName());
      if (queue == null) {
        queue=PersistenceFactory.getQueuePersistence().createQueue(accountId,request.getQueueName(),attributeMap);
      }
 else {
        Set<String> keysWeCareAbout=Sets.newHashSet(Constants.DELAY_SECONDS,Constants.MAXIMUM_MESSAGE_SIZE,Constants.MESSAGE_RETENTION_PERIOD,Constants.RECEIVE_MESSAGE_WAIT_TIME_SECONDS,Constants.VISIBILITY_TIMEOUT,Constants.POLICY,Constants.REDRIVE_POLICY);
        Map<String,String> requestAttributeMap=Maps.newTreeMap();
        requestAttributeMap.putAll(attributeMap);
        Map<String,String> queueAttributeMap=Maps.newTreeMap();
        queueAttributeMap.putAll(queue.getAttributes());
        requestAttributeMap.keySet().retainAll(keysWeCareAbout);
        queueAttributeMap.keySet().retainAll(keysWeCareAbout);
        if (!Objects.equals(requestAttributeMap,queueAttributeMap)) {
          throw new QueueAlreadyExistsException(request.getQueueName() + " already exists.");
        }
      }
      String queueUrl=getQueueUrlFromQueueUrlParts(new QueueUrlParts(accountId,request.getQueueName()));
      reply.getCreateQueueResult().setQueueUrl(queueUrl);
    }
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}
