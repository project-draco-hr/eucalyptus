{
  List<String> retVal=Lists.newArrayList();
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
  try {
    DescribeVpcsType describeVpcsType=MessageHelper.createMessage(DescribeVpcsType.class,effectiveUserId);
    VpcIdSetType vpcSet=new VpcIdSetType();
    ArrayList<VpcIdSetItemType> item=Lists.newArrayList(Collections2.transform(valuesToCheck,new Function<String,VpcIdSetItemType>(){
      @Nullable @Override public VpcIdSetItemType apply(      @Nullable String vpcId){
        VpcIdSetItemType vpcIdSetItemType=new VpcIdSetItemType();
        vpcIdSetItemType.setVpcId(vpcId);
        return vpcIdSetItemType;
      }
    }
));
    vpcSet.setItem(item);
    describeVpcsType.setVpcSet(vpcSet);
    DescribeVpcsResponseType describeVpcsResponseType=AsyncRequests.sendSync(configuration,describeVpcsType);
    if (describeVpcsResponseType != null && describeVpcsResponseType.getVpcSet() != null && describeVpcsResponseType.getVpcSet().getItem() != null) {
      for (      VpcType vpcType : describeVpcsResponseType.getVpcSet().getItem()) {
        retVal.add(vpcType.getVpcId());
      }
    }
  }
 catch (  Exception e) {
    Throwable rootCause=Throwables.getRootCause(e);
    throw new AccessDeniedException("Unable to access VPC ids.  " + (rootCause.getMessage() == null ? "" : rootCause.getMessage()));
  }
  return retVal;
}
