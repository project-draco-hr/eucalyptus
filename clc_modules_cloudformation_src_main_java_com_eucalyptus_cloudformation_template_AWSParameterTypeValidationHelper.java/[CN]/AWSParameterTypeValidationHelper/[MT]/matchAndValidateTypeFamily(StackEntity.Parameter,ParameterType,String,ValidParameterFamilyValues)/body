{
  boolean matchesSingular=validParameterFamilyValues.matchesSingularType(parameterType);
  boolean matchesList=validParameterFamilyValues.matchesListType(parameterType);
  boolean matches=matchesSingular || matchesList;
  if (matches) {
    JsonNode jsonNode=JsonHelper.getJsonNodeFromString(parameter.getJsonValue());
    Collection<String> valuesToCheck=Sets.newHashSet();
    if (matchesSingular) {
      if (!jsonNode.isValueNode())       throw new ValidationErrorException("Invalid value for Parameter " + parameter.getKey());
      valuesToCheck.add(jsonNode.asText());
    }
 else {
      if (!jsonNode.isArray())       throw new ValidationErrorException("Invalid value for Parameter " + parameter.getKey());
      for (int i=0; i < jsonNode.size(); i++) {
        JsonNode elementNode=jsonNode.get(i);
        if (!elementNode.isValueNode())         throw new ValidationErrorException("Invalid value for Parameter " + parameter.getKey());
        valuesToCheck.add(elementNode.asText());
      }
    }
    List<String> validValues=validParameterFamilyValues.getValidValuesFromValueSet(effectiveUserId,valuesToCheck);
    for (    String valueToCheck : valuesToCheck) {
      if (!validValues.contains(valueToCheck)) {
        throw new ValidationErrorException("Parameter validation failed: parameter value " + valueToCheck + " for parameter name "+ parameter.getKey()+ " is not an allowed value for the parameter type.");
      }
    }
  }
  return matches;
}
