{
  List<String> retVal=Lists.newArrayList();
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
  try {
    DescribeSubnetsType describeSubnetsType=MessageHelper.createMessage(DescribeSubnetsType.class,effectiveUserId);
    SubnetIdSetType subnetSet=new SubnetIdSetType();
    ArrayList<SubnetIdSetItemType> item=Lists.newArrayList(Collections2.transform(valuesToCheck,new Function<String,SubnetIdSetItemType>(){
      @Nullable @Override public SubnetIdSetItemType apply(      @Nullable String subnetId){
        SubnetIdSetItemType subnetIdSetItemType=new SubnetIdSetItemType();
        subnetIdSetItemType.setSubnetId(subnetId);
        return subnetIdSetItemType;
      }
    }
));
    subnetSet.setItem(item);
    describeSubnetsType.setSubnetSet(subnetSet);
    DescribeSubnetsResponseType describeSubnetsResponseType=AsyncRequests.sendSync(configuration,describeSubnetsType);
    if (describeSubnetsResponseType != null && describeSubnetsResponseType.getSubnetSet() != null && describeSubnetsResponseType.getSubnetSet().getItem() != null) {
      for (      SubnetType subnetType : describeSubnetsResponseType.getSubnetSet().getItem()) {
        retVal.add(subnetType.getSubnetId());
      }
    }
  }
 catch (  Exception e) {
    Throwable rootCause=Throwables.getRootCause(e);
    throw new AccessDeniedException("Unable to access subnet ids.  " + (rootCause.getMessage() == null ? "" : rootCause.getMessage()));
  }
  return retVal;
}
