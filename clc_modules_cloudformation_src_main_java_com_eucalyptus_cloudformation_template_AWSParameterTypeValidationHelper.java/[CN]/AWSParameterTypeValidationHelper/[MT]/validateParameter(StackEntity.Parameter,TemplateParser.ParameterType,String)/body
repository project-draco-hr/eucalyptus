{
  if (parameterType == null)   throw new ValidationErrorException("Can not find parameter type for parameter " + parameter.getKey());
  if (parameterType == TemplateParser.ParameterType.AWS_EC2_KeyPair_KeyName || parameterType == TemplateParser.ParameterType.List_AWS_EC2_KeyPair_KeyName) {
    List<String> keyPairNames=AWSParameterTypeValidationHelper.getKeyPairKeyNames(effectiveUserId);
    JsonNode jsonNode=JsonHelper.getJsonNodeFromString(parameter.getJsonValue());
    List<String> valuesToCheck=Lists.newArrayList();
    if (parameterType == TemplateParser.ParameterType.AWS_EC2_KeyPair_KeyName) {
      if (!jsonNode.isValueNode())       throw new ValidationErrorException("Invalid value for Parameter " + parameter.getKey());
      valuesToCheck.add(jsonNode.asText());
    }
 else {
      if (!jsonNode.isArray())       throw new ValidationErrorException("Invalid value for Parameter " + parameter.getKey());
      for (int i=0; i < jsonNode.size(); i++) {
        JsonNode elementNode=jsonNode.get(i);
        if (!elementNode.isValueNode())         throw new ValidationErrorException("Invalid value for Parameter " + parameter.getKey());
        valuesToCheck.add(elementNode.asText());
      }
    }
    for (    String valueToCheck : valuesToCheck) {
      if (!keyPairNames.contains(valueToCheck)) {
        throw new ValidationErrorException("Parameter validation failed: parameter value " + valueToCheck + " for parameter name "+ parameter.getKey()+ " does not exist.");
      }
    }
  }
 else   if (parameterType == TemplateParser.ParameterType.AWS_EC2_SecurityGroup_Id || parameterType == TemplateParser.ParameterType.List_AWS_EC2_SecurityGroup_Id) {
    List<String> securityGroupIds=AWSParameterTypeValidationHelper.getSecurityGroupIds(effectiveUserId);
    JsonNode jsonNode=JsonHelper.getJsonNodeFromString(parameter.getJsonValue());
    List<String> valuesToCheck=Lists.newArrayList();
    if (parameterType == TemplateParser.ParameterType.AWS_EC2_SecurityGroup_Id) {
      if (!jsonNode.isValueNode())       throw new ValidationErrorException("Invalid value for Parameter " + parameter.getKey());
      valuesToCheck.add(jsonNode.asText());
    }
 else {
      if (!jsonNode.isArray())       throw new ValidationErrorException("Invalid value for Parameter " + parameter.getKey());
      for (int i=0; i < jsonNode.size(); i++) {
        JsonNode elementNode=jsonNode.get(i);
        if (!elementNode.isValueNode())         throw new ValidationErrorException("Invalid value for Parameter " + parameter.getKey());
        valuesToCheck.add(elementNode.asText());
      }
    }
    for (    String valueToCheck : valuesToCheck) {
      if (!securityGroupIds.contains(valueToCheck)) {
        throw new ValidationErrorException("Parameter validation failed: parameter value " + valueToCheck + " for parameter name "+ parameter.getKey()+ " does not exist.");
      }
    }
  }
 else   if (parameterType == TemplateParser.ParameterType.AWS_EC2_Subnet_Id || parameterType == TemplateParser.ParameterType.List_AWS_EC2_Subnet_Id) {
    List<String> subnetIds=AWSParameterTypeValidationHelper.getSubnetIds(effectiveUserId);
    JsonNode jsonNode=JsonHelper.getJsonNodeFromString(parameter.getJsonValue());
    List<String> valuesToCheck=Lists.newArrayList();
    if (parameterType == TemplateParser.ParameterType.AWS_EC2_Subnet_Id) {
      if (!jsonNode.isValueNode())       throw new ValidationErrorException("Invalid value for Parameter " + parameter.getKey());
      valuesToCheck.add(jsonNode.asText());
    }
 else {
      if (!jsonNode.isArray())       throw new ValidationErrorException("Invalid value for Parameter " + parameter.getKey());
      for (int i=0; i < jsonNode.size(); i++) {
        JsonNode elementNode=jsonNode.get(i);
        if (!elementNode.isValueNode())         throw new ValidationErrorException("Invalid value for Parameter " + parameter.getKey());
        valuesToCheck.add(elementNode.asText());
      }
    }
    for (    String valueToCheck : valuesToCheck) {
      if (!subnetIds.contains(valueToCheck)) {
        throw new ValidationErrorException("Parameter validation failed: parameter value " + valueToCheck + " for parameter name "+ parameter.getKey()+ " does not exist.");
      }
    }
  }
 else {
    ;
  }
}
