{
  Iterator<PartInfo> partIterator=null;
  if (parts != null && (partIterator=parts.iterator()) != null && partIterator.hasNext()) {
    try {
      File newObjectFile=new File(WalrusInfo.getWalrusInfo().getStorageDir() + FILE_SEPARATOR + destinationBucket+ FILE_SEPARATOR+ destinationObject);
      FileInputStream fileInputStream=null;
      FileChannel fileIn=null;
      FileOutputStream fileOutputStream=null;
      FileChannel fileOut=null;
      try {
        fileOutputStream=new FileOutputStream(newObjectFile);
        fileOut=fileOutputStream.getChannel();
        PartInfo part=null;
        File partFile=null;
        do {
          part=partIterator.next();
          partFile=new File(WalrusInfo.getWalrusInfo().getStorageDir() + FILE_SEPARATOR + part.getBucketName()+ FILE_SEPARATOR+ part.getObjectName());
          fileInputStream=new FileInputStream(partFile);
          fileIn=fileInputStream.getChannel();
          fileIn.transferTo(0,fileIn.size(),fileOut);
          try {
            fileIn.close();
            fileIn=null;
          }
 catch (          IOException e) {
            LOG.warn("Failed to close channel",e);
          }
          try {
            fileInputStream.close();
            fileInputStream=null;
          }
 catch (          IOException e) {
            LOG.warn("Failed to close stream",e);
          }
          partFile=null;
          part=null;
        }
 while (partIterator.hasNext());
      }
  finally {
        if (fileIn != null) {
          try {
            fileIn.close();
          }
 catch (          IOException e) {
            LOG.warn("Failed to close channel",e);
          }
        }
        if (fileInputStream != null) {
          try {
            fileInputStream.close();
          }
 catch (          IOException e) {
            LOG.warn("Failed to close stream",e);
          }
        }
        if (fileOut != null) {
          try {
            fileOut.close();
          }
 catch (          IOException e) {
            LOG.warn("Failed to close channel",e);
          }
        }
        if (fileOutputStream != null) {
          try {
            fileOutputStream.close();
          }
 catch (          IOException e) {
            LOG.warn("Failed to close stream",e);
          }
        }
      }
    }
 catch (    Exception e) {
      LOG.error("Failed to copy multipart source object to " + destinationObject,e);
      throw e;
    }
  }
 else {
    LOG.warn("No parts to copy content from and create " + destinationObject);
  }
}
