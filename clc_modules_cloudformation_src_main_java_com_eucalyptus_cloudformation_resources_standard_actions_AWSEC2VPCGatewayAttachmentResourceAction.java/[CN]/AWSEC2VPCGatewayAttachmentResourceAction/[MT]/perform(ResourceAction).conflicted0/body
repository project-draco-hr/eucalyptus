{
  AWSEC2VPCGatewayAttachmentResourceAction action=(AWSEC2VPCGatewayAttachmentResourceAction)resourceAction;
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
  if (action.properties.getVpcId() != null && action.properties.getVpnGatewayId() != null) {
    throw new ValidationErrorException("Both VpcId and VpnGatewayId can not be set.");
  }
  if (action.properties.getVpcId() == null && action.properties.getVpnGatewayId() == null) {
    throw new ValidationErrorException("One of VpcId or VpnGatewayId must be set.");
  }
  if (action.properties.getVpcId() != null) {
    AttachInternetGatewayType attachInternetGatewayType=MessageHelper.createMessage(AttachInternetGatewayType.class,action.info.getEffectiveUserId());
    attachInternetGatewayType.setInternetGatewayId(action.properties.getInternetGatewayId());
    attachInternetGatewayType.setVpcId(action.properties.getVpcId());
    AsyncRequests.<AttachInternetGatewayType,AttachInternetGatewayResponseType>sendSync(configuration,attachInternetGatewayType);
  }
 else {
    AttachVpnGatewayType attachVpnGatewayType=MessageHelper.createMessage(AttachVpnGatewayType.class,action.info.getEffectiveUserId());
    attachVpnGatewayType.setVpnGatewayId(action.properties.getVpnGatewayId());
    AsyncRequests.<AttachVpnGatewayType,AttachVpnGatewayResponseType>sendSync(configuration,attachVpnGatewayType);
  }
  action.info.setPhysicalResourceId(action.getDefaultPhysicalResourceId());
  action.info.setCreatedEnoughToDelete(true);
  action.info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(action.info.getPhysicalResourceId())));
  return action;
}
