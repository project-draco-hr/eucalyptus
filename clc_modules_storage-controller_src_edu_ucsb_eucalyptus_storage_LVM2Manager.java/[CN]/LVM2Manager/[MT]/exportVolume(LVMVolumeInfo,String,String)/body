{
  int majorNumber=-1;
  int minorNumber=-1;
  LVMMetaInfo metaInfo=new LVMMetaInfo(hostName);
  EntityWrapper<LVMMetaInfo> db=new EntityWrapper<LVMMetaInfo>();
  try {
    LVMMetaInfo foundMetaInfo=db.getUnique(metaInfo);
    if (foundMetaInfo != null) {
      majorNumber=foundMetaInfo.getMajorNumber();
      minorNumber=foundMetaInfo.getMinorNumber();
      if (((++minorNumber) % MAX_LOOP_DEVICES) == 0) {
        ++majorNumber;
      }
      foundMetaInfo.setMajorNumber(majorNumber);
      foundMetaInfo.setMinorNumber(minorNumber);
    }
    db.commit();
  }
 catch (  Exception ex) {
    db.rollback();
    ex.printStackTrace();
  }
  String absoluteLVName=lvmRootDirectory + PATH_SEPARATOR + vgName+ PATH_SEPARATOR+ lvName;
  int pid=exportManager.exportVolume(iface,absoluteLVName,majorNumber,minorNumber);
  String returnValue=aoeStatus(pid);
  if (pid < 0 || (!returnValue.contains("vblade"))) {
    throw new EucalyptusCloudException("Could not export AoE device " + absoluteLVName + " iface: "+ iface);
  }
  lvmVolumeInfo.setVbladePid(pid);
  lvmVolumeInfo.setMajorNumber(majorNumber);
  lvmVolumeInfo.setMinorNumber(minorNumber);
  return pid;
}
