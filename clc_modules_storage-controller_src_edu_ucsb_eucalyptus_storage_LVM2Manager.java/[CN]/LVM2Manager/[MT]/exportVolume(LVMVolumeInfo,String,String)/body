{
  int majorNumber=-1;
  int minorNumber=-1;
  LVMMetaInfo metaInfo=new LVMMetaInfo(hostName);
  EntityWrapper<LVMMetaInfo> db=new EntityWrapper<LVMMetaInfo>();
  List<LVMMetaInfo> metaInfoList=db.query(metaInfo);
  if (metaInfoList.size() > 0) {
    LVMMetaInfo foundMetaInfo=metaInfoList.get(0);
    majorNumber=foundMetaInfo.getMajorNumber();
    minorNumber=foundMetaInfo.getMinorNumber();
    if (((++minorNumber) % MAX_LOOP_DEVICES) == 0) {
      ++majorNumber;
    }
    foundMetaInfo.setMajorNumber(majorNumber);
    foundMetaInfo.setMinorNumber(minorNumber);
  }
  db.commit();
  String absoluteLVName=lvmRootDirectory + PATH_SEPARATOR + vgName+ PATH_SEPARATOR+ lvName;
  int pid=exportManager.exportVolume(iface,absoluteLVName,majorNumber,minorNumber);
  String returnValue=aoeStatus(pid);
  if (pid < 0 || (returnValue.length() == 0)) {
    throw new EucalyptusCloudException("Could not export AoE device " + absoluteLVName + " iface: "+ iface);
  }
 else {
    File vbladePidFile=new File(eucaHome + EUCA_VAR_RUN_PATH + "/vblade-"+ majorNumber+ minorNumber+ ".pid");
    try {
      FileOutputStream fileOutStream=new FileOutputStream(vbladePidFile);
      String pidString=String.valueOf(pid);
      fileOutStream.write(pidString.getBytes());
      fileOutStream.close();
    }
 catch (    Exception ex) {
      LOG.warn("Could not write pid file vblade-" + majorNumber + minorNumber+ ".pid");
    }
  }
  lvmVolumeInfo.setVbladePid(pid);
  lvmVolumeInfo.setMajorNumber(majorNumber);
  lvmVolumeInfo.setMinorNumber(minorNumber);
  return pid;
}
