{
  CreateBucketResponseType response=request.getReply();
  MemoryBucket bucket;
switch (failBucketPut) {
case INTERNAL_ERROR:
    throw new InternalErrorException(request.getBucket());
case NOT_FOUND:
  throw new NoSuchBucketException(request.getBucket());
default :
}
try {
bucket=getBucket(request.getBucket(),request.getEffectiveUserId());
}
 catch (NoSuchBucketException e) {
bucket=null;
}
if (bucket == null) {
bucket=new MemoryBucket();
bucket.name=request.getBucket();
bucket.canonicalId=getOwnerCanonicalId(request.getEffectiveUserId());
bucket.createdDate=new Date();
bucket.acl=request.getAccessControlList();
if (request.getAccessControlList() == null) {
  bucket.acl=genPrivateAcl(bucket.canonicalId);
}
bucket.location=request.getLocationConstraint();
bucket.loggingEnabled=false;
this.myBuckets.put(request.getBucket(),bucket);
}
response.setStatus(HttpResponseStatus.OK);
response.setStatusMessage("OK");
response.setBucket(request.getBucket());
response.setTimestamp(new Date());
return response;
}
