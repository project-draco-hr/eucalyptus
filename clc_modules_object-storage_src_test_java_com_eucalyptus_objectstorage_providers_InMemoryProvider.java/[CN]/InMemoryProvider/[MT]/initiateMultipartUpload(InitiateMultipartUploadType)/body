{
  LOG.debug("InMemory InitiateMPU");
switch (failObjectPut) {
case INTERNAL_ERROR:
    LOG.debug("InMemory MPU throw internal error as specified");
  throw new InternalErrorException(request.getBucket());
case NOT_FOUND:
LOG.debug("InMemory MPU throw not-found as specified");
throw new NoSuchBucketException(request.getBucket());
default :
}
try {
MemoryBucket bucket=getBucket(request.getBucket(),request.getEffectiveUserId());
MemoryMpu memObj=new MemoryMpu();
memObj.key=request.getKey();
memObj.uploadId=UUID.randomUUID().toString();
memObj.versionId="null";
memObj.modifiedDate=new Date();
memObj.canonicalId=getOwnerCanonicalId(request.getEffectiveUserId());
memObj.acl=request.getAccessControlList();
if (request.getAccessControlList() == null) {
memObj.acl=genPrivateAcl(memObj.canonicalId);
}
bucket.uploads.put(memObj.uploadId,memObj);
InitiateMultipartUploadResponseType response=request.getReply();
response.setUploadId(memObj.uploadId);
response.setStatusMessage("OK");
response.setBucket(request.getBucket());
response.setKey(request.getKey());
response.set_return(true);
LOG.debug("InMemory return response: " + response.getStatusMessage());
return response;
}
 catch (Exception e) {
LOG.debug("InMemory PutObject exception: ",e);
if (e instanceof S3Exception) {
throw (S3Exception)e;
}
 else {
throw new InternalErrorException(e);
}
}
}
