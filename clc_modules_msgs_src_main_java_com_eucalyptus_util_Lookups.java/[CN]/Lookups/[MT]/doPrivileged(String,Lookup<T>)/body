{
  LOG.debug("Attempting to lookup " + identifier + " using lookup: "+ lookupFunction+ " typed as "+ Classes.genericsToClasses(lookupFunction));
  List<Class> lookupTypes=Classes.genericsToClasses(lookupFunction);
  if (lookupTypes.isEmpty()) {
    throw new IllegalArgumentException("Failed to find required generic type for lookup " + lookupFunction.getClass() + " so the policy type for looking up "+ identifier+ " cannot be determined.");
  }
 else {
    PolicyResourceType type=PolicyAnnotationRegistry.extractResourceType(lookupTypes.get(0));
    Context ctx=Contexts.lookup();
    User requestUser=ctx.getUser();
    String action=PolicySpec.requestToAction(ctx.getRequest());
    try {
      T requestedObject=lookupFunction.lookup(identifier);
      if (requestedObject == null) {
        throw new NoSuchElementException("Failed to lookup requested " + type + " with id "+ identifier+ " using "+ lookupFunction.getClass());
      }
      Account owningAccount=Accounts.lookupUserById(requestedObject.getOwner().getUniqueId()).getAccount();
      if (!Permissions.isAuthorized(type.resource(),identifier,owningAccount,action,requestUser)) {
        throw new AuthException("Not authorized to use " + type.resource() + " identified by "+ identifier+ " as the user "+ requestUser.getName());
      }
      return requestedObject;
    }
 catch (    NoSuchElementException ex) {
      throw ex;
    }
catch (    AuthException ex) {
      throw ex;
    }
catch (    Throwable ex) {
      throw new PersistenceException("Error occurred while attempting to lookup " + identifier + " using lookup: "+ lookupFunction+ " typed as "+ Classes.genericsToClasses(lookupFunction));
    }
  }
}
