{
  List<ImagingTask> allTasks=null;
  List<ImagingTask> imagePendingTasks=Lists.newArrayList();
  List<ImagingTask> pendingTasks=Lists.newArrayList();
  try {
    allTasks=ImagingTasks.getImagingTasks();
    for (    final ImagingTask t : allTasks) {
      if ((t instanceof DiskImagingTask) && ImportTaskState.PENDING.equals(t.getState()))       imagePendingTasks.add(t);
      if (ImportTaskState.PENDING.equals(t.getState()))       pendingTasks.add(t);
 else       if (ImportTaskState.CONVERTING.equals(t.getState()) && (t instanceof ImportInstanceImagingTask))       pendingTasks.add(t);
    }
    ImagingTask oldestTask=null;
    Date oldest=new Date(Long.MAX_VALUE);
    for (    final ImagingTask task : imagePendingTasks) {
      if (oldest.after(task.getCreationTimestamp())) {
        oldest=task.getCreationTimestamp();
        oldestTask=task;
      }
    }
    if (oldestTask != null)     return oldestTask;
    for (    final ImagingTask task : pendingTasks) {
      if (task instanceof ImportVolumeImagingTask) {
        if (!availabilityZone.equals(((ImportVolumeImagingTask)task).getAvailabilityZone()))         continue;
      }
 else       if (task instanceof ImportInstanceImagingTask) {
        boolean clusterFound=false;
        for (        final ImportInstanceVolumeDetail volume : ((ImportInstanceImagingTask)task).getVolumes()) {
          final String importManifestUrl=volume.getImage().getImportManifestUrl();
          if (!((ImportInstanceImagingTask)task).hasDownloadManifestUrl(importManifestUrl) && availabilityZone.equals(volume.getAvailabilityZone())) {
            clusterFound=true;
            break;
          }
        }
        if (!clusterFound)         continue;
      }
      if (oldest.after(task.getCreationTimestamp())) {
        oldest=task.getCreationTimestamp();
        oldestTask=task;
      }
    }
    return oldestTask;
  }
 catch (  final Exception ex) {
    LOG.error("failed to schedule the task to imaging worker",ex);
    return null;
  }
}
