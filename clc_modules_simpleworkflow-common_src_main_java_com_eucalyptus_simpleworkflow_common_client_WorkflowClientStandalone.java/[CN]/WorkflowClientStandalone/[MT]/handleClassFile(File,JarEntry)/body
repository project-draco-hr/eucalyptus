{
  final String classGuess=j.getName().replaceAll("/",".").replaceAll("\\.class.{0,1}","");
  try {
    final Class candidate=ClassLoader.getSystemClassLoader().loadClass(classGuess);
    final Ats ats=Ats.inClassHierarchy(candidate);
    if ((this.allowedClassNames.isEmpty() || this.allowedClassNames.contains(candidate.getName()) || this.allowedClassNames.contains(candidate.getCanonicalName())|| this.allowedClassNames.contains(candidate.getSimpleName())) && (ats.has(Workflow.class) || ats.has(Activities.class)) && !Modifier.isAbstract(candidate.getModifiers())&& !Modifier.isInterface(candidate.getModifiers())&& !candidate.isLocalClass()&& !candidate.isAnonymousClass()) {
      if (ats.has(Workflow.class)) {
        this.workflowClasses.add(candidate);
        LOG.debug("Discovered workflow implementation class: " + candidate.getName());
      }
 else {
        this.activityClasses.add(candidate);
        LOG.debug("Discovered activity implementation class: " + candidate.getName());
      }
    }
  }
 catch (  final ClassNotFoundException e) {
    LOG.debug(e,e);
  }
}
