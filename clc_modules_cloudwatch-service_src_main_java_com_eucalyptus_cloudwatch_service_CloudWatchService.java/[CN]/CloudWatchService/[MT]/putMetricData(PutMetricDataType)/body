{
  PutMetricDataResponseType reply=request.getReply();
  long before=System.currentTimeMillis();
  final Context ctx=Contexts.lookup();
  try {
    checkActionPermission(CloudWatchPolicySpec.CLOUDWATCH_PUTMETRICDATA,ctx);
    if (CloudWatchConfigProperties.isDisabledCloudWatchService()) {
      faultDisableCloudWatchServiceIfNecessary();
      throw new ServiceDisabledException("Service Disabled");
    }
    final OwnerFullName ownerFullName=ctx.getUserFullName();
    final String namespace=CloudWatchServiceFieldValidator.validateNamespace(request.getNamespace(),true);
    MetricType metricType=CloudWatchServiceFieldValidator.getMetricTypeFromNamespace(namespace);
    final Boolean privileged=Contexts.lookup().isPrivileged();
    if (metricType == MetricType.System && !privileged) {
      throw new InvalidParameterValueException("The value AWS/ for parameter Namespace is invalid.");
    }
    final List<MetricDatum> metricData=CloudWatchServiceFieldValidator.validateMetricData(request.getMetricData(),metricType);
    LOG.trace("Namespace=" + namespace);
    LOG.trace("metricData=" + metricData);
    MetricDataQueue.getInstance().insertMetricData(ownerFullName.getAccountNumber(),namespace,metricData,metricType);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}
