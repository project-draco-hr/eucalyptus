def post(self, arg):
    action = self.get_argument('action')
    response = None
    try:
        if (action == 'login'):
            try:
                response = LoginProcessor.post(self)
            except Exception as err:
                traceback.print_exc(file=sys.stdout)
                if isinstance(err, EuiException):
                    raise err
                else:
                    raise EuiException(401, 'not authorized')
        elif (action == 'init'):
            try:
                response = InitProcessor.post(self)
            except Exception as err:
                traceback.print_exc(file=sys.stdout)
                raise EuiException(401, 'not authorized')
        elif (action == 'busy'):
            if self.authorized():
                self.user_session.session_last_used = time.time()
                response = BusyResponse(self.user_session)
            else:
                response = BusyResponse(None)
        else:
            if (not self.authorized()):
                raise EuiException(401, 'not authorized')
            if (action == 'session'):
                try:
                    response = SessionProcessor.post(self)
                except Exception as err:
                    traceback.print_exc(file=sys.stdout)
                    raise EuiException(500, "can't retrieve session info")
            elif (action == 'logout'):
                try:
                    response = LogoutProcessor.post(self)
                except Exception as err:
                    traceback.print_exc(file=sys.stdout)
                    raise EuiException(500, 'unknown error occured')
            else:
                raise EuiException(500, 'unknown action')
    except EuiException as err:
        if err:
            raise tornado.web.HTTPError(err.status_code, err.message)
        else:
            raise tornado.web.HTTPError(500, 'unknown error occured')
    if (not response):
        raise tornado.web.HTTPError(500, 'unknown error occured')
    self.write(response.get_response())
