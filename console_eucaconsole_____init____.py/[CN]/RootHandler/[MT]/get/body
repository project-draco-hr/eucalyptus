def get(self, path):
    try:
        action = self.get_argument('action', default='')
        if (action == 'awslogin'):
            access_token = self.get_argument('access_token')
            req = urllib2.Request(('https://api.amazon.com/auth/o2/tokeninfo?access_token=' + urllib.quote_plus(access_token)))
            response = urllib2.urlopen(req, timeout=15)
            body = response.read()
            token_info = json.loads(body)
            aws_client_id = ''
            aws_role_name = ''
            try:
                config.getboolean('aws', 'enable.aws')
                aws_client_id = config.get('aws', 'client.id')
                aws_role_name = config.get('aws', 'role.name')
            except Exception as err:
                pass
            if (token_info['aud'] != aws_client_id):
                raise BaseException('Invalid Token')
            req = urllib2.Request('https://api.amazon.com/user/profile')
            req.add_header('Authorization', ('bearer ' + access_token))
            response = urllib2.urlopen(req, timeout=15)
            body = response.read()
            profile = json.loads(body)
            account = profile['user_id']
            user = profile['email']
            role_arn = ('arn:aws:iam::365812321051:role/' + aws_role_name)
            role_session_name = 'testing'
            url = 'https://sts.amazonaws.com?Action=AssumeRoleWithWebIdentity'
            url = (url + '&DurationSeconds=3600')
            url = (url + '&ProviderId=www.amazon.com')
            url = ((url + '&RoleSessionName=') + role_session_name)
            url = (url + '&Version=2011-06-15')
            url = ((url + '&RoleArn=') + role_arn)
            url = ((url + '&WebIdentityToken=') + access_token)
            logging.info(('sts request = ' + url))
            request = urllib2.Request(url, headers={'Accept': 'application/json', })
            response = urllib2.urlopen(request)
            assumedRole = response.read()
            logging.info(('assumed role = ' + assumedRole))
            assumedRole = json.loads(assumedRole)
            assumedRole = assumedRole['AssumeRoleWithWebIdentityResponse']['AssumeRoleWithWebIdentityResult']
            logging.info(("here's the response for AssumeRoleWithWebIdentity:\n- AssumedRole.user: %s\n- AssumedRole.credentials: %s" % (assumedRole['AssumedRoleUser'], assumedRole['Credentials'])))
            session_token = assumedRole['Credentials']['SessionToken']
            access_id = assumedRole['Credentials']['AccessKeyId']
            secret_key = assumedRole['Credentials']['SecretAccessKey']
            while True:
                sid = os.urandom(16).encode('hex')
                if (sid in sessions):
                    continue
                break
            if using_ssl:
                self.set_cookie('session-id', sid, secure='yes')
            else:
                self.set_cookie('session-id', sid)
            sessions[sid] = UserSession(account, user, session_token, access_id, secret_key)
            sessions[sid].host_override = 'ec2.us-east-1.amazonaws.com'
            self.redirect('/', False, 303)
            return
        else:
            path = os.path.join(config.get('paths', 'staticpath'), 'index.html')
    except ConfigParser.Error:
        logging.info(('Caught url path exception :' + path))
        path = '../static/index.html'
    self.set_header('X-Frame-Options', 'DENY')
    self.set_header('Cache-control', 'no-cache')
    self.set_header('Pragma', 'no-cache')
    self.render(path)
