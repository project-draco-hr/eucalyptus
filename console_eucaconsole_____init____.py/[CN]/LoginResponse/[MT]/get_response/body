def get_response(self):
    global global_session
    if (not global_session):
        global_session = GlobalSession()
    instancetypes = []
    if self.user_session.host_override:
        instancetypes.append(dict(name='t1.micro', cores='1', memory='256', disk='5'))
        instancetypes.append(dict(name='m1.small', cores='1', memory='256', disk='5'))
        instancetypes.append(dict(name='m1.medium', cores='1', memory='512', disk='10'))
        instancetypes.append(dict(name='m1.large', cores='2', memory='512', disk='10'))
        instancetypes.append(dict(name='c1.medium', cores='2', memory='512', disk='10'))
        instancetypes.append(dict(name='m1.xlarge', cores='2', memory='1024', disk='10'))
        instancetypes.append(dict(name='c1.xlarge', cores='2', memory='2048', disk='10'))
        instancetypes.append(dict(name='m2.xlarge', cores='2', memory='2048', disk='10'))
        instancetypes.append(dict(name='m3.xlarge', cores='4', memory='2048', disk='15'))
        instancetypes.append(dict(name='m3.2xlarge', cores='4', memory='4096', disk='30'))
        instancetypes.append(dict(name='m2.4xlarge', cores='8', memory='4096', disk='60'))
        instancetypes.append(dict(name='hi1.4xlarge', cores='8', memory='6144', disk='120'))
        instancetypes.append(dict(name='cc2.8xlarge', cores='16', memory='6144', disk='120'))
        instancetypes.append(dict(name='cg1.4xlarge', cores='16', memory='12288', disk='200'))
        instancetypes.append(dict(name='cr1.8xlarge', cores='16', memory='16384', disk='240'))
        instancetypes.append(dict(name='hs1.8xlarge', cores='48', memory='119808', disk='24000'))
    else:
        host = config.get('server', 'clchost')
        clc = BotoClcInterface(host, self.user_session.access_key, self.user_session.secret_key, self.user_session.session_token, debug=0)
        instancetypes = clc.get_all_instancetypes()
    global_session.parse_instancetypes(instancetypes)
    return {'global_session': global_session.get_session(), 'user_session': self.user_session.get_session(), }
