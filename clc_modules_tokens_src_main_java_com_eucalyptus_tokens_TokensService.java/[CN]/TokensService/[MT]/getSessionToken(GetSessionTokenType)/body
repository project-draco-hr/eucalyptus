{
  final GetSessionTokenResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  final Context ctx=Contexts.lookup();
  final Subject subject=ctx.getSubject();
  final User requestUser=ctx.getUser();
  AccessKey accessKey=null;
  final Set<QueryIdCredential> queryIdCreds=subject.getPublicCredentials(QueryIdCredential.class);
  if (!queryIdCreds.isEmpty()) {
    try {
      accessKey=Accounts.lookupAccessKeyById(Iterables.getOnlyElement(queryIdCreds).getQueryId());
    }
 catch (    final AuthException e) {
      throw new EucalyptusCloudException("Error finding access key",e);
    }
  }
  String accessToken=null;
  final AccountUsername accountUsername=Iterables.getFirst(subject.getPublicCredentials(AccountUsername.class),null);
  if (accountUsername != null) {
    try {
      final Account account=Accounts.lookupAccountByName(accountUsername.getAccount());
      final User user=account.lookupUserByName(accountUsername.getUsername());
      accessToken=user.getToken();
    }
 catch (    AuthException e) {
      throw new EucalyptusCloudException();
    }
  }
  try {
    final int durationSeconds=Objects.firstNonNull(request.getDurationSeconds(),(int)TimeUnit.HOURS.toSeconds(12));
    final SecurityToken token=accessToken == null ? SecurityTokenManager.issueSecurityToken(requestUser,accessKey,durationSeconds) : SecurityTokenManager.issueSecurityToken(requestUser,durationSeconds);
    reply.setResult(GetSessionTokenResultType.forCredentials(token.getAccessKeyId(),token.getSecretKey(),token.getToken(),token.getExpires()));
  }
 catch (  final SecurityTokenValidationException e) {
    throw new TokensException(TokensException.Code.ValidationError,e.getMessage());
  }
catch (  final AuthException e) {
    throw new EucalyptusCloudException(e.getMessage(),e);
  }
  return reply;
}
