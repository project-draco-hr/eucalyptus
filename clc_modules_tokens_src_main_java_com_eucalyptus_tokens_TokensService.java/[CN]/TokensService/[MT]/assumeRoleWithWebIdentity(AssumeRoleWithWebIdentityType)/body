{
  final AssumeRoleWithWebIdentityResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  final Context ctx=Contexts.lookup();
  final Subject subject=ctx.getSubject();
  final Set<QueryIdCredential> queryIdCreds=subject == null ? Collections.<QueryIdCredential>emptySet() : subject.getPublicCredentials(QueryIdCredential.class);
  if (queryIdCreds.size() == 1 && Iterables.get(queryIdCreds,0).getType().isPresent() && Iterables.get(queryIdCreds,0).getType().get() != TemporaryAccessKey.TemporaryKeyType.Access) {
    throw new TokensException(TokensException.Code.MissingAuthenticationToken,"Temporary credential not permitted.");
  }
  rejectPasswordCredentials();
  final BaseRole role=lookupRole(request.getRoleArn());
  try {
    final String identityToken=request.getWebIdentityToken();
    final String[] jwtParts=identityToken.split("\\.");
    final JSONObject jwtBody=JSONObject.fromObject(new String(Base64.decodeBase64(jwtParts[1])));
    final Ern roleArn=Ern.parse(request.getRoleArn());
    final String roleAccountId=roleArn.getAccount();
    final EuareOpenIdConnectProvider provider=lookupOpenIdConnectProvider(roleAccountId,(String)jwtBody.get("iss"));
    final String configJson=readUrl((String)jwtBody.get("iss") + "/.well-known/openid-configuration").getLeft();
    final JSONObject config=JSONObject.fromObject(configJson);
    final Pair<String,Certificate[]> readResult=readUrl((String)config.get("jwks_uri"));
    final String thumbprint=getServerCertThumbprint(readResult.getRight()[0]);
    if (!provider.getThumbprints().contains(thumbprint)) {
      throw new TokensException(TokensException.Code.ValidationError,"SSL Certificate thumbprint does not match");
    }
    final String keysJson=readResult.getLeft();
    if (isSignatureVerified(jwtParts,keysJson)) {
      throw new TokensException(TokensException.Code.ValidationError,"signature not valid");
    }
    if (!(provider.getClientIds().contains(jwtBody.get("aud")))) {
      throw new TokensException(TokensException.Code.ValidationError,"clientID does not match");
    }
    final long expiration=(long)jwtBody.getLong("exp") * 1000;
    if (new Date(expiration).compareTo(new Date()) < 0) {
      throw new TokensException(TokensException.Code.ValidationError,"web token has expired");
    }
    final SecurityToken token=SecurityTokenManager.issueSecurityToken(role,Objects.firstNonNull(request.getDurationSeconds(),(int)TimeUnit.HOURS.toSeconds(1)));
    reply.getAssumeRoleWithWebIdentityResult().setCredentials(new CredentialsType(token.getAccessKeyId(),token.getSecretKey(),token.getToken(),token.getExpires()));
    reply.getAssumeRoleWithWebIdentityResult().setAssumedRoleUser(new AssumedRoleUserType(role.getRoleId() + ":" + request.getRoleSessionName(),assumedRoleArn(role,request.getRoleSessionName())));
  }
 catch (  CertificateEncodingException|NoSuchProviderException|NoSuchAlgorithmException|InvalidKeySpecException e) {
    LOG.error("problem w/ assume role",e);
    throw new TokensException(TokensException.Code.ValidationError,e.getMessage());
  }
catch (  InvalidKeyException|SignatureException|IOException|JSONException|SecurityTokenValidationException e) {
    LOG.error("problem w/ assume role",e);
    throw new TokensException(TokensException.Code.ValidationError,e.getMessage());
  }
catch (  final AuthException e) {
    LOG.error("problem w/ assume role",e);
    throw new EucalyptusCloudException(e.getMessage(),e);
  }
  return reply;
}
