{
  try {
    final Matcher matcher=ROLE_ARN_PATTERN.matcher(roleArnStringWithAlias);
    if (!matcher.matches()) {
      throw new IllegalArgumentException();
    }
    final String accountNumberOrAlias=matcher.group(ROLE_ARN_PATTERN_ACCOUNT_GROUP);
    final String roleArnString=Accounts.isAccountNumber(accountNumberOrAlias) || !TokensServiceConfiguration.getRoleArnAliasPattern().matcher(accountNumberOrAlias).matches() ? roleArnStringWithAlias : roleArnStringWithAlias.substring(0,matcher.start(ROLE_ARN_PATTERN_ACCOUNT_GROUP)) + Accounts.lookupAccountIdentifiersByAlias(accountNumberOrAlias).getAccountNumber() + roleArnStringWithAlias.substring(matcher.end(ROLE_ARN_PATTERN_ACCOUNT_GROUP));
    final Ern roleArn=Ern.parse(roleArnString);
    if (!(roleArn instanceof EuareResourceName) || !PolicySpec.IAM_RESOURCE_ROLE.equals(((EuareResourceName)roleArn).getType()) || roleArn.getAccount() == null) {
      throw new IllegalArgumentException();
    }
    final String roleAccountId=roleArn.getAccount();
    final String roleName=((EuareResourceName)roleArn).getName();
    return Accounts.lookupRoleByName(roleAccountId,roleName);
  }
 catch (  IllegalArgumentException|JSONException e) {
    throw new TokensException(Code.ValidationError,"Invalid role ARN: " + roleArnStringWithAlias);
  }
catch (  Exception e) {
    throw new TokensException(Code.InvalidParameterValue,"Invalid role: " + roleArnStringWithAlias);
  }
}
