{
  final AssumeRoleResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  final Role role=lookupRole(request.getRoleArn());
  try {
    RestrictedIdentity.checkAuthorized(role.getAccount(),PolicySpec.qualifiedName(PolicySpec.VENDOR_IAM,PolicySpec.IAM_RESOURCE_ROLE),Accounts.getRoleFullName(role),role.getAssumeRolePolicy(),new Supplier<TokensException>(){
      @Override public TokensException get(){
        return new TokensException(HttpResponseStatus.FORBIDDEN,TokensException.NOT_AUTHORIZED,"Not permitted to assume role.");
      }
    }
);
    final SecurityToken token=SecurityTokenManager.issueSecurityToken(role,Objects.firstNonNull(request.getDurationSeconds(),(int)TimeUnit.HOURS.toSeconds(1)));
    reply.getAssumeRoleResult().setCredentials(new CredentialsType(token.getAccessKeyId(),token.getSecretKey(),token.getToken(),token.getExpires()));
    reply.getAssumeRoleResult().setAssumedRoleUser(new AssumedRoleUserType(role.getRoleId() + ":" + request.getRoleSessionName(),assumedRoleArn(role,request.getRoleSessionName())));
  }
 catch (  final AuthException e) {
    throw new EucalyptusCloudException(e.getMessage(),e);
  }
  return reply;
}
