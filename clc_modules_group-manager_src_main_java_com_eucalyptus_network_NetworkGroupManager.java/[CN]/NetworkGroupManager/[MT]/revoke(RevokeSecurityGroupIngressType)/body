{
  NetworkGroupUtil.makeDefault(request.getUserId());
  RevokeSecurityGroupIngressResponseType reply=(RevokeSecurityGroupIngressResponseType)request.getReply();
  NetworkRulesGroup ruleGroup=NetworkGroupUtil.getUserNetworkRulesGroup(request.getUserId(),request.getGroupName());
  final List<NetworkRule> ruleList=Lists.newArrayList();
  for (  IpPermissionType ipPerm : request.getIpPermissions()) {
    ruleList.addAll(NetworkGroupUtil.getNetworkRules(ipPerm));
  }
  List<NetworkRule> filtered=Lists.newArrayList(Iterables.filter(ruleGroup.getNetworkRules(),new Predicate<NetworkRule>(){
    @Override public boolean apply(    NetworkRule rule){
      for (      NetworkRule r : ruleList) {
        if (r.equals(rule) && r.getNetworkPeers().equals(rule.getNetworkPeers()) && r.getIpRanges().equals(rule.getIpRanges())) {
          return true;
        }
      }
      return false;
    }
  }
));
  if (filtered.size() == ruleList.size()) {
    for (    NetworkRule r : filtered) {
      ruleGroup.getNetworkRules().remove(r);
    }
    NetworkGroupUtil.getEntityWrapper().mergeAndCommit(ruleGroup);
  }
 else   if (request.getIpPermissions().size() == 1 && request.getIpPermissions().get(0).getIpProtocol() == null) {
    for (    NetworkRule rule : ruleList) {
      if (ruleGroup.getNetworkRules().remove(rule)) {
        reply.set_return(true);
      }
    }
    if (reply.get_return()) {
      NetworkGroupUtil.getEntityWrapper().mergeAndCommit(ruleGroup);
    }
  }
 else {
    reply.set_return(false);
    return reply;
  }
  Network changedNetwork=ruleGroup.getVmNetwork();
  Messaging.dispatch("vm://ClusterSink",changedNetwork);
  reply.set_return(true);
  return reply;
}
