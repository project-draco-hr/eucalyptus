{
  if (f.isDirectory()) {
    File[] files=f.listFiles(new FilenameFilter(){
      @Override public boolean accept(      File dir,      String name){
        return name.matches(FILE_PATTERN);
      }
    }
);
    for (    File ff : files) {
      byte[] bindingBytes=Files.toByteArray(ff);
      this.addCurrentBinding(bindingBytes,ff.getName(),"file:" + ff.getAbsolutePath());
    }
  }
 else {
    String digest=new BigInteger(Files.getDigest(f,Digest.MD5.get())).abs().toString(16);
    CURRENT_PROPS.put(BINDING_CACHE_JAR_PREFIX + f.getName(),digest);
    final JarFile jar=new JarFile(f);
    final List<JarEntry> jarList=Collections.list(jar.entries());
    for (    final JarEntry j : jarList) {
      try {
        if (j.getName().matches(FILE_PATTERN)) {
          byte[] bindingBytes=ByteStreams.toByteArray(jar.getInputStream(j));
          String bindingName=j.getName();
          String bindingFullPath="jar:file:" + f.getAbsolutePath() + "!/"+ bindingName;
          this.addCurrentBinding(bindingBytes,bindingName,bindingFullPath);
        }
 else         if (j.getName().matches(".*\\.class.{0,1}")) {
          final String classGuess=j.getName().replaceAll("/",".").replaceAll("\\.class.{0,1}","");
          final Class candidate=ClassLoader.getSystemClassLoader().loadClass(classGuess);
          if (MSG_BASE_CLASS.isAssignableFrom(candidate) || MSG_DATA_CLASS.isAssignableFrom(candidate)) {
            InputSupplier<InputStream> classSupplier=Resources.newInputStreamSupplier(ClassLoader.getSystemResource(j.getName()));
            File destClassFile=SubDirectory.CLASSCACHE.getChildFile(j.getName());
            if (!destClassFile.exists()) {
              Files.createParentDirs(destClassFile);
              Files.copy(classSupplier,destClassFile);
              Logs.extreme().debug("Caching: " + j.getName() + " => "+ destClassFile.getAbsolutePath());
            }
            BINDING_CLASS_MAP.putIfAbsent(classGuess,candidate);
          }
        }
      }
 catch (      RuntimeException ex) {
        LOG.error(ex,ex);
        jar.close();
        throw ex;
      }
    }
    jar.close();
  }
}
