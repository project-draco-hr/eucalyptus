{
  final Function<VmVolumeAttachment,Boolean> attachmentFunction=new Function<VmVolumeAttachment,Boolean>(){
    public Boolean apply(    VmVolumeAttachment arg0){
      final VmInstance vm=Entities.merge(VmInstance.this);
      Volume volume=Volumes.lookup(null,arg0.getVolumeId());
      if (arg0.getDeleteOnTerminate()) {
        try {
          final ServiceConfiguration sc=Topology.lookup(Storage.class,vm.lookupPartition());
          try {
            DeleteStorageVolumeResponseType reply=AsyncRequests.sendSync(sc,new DeleteStorageVolumeType(arg0.getVolumeId()));
            if (null != reply && reply.get_return()) {
              Volumes.annihilateStorageVolume(volume);
            }
 else {
              LOG.error(arg0.getVolumeId() + ": Failed to delete volume.");
            }
          }
 catch (          Exception ex) {
            LOG.error(arg0.getVolumeId() + ": Failed to delete volume.",ex);
          }
        }
 catch (        Exception ex) {
          LOG.error(arg0.getVolumeId() + "Failed to lookup volume",ex);
        }
      }
      return vm.getBootRecord().getPersistentVolumes().remove(arg0);
    }
  }
;
  Entities.asTransaction(VmInstance.class,attachmentFunction,VmInstances.TX_RETRIES).apply(attachment);
}
