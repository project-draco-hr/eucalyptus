{
  final boolean dns=StackConfiguration.USE_INSTANCE_DNS && !ComponentIds.lookup(Dns.class).runLimitedServices();
  final Map<String,String> m=Maps.newHashMap();
  m.put("ami-id",this.getImageId());
  if (this.bootRecord.getMachine() != null && !this.bootRecord.getMachine().getProductCodes().isEmpty()) {
    m.put("product-codes",Joiner.on('\n').join(this.bootRecord.getMachine().getProductCodes()));
  }
  m.put("ami-launch-index","" + this.launchRecord.getLaunchIndex());
  if (this.bootRecord.getMachine() instanceof MachineImageInfo) {
    m.put("ami-manifest-path",((MachineImageInfo)this.bootRecord.getMachine()).getManifestLocation());
  }
  m.put("hostname",this.getPublicAddress());
  m.put("instance-id",this.getInstanceId());
  m.put("instance-type",this.getVmType().getName());
  if (dns) {
    m.put("local-hostname",this.getNetworkConfig().getPrivateDnsName());
  }
 else {
    m.put("local-hostname",this.getNetworkConfig().getPrivateAddress());
  }
  m.put("local-ipv4",this.getNetworkConfig().getPrivateAddress());
  m.put("mac",upper().apply(this.getNetworkConfig().getMacAddress()));
  if (dns) {
    m.put("public-hostname",this.getNetworkConfig().getPublicDnsName());
  }
 else {
    m.put("public-hostname",this.getPublicAddress());
  }
  m.put("public-ipv4",this.getPublicAddress());
  m.put("reservation-id",this.vmId.getReservationId());
  if (this.getKernelId() != null) {
    m.put("kernel-id",this.getKernelId());
  }
  if (this.getRamdiskId() != null) {
    m.put("ramdisk-id",this.getRamdiskId());
  }
  m.put("security-groups",Joiner.on('\n').join(this.getNetworkNames()));
  m.put("placement/availability-zone",this.getPartition());
  return m;
}
