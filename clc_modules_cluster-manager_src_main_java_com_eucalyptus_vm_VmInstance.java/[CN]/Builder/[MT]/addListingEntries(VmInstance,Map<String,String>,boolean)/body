{
  final TreeMultimap<String,String> listingMap=TreeMultimap.create();
  final Splitter pathSplitter=Splitter.on('/');
  final Joiner pathJoiner=Joiner.on('/');
  for (  final String path : metadataMap.keySet()) {
    final List<String> pathSegments=Lists.newArrayList(pathSplitter.split(path));
    for (int i=0; i < pathSegments.size(); i++) {
      listingMap.put(pathJoiner.join(pathSegments.subList(0,i)),pathSegments.get(i) + (i < pathSegments.size() - 1 ? "/" : ""));
    }
  }
  if (addRoots && instance != null) {
    for (    MetadataGroup group : MetadataGroup.values()) {
      if (group.isPresent(instance) && group.prefix.isPresent()) {
        listingMap.put("",group.prefix.get() + "/");
      }
    }
  }
  final Joiner listingJoiner=Joiner.on("\n");
  for (  final String key : listingMap.keySet()) {
    final Set<String> values=listingMap.get(key);
    final Iterator<String> valueIterator=values.iterator();
    while (valueIterator.hasNext()) {
      final String value=valueIterator.next();
      if (values.contains(value + "/"))       valueIterator.remove();
    }
    if (!metadataMap.containsKey(key)) {
      metadataMap.put(key,listingJoiner.join(values));
    }
 else     if (!metadataMap.containsKey(key + "/")) {
      metadataMap.put(key + "/",listingJoiner.join(values));
    }
  }
  return metadataMap;
}
