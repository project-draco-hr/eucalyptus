{
  if (!Entities.isPersistent(v)) {
    throw new TransientEntityException(v.toString());
  }
 else {
    final EntityTransaction db=Entities.get(VmInstance.class);
    try {
      final VmInstance input=Entities.merge(v);
      RunningInstancesItemType runningInstance;
      runningInstance=new RunningInstancesItemType();
      runningInstance.setAmiLaunchIndex(Integer.toString(input.getLaunchRecord().getLaunchIndex()));
      final VmState displayState=input.getDisplayState();
      runningInstance.setStateCode(Integer.toString(displayState.getCode()));
      runningInstance.setStateName(displayState.getName());
      runningInstance.setPlatform(input.getPlatform());
      runningInstance.setInstanceId(input.getVmId().getInstanceId());
      runningInstance.setProductCodes(new ArrayList<String>());
      runningInstance.setImageId(input.getImageId());
      runningInstance.setKernel(input.getKernelId());
      runningInstance.setRamdisk(input.getRamdiskId());
      runningInstance.setPlatform(Strings.emptyToNull(input.getDisplayPlatform()));
      runningInstance.setDnsName(input.getDisplayPublicDnsName());
      runningInstance.setIpAddress(Strings.emptyToNull(input.getDisplayPublicAddress()));
      runningInstance.setPrivateDnsName(input.getDisplayPrivateDnsName());
      runningInstance.setPrivateIpAddress(Strings.emptyToNull(input.getDisplayPrivateAddress()));
      if (input.getBootRecord() == null || input.getBootRecord().getArchitecture() == null) {
        LOG.debug("WARNING: No architecture set for instance " + input.getInstanceId() + ", defaulting to x86_64");
        runningInstance.setArchitecture("x86_64");
      }
 else {
        runningInstance.setArchitecture(input.getBootRecord().getArchitecture().toString());
      }
      runningInstance.setReason(input.runtimeState.getReason());
      if (input.getBootRecord().getSshKeyPair() != null) {
        runningInstance.setKeyName(input.getBootRecord().getSshKeyPair().getName());
        if ((runningInstance.getKeyName() != null) && (runningInstance.getKeyName().isEmpty()))         runningInstance.setKeyName(null);
      }
 else       runningInstance.setKeyName("");
      runningInstance.setInstanceType(input.getVmType().getName());
      runningInstance.setPlacement(input.getPlacement().getPartitionName());
      runningInstance.setLaunchTime(input.getLaunchRecord().getLaunchTime());
      runningInstance.setClientToken(input.getClientToken());
      runningInstance.setVpcId(input.getVpcId());
      runningInstance.setSubnetId(input.getSubnetId());
      if (!Strings.isNullOrEmpty(input.getIamInstanceProfileId())) {
        runningInstance.setIamInstanceProfile(new IamInstanceProfile(input.getIamInstanceProfileArn(),input.getIamInstanceProfileId()));
      }
 else       if (!Strings.isNullOrEmpty(input.getIamInstanceProfileArn()) && input.getIamInstanceProfileArn().startsWith("arn:")) {
        final String rawName=input.getIamInstanceProfileArn();
        final int nameIndex=input.getIamInstanceProfileArn().lastIndexOf('/');
        final String name=input.getIamInstanceProfileArn().substring(nameIndex + 1,rawName.length());
        InstanceProfile instanceProfile;
        try {
          instanceProfile=Accounts.lookupAccountById(input.getOwnerAccountNumber()).lookupInstanceProfileByName(name);
          final String profileArn=Accounts.getInstanceProfileArn(instanceProfile);
          IamInstanceProfile iamInstanceProfile=new IamInstanceProfile();
          iamInstanceProfile.setArn(profileArn);
          iamInstanceProfile.setId(instanceProfile.getInstanceProfileId());
          runningInstance.setIamInstanceProfile(iamInstanceProfile);
        }
 catch (        NoSuchElementException nsee) {
          LOG.debug("profile arn : " + name,nsee);
        }
      }
 else       if (!Strings.isNullOrEmpty(input.getIamInstanceProfileArn()) && !input.getIamInstanceProfileArn().startsWith("arn:")) {
        try {
          final InstanceProfile instanceProfile=Accounts.lookupAccountById(input.getOwnerAccountNumber()).lookupInstanceProfileByName(input.getIamInstanceProfileArn());
          final String profileArn=Accounts.getInstanceProfileArn(instanceProfile);
          IamInstanceProfile iamInstanceProfile=new IamInstanceProfile();
          iamInstanceProfile.setArn(profileArn);
          iamInstanceProfile.setId(instanceProfile.getInstanceProfileId());
          runningInstance.setIamInstanceProfile(iamInstanceProfile);
        }
 catch (        NoSuchElementException nsee) {
          LOG.debug("profile name : " + input.getIamInstanceProfileArn(),nsee);
        }
      }
      if (input.getMonitoring()) {
        runningInstance.setMonitoring("enabled");
      }
 else {
        runningInstance.setMonitoring("disabled");
      }
      runningInstance.getGroupSet().addAll(Collections2.transform(input.getNetworkGroupIds(),TypeMappers.lookup(NetworkGroupId.class,GroupItemType.class)));
      Collections.sort(runningInstance.getGroupSet());
      runningInstance.setVirtualizationType(input.getVirtualizationType());
      if (input.isBlockStorage()) {
        runningInstance.setRootDeviceType(ROOT_DEVICE_TYPE_EBS);
      }
      if (input.getBootRecord().hasPersistentVolumes()) {
        for (        final VmVolumeAttachment attachedVol : input.getBootRecord().getPersistentVolumes()) {
          runningInstance.getBlockDevices().add(new InstanceBlockDeviceMapping(attachedVol.getDevice(),attachedVol.getVolumeId(),attachedVol.getStatus(),attachedVol.getAttachTime(),attachedVol.getDeleteOnTerminate()));
          if (attachedVol.getIsRootDevice()) {
            runningInstance.setRootDeviceName(attachedVol.getDevice());
          }
        }
      }
      for (      final VmVolumeAttachment attachedVol : input.getTransientVolumeState().getAttachments()) {
        runningInstance.getBlockDevices().add(new InstanceBlockDeviceMapping(attachedVol.getDevice(),attachedVol.getVolumeId(),attachedVol.getStatus(),attachedVol.getAttachTime(),attachedVol.getDeleteOnTerminate()));
      }
      for (      final NetworkInterface networkInterface : input.getNetworkInterfaces()) {
        if (runningInstance.getNetworkInterfaceSet() == null) {
          runningInstance.setNetworkInterfaceSet(new InstanceNetworkInterfaceSetType());
        }
        runningInstance.getNetworkInterfaceSet().getItem().add(new InstanceNetworkInterfaceSetItemType(networkInterface.getDisplayName(),networkInterface.getSubnet().getDisplayName(),networkInterface.getVpc().getDisplayName(),networkInterface.getDescription(),networkInterface.getOwnerAccountNumber(),String.valueOf(networkInterface.getState()),networkInterface.getMacAddress(),networkInterface.getPrivateIpAddress(),null,networkInterface.getSourceDestCheck(),new GroupSetType(Collections2.transform(networkInterface.getNetworkGroups(),TypeMappers.lookup(NetworkGroup.class,GroupItemType.class))),new InstanceNetworkInterfaceAttachmentType(networkInterface.getAttachment().getAttachmentId(),networkInterface.getAttachment().getDeviceIndex(),String.valueOf(networkInterface.getAttachment().getStatus()),networkInterface.getAttachment().getAttachTime(),networkInterface.getAttachment().getDeleteOnTerminate()),networkInterface.isAssociated() ? new InstanceNetworkInterfaceAssociationType(networkInterface.getAssociation().getPublicIp(),networkInterface.getAssociation().getPublicDnsName(),networkInterface.getAssociation().getIpOwnerId()) : null,new InstancePrivateIpAddressesSetType(Lists.newArrayList(new InstancePrivateIpAddressesSetItemType(networkInterface.getPrivateIpAddress(),null,true,networkInterface.isAssociated() ? new InstanceNetworkInterfaceAssociationType(networkInterface.getAssociation().getPublicIp(),networkInterface.getAssociation().getPublicDnsName(),networkInterface.getAssociation().getIpOwnerId()) : null)))));
      }
      return runningInstance;
    }
 catch (    final NoSuchElementException ex) {
      throw ex;
    }
catch (    final Exception ex) {
      throw new NoSuchElementException("Failed to lookup vm instance: " + v);
    }
 finally {
      if (db.isActive())       db.rollback();
    }
  }
}
