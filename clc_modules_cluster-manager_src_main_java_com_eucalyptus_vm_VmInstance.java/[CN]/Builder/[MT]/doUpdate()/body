{
  return new Predicate<VmInfo>(){
    @Override public boolean apply(    final VmInfo runVm){
      if (!Entities.isPersistent(VmInstance.this)) {
        throw new TransientEntityException(this.toString());
      }
 else {
        try (TransactionResource db=Entities.transactionFor(VmInstance.class)){
          final VmState runVmState=VmState.Mapper.get(runVm.getStateName());
          if (VmInstance.this.getRuntimeState().isBundling()) {
            final BundleState bundleState=BundleState.mapper.apply(runVm.getBundleTaskStateName());
            VmInstance.this.getRuntimeState().updateBundleTaskState(bundleState,runVm.getBundleTaskProgress());
          }
 else           if (VmStateSet.RUN.apply(VmInstance.this) && VmStateSet.RUN.contains(runVmState)) {
            VmInstance.this.setState(runVmState,Reason.APPEND,"UPDATE");
            this.updateState(runVm);
          }
 else           if (VmState.SHUTTING_DOWN.apply(VmInstance.this) && VmState.SHUTTING_DOWN.equals(runVmState)) {
            VmInstance.this.setState(VmState.TERMINATED,Reason.APPEND,"DONE");
          }
 else           if (VmInstances.Timeout.SHUTTING_DOWN.apply(VmInstance.this)) {
            VmInstance.this.setState(VmState.TERMINATED,Reason.EXPIRED);
          }
 else           if (VmInstances.Timeout.STOPPING.apply(VmInstance.this)) {
            VmInstance.this.setState(VmState.STOPPED,Reason.EXPIRED);
          }
 else           if (VmStateSet.NOT_RUNNING.apply(VmInstance.this) && VmStateSet.RUN.contains(runVmState)) {
            if (Timeout.SHUTTING_DOWN.apply(VmInstance.this)) {
              VmInstances.terminated(VmInstance.this);
            }
 else             if (Timeout.STOPPING.apply(VmInstance.this)) {
              VmInstances.stopped(VmInstance.this);
            }
 else             if (VmInstance.this.lastUpdateMillis() > (VmInstances.VOLATILE_STATE_TIMEOUT_SEC * 1000l)) {
              VmInstances.sendTerminate(VmInstance.this.getInstanceId(),VmInstance.this.getPartition());
              VmInstance.this.updateTimeStamps();
            }
          }
 else {
            this.updateState(runVm);
          }
          db.commit();
        }
 catch (        final Exception ex) {
          Logs.extreme().error(ex,ex);
        }
      }
      return true;
    }
    private void updateState(    final VmInfo runVm){
      VmInstance.this.getRuntimeState().updateBundleTaskState(runVm.getBundleTaskStateName());
      VmInstance.this.setServiceTag(runVm.getServiceTag());
      VmInstance.this.getRuntimeState().setGuestState(runVm.getGuestStateName());
      if (!Boolean.TRUE.equals(VmInstance.this.getRuntimeState().getZombie())) {
        if (VmStateSet.RUN.apply(VmInstance.this)) {
          if (!InstanceStatus.Ok.apply(VmInstance.this)) {
            VmInstance.this.getRuntimeState().reachable();
          }
        }
        if (VmState.RUNNING.apply(VmInstance.this)) {
          VmInstance.this.updateVolumeAttachments(runVm.getVolumes());
          VmInstance.this.updateMigrationTaskState(runVm.getMigrationStateName(),Strings.nullToEmpty(runVm.getMigrationSource()),Strings.nullToEmpty(runVm.getMigrationDestination()));
        }
      }
      if (VmInstances.Timeout.UNTOUCHED.apply(VmInstance.this)) {
        VmInstance.this.updateTimeStamps();
      }
    }
  }
;
}
