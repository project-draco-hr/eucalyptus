{
  final boolean dns=StackConfiguration.USE_INSTANCE_DNS && !ComponentIds.lookup(Dns.class).runLimitedServices();
  final Map<String,String> m=new HashMap<String,String>();
  m.put("ami-id",this.getImageId());
  if (this.bootRecord.getMachine() != null && !this.bootRecord.getMachine().getProductCodes().isEmpty()) {
    m.put("product-codes",this.bootRecord.getMachine().getProductCodes().toString().replaceAll("[\\Q[]\\E]","").replaceAll(", ","\n"));
  }
  m.put("ami-launch-index","" + this.launchRecord.getLaunchIndex());
  if (this.bootRecord.getMachine() instanceof MachineImageInfo) {
    m.put("ami-manifest-path",((MachineImageInfo)this.bootRecord.getMachine()).getManifestLocation());
  }
  m.put("hostname",this.getPublicAddress());
  m.put("instance-id",this.getInstanceId());
  m.put("instance-type",this.getVmType().getName());
  if (dns) {
    m.put("local-hostname",this.getNetworkConfig().getPrivateDnsName());
  }
 else {
    m.put("local-hostname",this.getNetworkConfig().getPrivateAddress());
  }
  m.put("local-ipv4",this.getNetworkConfig().getPrivateAddress());
  if (dns) {
    m.put("public-hostname",this.getNetworkConfig().getPublicDnsName());
  }
 else {
    m.put("public-hostname",this.getPublicAddress());
  }
  m.put("public-ipv4",this.getPublicAddress());
  m.put("reservation-id",this.vmId.getReservationId());
  if (this.bootRecord.getKernel() != null) {
    m.put("kernel-id",this.bootRecord.getKernel().getDisplayName());
  }
  if (this.bootRecord.getRamdisk() != null) {
    m.put("ramdisk-id",this.bootRecord.getRamdisk().getDisplayName());
  }
  m.put("security-groups",this.getNetworkNames().toString().replaceAll("[\\Q[]\\E]","").replaceAll(", ","\n"));
  m.put("block-device-mapping/","emi\nephemeral\nephemeral0\nroot\nswap");
  m.put("block-device-mapping/emi","sda1");
  m.put("block-device-mapping/ami","sda1");
  m.put("block-device-mapping/ephemeral","sda2");
  m.put("block-device-mapping/ephemeral0","sda2");
  m.put("block-device-mapping/swap","sda3");
  m.put("block-device-mapping/root","/dev/sda1");
  if (!this.getNameOrArn().equals("")) {
    AssumeRoleType assumeRoleType=new AssumeRoleType();
    Account userAccount;
    String roleArn=null;
    InstanceProfile profile=null;
    String roleName=null;
    try {
      userAccount=Accounts.lookupAccountByName(Account.SYSTEM_ACCOUNT);
      profile=userAccount.lookupInstanceProfileByName(this.getNameOrArn());
      Role role=profile.getRole();
      roleArn=Accounts.getRoleArn(role);
      role.getRoleId();
      roleName=role.getName();
    }
 catch (    AuthException e) {
      LOG.debug(e);
    }
    assumeRoleType.setRoleArn(roleArn);
    assumeRoleType.setRoleSessionName("2JETSAA0QB8PGZOCA5FJI");
    assumeRoleType.setEffectiveUserId(this.ownerUserId);
    AssumeRoleResponseType assumeRoleResponseType=null;
    ServiceConfiguration serviceConfiguration=ServiceConfigurations.createEphemeral(ComponentIds.lookup(Tokens.class));
    try {
      assumeRoleResponseType=(AssumeRoleResponseType)AsyncRequests.sendSync(serviceConfiguration,assumeRoleType);
    }
 catch (    Exception e) {
      LOG.debug("Unable to send assume role request to token service",e);
    }
    final String accessKey=(assumeRoleResponseType != null ? assumeRoleResponseType.getAssumeRoleResult() : null).getCredentials().getAccessKeyId();
    final Date expiration=(assumeRoleResponseType != null ? assumeRoleResponseType.getAssumeRoleResult() : null).getCredentials().getExpiration();
    final String secretKey=(assumeRoleResponseType != null ? assumeRoleResponseType.getAssumeRoleResult() : null).getCredentials().getSecretAccessKey();
    final String sessionToken=(assumeRoleResponseType != null ? assumeRoleResponseType.getAssumeRoleResult() : null).getCredentials().getSessionToken();
    if (profile != null) {
      m.put("iam/info/","last-updated-date\ninstance-profile-arn\ninstance-profile-id");
      m.put("iam/info/last-updated-date",profile.getCreationTimestamp().toString());
      m.put("iam/info/instance-profile-arn",roleArn);
      m.put("iam/info/instance-profile-id",profile.getInstanceProfileId());
    }
    if (roleName != null || accessKey != null || expiration != null || secretKey != null || sessionToken != null) {
      m.put("iam/","security-credentials/");
      m.put("iam/security-credentials/",roleName + "/");
      m.put("iam/security-credentials/" + roleName + "/","AccessKeyId\nExpiration\nSecretAccessKey\nToken");
      m.put("iam/security-credentials/" + roleName + "/AccessKeyId/",accessKey);
      m.put("iam/security-credentials/" + roleName + "/Expiration/",Timestamps.formatIso8601Timestamp(expiration));
      m.put("iam/security-credentials/" + roleName + "/SecretAccessKey/",secretKey);
      m.put("iam/security-credentials/" + roleName + "/Token/",sessionToken);
    }
  }
  if (this.bootRecord.getSshKeyPair() != null) {
    m.put("public-keys/","0=" + this.bootRecord.getSshKeyPair().getName());
    m.put("public-keys/0","openssh-key");
    m.put("public-keys/0/","openssh-key");
    m.put("public-keys/0/openssh-key",this.bootRecord.getSshKeyPair().getPublicKey());
  }
  m.put("placement/","availability-zone");
  m.put("placement/availability-zone",this.getPartition());
  String dir="";
  for (  final String entry : m.keySet()) {
    if ((entry.contains("/") && !entry.endsWith("/"))) {
      continue;
    }
    dir+=entry + "\n";
  }
  m.put("",dir);
  return m;
}
