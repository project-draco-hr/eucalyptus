{
  final VmState inputState=VmState.Mapper.get(input.getStateName());
  if (!VmStateSet.RUN.contains(inputState)) {
    return false;
  }
 else   if (!ValidateVmInfo.INSTANCE.apply(input)) {
    return false;
  }
 else {
    final UserFullName userFullName=UserFullName.getInstance(input.getOwnerId());
    boolean building=false;
    Allocation allocation=null;
    try {
      final String imageId=RestoreAllocation.restoreImage(input);
      final String kernelId=RestoreAllocation.restoreKernel(input);
      final String ramdiskId=RestoreAllocation.restoreRamdisk(input);
      allocation=Allocations.restore(input,RestoreAllocation.restoreLaunchIndex(input),RestoreAllocation.restoreVmType(input),RestoreAllocation.restoreBootSet(input,imageId,kernelId,ramdiskId),RestoreAllocation.restorePartition(input),RestoreAllocation.restoreSshKeyPair(input,userFullName),RestoreAllocation.restoreUserData(input),userFullName);
      final List<NetworkGroup> networks=RestoreAllocation.restoreNetworks(input,userFullName);
      allocation.setNetworkRules(CollectionUtils.putAll(networks,Maps.<String,NetworkGroup>newLinkedHashMap(),RestrictedTypes.toDisplayName(),Functions.<NetworkGroup>identity()));
      VmInstanceLifecycleHelpers.get().prepareAllocation(input,allocation);
      AdmissionControl.restore().apply(allocation);
      building=true;
      allocation.commit();
      final ResourceToken token=Iterables.getOnlyElement(allocation.getAllocationTokens());
      VmInstanceLifecycleHelpers.get().restoreInstanceResources(token,input);
      return true;
    }
 catch (    final Exception ex) {
      if (allocation != null)       allocation.abort();
      LOG.error("Failed to restore instance " + input.getInstanceId() + " because of: "+ ex.getMessage(),building ? null : ex);
      Logs.extreme().error(ex,ex);
      return false;
    }
  }
}
