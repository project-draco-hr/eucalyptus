{
  final VmState inputState=VmState.Mapper.get(input.getStateName());
  if (!VmStateSet.RUN.contains(inputState)) {
    return false;
  }
 else   if (!ValidateVmInfo.INSTANCE.apply(input)) {
    return false;
  }
 else {
    final UserFullName userFullName=UserFullName.getInstance(input.getOwnerId());
    final EntityTransaction db=Entities.get(VmInstance.class);
    boolean building=false;
    try {
      final List<NetworkGroup> networks=RestoreAllocation.restoreNetworks(input,userFullName);
      final PrivateNetworkIndex index=RestoreAllocation.restoreNetworkIndex(input,networks);
      final VmType vmType=RestoreAllocation.restoreVmType(input);
      final Partition partition=RestoreAllocation.restorePartition(input);
      final String imageId=RestoreAllocation.restoreImage(input);
      final String kernelId=RestoreAllocation.restoreKernel(input);
      final String ramdiskId=RestoreAllocation.restoreRamdisk(input);
      final BootableSet bootSet=RestoreAllocation.restoreBootSet(input,imageId,kernelId,ramdiskId);
      final int launchIndex=RestoreAllocation.restoreLaunchIndex(input);
      final SshKeyPair keyPair=RestoreAllocation.restoreSshKeyPair(input,userFullName);
      final byte[] userData=RestoreAllocation.restoreUserData(input);
      building=true;
      final VmInstance vmInst=new Builder().owner(userFullName).withIds(input.getInstanceId(),input.getReservationId(),null,null).bootRecord(bootSet,userData,keyPair,vmType,Boolean.FALSE,null,null,null).placement(partition,partition.getName()).networkGroups(networks).networkIndex(index).build(launchIndex);
      vmInst.setNaturalId(input.getUuid());
      RestoreAllocation.restoreAddress(input,vmInst);
      Entities.persist(vmInst);
      db.commit();
      return true;
    }
 catch (    final Exception ex) {
      LOG.error("Failed to restore instance " + input.getInstanceId() + " because of: "+ ex.getMessage(),building ? null : ex);
      Logs.extreme().error(ex,ex);
      return false;
    }
 finally {
      if (db.isActive())       db.rollback();
    }
  }
}
