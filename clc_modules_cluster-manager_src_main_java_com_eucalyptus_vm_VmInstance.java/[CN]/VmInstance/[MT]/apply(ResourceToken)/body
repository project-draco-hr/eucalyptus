{
  final EntityTransaction db=Entities.get(VmInstance.class);
  try {
    try {
      Entities.delete(Entities.uniqueResult(VmInstance.withUuid(token.getInstanceUuid())));
      Entities.flush(VmInstance.class);
    }
 catch (    NoSuchElementException e) {
    }
    final Allocation allocInfo=token.getAllocationInfo();
    final VmInstance.Builder builder=new VmInstance.Builder();
    builder.onBuild(new Callback<VmInstance>(){
      @Override public void fire(      final VmInstance input){
        Entities.persist(input);
      }
    }
);
    VmInstanceLifecycleHelpers.get().prepareVmInstance(token,builder);
    VmInstance vmInst=builder.owner(allocInfo.getOwnerFullName()).withIds(token.getInstanceId(),token.getInstanceUuid(),allocInfo.getReservationId(),allocInfo.getClientToken(),allocInfo.getUniqueClientToken(token.getLaunchIndex())).bootRecord(allocInfo.getBootSet(),allocInfo.getUserData(),allocInfo.getSshKeyPair(),allocInfo.getVmType(),allocInfo.getSubnet(),allocInfo.isMonitoring(),allocInfo.getIamInstanceProfileArn(),allocInfo.getIamInstanceProfileId(),allocInfo.getIamRoleArn()).placement(allocInfo.getPartition()).networkGroups(allocInfo.getNetworkGroups()).addressing(allocInfo.isUsePrivateAddressing()).zombie(token.isZombie()).expiresOn(allocInfo.getExpiration()).build(token.getLaunchIndex());
    Entities.flush(vmInst);
    db.commit();
    token.setVmInstance(vmInst);
    return vmInst;
  }
 catch (  final ResourceAllocationException ex) {
    Logs.extreme().error(ex,ex);
    throw Exceptions.toUndeclared(ex);
  }
catch (  final Exception ex) {
    Logs.extreme().error(ex,ex);
    throw Exceptions.toUndeclared(new TransactionExecutionException(ex));
  }
 finally {
    if (db.isActive())     db.rollback();
  }
}
