{
  try {
    final UserFullName userFullName=UserFullName.getInstance(input.getOwnerId());
    final Address addr=Addresses.getInstance().lookup(input.getNetParams().getIgnoredPublicIp());
    if (addr.isAssigned() && addr.getInstanceAddress().equals(input.getNetParams().getIpAddress()) && addr.getInstanceId().equals(input.getInstanceId())) {
      vmInst.updateAddresses(input.getNetParams().getIpAddress(),input.getNetParams().getIgnoredPublicIp());
    }
 else     if (!addr.isAssigned() && addr.isAllocated() && (addr.isSystemOwned() || addr.getOwner().equals(userFullName))) {
      vmInst.updateAddresses(input.getNetParams().getIpAddress(),input.getNetParams().getIgnoredPublicIp());
      if (addr.isPending())       try {
        addr.clearPending();
      }
 catch (      Exception e) {
      }
      addr.assign(vmInst).clearPending();
    }
 else {
      vmInst.updateAddresses(input.getNetParams().getIpAddress(),input.getNetParams().getIpAddress());
    }
  }
 catch (  NoSuchElementException e) {
    try {
      final Address addr=Addresses.getInstance().lookupDisabled(input.getNetParams().getIgnoredPublicIp());
      vmInst.updateAddresses(input.getNetParams().getIpAddress(),input.getNetParams().getIgnoredPublicIp());
      addr.pendingAssignment().assign(vmInst).clearPending();
    }
 catch (    final Exception ex2) {
      LOG.error("Failed to restore address state (from disabled) " + input.getNetParams() + " for instance "+ input.getInstanceId()+ " because of: "+ ex2.getMessage());
      Logs.extreme().error(ex2,ex2);
    }
  }
catch (  final Exception ex2) {
    LOG.error("Failed to restore address state " + input.getNetParams() + " for instance "+ input.getInstanceId()+ " because of: "+ ex2.getMessage());
    Logs.extreme().error(ex2,ex2);
  }
}
