{
  if (!(Bootstrap.isFinished() && Topology.isEnabled(Eucalyptus.class)))   return;
  if (emi != null) {
    try {
      final List<ImageDetails> images=Ec2Client.getInstance().describeImages(null,Lists.newArrayList(emi));
      if (images == null || images.size() <= 0)       throw new EucalyptusCloudException("No such EMI is found in the system");
      if (!images.get(0).getImageId().toLowerCase().equals(emi.toLowerCase()))       throw new EucalyptusCloudException("No such EMI is found in the system");
    }
 catch (    final EucalyptusCloudException ex) {
      throw ex;
    }
catch (    final Exception ex) {
      throw new EucalyptusCloudException("Failed to verify EMI in the system");
    }
  }
  if (volumeId != null) {
    if (!volumeId.toLowerCase().startsWith("vol-"))     throw new EucalyptusCloudException("No such volume is found");
    try {
      final List<Volume> volumes=Ec2Client.getInstance().describeVolumes(null,Lists.newArrayList(volumeId));
      if (!(volumeId.equals(volumes.get(0).getVolumeId()) && "available".equals(volumes.get(0).getStatus()))) {
        throw new Exception();
      }
    }
 catch (    final Exception ex) {
      throw new EucalyptusCloudException("No such volume id is found");
    }
  }
  if (instanceType != null) {
    ;
  }
  if (keyname != null && !keyname.equals("")) {
    try {
      final List<DescribeKeyPairsResponseItemType> keypairs=Ec2Client.getInstance().describeKeyPairs(null,Lists.newArrayList(keyname));
      if (keypairs == null || keypairs.size() <= 0)       throw new EucalyptusCloudException("No such keypair is found in the system");
      if (!keypairs.get(0).getKeyName().equals(keyname))       throw new EucalyptusCloudException("No such keypair is found in the system");
    }
 catch (    final EucalyptusCloudException ex) {
      throw ex;
    }
catch (    final Exception ex) {
      throw new EucalyptusCloudException("Failed to verify the keyname in the system");
    }
  }
  if (ntpServers != null) {
    ;
  }
  if (!Topology.isEnabledLocally(Eucalyptus.class))   return;
  if ((emi != null && emi.length() > 0) || (instanceType != null && instanceType.length() > 0) || (keyname != null && keyname.length() > 0)|| (ntpServers != null && ntpServers.length() > 0)|| (logServer != null && logServer.length() > 0)|| (logServerPort != null && logServerPort.length() > 0) | initScript != null) {
    String asgName=null;
    LOG.info("Changing launch configuration for internal-db ASG");
    try {
      final List<TagDescription> tags=AutoScalingClient.getInstance().describeAutoScalingTags(null);
      for (      final TagDescription tag : tags) {
        if (DEFAULT_LAUNCHER_TAG.equals(tag.getValue())) {
          asgName=tag.getResourceId();
          break;
        }
      }
    }
 catch (    final Exception ex) {
      return;
    }
    if (asgName == null)     return;
    try {
      AutoScalingGroupType asgType=null;
      try {
        final DescribeAutoScalingGroupsResponseType resp=AutoScalingClient.getInstance().describeAutoScalingGroups(null,Lists.newArrayList(asgName));
        if (resp.getDescribeAutoScalingGroupsResult() != null && resp.getDescribeAutoScalingGroupsResult().getAutoScalingGroups() != null && resp.getDescribeAutoScalingGroupsResult().getAutoScalingGroups().getMember() != null && resp.getDescribeAutoScalingGroupsResult().getAutoScalingGroups().getMember().size() > 0) {
          asgType=resp.getDescribeAutoScalingGroupsResult().getAutoScalingGroups().getMember().get(0);
        }
      }
 catch (      final Exception ex) {
        LOG.warn("can't find autoscaling group named " + asgName);
        return;
      }
      if (asgType != null) {
        final String lcName=asgType.getLaunchConfigurationName();
        final LaunchConfigurationType lc=AutoScalingClient.getInstance().describeLaunchConfiguration(null,lcName);
        String tmpLaunchConfigName=null;
        do {
          tmpLaunchConfigName=String.format("lc-euca-internal-db-%s",UUID.randomUUID().toString().substring(0,8));
        }
 while (tmpLaunchConfigName.equals(asgType.getLaunchConfigurationName()));
        final String newEmi=emi != null ? emi : lc.getImageId();
        final String newType=instanceType != null ? instanceType : lc.getInstanceType();
        String newKeyname=keyname != null ? keyname : lc.getKeyName();
        if (lc.getUserData() == null || lc.getUserData().length() < 0)         throw new EucalyptusCloudException("ASG group for internal-db has invalid user data");
        String oldUserdata=null;
        try {
          oldUserdata=new String(Base64.decode(lc.getUserData().getBytes()));
        }
 catch (        Exception ex) {
          throw new EucalyptusCloudException("Can't decode user data for internal-db");
        }
        String encryptedPasword=null;
        String serverCertArn=null;
        int start=oldUserdata.indexOf(CONFIG_COMMMENT);
        if (start < 0) {
          throw new EucalyptusCloudException("ASG group for internal-db has invalid user data");
        }
 else {
          int i=oldUserdata.indexOf(PASSWORD_PROPERTY,start);
          int j=oldUserdata.indexOf("\n",i);
          encryptedPasword=oldUserdata.substring(i + PASSWORD_PROPERTY.length() + 1,j);
          i=oldUserdata.indexOf(CERT_PROPERTY,start);
          j=oldUserdata.indexOf("\n",i);
          serverCertArn=oldUserdata.substring(i + CERT_PROPERTY.length() + 1,j);
        }
        String newUserdata=null;
        if (emi != null) {
          newUserdata=lc.getUserData();
        }
        if (volumeId != null) {
          newUserdata=B64.standard.encString(String.format("%s\n%s",getCredentialsString(),getServerUserData(volumeId,DatabaseServerProperties.NTP_SERVER,DatabaseServerProperties.INIT_SCRIPT,encryptedPasword,serverCertArn)));
        }
        if (initScript != null) {
          newUserdata=B64.standard.encString(String.format("%s\n%s",getCredentialsString(),getServerUserData(DatabaseServerProperties.VOLUME,NTP_SERVER,DatabaseServerProperties.INIT_SCRIPT,encryptedPasword,serverCertArn)));
        }
        if (ntpServers != null) {
          newUserdata=B64.standard.encString(String.format("%s\n%s",getCredentialsString(),getServerUserData(DatabaseServerProperties.VOLUME,ntpServers,DatabaseServerProperties.INIT_SCRIPT,encryptedPasword,serverCertArn)));
        }
        if (logServer != null) {
          newUserdata=B64.standard.encString(String.format("%s\n%s",getCredentialsString(),getServerUserData(DatabaseServerProperties.VOLUME,DatabaseServerProperties.NTP_SERVER,DatabaseServerProperties.INIT_SCRIPT,encryptedPasword,serverCertArn)));
        }
        if (logServerPort != null) {
          newUserdata=B64.standard.encString(String.format("%s\n%s",getCredentialsString(),getServerUserData(DatabaseServerProperties.VOLUME,DatabaseServerProperties.NTP_SERVER,DatabaseServerProperties.INIT_SCRIPT,encryptedPasword,serverCertArn)));
        }
        if (newUserdata == null)         throw new EucalyptusCloudException("Failed to create user-data");
        try {
          AutoScalingClient.getInstance().createLaunchConfiguration(null,newEmi,newType,lc.getIamInstanceProfile(),tmpLaunchConfigName,lc.getSecurityGroups().getMember().get(0),newKeyname,newUserdata);
        }
 catch (        final Exception ex) {
          LOG.warn("Failed to create temporary launch config",ex);
          throw new EucalyptusCloudException("failed to create temporary launch config",ex);
        }
        try {
          AutoScalingClient.getInstance().updateAutoScalingGroup(null,asgName,null,asgType.getDesiredCapacity(),tmpLaunchConfigName);
        }
 catch (        final Exception ex) {
          LOG.warn("Failed to update the autoscaling group",ex);
          throw new EucalyptusCloudException("failed to update the autoscaling group",ex);
        }
        try {
          AutoScalingClient.getInstance().deleteLaunchConfiguration(null,asgType.getLaunchConfigurationName());
        }
 catch (        final Exception ex) {
          LOG.warn("unable to delete the old launch configuration",ex);
        }
        try {
          AutoScalingClient.getInstance().createLaunchConfiguration(null,newEmi,newType,lc.getIamInstanceProfile(),asgType.getLaunchConfigurationName(),lc.getSecurityGroups().getMember().get(0),newKeyname,newUserdata);
        }
 catch (        final Exception ex) {
          throw new EucalyptusCloudException("unable to create the new launch config",ex);
        }
        try {
          AutoScalingClient.getInstance().updateAutoScalingGroup(null,asgName,null,asgType.getDesiredCapacity(),asgType.getLaunchConfigurationName());
        }
 catch (        final Exception ex) {
          throw new EucalyptusCloudException("failed to update the autoscaling group",ex);
        }
        try {
          AutoScalingClient.getInstance().deleteLaunchConfiguration(null,tmpLaunchConfigName);
        }
 catch (        final Exception ex) {
          LOG.warn("unable to delete the temporary launch configuration",ex);
        }
        if (emi != null) {
          try {
            final List<ImageDetails> images=Ec2Client.getInstance().describeImages(null,Lists.newArrayList(emi));
            for (            ResourceTag tag : images.get(0).getTagSet())             AutoScalingClient.getInstance().createOrUpdateAutoscalingTags(null,tag.getKey(),tag.getValue(),asgName);
          }
 catch (          final Exception ex) {
            LOG.warn("unable to propogate tags from image to ASG",ex);
          }
        }
        LOG.debug(String.format("autoscaling group '%s' was updated",asgName));
      }
    }
 catch (    final EucalyptusCloudException ex) {
      throw ex;
    }
catch (    final Exception ex) {
      throw new EucalyptusCloudException("Unable to update the autoscaling group",ex);
    }
  }
}
