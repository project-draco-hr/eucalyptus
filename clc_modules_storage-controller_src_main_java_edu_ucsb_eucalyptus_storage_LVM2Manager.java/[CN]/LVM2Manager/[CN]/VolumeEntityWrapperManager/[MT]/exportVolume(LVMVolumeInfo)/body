{
  if (exportManager instanceof AOEManager) {
    AOEVolumeInfo aoeVolumeInfo=(AOEVolumeInfo)lvmVolumeInfo;
    int pid=aoeVolumeInfo.getVbladePid();
    if (pid > 0) {
      String absoluteLVName=lvmRootDirectory + PATH_SEPARATOR + aoeVolumeInfo.getVgName()+ PATH_SEPARATOR+ aoeVolumeInfo.getLvName();
      try {
        enableLogicalVolume(absoluteLVName);
      }
 catch (      ExecutionException ex) {
        String error="Unable to run command: " + ex.getMessage();
        LOG.error(error);
        return;
      }
      String returnValue=aoeStatus(pid);
      if (returnValue.length() == 0) {
        int majorNumber=aoeVolumeInfo.getMajorNumber();
        int minorNumber=aoeVolumeInfo.getMinorNumber();
        pid=exportManager.exportVolume(iface,absoluteLVName,majorNumber,minorNumber);
        aoeVolumeInfo.setVbladePid(pid);
        File vbladePidFile=new File(eucaHome + EUCA_VAR_RUN_PATH + "/vblade-"+ majorNumber+ minorNumber+ ".pid");
        FileOutputStream fileOutStream=null;
        try {
          fileOutStream=new FileOutputStream(vbladePidFile);
          String pidString=String.valueOf(pid);
          fileOutStream.write(pidString.getBytes());
          fileOutStream.close();
        }
 catch (        Exception ex) {
          if (fileOutStream != null)           try {
            fileOutStream.close();
          }
 catch (          IOException e) {
            LOG.error(e);
          }
          LOG.error("Could not write pid file vblade-" + majorNumber + minorNumber+ ".pid");
        }
      }
    }
  }
 else   if (exportManager instanceof ISCSIManager) {
    ISCSIVolumeInfo iscsiVolumeInfo=(ISCSIVolumeInfo)lvmVolumeInfo;
    String absoluteLVName=lvmRootDirectory + PATH_SEPARATOR + iscsiVolumeInfo.getVgName()+ PATH_SEPARATOR+ iscsiVolumeInfo.getLvName();
    ((ISCSIManager)exportManager).exportTarget(iscsiVolumeInfo.getTid(),iscsiVolumeInfo.getStoreName(),iscsiVolumeInfo.getLun(),absoluteLVName,iscsiVolumeInfo.getStoreUser());
  }
}
