{
  if (exportManager instanceof AOEManager) {
    AOEVolumeInfo aoeVolumeInfo=(AOEVolumeInfo)lvmVolumeInfo;
    List<Integer> deviceNumbers=allocateDeviceNumbers();
    int majorNumber=deviceNumbers.get(0);
    int minorNumber=deviceNumbers.get(1);
    String absoluteLVName=lvmRootDirectory + PATH_SEPARATOR + vgName+ PATH_SEPARATOR+ lvName;
    int pid=exportManager.exportVolume(StorageProperties.iface,absoluteLVName,majorNumber,minorNumber);
    boolean success=false;
    String returnValue="";
    int timeout=300;
    if (pid > 0) {
      for (int i=0; i < 5; ++i) {
        returnValue=aoeStatus(pid);
        if (returnValue.length() == 0) {
          success=false;
          try {
            Thread.sleep(timeout);
          }
 catch (          InterruptedException ie) {
            LOG.error(ie);
          }
          timeout+=300;
        }
 else {
          success=true;
          break;
        }
      }
    }
    if (!success) {
      throw new EucalyptusCloudException("Could not export AoE device " + absoluteLVName + " iface: "+ StorageProperties.iface+ " pid: "+ pid+ " returnValue: "+ returnValue);
    }
    File vbladePidFile=new File(eucaHome + EUCA_VAR_RUN_PATH + "/vblade-"+ majorNumber+ minorNumber+ ".pid");
    FileOutputStream fileOutStream=null;
    try {
      fileOutStream=new FileOutputStream(vbladePidFile);
      String pidString=String.valueOf(pid);
      fileOutStream.write(pidString.getBytes());
    }
 catch (    Exception ex) {
      LOG.error("Could not write pid file vblade-" + majorNumber + minorNumber+ ".pid");
    }
 finally {
      if (fileOutStream != null)       try {
        fileOutStream.close();
      }
 catch (      IOException e) {
        LOG.error(e);
      }
    }
    if (pid < 0)     throw new EucalyptusCloudException("invalid vblade pid: " + pid);
    aoeVolumeInfo.setVbladePid(pid);
    aoeVolumeInfo.setMajorNumber(majorNumber);
    aoeVolumeInfo.setMinorNumber(minorNumber);
    return pid;
  }
 else   if (exportManager instanceof ISCSIManager) {
    ISCSIVolumeInfo iscsiVolumeInfo=(ISCSIVolumeInfo)lvmVolumeInfo;
    allocateNewTarget(iscsiVolumeInfo);
    String password=Hashes.getRandom(16);
    iscsiVolumeInfo.setEncryptedPassword(encryptTargetPassword(password));
    String absoluteLVName=lvmRootDirectory + PATH_SEPARATOR + vgName+ PATH_SEPARATOR+ lvName;
    ((ISCSIManager)exportManager).exportTarget(iscsiVolumeInfo.getTid(),iscsiVolumeInfo.getStoreName(),iscsiVolumeInfo.getLun(),absoluteLVName,iscsiVolumeInfo.getStoreUser(),password);
  }
  return 0;
}
