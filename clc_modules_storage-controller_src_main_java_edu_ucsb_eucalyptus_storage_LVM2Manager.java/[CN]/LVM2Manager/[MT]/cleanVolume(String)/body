{
  VolumeEntityWrapperManager volumeManager=new VolumeEntityWrapperManager();
  LVMVolumeInfo lvmVolInfo=volumeManager.getVolumeInfo(volumeId);
  if (lvmVolInfo != null) {
    String loDevName=lvmVolInfo.getLoDevName();
    int pid=lvmVolInfo.getVbladePid();
    if (pid > 0) {
      String returnValue=aoeStatus(pid);
      if (returnValue.length() > 0) {
        exportManager.unexportVolume(pid);
        int majorNumber=lvmVolInfo.getMajorNumber();
        int minorNumber=lvmVolInfo.getMinorNumber();
        File vbladePidFile=new File(eucaHome + EUCA_VAR_RUN_PATH + "/vblade-"+ majorNumber+ minorNumber+ ".pid");
        if (vbladePidFile.exists()) {
          vbladePidFile.delete();
        }
      }
    }
    String vgName=lvmVolInfo.getVgName();
    String lvName=lvmVolInfo.getLvName();
    String absoluteLVName=lvmRootDirectory + PATH_SEPARATOR + vgName+ PATH_SEPARATOR+ lvName;
    try {
      String returnValue=removeLogicalVolume(absoluteLVName);
      returnValue=removeVolumeGroup(vgName);
      returnValue=removePhysicalVolume(loDevName);
      removeLoopback(loDevName);
    }
 catch (    ExecutionException ex) {
      volumeManager.abort();
      String error="Unable to run command: " + ex.getMessage();
      LOG.error(error);
    }
    volumeManager.remove(lvmVolInfo);
    volumeManager.finish();
  }
}
