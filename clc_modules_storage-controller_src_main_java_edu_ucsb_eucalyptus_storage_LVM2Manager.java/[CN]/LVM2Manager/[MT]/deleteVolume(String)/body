{
  EntityWrapper<LVMVolumeInfo> db=StorageController.getEntityWrapper();
  LVMVolumeInfo lvmVolumeInfo=new LVMVolumeInfo(volumeId);
  LVMVolumeInfo foundLVMVolumeInfo=db.getUnique(lvmVolumeInfo);
  if (foundLVMVolumeInfo != null) {
    String loDevName=foundLVMVolumeInfo.getLoDevName();
    String vgName=foundLVMVolumeInfo.getVgName();
    String lvName=foundLVMVolumeInfo.getLvName();
    String absoluteLVName=lvmRootDirectory + PATH_SEPARATOR + vgName+ PATH_SEPARATOR+ lvName;
    Integer pid=foundLVMVolumeInfo.getVbladePid();
    if (pid > 0) {
      String returnValue=aoeStatus(pid);
      if (returnValue.length() > 0) {
        exportManager.unexportVolume(pid);
        int majorNumber=foundLVMVolumeInfo.getMajorNumber();
        int minorNumber=foundLVMVolumeInfo.getMinorNumber();
        File vbladePidFile=new File(eucaHome + EUCA_VAR_RUN_PATH + "/vblade-"+ majorNumber+ minorNumber+ ".pid");
        if (vbladePidFile.exists()) {
          vbladePidFile.delete();
        }
      }
    }
    try {
      String returnValue=removeLogicalVolume(absoluteLVName);
      if (returnValue.length() == 0) {
        throw new EucalyptusCloudException("Unable to remove logical volume " + absoluteLVName);
      }
      returnValue=removeVolumeGroup(vgName);
      if (returnValue.length() == 0) {
        throw new EucalyptusCloudException("Unable to remove volume group " + vgName);
      }
      returnValue=removePhysicalVolume(loDevName);
      if (returnValue.length() == 0) {
        throw new EucalyptusCloudException("Unable to remove physical volume " + loDevName);
      }
      returnValue=removeLoopback(loDevName);
      db.delete(foundLVMVolumeInfo);
      db.commit();
    }
 catch (    ExecutionException ex) {
      db.rollback();
      String error="Unable to run command: " + ex.getMessage();
      LOG.error(error);
      throw new EucalyptusCloudException(error);
    }
  }
 else {
    db.rollback();
    throw new EucalyptusCloudException("Unable to find volume: " + volumeId);
  }
}
