{
  VolumeEntityWrapperManager volumeManager=new VolumeEntityWrapperManager();
  List<LVMVolumeInfo> volumeInfos=volumeManager.getAllVolumeInfos();
  for (  LVMVolumeInfo foundVolumeInfo : volumeInfos) {
    String loDevName=foundVolumeInfo.getLoDevName();
    if (loDevName != null) {
      String loFileName=foundVolumeInfo.getVolumeId();
      String absoluteLoFileName=StorageProperties.storageRootDirectory + PATH_SEPARATOR + loFileName;
      if (!new File(absoluteLoFileName).exists()) {
        LOG.error("Backing volume: " + absoluteLoFileName + " not found. Invalidating volume.");
        foundVolumeInfo.setStatus(StorageProperties.Status.failed.toString());
        foundVolumeInfo.setVbladePid(-1);
        continue;
      }
      try {
        String returnValue=getLoopback(loDevName);
        if (returnValue.length() <= 0) {
          createLoopback(absoluteLoFileName,loDevName);
        }
      }
 catch (      ExecutionException ex) {
        String error="Unable to run command: " + ex.getMessage();
        LOG.error(error);
      }
    }
  }
  for (  LVMVolumeInfo foundVolumeInfo : volumeInfos) {
    int pid=foundVolumeInfo.getVbladePid();
    if (pid > 0) {
      String absoluteLVName=lvmRootDirectory + PATH_SEPARATOR + foundVolumeInfo.getVgName()+ PATH_SEPARATOR+ foundVolumeInfo.getLvName();
      try {
        enableLogicalVolume(absoluteLVName);
      }
 catch (      ExecutionException ex) {
        String error="Unable to run command: " + ex.getMessage();
        LOG.error(error);
        continue;
      }
      String returnValue=aoeStatus(pid);
      if (returnValue.length() == 0) {
        int majorNumber=foundVolumeInfo.getMajorNumber();
        int minorNumber=foundVolumeInfo.getMinorNumber();
        pid=exportManager.exportVolume(StorageProperties.iface,absoluteLVName,majorNumber,minorNumber);
        foundVolumeInfo.setVbladePid(pid);
        File vbladePidFile=new File(eucaHome + EUCA_VAR_RUN_PATH + "/vblade-"+ majorNumber+ minorNumber+ ".pid");
        FileOutputStream fileOutStream=null;
        try {
          fileOutStream=new FileOutputStream(vbladePidFile);
          String pidString=String.valueOf(pid);
          fileOutStream.write(pidString.getBytes());
          fileOutStream.close();
        }
 catch (        Exception ex) {
          if (fileOutStream != null)           try {
            fileOutStream.close();
          }
 catch (          IOException e) {
            LOG.error(e);
          }
          LOG.error("Could not write pid file vblade-" + majorNumber + minorNumber+ ".pid");
        }
      }
    }
  }
  volumeManager.finish();
}
