{
  File volumeDir=new File(StorageProperties.storageRootDirectory);
  volumeDir.mkdirs();
  VolumeEntityWrapperManager volumeManager=new VolumeEntityWrapperManager();
  String vgName="vg-" + Hashes.getRandom(4);
  String lvName="lv-" + Hashes.getRandom(4);
  LVMVolumeInfo lvmVolumeInfo=null;
  if (exportManager instanceof AOEManager) {
    lvmVolumeInfo=new AOEVolumeInfo();
  }
 else {
    lvmVolumeInfo=new ISCSIVolumeInfo();
  }
  String rawFileName=StorageProperties.storageRootDirectory + "/" + volumeId;
  long absoluteSize=size * StorageProperties.GB + LVM_HEADER_LENGTH;
  try {
    String loDevName=createLoopback(rawFileName,absoluteSize);
    createLogicalVolume(loDevName,vgName,lvName);
    try {
      volumeManager.exportVolume(lvmVolumeInfo,vgName,lvName);
    }
 catch (    EucalyptusCloudException ex) {
      LOG.error(ex);
      String absoluteLVName=lvmRootDirectory + PATH_SEPARATOR + vgName+ PATH_SEPARATOR+ lvName;
      String returnValue=removeLogicalVolume(absoluteLVName);
      returnValue=removeVolumeGroup(vgName);
      returnValue=removePhysicalVolume(loDevName);
      removeLoopback(loDevName);
      throw ex;
    }
    lvmVolumeInfo.setVolumeId(volumeId);
    lvmVolumeInfo.setLoDevName(loDevName);
    lvmVolumeInfo.setPvName(loDevName);
    lvmVolumeInfo.setVgName(vgName);
    lvmVolumeInfo.setLvName(lvName);
    lvmVolumeInfo.setStatus(StorageProperties.Status.available.toString());
    lvmVolumeInfo.setSize(size);
  }
 catch (  ExecutionException ex) {
    String error="Unable to run command: " + ex.getMessage();
    volumeManager.abort();
    LOG.error(error);
    throw new EucalyptusCloudException(error);
  }
  volumeManager.add(lvmVolumeInfo);
  volumeManager.finish();
}
