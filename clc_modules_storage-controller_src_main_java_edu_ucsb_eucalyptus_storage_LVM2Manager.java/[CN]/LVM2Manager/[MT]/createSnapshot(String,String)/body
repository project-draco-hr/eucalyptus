{
  VolumeEntityWrapperManager volumeManager=new VolumeEntityWrapperManager();
  LVMVolumeInfo foundLVMVolumeInfo=volumeManager.getVolumeInfo(volumeId);
  ArrayList<String> returnValues=new ArrayList<String>();
  if (foundLVMVolumeInfo != null) {
    LVMVolumeInfo snapshotInfo=volumeManager.getVolumeInfo();
    snapshotInfo.setVolumeId(snapshotId);
    String vgName=foundLVMVolumeInfo.getVgName();
    String lvName="lv-snap-" + Hashes.getRandom(4);
    String absoluteLVName=lvmRootDirectory + PATH_SEPARATOR + vgName+ PATH_SEPARATOR+ foundLVMVolumeInfo.getLvName();
    int size=foundLVMVolumeInfo.getSize();
    long snapshotSize=(size * StorageProperties.GB) / 2;
    String rawFileName=storageRootDirectory + "/" + volumeId+ Hashes.getRandom(6);
    try {
      String loDevName=createLoopback(rawFileName,snapshotSize);
      createSnapshotLogicalVolume(loDevName,vgName,absoluteLVName,lvName);
      String snapRawFileName=storageRootDirectory + "/" + snapshotId;
      String absoluteSnapLVName=lvmRootDirectory + PATH_SEPARATOR + vgName+ PATH_SEPARATOR+ lvName;
      duplicateLogicalVolume(absoluteSnapLVName,snapRawFileName);
      String returnValue=removeLogicalVolume(absoluteSnapLVName);
      if (returnValue.length() == 0) {
        throw new EucalyptusCloudException("Unable to remove logical volume " + absoluteSnapLVName);
      }
      returnValue=reduceVolumeGroup(vgName,loDevName);
      if (returnValue.length() == 0) {
        throw new EucalyptusCloudException("Unable to reduce volume group " + vgName + " logical volume: "+ loDevName);
      }
      returnValue=removePhysicalVolume(loDevName);
      if (returnValue.length() == 0) {
        throw new EucalyptusCloudException("Unable to remove physical volume " + loDevName);
      }
      returnValue=removeLoopback(loDevName);
      if (!(new File(rawFileName)).delete()) {
        LOG.error("Unable to remove temporary snapshot file: " + rawFileName);
      }
      snapshotInfo.setLoFileName(snapRawFileName);
      snapshotInfo.setStatus(StorageProperties.Status.available.toString());
      snapshotInfo.setSize(size);
      returnValues.add(snapRawFileName);
      returnValues.add(String.valueOf(size * WalrusProperties.G));
      volumeManager.add(snapshotInfo);
    }
 catch (    ExecutionException ex) {
      volumeManager.abort();
      String error="Unable to run command: " + ex.getMessage();
      LOG.error(error);
      throw new EucalyptusCloudException(error);
    }
  }
  volumeManager.finish();
  return returnValues;
}
