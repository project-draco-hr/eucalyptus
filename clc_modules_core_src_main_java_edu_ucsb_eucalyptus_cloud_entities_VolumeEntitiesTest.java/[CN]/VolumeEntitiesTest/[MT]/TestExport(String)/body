{
  final String ip="1.1.1.1";
  final String iqn="fake-iqn";
  final String connectionString="fake-connect-string-12-1223123";
  Function<VolumeInfo,VolumeExportRecord> exportAndAttach=new Function<VolumeInfo,VolumeExportRecord>(){
    @Override public VolumeExportRecord apply(    VolumeInfo volume){
      VolumeToken tokenInfo=null;
      VolumeInfo volEntity=Entities.merge(volume);
      LOG.info("TESTING#: Set of tokens");
      for (      VolumeToken tok : volEntity.getAttachmentTokens()) {
        LOG.info("TESTING#: " + tok.getToken() + " - "+ tok.getIsValid());
        LOG.info("TESTING#: listing export records");
        for (        VolumeExportRecord rec : tok.getExportRecords()) {
          LOG.info("TESTING#: " + rec.getHostIp() + " - "+ rec.getHostIqn()+ " - "+ rec.getConnectionString()+ " - "+ rec.getIsActive());
        }
        LOG.info("TESTING#: done listing export records");
      }
      LOG.info("TESTING#: Done listing tokens");
      try {
        tokenInfo=volEntity.getCurrentValidToken();
        if (tokenInfo == null) {
          LOG.info("TESTING#: No valid token found");
          LOG.info("TESTING#: Creating new token for testing");
          tokenInfo=volEntity.getOrCreateAttachmentToken();
          if (tokenInfo == null) {
            throw new Exception("Failed to create new attachment token");
          }
        }
 else {
          LOG.info("TESTING#: current valid token : " + tokenInfo.getToken());
        }
      }
 catch (      Exception e) {
        LOG.error("TESTING#: Could not check for valid token",e);
        return null;
      }
      VolumeExportRecord export=null;
      try {
        LOG.info("TESTING#: adding export");
        tokenInfo.addExport(ip,iqn,connectionString);
        LOG.info("TESTING#: done adding export");
      }
 catch (      Exception e) {
        LOG.error("TESTING#: Could not export volume " + volEntity.getVolumeId() + " failed to add export record");
        return null;
      }
      try {
        LOG.info("TESTING#: getting valid export");
        export=tokenInfo.getValidExport(ip,iqn);
        if (export != null) {
          LOG.info("TESTING#: got valid export " + export.getHostIp() + " - "+ export.getHostIqn()+ " - "+ export.getConnectionString());
        }
 else {
          throw new EucalyptusCloudException("Null valid export returned");
        }
      }
 catch (      EucalyptusCloudException e) {
        LOG.error("TESTING#: failed to get valid export",e);
      }
      return export;
    }
  }
;
  Function<String,VolumeInfo> createFakeVolume=new Function<String,VolumeInfo>(){
    @Override public VolumeInfo apply(    String volumeId){
      LOG.info("TESTING#: Creating fake volume record with id : " + volumeId);
      VolumeInfo fakeVolume=new VolumeInfo(volumeId);
      fakeVolume.setScName("fake_sc");
      fakeVolume.setSize(1);
      fakeVolume.setStatus("available");
      fakeVolume.updateTimeStamps();
      Entities.persist(fakeVolume);
      LOG.info("TESTING#: done persisting fake volume");
      return fakeVolume;
    }
  }
;
  VolumeInfo searchVol=new VolumeInfo(volumeId);
  searchVol.setScName("fake_sc");
  EntityTransaction db=Entities.get(VolumeInfo.class);
  VolumeInfo vol=null;
  try {
    vol=Entities.uniqueResult(searchVol);
    db.commit();
  }
 catch (  NoSuchElementException e) {
    LOG.info("TESTING#: No volume found, creating",e);
    vol=Entities.asTransaction(VolumeInfo.class,createFakeVolume).apply(volumeId);
  }
catch (  TransactionException e) {
    LOG.error("TESTING#: Failed to Export due to db error",e);
    return;
  }
 finally {
    if (db.isActive()) {
      db.rollback();
    }
  }
  try {
    Entities.asTransaction(VolumeInfo.class,exportAndAttach).apply(vol);
  }
 catch (  Exception e) {
    LOG.error("TESTING#: Failed ExportVolume transaction due to: " + e.getMessage(),e);
  }
}
