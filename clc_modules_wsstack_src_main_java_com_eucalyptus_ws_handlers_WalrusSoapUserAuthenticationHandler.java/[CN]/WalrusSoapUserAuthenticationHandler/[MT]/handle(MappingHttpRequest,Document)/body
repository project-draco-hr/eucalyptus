{
  NodeList childNodes=doc.getChildNodes();
  Element bodyElem=doc.getDocumentElement();
  Node operationElem=bodyElem.getFirstChild();
  String operationName=operationElem.getNodeName();
  if (operationName.length() > 0) {
    NodeList authNodes=operationElem.getChildNodes();
    String queryId=null, timestamp=null, signature=null;
    for (int i=0; i < authNodes.getLength(); ++i) {
      Node node=authNodes.item(i);
      if (node.getNodeName().equals(WalrusProperties.RequiredSOAPTags.AWSAccessKeyId.toString())) {
        queryId=node.getFirstChild().getNodeValue().trim();
      }
 else       if (node.getNodeName().equals(WalrusProperties.RequiredSOAPTags.Timestamp.toString())) {
        timestamp=node.getFirstChild().getNodeValue().trim();
      }
 else       if (node.getNodeName().equals(WalrusProperties.RequiredSOAPTags.Signature.toString())) {
        signature=node.getFirstChild().getNodeValue().trim();
      }
    }
    if (queryId == null)     throw new AuthenticationException("Unable to parse access key id");
    if (signature == null)     throw new AuthenticationException("Unable to parse signature");
    if (timestamp == null)     throw new AuthenticationException("Unable to parse timestamp");
    String data="AmazonS3" + operationName + timestamp;
    authenticate(httpRequest,queryId,signature,data);
  }
 else {
    throw new AuthenticationException("Invalid operation specified");
  }
}
