{
  Integer orphanCount=1;
  orphanCount=orphans.putIfAbsent(address,orphanCount);
  LOG.warn("Found orphaned public ip address: " + LogUtil.dumpObject(address) + " count="+ orphanCount);
  orphanCount=(orphanCount == null) ? 1 : orphanCount;
  orphans.put(address,orphanCount + 1);
  LOG.warn("Updated orphaned public ip address: " + LogUtil.dumpObject(address) + " count="+ orphanCount);
  if (orphanCount > 3) {
    LOG.warn("Unassigning orphaned public ip address: " + LogUtil.dumpObject(address) + " count="+ orphanCount);
    try {
      final Address addr=Addresses.getInstance().lookup(address.getAddress());
      Callbacks.newClusterRequest(new UnassignAddressCallback(address)).then(new Callback.Success(){
        @Override public void fire(        Object t){
          if (addr.isSystemOwned()) {
            Addresses.getAddressManager().releaseSystemAddress(addr);
          }
        }
      }
).dispatch(this.clusterName);
    }
 catch (    NoSuchElementException e) {
    }
    orphans.remove(address);
  }
}
