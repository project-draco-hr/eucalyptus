{
  final List<AlarmEntity> results=Lists.newArrayList();
  final EntityTransaction db=Entities.get(AlarmEntity.class);
  try {
    boolean first=true;
    String token=nextToken;
    while (token != null || first) {
      first=false;
      final Date nextTokenCreatedTime=NextTokenUtils.getNextTokenCreatedTime(token,AlarmEntity.class);
      final Criteria criteria=Entities.createCriteria(AlarmEntity.class);
      if (accountId != null) {
        criteria.add(Restrictions.eq("accountId",accountId));
      }
      if (actionPrefix != null) {
        final Junction actionsOf=Restrictions.disjunction();
        for (int i=1; i <= AlarmEntity.MAX_OK_ACTIONS_NUM; i++) {
          actionsOf.add(Restrictions.like("okAction" + i,actionPrefix + "%"));
        }
        for (int i=1; i <= AlarmEntity.MAX_ALARM_ACTIONS_NUM; i++) {
          actionsOf.add(Restrictions.like("alarmAction" + i,actionPrefix + "%"));
        }
        for (int i=1; i <= AlarmEntity.MAX_INSUFFICIENT_DATA_ACTIONS_NUM; i++) {
          actionsOf.add(Restrictions.like("insufficientDataAction" + i,actionPrefix + "%"));
        }
        criteria.add(actionsOf);
      }
      if (alarmNamePrefix != null) {
        criteria.add(Restrictions.like("alarmName",alarmNamePrefix + "%"));
      }
      if (alarmNames != null && !alarmNames.isEmpty()) {
        criteria.add(Restrictions.in("alarmName",alarmNames));
      }
      if (stateValue != null) {
        criteria.add(Restrictions.eq("stateValue",stateValue));
      }
      NextTokenUtils.addNextTokenConstraints(maxRecords == null ? null : maxRecords - results.size(),token,nextTokenCreatedTime,criteria);
      final List<AlarmEntity> alarmEntities=(List<AlarmEntity>)criteria.list();
      Iterables.addAll(results,Iterables.filter(alarmEntities,filter));
      token=maxRecords == null || (maxRecords != null && (results.size() >= maxRecords || alarmEntities.size() < maxRecords)) ? null : alarmEntities.get(alarmEntities.size() - 1).getNaturalId();
    }
    db.commit();
  }
 catch (  RuntimeException ex) {
    Logs.extreme().error(ex,ex);
    throw ex;
  }
 finally {
    if (db.isActive())     db.rollback();
  }
  return results;
}
