{
  ServiceConfiguration config=Topology.lookup(ClusterController.class,allocInfo.getPartition());
  Cluster cluster=Clusters.lookup(config);
  if (cluster.getGateLock().readLock().tryLock(60,TimeUnit.SECONDS)) {
    try {
      final ResourceState state=cluster.getNodeState();
      boolean unorderedType=VmTypes.isUnorderedType(allocInfo.getVmType());
      boolean forceResourceRefresh=state.hasUnorderedTokens() || unorderedType;
      if (forceResourceRefresh) {
        cluster.refreshResources();
      }
      final BatchAllocator<ResourceToken> allocator=new BatchAllocator<ResourceToken>(){
        @Override public List<ResourceToken> allocate(        int min,        int max){
          try {
            RestrictedTypes.allocateMeasurableResource(Long.valueOf(1L * max),new Function<Long,CloudMetadataLimitedType.VmInstanceActiveMetadata>(){
              @Nullable @Override public CloudMetadataLimitedType.VmInstanceActiveMetadata apply(              @Nullable Long amount){
                return new CloudMetadataLimitedType.VmInstanceActiveMetadata(){
                }
;
              }
            }
);
            RestrictedTypes.allocateMeasurableResource(max * Long.valueOf(allocInfo.getVmType().getCpu().longValue()),new Function<Long,CloudMetadataLimitedType.CpuMetadata>(){
              @Nullable @Override public CloudMetadataLimitedType.CpuMetadata apply(              @Nullable Long amount){
                return new CloudMetadataLimitedType.CpuMetadata(){
                }
;
              }
            }
);
            RestrictedTypes.allocateMeasurableResource(max * Long.valueOf(allocInfo.getVmType().getMemory().longValue()),new Function<Long,CloudMetadataLimitedType.MemoryMetadata>(){
              @Nullable @Override public CloudMetadataLimitedType.MemoryMetadata apply(              @Nullable Long amount){
                return new CloudMetadataLimitedType.MemoryMetadata(){
                }
;
              }
            }
);
            RestrictedTypes.allocateMeasurableResource(max * Long.valueOf(allocInfo.getVmType().getDisk().longValue()),new Function<Long,CloudMetadataLimitedType.DiskMetadata>(){
              @Nullable @Override public CloudMetadataLimitedType.DiskMetadata apply(              @Nullable Long amount){
                return new CloudMetadataLimitedType.DiskMetadata(){
                }
;
              }
            }
);
            final List<ResourceToken> ret=state.requestResourceAllocation(allocInfo,min,max);
            allocInfo.getAllocationTokens().addAll(ret);
            return ret;
          }
 catch (          final NotEnoughResourcesException|AuthException e) {
            throw Exceptions.toUndeclared(e);
          }
        }
      }
;
      RestrictedTypes.allocateUnitlessResources(CloudMetadata.VmInstanceMetadata.class,tryAmount,maxAmount,allocator);
      return allocInfo.getAllocationTokens();
    }
  finally {
      cluster.getGateLock().readLock().unlock();
    }
  }
 else {
    throw new ServiceStateException("Failed to allocate resources in the zone " + cluster.getPartition() + ", it is currently locked for maintenance.");
  }
}
