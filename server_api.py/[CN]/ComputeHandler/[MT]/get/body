def get(self):
    if (not self.authorized()):
        raise tornado.web.HTTPError(401, 'not authorized')
    if (not self.user_session.clc):
        if self.should_use_mock():
            self.user_session.clc = MockClcInterface()
        else:
            self.user_session.clc = BotoClcInterface(server.config.get('eui', 'clchost'), self.user_session.access_key, self.user_session.secret_key)
        self.user_session.clc = CachingClcInterface(self.user_session.clc, server.config)
    ret = []
    try:
        action = self.get_argument('Action')
        if (action == 'DescribeAvailabilityZones'):
            ret = self.user_session.clc.get_all_zones()
        elif (action.find('Image') > (-1)):
            ret = self.handleImages(action, self.user_session.clc)
        elif ((action.find('Instance') > (-1)) or (action == 'GetConsoleOutput')):
            ret = self.handleInstances(action, self.user_session.clc)
        elif (action.find('Address') > (-1)):
            ret = self.handleAddresses(action, self.user_session.clc)
        elif (action.find('KeyPair') > (-1)):
            ret = self.handleKeypairs(action, self.user_session.clc)
        elif (action.find('SecurityGroup') > (-1)):
            ret = self.handleGroups(action, self.user_session.clc)
        elif (action.find('Volume') > (-1)):
            ret = self.handleVolumes(action, self.user_session.clc)
        elif (action.find('Snapshot') > (-1)):
            ret = self.handleSnapshots(action, self.user_session.clc)
        ret = Response(ret)
        data = json.dumps(ret, cls=BotoJsonEncoder, indent=2)
        try:
            if server.config.get('test', 'apidelay'):
                time.sleep((int(server.config.get('test', 'apidelay')) / 1000.0))
        except ConfigParser.NoOptionError:
            pass
        self.write(data)
    except EC2ResponseError as err:
        ret = ClcError(err.status, err.reason, err.errors[0])
        self.set_status(err.status)
        self.finish(json.dumps(ret, cls=BotoJsonEncoder))
