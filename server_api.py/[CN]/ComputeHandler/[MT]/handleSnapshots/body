def handleSnapshots(self, action, clc):
    if (action == 'DescribeSnapshots'):
        return clc.get_all_snapshots()
    elif (action == 'CreateSnapshot'):
        volumeid = self.get_argument('VolumeId')
        description = self.get_argument('Description', None)
        return clc.create_snapshot(volumeid, description)
    elif (action == 'DeleteSnapshot'):
        snapshotid = self.get_argument('SnapshotId')
        return clc.delete_snapshot(snapshotid)
    elif (action == 'DescribeSnapshotAttribute'):
        snapshotid = self.get_argument('SnapshotId')
        attribute = self.get_argument('Attribute')
        return clc.get_snapshot_attribute(snapshotid, attribute)
    elif (action == 'ModifySnapshotAttribute'):
        snapshotid = self.get_argument('SnapshotId')
        attribute = self.get_argument('Attribute')
        operation = self.get_argument('OperationType')
        users = self.get_argument_list('UserId')
        groups = self.get_argument_list('UsersGroup')
        return clc.modify_snapshot_attribute(snapshotid, attribute, operation, users, groups)
    elif (action == 'ResetSnapshotAttribute'):
        snapshotid = self.get_argument('SnapshotId')
        attribute = self.get_argument('Attribute')
        return clc.reset_snapshot_attribute(snapshotid, attribute)
    elif (action == 'RegisterSnapshot'):
        try:
            snapshotid = self.get_argument('SnapshotId')
            name = self.get_argument('Name')
            desc = self.get_argument('Description', None)
            windows = self.get_argument('Windows', False)
            result = clc.register_bfebs(snapshotid, name, desc, windows)
            return result
        except Exception as err:
            traceback.print_exc(file=sys.stdout)
