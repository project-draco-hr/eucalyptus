def post(self):
    if (not self.authorized()):
        raise tornado.web.HTTPError(401, 'not authorized')
    if (not self.user_session.clc):
        if self.should_use_mock():
            self.user_session.clc = MockClcInterface()
        else:
            self.user_session.clc = BotoClcInterface(server.config.get('server', 'clchost'), self.user_session.access_key, self.user_session.secret_key, self.user_session.session_token)
        self.user_session.clc = CachingClcInterface(self.user_session.clc, server.config)
    try:
        action = self.get_argument('Action')
        if (action == 'RunInstances'):
            user_data_file = []
            try:
                user_data_file = self.request.files['user_data_file']
            except KeyError:
                pass
            if (len(user_data_file) > 0):
                ret = self.handleRunInstances(action, self.user_session.clc, user_data_file[0].body)
            else:
                ret = self.handleRunInstances(action, self.user_session.clc, None)
        elif (action == 'GetPassword'):
            instanceid = self.get_argument('InstanceId')
            passwd_data = self.user_session.clc.get_password_data(instanceid)
            priv_key_file = self.request.files['priv_key']
            user_priv_key = RSA.load_key_string(priv_key_file[0].body)
            string_to_decrypt = base64.b64decode(passwd_data)
            ret = user_priv_key.private_decrypt(string_to_decrypt, RSA.pkcs1_padding)
            ret = Response({'instance': instanceid, 'password': ret, })
        data = json.dumps(ret, cls=BotoJsonEncoder, indent=2)
        self.write(data)
    except EC2ResponseError as err:
        ret = ClcError(err.status, err.reason, err.errors[0][1])
        self.set_status(err.status)
        self.finish(json.dumps(ret, cls=BotoJsonEncoder))
    except Exception as ex:
        if isinstance(ex, socket.timeout):
            ret = ClcError(504, 'Timed out', None)
            self.set_status(504)
            self.finish(json.dumps(ret, cls=BotoJsonEncoder))
        else:
            ret = ClcError(500, ex.message, None)
            self.set_status(500)
            self.finish(json.dumps(ret, cls=BotoJsonEncoder))
