def handleGroups(self, action, clc):
    if (action == 'DescribeSecurityGroups'):
        return clc.get_all_security_groups()
    else:
        self.check_xsrf_cookie()
        if (action == 'CreateSecurityGroup'):
            name = self.get_argument('GroupName')
            desc = self.get_argument('GroupDescription')
            return clc.create_security_group(name, desc)
        elif (action == 'DeleteSecurityGroup'):
            name = self.get_argument('GroupName', None)
            group_id = self.get_argument('GroupId', None)
            return clc.delete_security_group(name, group_id)
        elif (action == 'AuthorizeSecurityGroupIngress'):
            name = self.get_argument('GroupName', None)
            group_id = self.get_argument('GroupId', None)
            ip_protocol = self.get_argument_list('IpPermissions', 'IpProtocol')
            from_port = self.get_argument_list('IpPermissions', 'FromPort')
            to_port = self.get_argument_list('IpPermissions', 'ToPort')
            src_security_group_name = self.get_argument_list('IpPermissions', 'Groups', 'GroupName')
            src_security_group_owner_id = self.get_argument_list('IpPermissions', 'Groups', 'UserId')
            src_security_group_group_id = self.get_argument_list('IpPermissions', 'Groups', 'GroupId')
            cidr_ip = self.get_argument_list('IpPermissions', 'IpRanges', 'CidrIp')
            ret = False
            for i in range(len(ip_protocol)):
                ret = clc.authorize_security_group(name, (src_security_group_name[i] if src_security_group_name else None), (src_security_group_owner_id[i] if src_security_group_owner_id else None), ip_protocol[i], from_port[i], to_port[i], (cidr_ip[i] if cidr_ip else None), (group_id[i] if group_id else None), (src_security_group_group_id[i] if src_security_group_group_id else None))
            return ret
        elif (action == 'RevokeSecurityGroupIngress'):
            name = self.get_argument('GroupName', None)
            group_id = self.get_argument('GroupId', None)
            ip_protocol = self.get_argument_list('IpPermissions', 'IpProtocol')
            from_port = self.get_argument_list('IpPermissions', 'FromPort')
            to_port = self.get_argument_list('IpPermissions', 'ToPort')
            src_security_group_name = self.get_argument_list('IpPermissions', 'Groups', 'GroupName')
            src_security_group_owner_id = self.get_argument_list('IpPermissions', 'Groups', 'UserId')
            src_security_group_group_id = self.get_argument_list('IpPermissions', 'Groups', 'GroupId')
            cidr_ip = self.get_argument_list('IpPermissions', 'IpRanges', 'CidrIp')
            ret = False
            for i in range(len(ip_protocol)):
                ret = clc.revoke_security_group(name, (src_security_group_name[i] if src_security_group_name else None), (src_security_group_owner_id[i] if src_security_group_owner_id else None), ip_protocol[i], from_port[i], to_port[i], (cidr_ip[i] if cidr_ip else None), (group_id[i] if group_id else None), (src_security_group_group_id[i] if src_security_group_group_id else None))
            return ret
