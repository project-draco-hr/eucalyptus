def handleGroups(self, action, clc):
    if (action == 'DescribeSecurityGroups'):
        return clc.get_all_security_groups()
    elif (action == 'CreateSecurityGroup'):
        name = self.get_argument('GroupName')
        desc = self.get_argument('GroupDescription')
        return clc.create_security_group(name, desc)
    elif (action == 'DeleteSecurityGroup'):
        name = self.get_argument('GroupName', None)
        group_id = self.get_argument('GroupId', None)
        return clc.delete_security_group(name, group_id)
    elif (action == 'AuthorizeSecurityGroupIngress'):
        name = self.get_argument('GroupName', None)
        group_id = self.get_argument('GroupId', None)
        ip_protocol = self.get_argument('IpPermissions.1.IpProtocol', None)
        from_port = self.get_argument('IpPermissions.1.FromPort', None)
        to_port = self.get_argument('IpPermissions.1.ToPort', None)
        src_security_group_name = self.get_argument('IpPermissions.1.Groups.1.GroupName', None)
        src_security_group_owner_id = self.get_argument('IpPermissions.1.Groups.1.UserId', None)
        src_security_group_group_id = self.get_argument('IpPermissions.1.Groups.1.GroupId', None)
        cidr_ip = self.get_argument_list('IpPermissions.1.IpRanges', 'CidrIp')
        print ('cidr = ' + cidr_ip[0])
        return clc.authorize_security_group(name, src_security_group_name, src_security_group_owner_id, ip_protocol, from_port, to_port, cidr_ip, group_id, src_security_group_group_id)
    elif (action == 'RevokeSecurityGroupIngress'):
        name = self.get_argument('GroupName', None)
        group_id = self.get_argument('GroupId', None)
        ip_protocol = self.get_argument('IpPermissions.1.IpProtocol', None)
        from_port = self.get_argument('IpPermissions.1.FromPort', None)
        to_port = self.get_argument('IpPermissions.1.ToPort', None)
        src_security_group_name = self.get_argument('IpPermissions.1.Groups.1.GroupName', None)
        src_security_group_owner_id = self.get_argument('IpPermissions.1.Groups.1.UserId', None)
        src_security_group_group_id = self.get_argument('IpPermissions.1.Groups.1.GroupId', None)
        cidr_ip = self.get_argument_list('IpPermissions.1.IpRanges', 'CidrIp')
        return clc.revoke_security_group(name, src_security_group_name, src_security_group_owner_id, ip_protocol, from_port, to_port, cidr_ip, group_id, src_security_group_group_id)
