{
  RSAPublicKey publicKey=(RSAPublicKey)newKeys.getPublic();
  byte[] keyType="ssh-rsa".getBytes();
  byte[] expBlob=publicKey.getPublicExponent().toByteArray();
  byte[] modBlob=publicKey.getModulus().toByteArray();
  byte[] authKeyBlob=new byte[3 * 4 + keyType.length + expBlob.length + modBlob.length];
  byte[] lenArray=null;
  lenArray=BigInteger.valueOf(keyType.length).toByteArray();
  System.arraycopy(lenArray,0,authKeyBlob,4 - lenArray.length,lenArray.length);
  System.arraycopy(keyType,0,authKeyBlob,4,keyType.length);
  lenArray=BigInteger.valueOf(expBlob.length).toByteArray();
  System.arraycopy(lenArray,0,authKeyBlob,4 + keyType.length + 4 - lenArray.length,lenArray.length);
  System.arraycopy(expBlob,0,authKeyBlob,4 + (4 + keyType.length),expBlob.length);
  lenArray=BigInteger.valueOf(modBlob.length).toByteArray();
  System.arraycopy(lenArray,0,authKeyBlob,4 + expBlob.length + 4+ keyType.length+ 4 - lenArray.length,lenArray.length);
  System.arraycopy(modBlob,0,authKeyBlob,4 + (4 + expBlob.length + (4 + keyType.length)),modBlob.length);
  String authKeyString=String.format("%s %s %s@eucalyptus.%s",new String(keyType),new String(Base64.encode(authKeyBlob)),userName.getAccountNumber(),keyName);
  return authKeyString;
}
