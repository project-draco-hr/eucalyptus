{
  try (TransactionResource db=Entities.transactionFor(MessageEntity.class)){
    MessageEntity messageEntity=new MessageEntity();
    messageEntity.setMessageId(message.getMessageId());
    messageEntity.setAccountId(accountId);
    messageEntity.setQueueName(queueName);
    Map<String,String> attributeMap=Maps.newHashMap();
    if (message.getAttribute() != null) {
      for (      Attribute attribute : message.getAttribute()) {
        attributeMap.put(attribute.getName(),attribute.getValue());
      }
    }
    if (attributeMap.get(SimpleQueueService.MessageAttributeName.ApproximateReceiveCount.toString()) != null) {
      messageEntity.setReceiveCount(Integer.parseInt(attributeMap.get(SimpleQueueService.MessageAttributeName.ApproximateReceiveCount.toString())));
    }
 else {
      throw new InternalFailureException("No value passed in for receive count in send message");
    }
    if (attributeMap.get(SimpleQueueService.EucaInternalMessageAttributeName.EucaLocalReceiveCount.toString()) != null) {
      messageEntity.setLocalReceiveCount(Integer.parseInt(attributeMap.get(SimpleQueueService.EucaInternalMessageAttributeName.EucaLocalReceiveCount.toString())));
    }
 else {
      throw new InternalFailureException("No value passed in for local receive count in send message");
    }
    if (attributeMap.get(SimpleQueueService.MessageAttributeName.SentTimestamp.toString()) != null) {
      messageEntity.setSentTimestamp(Long.parseLong(attributeMap.get(SimpleQueueService.MessageAttributeName.SentTimestamp.toString())));
    }
 else {
      throw new InternalFailureException("No value passed in for sent timestamp in send message");
    }
    if (attributeMap.get(SimpleQueueService.EucaInternalMessageAttributeName.EucaDelaySeconds.toString()) != null) {
      messageEntity.setVisibleTimestamp(messageEntity.getSentTimestamp() + 1000 * Long.parseLong(attributeMap.get(SimpleQueueService.EucaInternalMessageAttributeName.EucaDelaySeconds.toString())));
    }
 else {
      throw new InternalFailureException("No value passed in for delay seconds in send message");
    }
    if (attributeMap.get(SimpleQueueService.EucaInternalMessageAttributeName.EucaMessageRetentionPeriod.toString()) != null) {
      messageEntity.setExpiredTimestamp(messageEntity.getSentTimestamp() + 1000 * Long.parseLong(attributeMap.get(SimpleQueueService.EucaInternalMessageAttributeName.EucaMessageRetentionPeriod.toString())));
    }
 else {
      throw new InternalFailureException("No value passed in for message retention period in send message");
    }
    messageEntity.setMessageJson(messageToJson(message));
    Entities.persist(messageEntity);
    db.commit();
  }
 }
