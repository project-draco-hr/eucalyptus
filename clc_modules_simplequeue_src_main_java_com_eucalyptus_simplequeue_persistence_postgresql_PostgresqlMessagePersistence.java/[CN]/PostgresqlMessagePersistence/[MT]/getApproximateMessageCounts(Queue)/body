{
  Map<String,String> result=Maps.newHashMap();
  long now=SimpleQueueService.currentTimeSeconds();
  try (TransactionResource db=Entities.transactionFor(MessageEntity.class)){
    result.put(Constants.APPROXIMATE_NUMBER_OF_MESSAGES_DELAYED,Entities.count(MessageEntity.class).whereEqual(MessageEntity_.accountId,queue.getAccountId()).whereEqual(MessageEntity_.queueName,queue.getQueueName()).where(Entities.restriction(MessageEntity.class).gt(MessageEntity_.expiredTimestampSecs,now)).where(Entities.restriction(MessageEntity.class).gt(MessageEntity_.visibleTimestampSecs,now)).whereEqual(MessageEntity_.receiveCount,0).uniqueResult().toString());
    result.put(Constants.APPROXIMATE_NUMBER_OF_MESSAGES_NOT_VISIBLE,Entities.count(MessageEntity.class).whereEqual(MessageEntity_.accountId,queue.getAccountId()).whereEqual(MessageEntity_.queueName,queue.getQueueName()).where(Entities.restriction(MessageEntity.class).gt(MessageEntity_.expiredTimestampSecs,now)).where(Entities.restriction(MessageEntity.class).gt(MessageEntity_.visibleTimestampSecs,now)).where(Entities.restriction(MessageEntity.class).notEqual(MessageEntity_.receiveCount,0)).uniqueResult().toString());
    result.put(Constants.APPROXIMATE_NUMBER_OF_MESSAGES,Entities.count(MessageEntity.class).whereEqual(MessageEntity_.accountId,queue.getAccountId()).whereEqual(MessageEntity_.queueName,queue.getQueueName()).where(Entities.restriction(MessageEntity.class).gt(MessageEntity_.expiredTimestampSecs,now)).where(Entities.restriction(MessageEntity.class).le(MessageEntity_.visibleTimestampSecs,now)).uniqueResult().toString());
  }
   return result;
}
