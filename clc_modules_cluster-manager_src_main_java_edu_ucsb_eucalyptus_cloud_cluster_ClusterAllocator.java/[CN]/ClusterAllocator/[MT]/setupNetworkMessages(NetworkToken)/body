{
  if (networkToken != null) {
    StartNetworkType msg=new StartNetworkType(this.vmAllocInfo.getRequest(),networkToken.getVlan(),networkToken.getNetworkName());
    this.msgMap.put(State.CREATE_NETWORK,QueuedEvent.make(new StartNetworkCallback(networkToken),msg));
  }
  try {
    RunInstancesType request=this.vmAllocInfo.getRequest();
    Network network=Networks.getInstance().lookup(networkToken.getNetworkName());
    LOG.debug(LogUtil.header("Setting up rules for: " + network.getName()));
    LOG.debug(LogUtil.subheader(network.toString()));
    ConfigureNetworkType msg=new ConfigureNetworkType(network.getRules());
    msg.setUserId(networkToken.getUserName());
    msg.setEffectiveUserId(networkToken.getUserName());
    if (!network.getRules().isEmpty()) {
      this.msgMap.put(State.CREATE_NETWORK_RULES,QueuedEvent.make(new ConfigureNetworkCallback(),msg));
    }
    for (    Network otherNetwork : Networks.getInstance().listValues()) {
      if (otherNetwork.isPeer(network.getUserName(),network.getNetworkName())) {
        LOG.warn("Need to refresh rules for incoming named network ingress on: " + otherNetwork.getName());
        LOG.debug(otherNetwork);
        ConfigureNetworkType omsg=new ConfigureNetworkType(otherNetwork.getRules());
        omsg.setUserId(otherNetwork.getUserName());
        omsg.setEffectiveUserId(Component.eucalyptus.name());
        this.msgMap.put(State.CREATE_NETWORK_RULES,QueuedEvent.make(new ConfigureNetworkCallback(),omsg));
      }
    }
  }
 catch (  NoSuchElementException e) {
  }
}
