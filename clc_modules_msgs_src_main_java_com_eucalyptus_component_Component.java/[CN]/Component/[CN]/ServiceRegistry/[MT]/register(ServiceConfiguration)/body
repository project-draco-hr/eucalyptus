{
  Service service=Services.newServiceInstance(config);
  if (config.isVmLocal() || config.isHostLocal()) {
    this.localService.set(service);
  }
  Service ret=this.services.putIfAbsent(config,service);
  if (ret == null) {
    ret=service;
    try {
      ret.getStateMachine().transition(Component.State.INITIALIZED).get();
    }
 catch (    IllegalStateException ex) {
      LOG.error(ex,ex);
    }
catch (    ExecutionException ex) {
      LOG.error(ex,ex);
    }
catch (    InterruptedException ex) {
      LOG.error(ex,ex);
    }
catch (    ExistingTransitionException ex) {
      LOG.error(ex,ex);
    }
  }
  ListenerRegistry.getInstance().register(ClockTick.class,ret);
  ListenerRegistry.getInstance().register(Hertz.class,ret);
  EventRecord.caller(Component.class,EventType.COMPONENT_SERVICE_REGISTERED,Component.this.getName(),(config.isVmLocal() || config.isHostLocal()) ? "local" : "remote",config.toString()).info();
  Logs.exhaust().debug("Registered service " + ret + " for configuration: "+ config);
  return ret;
}
