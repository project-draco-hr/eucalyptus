{
  EventRecord.caller(Component.class,EventType.COMPONENT_SERVICE_STOPPED,this.getName(),config.getName(),config.getUri().toString()).info();
  final Service service=this.serviceRegistry.lookup(config);
  if (State.ENABLED.equals(service.getState())) {
    try {
      final CheckedListenableFuture<ServiceConfiguration> future=new TransitionFuture<ServiceConfiguration>();
      service.transition(State.DISABLED).addListener(new Runnable(){
        @Override public void run(){
          try {
            service.transition(State.STOPPED);
            future.set(service.getServiceConfiguration());
          }
 catch (          Throwable ex) {
            Exceptions.trace(new ServiceRegistrationException("Failed to stop service: " + config + " because of: "+ ex.getMessage(),ex));
            future.setException(ex);
          }
        }
      }
,Threads.currentThreadExecutor());
      return future;
    }
 catch (    Throwable ex) {
      throw new ServiceRegistrationException("Failed to disable service: " + config + " because of: "+ ex.getMessage(),ex);
    }
  }
 else   if (State.DISABLED.equals(service.getState()) || State.NOTREADY.equals(service.getState())) {
    try {
      return service.transition(State.STOPPED);
    }
 catch (    Throwable ex) {
      throw new ServiceRegistrationException("Failed to stop service: " + config + " because of: "+ ex.getMessage(),ex);
    }
  }
 else {
    return Futures.predestinedFuture(service.getServiceConfiguration());
  }
}
