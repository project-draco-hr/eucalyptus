{
  final Callable<Component> enableRunner=new Callable<Component>(){
    @Override public Component call() throws ServiceRegistrationException {
      try {
        Component.this.enableService(configuration);
      }
 catch (      ServiceRegistrationException ex) {
        LOG.error(ex,ex);
        throw ex;
      }
      return Component.this;
    }
  }
;
switch (this.getState()) {
case NOTREADY:
case DISABLED:
    return enableRunner;
case LOADED:
case STOPPED:
  return new Callable<Component>(){
    @Override public Component call() throws ServiceRegistrationException {
      try {
        Component.this.startService(configuration).addListener(enableRunner);
      }
 catch (      ServiceRegistrationException ex) {
        LOG.error(ex,ex);
        throw ex;
      }
      return Component.this;
    }
  }
;
case ENABLED:
return noTransition;
default :
throw new IllegalStateException("Failed to find transition for current component state: " + this.toString());
}
}
