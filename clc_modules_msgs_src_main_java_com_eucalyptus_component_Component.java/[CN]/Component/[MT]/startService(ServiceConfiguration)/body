{
  EventRecord.caller(Component.class,EventType.COMPONENT_SERVICE_START,this.getName(),config.getName(),config.getUri().toString()).info();
  final Service service=this.lookupRegisteredService(config);
  service.setGoal(this.serviceRegistry.getServices().isEmpty() ? State.ENABLED : State.DISABLED);
  if (service.getState().equals(State.LOADED)) {
    final CheckedListenableFuture<ServiceConfiguration> future=Futures.newGenericFuture();
    try {
      service.transition(Transition.STARTING).addListener(new Callable<ServiceConfiguration>(){
        @Override public ServiceConfiguration call(){
          try {
            service.transition(State.DISABLED);
            future.set(service.getServiceConfiguration());
          }
 catch (          Throwable ex) {
            future.setException(ex);
            Exceptions.trace(new ServiceRegistrationException("Failed to mark service disabled: " + config + " because of: "+ ex.getMessage(),ex));
          }
          return service.getServiceConfiguration();
        }
      }
);
    }
 catch (    Throwable ex) {
      future.setException(new ServiceRegistrationException("Failed to start service: " + config + " because of: "+ ex.getMessage(),ex));
    }
    return future;
  }
 else   if (service.getState().equals(State.NOTREADY)) {
    try {
      return service.transition(State.DISABLED);
    }
 catch (    Throwable ex) {
      final CheckedListenableFuture<ServiceConfiguration> future=Futures.newGenericFuture();
      future.setException(new ServiceRegistrationException("Failed to mark service disabled: " + config + " because of: "+ ex.getMessage(),ex));
      return future;
    }
  }
 else {
    return Futures.predestinedFuture(service.getServiceConfiguration());
  }
}
