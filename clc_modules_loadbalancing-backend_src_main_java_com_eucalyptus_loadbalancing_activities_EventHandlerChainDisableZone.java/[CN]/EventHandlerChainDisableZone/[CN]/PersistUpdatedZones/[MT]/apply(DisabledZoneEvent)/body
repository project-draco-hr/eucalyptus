{
  LoadBalancer lb;
  try {
    lb=LoadBalancers.getLoadbalancer(evt.getContext(),evt.getLoadBalancer());
  }
 catch (  NoSuchElementException ex) {
    throw new EventHandlerException("Could not find the loadbalancer with name=" + evt.getLoadBalancer(),ex);
  }
catch (  Exception ex) {
    throw new EventHandlerException("Error while looking for loadbalancer with name=" + evt.getLoadBalancer(),ex);
  }
  final StoredResult<String> updated=this.getChain().findHandler(UpdateAutoScalingGroup.class);
  if (updated != null && updated.getResult() != null) {
    for (    final String removedZone : updated.getResult()) {
      try (final TransactionResource db=Entities.transactionFor(LoadBalancerZone.class)){
        final LoadBalancerZone update=Entities.uniqueResult(LoadBalancerZone.named(lb,removedZone));
        update.setState(LoadBalancerZone.STATE.OutOfService);
        db.commit();
      }
 catch (      final Exception ex) {
        LOG.debug("Error updating state for load balancer zone",ex);
      }
    }
  }
}
