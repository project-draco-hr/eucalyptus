{
  final ExportDataResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  final Context ctx=Contexts.lookup();
  final User requestUser=ctx.getUser();
  if (!requestUser.isSystemAdmin()) {
    throw new ReportingException(HttpResponseStatus.UNUATHORIZED,ReportingException.NOT_AUTHORIZED,"Not authorized");
  }
  List<Class<? extends AbstractPersistent>> eventClasses=ImmutableList.of(ReportingElasticIpAttachEvent.class,ReportingElasticIpCreateEvent.class,ReportingElasticIpDeleteEvent.class,ReportingElasticIpDetachEvent.class,ReportingInstanceAttributeEvent.class,ReportingInstanceCreateEvent.class,ReportingInstanceUsageEvent.class,ReportingS3BucketCreateEvent.class,ReportingS3BucketDeleteEvent.class,ReportingS3ObjectCreateEvent.class,ReportingS3ObjectDeleteEvent.class,ReportingS3ObjectUsageEvent.class,ReportingVolumeAttachEvent.class,ReportingVolumeCreateEvent.class,ReportingVolumeDeleteEvent.class,ReportingVolumeDetachEvent.class,ReportingVolumeSnapshotCreateEvent.class,ReportingVolumeSnapshotDeleteEvent.class,ReportingVolumeUsageEvent.class);
  final List<Object> exportData=Lists.newArrayList();
  for (  final Class<? extends AbstractPersistent> eventClass : eventClasses) {
    try {
      exportData.addAll(Entities.query(eventClass.newInstance(),true));
    }
 catch (    InstantiationException e) {
      log.error(e,e);
    }
catch (    IllegalAccessException e) {
      log.error(e,e);
    }
  }
  final ByteArrayOutputStream out=new ByteArrayOutputStream();
  final XMLEncoder encoder=new XMLEncoder(out);
  encoder.writeObject(exportData);
  encoder.flush();
  encoder.close();
  reply.setResult(new ExportDataResultType(out.toString()));
  return reply;
}
