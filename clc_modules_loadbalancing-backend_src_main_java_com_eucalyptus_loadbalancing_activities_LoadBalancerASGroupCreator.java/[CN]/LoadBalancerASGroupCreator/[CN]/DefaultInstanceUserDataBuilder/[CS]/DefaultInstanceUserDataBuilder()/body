{
  dataDict=new ConcurrentHashMap<>();
  try {
    List<ServiceStatusType> services=EucalyptusActivityTasks.getInstance().describeServices("eucalyptus");
    if (services == null || services.size() <= 0)     throw new EucalyptusActivityException("failed to describe eucalyptus services");
    ServiceStatusType service=services.get(0);
    String serviceUrl=service.getServiceId().getUri();
    String tmp=serviceUrl.replace("http://","").replace("https://","");
    String host=tmp.substring(0,tmp.indexOf(":"));
    tmp=tmp.replace(host + ":","");
    String port=tmp.substring(0,tmp.indexOf("/"));
    String path=tmp.replace(port + "/","");
    this.add("eucalyptus_host",host);
    this.add("eucalyptus_port",port);
    this.add("eucalyptus_path",path);
    this.add("elb_service_url",String.format("loadbalancing.%s",DNSProperties.DOMAIN));
    this.add("euare_service_url",String.format("euare.%s",DNSProperties.DOMAIN));
    final List<String> dnsHosts=Lists.newArrayList(Iterables.transform(ServiceConfigurations.list(Eucalyptus.class),new Function<ServiceConfiguration,String>(){
      @Override public String apply(      ServiceConfiguration arg0){
        return arg0.getInetAddress().getHostAddress();
      }
    }
));
    final List<String> enabledDns=Lists.newArrayList(Collections2.transform(Topology.enabledServices(Eucalyptus.class),new Function<ServiceConfiguration,String>(){
      @Override public String apply(      ServiceConfiguration arg0){
        return arg0.getInetAddress().getHostAddress();
      }
    }
));
    final StringBuilder sbDns=new StringBuilder();
    for (    final String address : enabledDns) {
      if (sbDns.length() <= 0)       sbDns.append(address);
 else       sbDns.append(",").append(address);
    }
    for (    final String address : dnsHosts) {
      if (!enabledDns.contains(address)) {
        if (sbDns.length() <= 0)         sbDns.append(address);
 else         sbDns.append(",").append(address);
      }
    }
    this.add("dns_server",sbDns.toString());
    if (LOADBALANCER_VM_NTP_SERVER != null && LOADBALANCER_VM_NTP_SERVER.length() > 0) {
      this.add("ntp_server",LOADBALANCER_VM_NTP_SERVER);
    }
    if (LOADBALANCER_APP_COOKIE_DURATION != null) {
      this.add("app-cookie-duration",LOADBALANCER_APP_COOKIE_DURATION);
    }
  }
 catch (  Exception ex) {
    throw Exceptions.toUndeclared(ex);
  }
}
