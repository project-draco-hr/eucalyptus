{
  if (!(Bootstrap.isFinished() && Topology.isEnabled(Eucalyptus.class)))   return;
  if (emi != null) {
    try {
      final List<ImageDetails> images=EucalyptusActivityTasks.getInstance().describeImages(Lists.newArrayList(emi));
      if (images == null || images.size() <= 0)       throw new EucalyptusCloudException("No such EMI is found in the system");
      if (!images.get(0).getImageId().toLowerCase().equals(emi.toLowerCase()))       throw new EucalyptusCloudException("No such EMI is found in the system");
    }
 catch (    final EucalyptusCloudException ex) {
      throw ex;
    }
catch (    final Exception ex) {
      throw new EucalyptusCloudException("Failed to verify EMI in the system");
    }
  }
  if (keyname != null && !keyname.equals("")) {
    try {
      final List<DescribeKeyPairsResponseItemType> keypairs=EucalyptusActivityTasks.getInstance().describeKeyPairs(Lists.newArrayList(keyname));
      if (keypairs == null || keypairs.size() <= 0)       throw new EucalyptusCloudException("No such keypair is found in the system");
      if (!keypairs.get(0).getKeyName().equals(keyname))       throw new EucalyptusCloudException("No such keypair is found in the system");
    }
 catch (    final EucalyptusCloudException ex) {
      throw ex;
    }
catch (    final Exception ex) {
      throw new EucalyptusCloudException("Failed to verify the keyname in the system");
    }
  }
  if (!Topology.isEnabledLocally(LoadBalancingBackend.class))   return;
  if ((emi != null && emi.length() > 0) || (instanceType != null && instanceType.length() > 0) || (keyname != null && keyname.length() > 0)|| (initScript != null)) {
    final List<LoadBalancer> lbs=LoadBalancers.listLoadbalancers();
    for (    final LoadBalancer lb : lbs) {
      final LoadBalancerAutoScalingGroupCoreView asg=lb.getAutoScaleGroup();
      if (asg == null || asg.getName() == null)       continue;
      final String asgName=asg.getName();
      try {
        AutoScalingGroupType asgType=null;
        try {
          final DescribeAutoScalingGroupsResponseType resp=EucalyptusActivityTasks.getInstance().describeAutoScalingGroups(Lists.newArrayList(asgName));
          if (resp.getDescribeAutoScalingGroupsResult() != null && resp.getDescribeAutoScalingGroupsResult().getAutoScalingGroups() != null && resp.getDescribeAutoScalingGroupsResult().getAutoScalingGroups().getMember() != null && resp.getDescribeAutoScalingGroupsResult().getAutoScalingGroups().getMember().size() > 0) {
            asgType=resp.getDescribeAutoScalingGroupsResult().getAutoScalingGroups().getMember().get(0);
          }
        }
 catch (        final Exception ex) {
          LOG.warn("can't find autoscaling group named " + asgName);
          continue;
        }
        if (asgType != null) {
          final String lcName=asgType.getLaunchConfigurationName();
          final LaunchConfigurationType lc=EucalyptusActivityTasks.getInstance().describeLaunchConfiguration(lcName);
          String launchConfigName;
          do {
            launchConfigName=String.format("lc-euca-internal-elb-%s-%s-%s",lb.getOwnerAccountNumber(),lb.getDisplayName(),UUID.randomUUID().toString().substring(0,8));
            if (launchConfigName.length() > 255)             launchConfigName=launchConfigName.substring(0,255);
          }
 while (launchConfigName.equals(asgType.getLaunchConfigurationName()));
          final String newEmi=emi != null ? emi : lc.getImageId();
          final String newType=instanceType != null ? instanceType : lc.getInstanceType();
          String newKeyname=keyname != null ? keyname : lc.getKeyName();
          final String newUserdata=B64.standard.encString(String.format("%s\n%s",getCredentialsString(),getLoadBalancerUserData(initScript)));
          try {
            EucalyptusActivityTasks.getInstance().createLaunchConfiguration(newEmi,newType,lc.getIamInstanceProfile(),launchConfigName,lc.getSecurityGroups().getMember(),newKeyname,newUserdata,Boolean.TRUE.equals(lc.getAssociatePublicIpAddress()));
          }
 catch (          final Exception ex) {
            throw new EucalyptusCloudException("failed to create new launch config",ex);
          }
          try {
            EucalyptusActivityTasks.getInstance().updateAutoScalingGroup(asgName,null,asgType.getDesiredCapacity(),launchConfigName);
          }
 catch (          final Exception ex) {
            throw new EucalyptusCloudException("failed to update the autoscaling group",ex);
          }
          try {
            EucalyptusActivityTasks.getInstance().deleteLaunchConfiguration(asgType.getLaunchConfigurationName());
          }
 catch (          final Exception ex) {
            LOG.warn("unable to delete the old launch configuration",ex);
          }
          if (emi != null) {
            try {
              final List<ImageDetails> images=EucalyptusActivityTasks.getInstance().describeImages(Lists.newArrayList(emi));
              for (              ResourceTag tag : images.get(0).getTagSet())               EucalyptusActivityTasks.getInstance().createOrUpdateAutoscalingTags(tag.getKey(),tag.getValue(),asgName);
            }
 catch (            final Exception ex) {
              LOG.warn("unable to propogate tags from image to ASG",ex);
            }
          }
          LOG.debug(String.format("autoscaling group '%s' was updated",asgName));
        }
      }
 catch (      final EucalyptusCloudException ex) {
        throw ex;
      }
catch (      final Exception ex) {
        throw new EucalyptusCloudException("Unable to update the autoscaling group",ex);
      }
    }
  }
}
