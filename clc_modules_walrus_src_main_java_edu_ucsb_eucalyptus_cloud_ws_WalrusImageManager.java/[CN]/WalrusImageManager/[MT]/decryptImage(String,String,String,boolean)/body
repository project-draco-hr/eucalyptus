{
  EntityWrapper<BucketInfo> db=WalrusControl.getEntityWrapper();
  BucketInfo bucketInfo=new BucketInfo(bucketName);
  List<BucketInfo> bucketList=db.query(bucketInfo);
  if (bucketList.size() > 0) {
    EntityWrapper<ObjectInfo> dbObject=db.recast(ObjectInfo.class);
    ObjectInfo searchObjectInfo=new ObjectInfo(bucketName,objectKey);
    List<ObjectInfo> objectInfos=dbObject.query(searchObjectInfo);
    if (objectInfos.size() > 0) {
      ObjectInfo objectInfo=objectInfos.get(0);
      if (objectInfo.canRead(userId)) {
        String objectName=objectInfo.getObjectName();
        File file=new File(storageManager.getObjectPath(bucketName,objectName));
        XMLParser parser=new XMLParser(file);
        String imageKey=parser.getValue("//image/name");
        String encryptedKey=parser.getValue("//ec2_encrypted_key");
        String encryptedIV=parser.getValue("//ec2_encrypted_iv");
        String signature=parser.getValue("//signature");
        String image=parser.getXML("image");
        String machineConfiguration=parser.getXML("machine_configuration");
        String verificationString=machineConfiguration + image;
        Signature sigVerifier;
        try {
          sigVerifier=Signature.getInstance("SHA1withRSA");
        }
 catch (        NoSuchAlgorithmException ex) {
          LOG.error(ex,ex);
          throw new DecryptionFailedException("SHA1withRSA not found");
        }
        if (isAdministrator) {
          try {
            boolean verified=false;
            List<String> aliases=CredentialProvider.getAliases();
            for (            String alias : aliases) {
              X509Certificate cert=CredentialProvider.getCertificate(alias);
              if (cert != null)               verified=canVerifySignature(sigVerifier,cert,signature,verificationString);
              if (verified)               break;
            }
            if (!verified) {
              throw new NotAuthorizedException("Invalid signature");
            }
          }
 catch (          Exception ex) {
            db.rollback();
            LOG.error(ex,ex);
            throw new DecryptionFailedException("signature verification");
          }
        }
 else {
          boolean signatureVerified=false;
          User user=null;
          try {
            user=CredentialProvider.getUser(userId);
          }
 catch (          NoSuchUserException e) {
            throw new AccessDeniedException(userId,e);
          }
          for (          X509Cert certInfo : user.getCertificates()) {
            try {
              X509Certificate cert=X509Cert.toCertificate(certInfo);
              signatureVerified=canVerifySignature(sigVerifier,cert,signature,verificationString);
              if (signatureVerified)               break;
            }
 catch (            Exception ex) {
              db.rollback();
              LOG.error(ex,ex);
              throw new DecryptionFailedException("signature verification");
            }
          }
          if (!signatureVerified) {
            throw new NotAuthorizedException("Invalid signature");
          }
        }
        List<String> parts=parser.getValues("//image/parts/part/filename");
        if (parts == null)         throw new DecryptionFailedException("Invalid manifest");
        ArrayList<String> qualifiedPaths=new ArrayList<String>();
        searchObjectInfo=new ObjectInfo();
        searchObjectInfo.setBucketName(bucketName);
        List<ObjectInfo> bucketObjectInfos=dbObject.query(searchObjectInfo);
        for (        String part : parts) {
          for (          ObjectInfo object : bucketObjectInfos) {
            if (part.equals(object.getObjectKey())) {
              qualifiedPaths.add(storageManager.getObjectPath(bucketName,object.getObjectName()));
            }
          }
        }
        String encryptedImageKey=imageKey + "-" + Hashes.getRandom(5)+ ".crypt.gz";
        String encryptedImageName=storageManager.getObjectPath(bucketName,encryptedImageKey);
        String decryptedImageKey=encryptedImageKey.substring(0,encryptedImageKey.lastIndexOf("crypt.gz")) + "tgz";
        String decryptedImageName=storageManager.getObjectPath(bucketName,decryptedImageKey);
        assembleParts(encryptedImageName,qualifiedPaths);
        byte[] key;
        byte[] iv;
        try {
          PrivateKey pk=SystemCredentialProvider.getCredentialProvider(Component.eucalyptus).getPrivateKey();
          Cipher cipher=Cipher.getInstance("RSA/ECB/PKCS1Padding");
          cipher.init(Cipher.DECRYPT_MODE,pk);
          String keyString=new String(cipher.doFinal(Hashes.hexToBytes(encryptedKey)));
          key=Hashes.hexToBytes(keyString);
          String ivString=new String(cipher.doFinal(Hashes.hexToBytes(encryptedIV)));
          iv=Hashes.hexToBytes(ivString);
        }
 catch (        Exception ex) {
          db.rollback();
          LOG.error(ex,ex);
          throw new DecryptionFailedException("AES params");
        }
        try {
          Cipher cipher=Cipher.getInstance("AES/CBC/PKCS5Padding","BC");
          IvParameterSpec salt=new IvParameterSpec(iv);
          SecretKey keySpec=new SecretKeySpec(key,"AES");
          cipher.init(Cipher.DECRYPT_MODE,keySpec,salt);
          decryptImage(encryptedImageName,decryptedImageName,cipher);
        }
 catch (        Exception ex) {
          db.rollback();
          LOG.error(ex,ex);
          throw new DecryptionFailedException("decryption failed");
        }
        try {
          storageManager.deleteAbsoluteObject(encryptedImageName);
        }
 catch (        Exception ex) {
          LOG.error(ex);
          throw new EucalyptusCloudException();
        }
        db.commit();
        return decryptedImageKey;
      }
    }
  }
  return null;
}
