{
  GetDecryptedImageResponseType reply=(GetDecryptedImageResponseType)request.getReply();
  String bucketName=request.getBucket();
  String objectKey=request.getKey();
  User user=Contexts.lookup().getUser();
  String userId=request.getUserId();
  EntityWrapper<BucketInfo> db=WalrusControl.getEntityWrapper();
  BucketInfo bucketInfo=new BucketInfo(bucketName);
  List<BucketInfo> bucketList=db.query(bucketInfo);
  if (bucketList.size() > 0) {
    EntityWrapper<ObjectInfo> dbObject=db.recast(ObjectInfo.class);
    ObjectInfo searchObjectInfo=new ObjectInfo(bucketName,objectKey);
    List<ObjectInfo> objectInfos=dbObject.query(searchObjectInfo);
    if (objectInfos.size() > 0) {
      ObjectInfo objectInfo=objectInfos.get(0);
      if (objectInfo.canRead(userId) || Contexts.lookup().hasAdministrativePrivileges()) {
        db.commit();
        EucaSemaphore semaphore=EucaSemaphoreDirectory.getSemaphore(bucketName + "/" + objectKey);
        try {
          semaphore.acquire();
        }
 catch (        InterruptedException ex) {
          throw new EucalyptusCloudException("semaphore could not be acquired");
        }
        EntityWrapper<ImageCacheInfo> db2=WalrusControl.getEntityWrapper();
        ImageCacheInfo searchImageCacheInfo=new ImageCacheInfo(bucketName,objectKey);
        List<ImageCacheInfo> foundImageCacheInfos=db2.query(searchImageCacheInfo);
        if (foundImageCacheInfos.size() > 0) {
          ImageCacheInfo imageCacheInfo=foundImageCacheInfos.get(0);
          if (imageCacheInfo.getInCache() && (!storageManager.objectExists(bucketName,imageCacheInfo.getImageName()))) {
            db2.delete(imageCacheInfo);
            db2.commit();
            db2=WalrusControl.getEntityWrapper();
            foundImageCacheInfos=db2.query(searchImageCacheInfo);
          }
        }
        if ((foundImageCacheInfos.size() == 0) || (!imageCachers.containsKey(bucketName + objectKey))) {
          db2.commit();
          LOG.info("Image " + bucketName + "/"+ objectKey+ " not found in cache. Issuing cache request (might take a while...)");
          cacheImage(bucketName,objectKey,user,Contexts.lookup().hasAdministrativePrivileges());
          db2=WalrusControl.getEntityWrapper();
          foundImageCacheInfos=db2.query(searchImageCacheInfo);
        }
        ImageCacheInfo foundImageCacheInfo=null;
        if (foundImageCacheInfos.size() > 0)         foundImageCacheInfo=foundImageCacheInfos.get(0);
        db2.commit();
        if ((foundImageCacheInfo == null) || (!foundImageCacheInfo.getInCache())) {
          boolean cached=false;
          WalrusMonitor monitor=imageMessenger.getMonitor(bucketName + "/" + objectKey);
synchronized (monitor) {
            try {
              long bytesCached=0;
              int number_of_tries=0;
              do {
                LOG.info("Waiting " + WalrusProperties.CACHE_PROGRESS_TIMEOUT + "ms for image to cache ("+ number_of_tries+ " out of "+ WalrusProperties.IMAGE_CACHE_RETRY_LIMIT+ ")");
                monitor.wait(WalrusProperties.CACHE_PROGRESS_TIMEOUT);
                if (isCached(bucketName,objectKey)) {
                  cached=true;
                  break;
                }
                long newBytesCached=checkCachingProgress(bucketName,objectKey,bytesCached);
                boolean is_caching=(newBytesCached - bytesCached) > 0 ? true : false;
                if (!is_caching && (number_of_tries++ >= WalrusProperties.IMAGE_CACHE_RETRY_LIMIT))                 break;
                bytesCached=newBytesCached;
                if (is_caching) {
                  LOG.info("Bytes cached so far for image " + bucketName + "/"+ objectKey+ " :"+ String.valueOf(bytesCached));
                }
              }
 while (true);
            }
 catch (            Exception ex) {
              LOG.error(ex,ex);
              semaphore.release();
              imageMessenger.removeMonitor(bucketName + "/" + objectKey);
              throw new EucalyptusCloudException("monitor failure");
            }
          }
          if (!cached) {
            LOG.error("Tired of waiting to cache image: " + bucketName + "/"+ objectKey+ " giving up");
            imageMessenger.removeMonitor(bucketName + "/" + objectKey);
            semaphore.release();
            throw new EucalyptusCloudException("caching failure");
          }
          db2=WalrusControl.getEntityWrapper();
          foundImageCacheInfos=db2.query(searchImageCacheInfo);
          if (foundImageCacheInfos.size() > 0) {
            foundImageCacheInfo=foundImageCacheInfos.get(0);
            foundImageCacheInfo.setUseCount(foundImageCacheInfo.getUseCount() + 1);
            assert(foundImageCacheInfo.getInCache());
          }
 else {
            db2.rollback();
            semaphore.release();
            throw new NoSuchEntityException(objectKey);
          }
          db2.commit();
        }
        Long unencryptedSize=foundImageCacheInfo.getSize();
        String imageKey=foundImageCacheInfo.getImageName();
        reply.setSize(unencryptedSize);
        reply.setLastModified(DateUtils.format(objectInfo.getLastModified().getTime(),DateUtils.ISO8601_DATETIME_PATTERN) + ".000Z");
        reply.setEtag("");
        DefaultHttpResponse httpResponse=new DefaultHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.OK);
        storageManager.sendObject(request,httpResponse,bucketName,imageKey,unencryptedSize,null,DateUtils.format(objectInfo.getLastModified().getTime(),DateUtils.ISO8601_DATETIME_PATTERN + ".000Z"),objectInfo.getContentType(),objectInfo.getContentDisposition(),request.getIsCompressed(),null,null);
        semaphore.release();
        imageMessenger.removeMonitor(bucketName + "/" + objectKey);
        return reply;
      }
 else {
        db.rollback();
        throw new AccessDeniedException("Key",objectKey);
      }
    }
 else {
      db.rollback();
      throw new NoSuchEntityException(objectKey);
    }
  }
 else {
    db.rollback();
    throw new NoSuchBucketException(bucketName);
  }
}
