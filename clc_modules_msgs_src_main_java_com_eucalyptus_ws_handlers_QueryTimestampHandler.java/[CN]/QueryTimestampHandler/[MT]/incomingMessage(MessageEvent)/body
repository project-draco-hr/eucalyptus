{
  if (event.getMessage() instanceof MappingHttpRequest) {
    final MappingHttpRequest httpRequest=(MappingHttpRequest)event.getMessage();
    final Map<String,String> parameters=httpRequest.getParameters();
    final Function<String,List<String>> headerLookup=SignatureHandlerUtils.headerLookup(httpRequest);
    final Function<String,List<String>> parameterLookup=SignatureHandlerUtils.parameterLookup(httpRequest);
    final boolean hasSignatureDate=HmacUtils.hasSignatureDate(SIGNATURE_VERSIONS,headerLookup,parameterLookup);
    if (!hasSignatureDate && !parameters.containsKey(SecurityParameter.Expires.parameter())) {
      throw new AuthenticationException("One of the following parameters must be specified: " + SecurityParameter.Timestamp.parameter() + " OR "+ SecurityParameter.Expires.parameter()+ " OR "+ SecurityParameter.X_Amz_Date.parameter()+ " OR "+ SecurityHeader.Date.header());
    }
    final Calendar now=Calendar.getInstance();
    final Calendar expires=Calendar.getInstance();
    String timestamp=null;
    String exp=null;
    try {
      if (hasSignatureDate) {
        final Date date=HmacUtils.getSignatureDate(SIGNATURE_VERSIONS,headerLookup,parameterLookup);
        parameters.keySet().removeAll(HmacUtils.detectSignatureVariant(headerLookup,parameterLookup).getDateParametersToRemove());
        expires.setTimeInMillis(verifyTimestampAndCalculateExpiry(now.getTimeInMillis(),date));
      }
 else {
        exp=parameters.remove(SecurityParameter.Expires.parameter());
        try {
          expires.setTime(Timestamps.parseIso8601Timestamp(exp));
        }
 catch (        Exception e) {
          expires.setTime(Timestamps.parseIso8601Timestamp(URLDecoder.decode(exp)));
        }
        Calendar cacheExpire=(Calendar)now.clone();
        cacheExpire.add(Calendar.MINUTE,15);
        if (expires.after(cacheExpire))         LOG.warn("[security] Message expiration date " + expires + " is further in the future that replay cache expiration");
      }
    }
 catch (    AuthenticationException a) {
      LOG.debug(a,a);
      throw a;
    }
catch (    Exception t) {
      LOG.debug(t,t);
      throw new AuthenticationException("Failure to parse timestamp: Timestamp=" + timestamp + " Expires="+ exp);
    }
    if (now.after(expires)) {
      expires.setTimeZone(TimeZone.getTimeZone("GMT"));
      String expiryTime=String.format("%4d-%02d-%02dT%02d:%02d:%02d",expires.get(Calendar.YEAR),expires.get(Calendar.MONTH) + 1,expires.get(Calendar.DAY_OF_MONTH),expires.get(Calendar.HOUR_OF_DAY),expires.get(Calendar.MINUTE),expires.get(Calendar.SECOND));
      throw new AuthenticationException("Message has expired (times in UTC): Timestamp=" + timestamp + " Expires="+ exp+ " Deadline="+ expiryTime);
    }
  }
}
