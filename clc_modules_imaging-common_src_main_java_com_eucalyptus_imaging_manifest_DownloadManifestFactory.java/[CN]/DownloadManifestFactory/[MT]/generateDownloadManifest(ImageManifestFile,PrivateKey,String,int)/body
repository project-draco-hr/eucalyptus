{
  try {
    AccessKey adminAccessKey=Accounts.lookupSystemAdmin().getKeys().get(0);
    AWSCredentials myCredentials=new BasicAWSCredentials(adminAccessKey.getAccessKey(),adminAccessKey.getSecretKey());
    AmazonS3 s3Client=new AmazonS3Client(myCredentials);
    ServiceConfiguration OSLocation=Topology.lookup(ObjectStorage.class);
    s3Client.setEndpoint(OSLocation.getUri().getScheme() + "://" + OSLocation.getUri().getAuthority());
    java.util.Date expiration=new java.util.Date();
    long msec=expiration.getTime() + 1000 * 60 * 60* expirationHours;
    expiration.setTime(msec);
    final String manifest=baseManifest.getManifest();
    if (manifest == null) {
      throw new DownloadManifestException("Can't generate download manifest from null base manifest");
    }
    final Document inputSource;
    final XPath xpath;
    Function<String,String> xpathHelper;
    DocumentBuilder builder=XMLParser.getDocBuilder();
    inputSource=builder.parse(new ByteArrayInputStream(manifest.getBytes()));
    if (!"manifest".equals(inputSource.getDocumentElement().getNodeName())) {
      LOG.error("Expected image manifest. Got " + nodeToString(inputSource,false));
      throw new InvalidBaseManifestException("Base manifest does not have manifest element");
    }
    StringBuilder signatureSrc=new StringBuilder();
    Document manifestDoc=builder.newDocument();
    Element root=(Element)manifestDoc.createElement("manifest");
    manifestDoc.appendChild(root);
    Element el=manifestDoc.createElement("version");
    el.appendChild(manifestDoc.createTextNode("2014-01-14"));
    signatureSrc.append(nodeToString(el,false));
    root.appendChild(el);
    el=manifestDoc.createElement("file-format");
    el.appendChild(manifestDoc.createTextNode(baseManifest.getManifestType().getFileType().toString()));
    root.appendChild(el);
    signatureSrc.append(nodeToString(el,false));
    xpath=XPathFactory.newInstance().newXPath();
    xpathHelper=new Function<String,String>(){
      @Override public String apply(      String input){
        try {
          return (String)xpath.evaluate(input,inputSource,XPathConstants.STRING);
        }
 catch (        XPathExpressionException ex) {
          return null;
        }
      }
    }
;
    if (baseManifest.getManifestType().getFileType() == FileType.BUNDLE) {
      String encryptedKey=xpathHelper.apply("//ec2_encrypted_key");
      String encryptedIV=xpathHelper.apply("//ec2_encrypted_iv");
      EncryptedKey encryptKey=reEncryptKey(new EncryptedKey(encryptedKey,encryptedIV),keyToUse);
      el=manifestDoc.createElement("bundle");
      Element key=manifestDoc.createElement("encrypted-key");
      key.appendChild(manifestDoc.createTextNode(encryptKey.getKey()));
      Element iv=manifestDoc.createElement("encrypted-iv");
      iv.appendChild(manifestDoc.createTextNode(encryptKey.getIV()));
      el.appendChild(key);
      el.appendChild(iv);
      root.appendChild(el);
      signatureSrc.append(nodeToString(el,false));
    }
    el=manifestDoc.createElement("image");
    String bundleSize=xpathHelper.apply(baseManifest.getManifestType().getSizePath());
    if (bundleSize == null) {
      throw new InvalidBaseManifestException("Base manifest does not have size element");
    }
    Element size=manifestDoc.createElement("size");
    size.appendChild(manifestDoc.createTextNode(bundleSize));
    el.appendChild(size);
    Element partsEl=manifestDoc.createElement("parts");
    el.appendChild(partsEl);
    NodeList parts=(NodeList)xpath.evaluate(baseManifest.getManifestType().getPartsPath(),inputSource,XPathConstants.NODESET);
    if (parts == null) {
      throw new InvalidBaseManifestException("Base manifest does not have parts");
    }
    String bucketBase="services/objectstorage/";
    if (baseManifest.getManifestType().signPartUrl()) {
      bucketBase+=baseManifest.getBaseBucket();
    }
    for (int i=0; i < parts.getLength(); i++) {
      Node part=parts.item(i);
      String partIndex=part.getAttributes().getNamedItem("index").getNodeValue();
      String partKey=((Node)xpath.evaluate(baseManifest.getManifestType().getPartUrlElement(),part,XPathConstants.NODE)).getTextContent();
      String partDownloadUrl=partKey;
      if (baseManifest.getManifestType().signPartUrl()) {
        GeneratePresignedUrlRequest generatePresignedUrlRequest=new GeneratePresignedUrlRequest(bucketBase,partKey,HttpMethod.GET);
        generatePresignedUrlRequest.setExpiration(expiration);
        URL s=s3Client.generatePresignedUrl(generatePresignedUrlRequest);
        partDownloadUrl=s.toString();
      }
      Element aPart=manifestDoc.createElement("part");
      Element getUrl=manifestDoc.createElement("get-url");
      getUrl.appendChild(manifestDoc.createTextNode(partDownloadUrl));
      aPart.setAttribute("index",partIndex);
      aPart.appendChild(getUrl);
      partsEl.appendChild(aPart);
    }
    root.appendChild(el);
    signatureSrc.append(nodeToString(el,false));
    String signatureData=signatureSrc.toString();
    Element signature=manifestDoc.createElement("signature");
    signature.setAttribute("algorithm","RSA-SHA256");
    signature.appendChild(manifestDoc.createTextNode(Signatures.SHA256withRSA.trySign(Eucalyptus.class,signatureData.getBytes())));
    root.appendChild(signature);
    String downloadManifest=nodeToString(manifestDoc,true);
    createManifestsBucket();
    putManifestData(DOWNLOAD_MANIFEST_BUCKET_NAME,manifestName,downloadManifest);
    GeneratePresignedUrlRequest generatePresignedUrlRequest=new GeneratePresignedUrlRequest("services/objectstorage/" + DOWNLOAD_MANIFEST_BUCKET_NAME,manifestName,HttpMethod.GET);
    generatePresignedUrlRequest.setExpiration(expiration);
    URL s=s3Client.generatePresignedUrl(generatePresignedUrlRequest);
    return String.format("%s://imaging@%s%s?%s",s.getProtocol(),s.getAuthority(),s.getPath(),s.getQuery());
  }
 catch (  Exception ex) {
    LOG.error("Got an error",ex);
    throw new DownloadManifestException("Can't generate download manifest");
  }
}
