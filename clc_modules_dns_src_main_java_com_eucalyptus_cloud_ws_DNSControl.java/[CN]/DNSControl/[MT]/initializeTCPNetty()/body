{
  if (tcpChannelFactory == null) {
    try {
      tcpChannelFactory=new NioServerSocketChannelFactory(Executors.newCachedThreadPool(),createWorkerPool());
      final ServerBootstrap b=new ServerBootstrap(tcpChannelFactory);
      b.setPipelineFactory(new ChannelPipelineFactory(){
        public ChannelPipeline getPipeline() throws Exception {
          ChannelPipeline p=Channels.pipeline();
          p.addLast("framer",new LengthFieldBasedFrameDecoder(65536,0,2,0,2));
          p.addLast("prepender",new LengthFieldPrepender(2));
          p.addLast("dns-server",new DnsServerHandler());
          return p;
        }
      }
);
      b.setOption("child.tcpNoDelay",true);
      b.setOption("child.keepAlive",false);
      b.setOption("child.reuseAddress",true);
      b.setOption("child.connectTimeoutMillis",3000);
      b.setOption("tcpNoDelay",true);
      b.setOption("keepAlive",false);
      b.setOption("reuseAddress",true);
      b.setOption("connectTimeoutMillis",3000);
      Capabilities.runWithCapabilities(new Callable<Boolean>(){
        @Override public Boolean call() throws Exception {
          final Channel tcpChannel=b.bind(new InetSocketAddress(53));
          tcpChannelGroup.add(tcpChannel);
          return true;
        }
      }
);
    }
 catch (    final Exception ex) {
      LOG.debug(ex,ex);
      tcpChannelGroup.close().awaitUninterruptibly();
      if (tcpChannelFactory != null)       tcpChannelFactory.releaseExternalResources();
      tcpChannelFactory=null;
      throw ex;
    }
  }
}
