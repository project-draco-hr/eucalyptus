{
  RemoveMultiANameResponseType reply=(RemoveMultiANameResponseType)request.getReply();
  String zone=request.getZone();
  if (zone.endsWith("."))   zone+=DNSProperties.DOMAIN + ".";
 else   zone+="." + DNSProperties.DOMAIN + ".";
  String name=request.getName();
  if (name.endsWith("."))   name+=DNSProperties.DOMAIN + ".";
 else   name+="." + DNSProperties.DOMAIN + ".";
  EntityTransaction db=Entities.get(ARecordNameInfo.class);
  ARecordNameInfo nameInfo=null;
  try {
    nameInfo=Entities.uniqueResult(ARecordNameInfo.named(name,zone));
    db.commit();
  }
 catch (  NoSuchElementException ex) {
    db.rollback();
    return reply;
  }
catch (  Exception ex) {
    db.rollback();
    throw new EucalyptusCloudException("Failed to query dns name record",ex);
  }
  List<ARecordAddressInfo> addresses=Lists.newArrayList(nameInfo.getAddresses());
  for (  ARecordAddressInfo addr : addresses) {
    try {
      ARecord arecord=new ARecord(Name.fromString(name),DClass.IN,nameInfo.getTtl(),Address.getByAddress(addr.getAddress()));
      ZoneManager.deleteARecord(zone,arecord);
    }
 catch (    Exception ex) {
      throw new EucalyptusCloudException("Failed to delete the record from zone",ex);
    }
  }
  db=Entities.get(ARecordNameInfo.class);
  try {
    nameInfo=Entities.uniqueResult(ARecordNameInfo.named(name,zone));
    Entities.delete(nameInfo);
    db.commit();
  }
 catch (  NoSuchElementException ex) {
    db.rollback();
  }
catch (  Exception ex) {
    db.rollback();
    throw new EucalyptusCloudException("Failed to query dns name record",ex);
  }
  return reply;
}
