{
  DNSProperties.update();
  EntityWrapper<ZoneInfo> db=EntityWrapper.get(ZoneInfo.class);
  try {
    ZoneInfo zInfo=new ZoneInfo();
    List<ZoneInfo> zoneInfos=db.query(zInfo);
    for (    ZoneInfo zoneInfo : zoneInfos) {
      String name=zoneInfo.getName();
      EntityWrapper<SOARecordInfo> dbSOA=db.recast(SOARecordInfo.class);
      SOARecordInfo searchSOARecordInfo=new SOARecordInfo();
      searchSOARecordInfo.setName(name);
      SOARecordInfo soaRecordInfo=dbSOA.getUnique(searchSOARecordInfo);
      EntityWrapper<NSRecordInfo> dbNS=db.recast(NSRecordInfo.class);
      NSRecordInfo searchNSRecordInfo=new NSRecordInfo();
      searchNSRecordInfo.setName(name);
      NSRecordInfo nsRecordInfo=dbNS.getUnique(searchNSRecordInfo);
      ZoneManager.addZone(zoneInfo,soaRecordInfo,nsRecordInfo);
    }
    EntityWrapper<ARecordInfo> dbARec=db.recast(ARecordInfo.class);
    ARecordInfo searchARecInfo=new ARecordInfo();
    List<ARecordInfo> aRecInfos=dbARec.query(searchARecInfo);
    for (    ARecordInfo aRecInfo : aRecInfos) {
      ZoneManager.addRecord(aRecInfo,false);
    }
    db.commit();
  }
 catch (  EucalyptusCloudException ex) {
    db.rollback();
    LOG.error(ex);
  }
  final EntityTransaction db2=Entities.get(ARecordNameInfo.class);
  try {
    int count=0;
    List<ARecordNameInfo> multiARec=Entities.query(new ARecordNameInfo(),true);
    if (multiARec != null && multiARec.size() > 0) {
      for (      ARecordNameInfo nameRec : multiARec) {
        final Collection<ARecordAddressInfo> addresses=nameRec.getAddresses();
        if (addresses != null && addresses.size() > 0) {
          for (          final ARecordAddressInfo addrRec : addresses) {
            ARecord record=new ARecord(new Name(nameRec.getName()),DClass.IN,nameRec.getTtl(),Address.getByAddress(addrRec.getAddress()));
            ZoneManager.addRecord(nameRec.getZone(),record,true);
            count++;
          }
        }
      }
    }
    LOG.info(String.format("%d DNS records populated from database",count));
    db2.commit();
  }
 catch (  Exception ex) {
    db2.rollback();
    LOG.error("Failed to populate the existing DNS records",ex);
  }
}
