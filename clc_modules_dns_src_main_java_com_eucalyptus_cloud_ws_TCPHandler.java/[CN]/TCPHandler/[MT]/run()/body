{
  try (final Socket socket=this.socket){
    socket.setSoTimeout(timeout_seconds * 1000);
    final TimeLimiter limiter=new SimpleTimeLimiter(Threads.lookup(Dns.class,TCPHandler.class));
    final byte[] inBytes=limiter.callWithTimeout(new Callable<byte[]>(){
      @Override public byte[] call() throws Exception {
        final DataInputStream inStream=new DataInputStream(socket.getInputStream());
        final int inputLength=inStream.readUnsignedShort();
        byte[] inBytes=new byte[inputLength];
        inStream.readFully(inBytes);
        return inBytes;
      }
    }
,timeout_seconds,TimeUnit.SECONDS,false);
    byte[] response=null;
    try {
      final Message query=new Message(inBytes);
      ConnectionHandler.setLocalAndRemoteInetAddresses(socket.getLocalAddress(),socket.getInetAddress());
      try {
        response=generateReply(query,inBytes,inBytes.length,socket);
      }
 catch (      RuntimeException ex) {
        response=errorMessage(query,Rcode.SERVFAIL);
        throw ex;
      }
 finally {
        ConnectionHandler.clearInetAddresses();
      }
      if (response == null)       return;
    }
 catch (    IOException exception) {
      LOG.error(exception);
    }
    final DataOutputStream outStream=new DataOutputStream(socket.getOutputStream());
    outStream.writeShort(response.length);
    outStream.write(response);
    outStream.flush();
  }
 catch (  UncheckedTimeoutException e) {
    LOG.debug("Timeout reading request.");
  }
catch (  Exception ex) {
    LOG.error(ex);
  }
}
