{
  try {
    if (!super.enable())     return false;
    if (USE_AWS_SWF) {
      System.setProperty("com.amazonaws.sdk.disableCertChecking","true");
      BasicAWSCredentials creds=new BasicAWSCredentials(AWS_ACCESS_KEY,AWS_SECRET_KEY);
      if (creds == null) {
        throw new Exception("Unable to get credentials for cloudformation user");
      }
      simpleWorkflowClient=new AmazonSimpleWorkflowClient(creds);
      simpleWorkflowClient.setRegion(Region.getRegion(Regions.US_EAST_1));
    }
 else {
      simpleWorkflowClient=new AmazonSimpleWorkflowClient(new CloudFormationAWSCredentialsProvider());
      simpleWorkflowClient.setEndpoint(ServiceUris.remote(Topology.lookup(SimpleWorkflow.class)).toString());
    }
    try {
      simpleWorkflowClient.registerDomain(new RegisterDomainRequest().withName(SWF_DOMAIN).withWorkflowExecutionRetentionPeriodInDays("1"));
    }
 catch (    DomainAlreadyExistsException ex) {
      LOG.debug("SWF domain " + SWF_DOMAIN + " already exists");
    }
    stackWorkflowWorker=new WorkflowWorker(simpleWorkflowClient,SWF_DOMAIN,SWF_TASKLIST);
    stackWorkflowWorker.addWorkflowImplementationType(CreateStackWorkflowImpl.class);
    stackWorkflowWorker.addWorkflowImplementationType(MonitorCreateStackWorkflowImpl.class);
    stackWorkflowWorker.addWorkflowImplementationType(DeleteStackWorkflowImpl.class);
    stackWorkflowWorker.start();
    stackActivityWorker=new ActivityWorker(simpleWorkflowClient,SWF_DOMAIN,SWF_TASKLIST);
    stackActivityWorker.addActivitiesImplementation(new StackActivityImpl());
    stackActivityWorker.start();
    return true;
  }
 catch (  Exception ex) {
    LOG.error("Unable to enable CloudFormation Bootstrapper",ex);
    return false;
  }
}
