{
  Signature sig;
  boolean valid=false;
  String data=credentials.getLoginData();
  String signature=credentials.getSignature();
  boolean found=false;
  X509Certificate signingCert=null;
  try {
    String scFingerprint=SystemCredentials.lookup(Storage.class).getCertFingerprint();
    if (scFingerprint.equals(credentials.getCertMD5Fingerprint())) {
      found=true;
      signingCert=SystemCredentials.lookup(Storage.class).getCertificate();
    }
 else {
      for (      Partition part : Partitions.list()) {
        if (X509CertHelper.calcFingerprint(part.getCertificate()).equals(credentials.getCertMD5Fingerprint())) {
          signingCert=part.getCertificate();
          found=true;
          break;
        }
 else         if (X509CertHelper.calcFingerprint(part.getNodeCertificate()).equals(credentials.getCertMD5Fingerprint())) {
          signingCert=part.getNodeCertificate();
          found=true;
          break;
        }
      }
    }
    if (!found) {
      throw new AuthenticationException("Invalid certificate");
    }
    if (signingCert != null) {
      PublicKey publicKey=signingCert.getPublicKey();
      sig=Signature.getInstance("SHA256withRSA");
      sig.initVerify(publicKey);
      sig.update(data.getBytes());
      valid=sig.verify(Base64.decode(signature));
    }
  }
 catch (  Exception e2) {
    LOG.error("Authentication error: " + e2.getMessage());
    return false;
  }
  if (valid) {
    try {
      User user;
      String queryId=credentials.getQueryId();
      if (queryId != null) {
        user=Accounts.lookupUserByAccessKeyId(queryId);
      }
 else {
        user=Accounts.lookupSystemAdmin();
      }
      super.setCredential(queryId);
      super.setPrincipal(user);
      return true;
    }
 catch (    AuthException e) {
      LOG.error(e);
      return false;
    }
  }
  return false;
}
