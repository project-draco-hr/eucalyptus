{
  CompleteMultipartUploadResponseType reply=(CompleteMultipartUploadResponseType)request.getReply();
  String bucketName=request.getBucket();
  String objectKey=request.getKey();
  String uploadId=request.getUploadId();
  List<Part> requestParts=request.getParts();
  try {
    Transactions.find(new BucketInfo(bucketName));
  }
 catch (  NoSuchElementException e) {
    throw new NoSuchBucketException(bucketName);
  }
catch (  Exception e) {
    LOG.error("Failed to look up metadata for bucket=" + bucketName,e);
    throw new InternalErrorException("Failed to lookup bucket " + bucketName,e);
  }
  if (requestParts == null || requestParts.isEmpty()) {
    throw new InvalidArgumentException("List of parts cannot be emtpy");
  }
  PartInfo manifest=null;
  List<PartInfo> foundParts=null;
  long size=0;
  Date lastModified=null;
  String eTag=new String();
  String eTagString=new String();
  String prevObjectName=null;
  try (TransactionResource tr=Entities.transactionFor(PartInfo.class)){
    PartInfo search=new PartInfo(bucketName,objectKey,uploadId);
    Criteria manifestCriteria=Entities.createCriteria(PartInfo.class);
    manifestCriteria.add(Example.create(search));
    manifestCriteria.add(Restrictions.isNull("partNumber"));
    manifestCriteria.add(Restrictions.isNull("cleanup"));
    List<PartInfo> foundManifests=manifestCriteria.list();
    if (foundManifests == null || foundManifests.size() != 1) {
      if (foundManifests == null) {
        throw new InternalErrorException("Got invalid metadata");
      }
 else       if (foundManifests.size() < 1) {
        throw new NoSuchUploadException("Multipart upload ID is invalid");
      }
 else {
        throw new InternalErrorException("Multiple manifests found for same uploadId");
      }
    }
 else {
      manifest=foundManifests.get(0);
      if (manifest.getMetaData() != null) {
        manifest.getMetaData().size();
      }
    }
    Criteria partCriteria=Entities.createCriteria(PartInfo.class);
    partCriteria.add(Example.create(search));
    partCriteria.add(Restrictions.isNotNull("partNumber"));
    foundParts=partCriteria.list();
    if (foundParts == null || foundParts.isEmpty()) {
      throw new InvalidPartException("No parts uploaded for upload-Id=" + request.getUploadId());
    }
 else {
    }
    if (requestParts.size() > foundParts.size()) {
      throw new InvalidArgumentException("Number of parts in the manifest is greater than the number of parts uploaded. Upload Id: " + request.getUploadId());
    }
    Map<Integer,PartInfo> partsMap=new HashMap<Integer,PartInfo>(foundParts.size());
    for (    PartInfo foundPart : foundParts) {
      partsMap.put(foundPart.getPartNumber(),foundPart);
    }
    PartInfo include=null;
    for (    Part requestPart : requestParts) {
      if ((include=partsMap.remove(requestPart.getPartNumber())) != null) {
        eTagString+=include.getEtag();
        size+=include.getSize();
        include.setCleanup(Boolean.FALSE);
      }
 else {
        throw new InvalidPartException("Part Number: " + requestPart.getPartNumber() + " upload id: "+ request.getUploadId());
      }
    }
    manifest.setCleanup(Boolean.FALSE);
    for (    PartInfo excluded : partsMap.values()) {
      excluded.setCleanup(Boolean.TRUE);
    }
    tr.commit();
  }
 catch (  WalrusException e) {
    throw e;
  }
catch (  Exception e) {
    LOG.error("Failed to process part metadata for upload-id=" + uploadId + ", object-key="+ objectKey+ ", bucket="+ bucketName,e);
    throw new InternalErrorException("Failed to process part metadata for upload-id=" + uploadId + ", object-key="+ objectKey+ ", bucket="+ bucketName,e);
  }
  MessageDigest digest=Digest.MD5.get();
  digest.update(eTagString.getBytes());
  eTag="uuid-" + Hashes.bytesToHex(digest.digest());
  lastModified=new Date();
  try (TransactionResource tr=Entities.transactionFor(ObjectInfo.class)){
    ObjectInfo objectInfo=null;
    try {
      objectInfo=Entities.uniqueResult(new ObjectInfo(bucketName,objectKey));
      prevObjectName=objectInfo.getObjectName();
    }
 catch (    NoSuchElementException e) {
      objectInfo=Entities.persist(new ObjectInfo(bucketName,objectKey));
    }
    objectInfo.setUploadId(uploadId);
    objectInfo.setEtag(eTag);
    objectInfo.setSize(size);
    objectInfo.setLastModified(lastModified);
    objectInfo.setStorageClass(manifest.getStorageClass());
    objectInfo.setContentDisposition(manifest.getContentDisposition());
    objectInfo.setContentType(manifest.getContentType());
    objectInfo.setMetaData(manifest.cloneMetaData());
    objectInfo.setObjectName(null);
    tr.commit();
  }
 catch (  Exception e) {
    LOG.error("Failed to process metadata for upload-id=" + uploadId + ", object-key="+ objectKey+ ", bucket="+ bucketName,e);
    throw new InternalErrorException("Failed to process metadata for upload-id=" + uploadId + ", object-key="+ objectKey+ ", bucket="+ bucketName,e);
  }
  firePartsCleanupTask(bucketName,objectKey,uploadId);
  if (prevObjectName != null) {
    ObjectDeleter objectDeleter=new ObjectDeleter(bucketName,prevObjectName,null,null);
    Threads.lookup(WalrusBackend.class,WalrusFSManager.ObjectDeleter.class).limitTo(10).submit(objectDeleter);
  }
  reply.setEtag(eTag);
  reply.setLastModified(lastModified);
  reply.setLocation("WalrusBackend" + bucketName + "/"+ objectKey);
  reply.setBucket(bucketName);
  reply.setKey(objectKey);
  reply.setVersionId(WalrusProperties.NULL_VERSION_ID);
  return reply;
}
