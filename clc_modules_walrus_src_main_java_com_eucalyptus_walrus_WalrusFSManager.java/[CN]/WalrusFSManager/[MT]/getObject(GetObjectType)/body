{
  GetObjectResponseType reply=(GetObjectResponseType)request.getReply();
  reply.setHasStreamingData(false);
  String bucketName=request.getBucket();
  String objectKey=request.getKey();
  Boolean deleteAfterGet=request.getDeleteAfterGet();
  if (deleteAfterGet == null) {
    deleteAfterGet=false;
  }
  Boolean getMetaData=request.getGetMetaData();
  if (getMetaData == null) {
    getMetaData=false;
  }
  Boolean getData=request.getGetData();
  if (getData == null) {
    getData=false;
  }
  try {
    Transactions.find(new BucketInfo(bucketName));
  }
 catch (  NoSuchElementException e) {
    if (getData) {
      throw new NoSuchBucketException(bucketName);
    }
 else {
      throw new HeadNoSuchBucketException(bucketName);
    }
  }
catch (  Exception e) {
    LOG.error("Failed to look up metadata for bucket=" + bucketName,e);
    throw new InternalErrorException("Failed to lookup bucket " + bucketName,e);
  }
  ObjectInfo objectInfo=null;
  try (TransactionResource tr=Entities.transactionFor(ObjectInfo.class)){
    objectInfo=Entities.uniqueResult(new ObjectInfo(bucketName,objectKey));
    if (objectInfo.getMetaData() != null) {
      objectInfo.getMetaData().size();
    }
    tr.commit();
  }
 catch (  NoSuchElementException e) {
    if (getData) {
      throw new NoSuchEntityException(objectKey);
    }
 else {
      throw new HeadNoSuchEntityException(objectKey);
    }
  }
catch (  Exception e) {
    LOG.error("Failed to look up metadata for object-key=" + objectKey + ", bucket="+ bucketName,e);
    throw new InternalErrorException("Failed to look up metadata for object-key=" + objectKey + ", bucket="+ bucketName,e);
  }
  try {
    String objectName=objectInfo.getObjectName();
    Date lastModified=objectInfo.getLastModified();
    Long size=objectInfo.getSize();
    String etag=objectInfo.getEtag();
    String contentType=objectInfo.getContentType();
    String contentDisposition=objectInfo.getContentDisposition();
    if (getMetaData && objectInfo.getMetaData() != null) {
      ArrayList<MetaDataEntry> metaData=new ArrayList<MetaDataEntry>();
      for (      MetaDataInfo metaDataInfo : objectInfo.getMetaData()) {
        metaData.add(new MetaDataEntry(metaDataInfo.getName(),metaDataInfo.getValue()));
      }
      reply.setMetaData(metaData);
    }
    if (request.getGetData()) {
      if (objectInfo.isMultipart()) {
        String inlineData=getMultipartData(objectInfo,request,reply);
        if (inlineData != null) {
          reply.setBase64Data(inlineData);
        }
      }
 else {
        if (request.getInlineData()) {
          if ((size * 4) > WalrusProperties.MAX_INLINE_DATA_SIZE) {
            throw new InlineDataTooLargeException(bucketName + "/" + objectKey);
          }
          byte[] bytes=new byte[102400];
          int bytesRead=0, offset=0;
          String base64Data="";
          try {
            FileIO fileIO=storageManager.prepareForRead(bucketName,objectName);
            while ((bytesRead=fileIO.read(offset)) > 0) {
              ByteBuffer buffer=fileIO.getBuffer();
              if (buffer != null) {
                buffer.get(bytes,0,bytesRead);
                base64Data+=new String(bytes,0,bytesRead);
                offset+=bytesRead;
              }
            }
            fileIO.finish();
          }
 catch (          Exception e) {
            LOG.error(e,e);
            throw new InternalErrorException(e);
          }
          reply.setBase64Data(Hashes.base64encode(base64Data));
        }
 else {
          reply.setHasStreamingData(true);
          storageManager.getObject(bucketName,objectName,reply,size,request.getIsCompressed());
        }
      }
    }
 else {
    }
    reply.setEtag(etag);
    reply.setLastModified(lastModified);
    reply.setVersionId(WalrusProperties.NULL_VERSION_ID);
    reply.setSize(size);
    reply.setContentType(contentType);
    reply.setContentDisposition(contentDisposition);
    Status status=new Status();
    status.setCode(200);
    status.setDescription("OK");
    reply.setStatus(status);
    return reply;
  }
 catch (  WalrusException e) {
    throw e;
  }
catch (  Exception e) {
    LOG.error("Failed to perform get operation for object-key=" + objectKey + ", bucket="+ bucketName,e);
    throw new InternalErrorException("Failed to perform get operation for object-key=" + objectKey + ", bucket="+ bucketName,e);
  }
}
