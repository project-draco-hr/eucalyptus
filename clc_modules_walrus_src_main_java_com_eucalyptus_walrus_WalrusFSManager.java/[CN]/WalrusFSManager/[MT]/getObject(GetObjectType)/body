{
  GetObjectResponseType reply=(GetObjectResponseType)request.getReply();
  reply.setHasStreamingData(false);
  String bucketName=request.getBucket();
  String objectKey=request.getKey();
  Context ctx=Contexts.lookup();
  Account account=ctx.getAccount();
  Boolean deleteAfterGet=request.getDeleteAfterGet();
  if (deleteAfterGet == null) {
    deleteAfterGet=false;
  }
  Boolean getTorrent=request.getGetTorrent();
  if (getTorrent == null) {
    getTorrent=false;
  }
  Boolean getMetaData=request.getGetMetaData();
  if (getMetaData == null) {
    getMetaData=false;
  }
  Boolean getData=request.getGetData();
  if (getData == null) {
    getData=false;
  }
  EntityWrapper<BucketInfo> db=EntityWrapper.get(BucketInfo.class);
  BucketInfo bucketInfo=new BucketInfo(bucketName);
  List<BucketInfo> bucketList=db.queryEscape(bucketInfo);
  if (bucketList.size() > 0) {
    BucketInfo bucket=bucketList.get(0);
    BucketLogData logData=bucket.getLoggingEnabled() ? request.getLogData() : null;
    boolean versioning=false;
    if (bucket.isVersioningEnabled()) {
      versioning=true;
    }
    EntityWrapper<ObjectInfo> dbObject=db.recast(ObjectInfo.class);
    ObjectInfo searchObjectInfo=new ObjectInfo(bucketName,objectKey);
    searchObjectInfo.setVersionId(request.getVersionId());
    searchObjectInfo.setDeleted(false);
    if (request.getVersionId() == null) {
      searchObjectInfo.setLast(true);
    }
    List<ObjectInfo> objectInfos=dbObject.queryEscape(searchObjectInfo);
    if (objectInfos.size() > 0) {
      ObjectInfo objectInfo=objectInfos.get(0);
      if (ctx.hasAdministrativePrivileges() || (objectInfo.canRead(account.getAccountNumber()) && (objectInfo.isGlobalRead() || Lookups.checkPrivilege(PolicySpec.S3_GETOBJECT,PolicySpec.VENDOR_S3,PolicySpec.S3_RESOURCE_OBJECT,PolicySpec.objectFullName(bucketName,objectKey),null)))) {
        String objectName=objectInfo.getObjectName();
        DefaultHttpResponse httpResponse=new DefaultHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.OK);
        if (getMetaData) {
          List<MetaDataInfo> metaDataInfos=objectInfo.getMetaData();
          for (          MetaDataInfo metaDataInfo : metaDataInfos) {
            httpResponse.addHeader(WalrusProperties.AMZ_META_HEADER_PREFIX + metaDataInfo.getName(),metaDataInfo.getValue());
          }
        }
        if (getTorrent) {
          if (objectInfo.isGlobalRead()) {
            if (!WalrusProperties.enableTorrents) {
              LOG.warn("Bittorrent support has been disabled. Please check pre-requisites");
              throw new EucalyptusCloudException("Torrents disabled");
            }
            EntityWrapper<TorrentInfo> dbTorrent=EntityWrapper.get(TorrentInfo.class);
            TorrentInfo torrentInfo=new TorrentInfo(bucketName,objectKey);
            TorrentInfo foundTorrentInfo;
            String absoluteObjectPath=storageManager.getObjectPath(bucketName,objectName);
            try {
              foundTorrentInfo=dbTorrent.getUniqueEscape(torrentInfo);
            }
 catch (            EucalyptusCloudException ex) {
              String torrentFile=objectName + ".torrent";
              String torrentFilePath=storageManager.getObjectPath(bucketName,torrentFile);
              TorrentCreator torrentCreator=new TorrentCreator(absoluteObjectPath,objectKey,objectName,torrentFilePath,WalrusProperties.getTrackerUrl());
              try {
                torrentCreator.create();
              }
 catch (              Exception e) {
                LOG.error(e);
                throw new EucalyptusCloudException("could not create torrent file " + torrentFile);
              }
              torrentInfo.setTorrentFile(torrentFile);
              dbTorrent.add(torrentInfo);
              foundTorrentInfo=torrentInfo;
            }
            dbTorrent.commit();
            String torrentFile=foundTorrentInfo.getTorrentFile();
            String torrentFilePath=storageManager.getObjectPath(bucketName,torrentFile);
            TorrentClient torrentClient=new TorrentClient(torrentFilePath,absoluteObjectPath);
            Torrents.addClient(bucketName + objectKey,torrentClient);
            torrentClient.start();
            String key=bucketName + "." + objectKey;
            String randomKey=key + "." + Hashes.getRandom(10);
            request.setRandomKey(randomKey);
            File torrent=new File(torrentFilePath);
            if (torrent.exists()) {
              Date lastModified=objectInfo.getLastModified();
              db.commit();
              long torrentLength=torrent.length();
              if (logData != null) {
                updateLogData(bucket,logData);
                logData.setObjectSize(torrentLength);
              }
              storageManager.sendObject(request,httpResponse,bucketName,torrentFile,torrentLength,null,DateUtils.format(lastModified.getTime(),DateUtils.RFC822_DATETIME_PATTERN),"application/x-bittorrent","attachment; filename=" + objectKey + ".torrent;",request.getIsCompressed(),null,logData);
              return null;
            }
 else {
              db.rollback();
              String errorString="Could not get torrent file " + torrentFilePath;
              LOG.error(errorString);
              throw new EucalyptusCloudException(errorString);
            }
          }
 else {
            db.rollback();
            throw new AccessDeniedException("Key",objectKey,logData);
          }
        }
        Date lastModified=objectInfo.getLastModified();
        Long size=objectInfo.getSize();
        String etag=objectInfo.getEtag();
        String contentType=objectInfo.getContentType();
        String contentDisposition=objectInfo.getContentDisposition();
        db.commit();
        if (logData != null) {
          updateLogData(bucket,logData);
          logData.setObjectSize(size);
        }
        String versionId=null;
        if (versioning) {
          versionId=objectInfo.getVersionId();
        }
        if (request.getGetData()) {
          if (request.getInlineData()) {
            if ((size * 4) > WalrusProperties.MAX_INLINE_DATA_SIZE) {
              throw new InlineDataTooLargeException(bucketName + "/" + objectKey);
            }
            byte[] bytes=new byte[102400];
            int bytesRead=0, offset=0;
            String base64Data="";
            try {
              FileIO fileIO=storageManager.prepareForRead(bucketName,objectName);
              while ((bytesRead=fileIO.read(offset)) > 0) {
                ByteBuffer buffer=fileIO.getBuffer();
                if (buffer != null) {
                  buffer.get(bytes,0,bytesRead);
                  base64Data+=new String(bytes,0,bytesRead);
                  offset+=bytesRead;
                }
              }
              fileIO.finish();
            }
 catch (            Exception e) {
              LOG.error(e,e);
              throw new EucalyptusCloudException(e);
            }
            reply.setBase64Data(Hashes.base64encode(base64Data));
          }
 else {
            reply.setHasStreamingData(true);
            storageManager.sendObject(request,httpResponse,bucketName,objectName,size,etag,DateUtils.format(lastModified.getTime(),DateUtils.RFC822_DATETIME_PATTERN),contentType,contentDisposition,request.getIsCompressed(),versionId,logData);
            return null;
          }
        }
 else {
          storageManager.sendHeaders(request,httpResponse,size,etag,DateUtils.format(lastModified.getTime(),DateUtils.RFC822_DATETIME_PATTERN),contentType,contentDisposition,versionId,logData);
          return null;
        }
        reply.setEtag(etag);
        reply.setLastModified(DateUtils.format(lastModified,DateUtils.RFC822_DATETIME_PATTERN));
        reply.setSize(size);
        reply.setContentType(contentType);
        reply.setContentDisposition(contentDisposition);
        Status status=new Status();
        status.setCode(200);
        status.setDescription("OK");
        reply.setStatus(status);
        return reply;
      }
 else {
        db.rollback();
        if (getData) {
          throw new AccessDeniedException("Key",objectKey,logData);
        }
 else {
          throw new HeadAccessDeniedException("Key",objectKey,logData);
        }
      }
    }
 else {
      db.rollback();
      if (getData) {
        throw new NoSuchEntityException(objectKey);
      }
 else {
        throw new HeadNoSuchEntityException(objectKey);
      }
    }
  }
 else {
    db.rollback();
    if (getData) {
      throw new NoSuchBucketException(bucketName);
    }
 else {
      throw new HeadNoSuchBucketException(bucketName);
    }
  }
}
