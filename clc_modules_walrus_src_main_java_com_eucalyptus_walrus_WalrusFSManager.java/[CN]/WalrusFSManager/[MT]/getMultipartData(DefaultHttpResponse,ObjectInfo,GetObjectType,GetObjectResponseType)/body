{
  PartInfo searchPart=new PartInfo(request.getBucket(),request.getKey());
  searchPart.setCleanup(false);
  searchPart.setUploadId(objectInfo.getUploadId());
  List<PartInfo> parts;
  EntityTransaction db=Entities.get(PartInfo.class);
  try {
    Criteria partCriteria=Entities.createCriteria(PartInfo.class);
    partCriteria.setReadOnly(true);
    partCriteria.add(Example.create(searchPart));
    partCriteria.add(Restrictions.isNotNull("partNumber"));
    partCriteria.addOrder(Order.asc("partNumber"));
    parts=partCriteria.list();
    if (parts.size() == 0) {
      throw new InternalErrorException("No parts found corresponding to uploadId: " + objectInfo.getUploadId());
    }
  }
  finally {
    db.rollback();
  }
  if (request.getInlineData()) {
    if ((objectInfo.getSize() * 4) > WalrusProperties.MAX_INLINE_DATA_SIZE) {
      throw new InlineDataTooLargeException(request.getBucket() + "/" + request.getKey());
    }
    String base64Data="";
    for (    PartInfo part : parts) {
      byte[] bytes=new byte[102400];
      int bytesRead=0, offset=0;
      try {
        FileIO fileIO=storageManager.prepareForRead(part.getBucketName(),part.getObjectName());
        while ((bytesRead=fileIO.read(offset)) > 0) {
          ByteBuffer buffer=fileIO.getBuffer();
          if (buffer != null) {
            buffer.get(bytes,0,bytesRead);
            base64Data+=new String(bytes,0,bytesRead);
            offset+=bytesRead;
          }
        }
        fileIO.finish();
      }
 catch (      Exception e) {
        LOG.error(e,e);
        throw new InternalErrorException(e);
      }
    }
    return Hashes.base64encode(base64Data);
  }
 else {
    response.setHasStreamingData(true);
    storageManager.sendObject(request,httpResponse,parts,objectInfo.getSize(),objectInfo.getEtag(),DateFormatter.dateToHeaderFormattedString(objectInfo.getLastModified()),objectInfo.getContentType(),objectInfo.getContentDisposition(),request.getIsCompressed(),objectInfo.getVersionId());
    return null;
  }
}
