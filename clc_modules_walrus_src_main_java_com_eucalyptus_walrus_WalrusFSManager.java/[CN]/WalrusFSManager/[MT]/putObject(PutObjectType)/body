{
  PutObjectResponseType reply=(PutObjectResponseType)request.getReply();
  String bucketName=request.getBucket();
  String objectKey=request.getKey();
  try {
    Transactions.find(new BucketInfo(bucketName));
  }
 catch (  NoSuchElementException e) {
    throw new NoSuchBucketException(bucketName);
  }
catch (  Exception e) {
    LOG.error("Failed to look up metadata for bucket=" + bucketName,e);
    throw new InternalErrorException("Failed to lookup metadata for bucket=" + bucketName,e);
  }
  long size=0;
  Date lastModified=null;
  String md5=new String();
  String key=bucketName + "." + objectKey;
  String randomKey=request.getRandomKey();
  String prevObjectName=null;
  String tempObjectName=UUID.randomUUID().toString();
  String objectName=UUID.randomUUID().toString();
  WalrusDataMessenger messenger=WalrusRESTBinding.getWriteMessenger();
  WalrusDataQueue<WalrusDataMessage> putQueue=messenger.getQueue(key,randomKey);
  try {
    WalrusDataMessage dataMessage;
    MessageDigest digest=null;
    FileIO fileIO=null;
    while ((dataMessage=putQueue.poll(60L,TimeUnit.SECONDS)) != null) {
      if (putQueue.getInterrupted()) {
        if (WalrusDataMessage.isEOF(dataMessage)) {
          WalrusMonitor monitor=messenger.getMonitor(key);
          if (monitor.getLastModified() == null) {
            LOG.trace("Monitor wait: " + key + " random: "+ randomKey);
synchronized (monitor) {
              monitor.wait();
            }
          }
          LOG.trace("Monitor resume: " + key + " random: "+ randomKey);
          lastModified=monitor.getLastModified();
          md5=monitor.getMd5();
          if (fileIO != null) {
            fileIO.finish();
          }
          ObjectDeleter objectDeleter=new ObjectDeleter(bucketName,tempObjectName,null,null);
          Threads.lookup(WalrusBackend.class,WalrusFSManager.ObjectDeleter.class).limitTo(10).submit(objectDeleter);
          LOG.warn("Transfer interrupted: " + key);
          messenger.removeQueue(key,randomKey);
          break;
        }
        continue;
      }
      if (WalrusDataMessage.isStart(dataMessage)) {
        digest=Digest.MD5.get();
        try {
          fileIO=storageManager.prepareForWrite(bucketName,tempObjectName);
        }
 catch (        Exception ex) {
          messenger.removeQueue(key,randomKey);
          throw new AccessDeniedException(ex);
        }
      }
 else       if (WalrusDataMessage.isEOF(dataMessage)) {
        if (digest != null) {
          md5=Hashes.bytesToHex(digest.digest());
        }
 else {
          WalrusMonitor monitor=messenger.getMonitor(key);
          md5=monitor.getMd5();
          lastModified=monitor.getLastModified();
          if (md5 == null) {
            LOG.error("ETag did not match for: " + randomKey + " Computed MD5 is null");
            throw new ContentMismatchException(bucketName + "/" + objectKey);
          }
          break;
        }
        String contentMD5=request.getContentMD5();
        if (contentMD5 != null) {
          String contentMD5AsHex=Hashes.bytesToHex(Base64.decode(contentMD5));
          if (!contentMD5AsHex.equals(md5)) {
            if (fileIO != null) {
              fileIO.finish();
            }
            cleanupTempObject(bucketName,tempObjectName);
            messenger.removeQueue(key,randomKey);
            LOG.error("ETag did not match for: " + randomKey + " Expected: "+ contentMD5AsHex+ " Computed: "+ md5);
            throw new ContentMismatchException(bucketName + "/" + objectKey);
          }
        }
        try {
          if (fileIO != null) {
            fileIO.finish();
          }
          storageManager.renameObject(bucketName,tempObjectName,objectName);
        }
 catch (        IOException ex) {
          LOG.error("Failed to rename file " + tempObjectName + " to "+ objectName+ ". object-key="+ objectKey+ ", bucket="+ bucketName);
          messenger.removeQueue(key,randomKey);
          throw new AccessDeniedException(objectKey);
        }
        lastModified=new Date();
        try (TransactionResource tr=Entities.transactionFor(ObjectInfo.class)){
          ObjectInfo objectInfo=null;
          try {
            objectInfo=Entities.uniqueResult(new ObjectInfo(bucketName,objectKey));
            prevObjectName=objectInfo.getObjectName();
          }
 catch (          NoSuchElementException e) {
            objectInfo=Entities.persist(new ObjectInfo(bucketName,objectKey));
          }
          objectInfo.replaceMetaData(request.getMetaData());
          objectInfo.setEtag(md5);
          objectInfo.setSize(size);
          objectInfo.setLastModified(lastModified);
          objectInfo.setObjectName(objectName);
          objectInfo.setStorageClass("STANDARD");
          objectInfo.setContentType(request.getContentType());
          objectInfo.setContentDisposition(request.getContentDisposition());
          tr.commit();
        }
 catch (        Exception e) {
          LOG.error("Failed to update metadata for object-key=" + objectKey + ", bucket="+ bucketName,e);
          throw new InternalErrorException("Failed to update metadata for object-key=" + objectKey + ", bucket="+ bucketName,e);
        }
        if (prevObjectName != null) {
          ObjectDeleter objectDeleter=new ObjectDeleter(bucketName,prevObjectName,null,null);
          Threads.lookup(WalrusBackend.class,WalrusFSManager.ObjectDeleter.class).limitTo(10).submit(objectDeleter);
        }
        WalrusMonitor monitor=messenger.getMonitor(key);
synchronized (monitor) {
          monitor.setLastModified(lastModified);
          monitor.setMd5(md5);
          monitor.notifyAll();
        }
        messenger.clearQueues(key);
        messenger.removeQueue(key,randomKey);
        LOG.trace("Transfer complete: " + key);
        break;
      }
 else {
        assert(WalrusDataMessage.isData(dataMessage));
        byte[] data=dataMessage.getPayload();
        try {
          if (fileIO != null)           fileIO.write(data);
        }
 catch (        IOException ex) {
          LOG.error(ex);
        }
        size+=data.length;
        if (digest != null) {
          digest.update(data);
        }
      }
    }
    if (dataMessage == null) {
      messenger.removeQueue(key,randomKey);
      throw new InternalErrorException("Put timed out: " + key + "."+ randomKey);
    }
  }
 catch (  InterruptedException e) {
    LOG.error("Transfer interrupted: " + key + "."+ randomKey,e);
    throw new InternalErrorException("Transfer interrupted: " + key + "."+ randomKey);
  }
catch (  WalrusException e) {
    throw e;
  }
catch (  Exception e) {
    LOG.error("Failed to perform put object for object-key=" + objectKey + ", bucket="+ bucketName,e);
    throw new InternalErrorException("Failed to perform put object for object-key=" + objectKey + ", bucket="+ bucketName,e);
  }
 finally {
    cleanupTempObject(bucketName,tempObjectName);
    messenger.removeQueue(key,randomKey);
  }
  reply.setSize(size);
  reply.setEtag(md5);
  reply.setLastModified(lastModified);
  reply.setVersionId(WalrusProperties.NULL_VERSION_ID);
  return reply;
}
