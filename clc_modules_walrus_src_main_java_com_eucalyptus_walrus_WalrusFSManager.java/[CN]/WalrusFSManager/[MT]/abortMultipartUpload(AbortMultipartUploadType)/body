{
  AbortMultipartUploadResponseType reply=(AbortMultipartUploadResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  Account account=ctx.getAccount();
  String bucketName=request.getBucket();
  String objectKey=request.getKey();
  EntityWrapper<BucketInfo> db=EntityWrapper.get(BucketInfo.class);
  BucketInfo bucketInfo=new BucketInfo(bucketName);
  List<BucketInfo> bucketList=db.queryEscape(bucketInfo);
  if (bucketList.size() > 0) {
    BucketInfo bucket=bucketList.get(0);
    try {
      EntityWrapper<PartInfo> dbPart=db.recast(PartInfo.class);
      PartInfo searchManifest=new PartInfo(bucketName,objectKey);
      searchManifest.setUploadId(request.getUploadId());
      searchManifest.setCleanup(Boolean.FALSE);
      Criteria partCriteria=dbPart.createCriteria(PartInfo.class);
      partCriteria.add(Example.create(searchManifest));
      partCriteria.add(Restrictions.isNull("partNumber"));
      List<PartInfo> found=partCriteria.list();
      if (found.size() == 0) {
        db.rollback();
        throw new InternalErrorException("Multipart upload ID is invalid. Intitiate a multipart upload request before uploading the parts");
      }
      if (found.size() > 1) {
        db.rollback();
        throw new InternalErrorException("Multiple manifests found for same uploadId");
      }
      PartInfo foundManifest=found.get(0);
      if (foundManifest != null) {
        foundManifest.markForCleanup();
        PartInfo searchPart=new PartInfo(bucketName,objectKey);
        searchPart.setUploadId(request.getUploadId());
        List<PartInfo> foundParts=dbPart.queryEscape(searchPart);
        if (foundParts != null && foundParts.size() > 0) {
          for (          PartInfo part : foundParts) {
            part.markForCleanup();
          }
        }
 else {
          throw new InternalErrorException("No parts found for upload: " + request.getUploadId());
        }
        db.commit();
        firePartsCleanupTask(foundManifest.getBucketName(),foundManifest.getObjectKey(),request.getUploadId());
      }
 else {
        throw new InternalErrorException("Multipart upload ID is invalid.");
      }
    }
 catch (    Exception ex) {
      db.rollback();
      throw new InternalErrorException(ex);
    }
  }
 else {
    db.rollback();
    throw new NoSuchBucketException(bucketName);
  }
  return reply;
}
