{
  AbortMultipartUploadResponseType reply=(AbortMultipartUploadResponseType)request.getReply();
  String bucketName=request.getBucket();
  String objectKey=request.getKey();
  String uploadId=request.getUploadId();
  try {
    Transactions.find(new BucketInfo(bucketName));
  }
 catch (  NoSuchElementException e) {
    throw new NoSuchBucketException(bucketName);
  }
catch (  Exception e) {
    LOG.error("Failed to look up metadata for bucket=" + bucketName,e);
    throw new InternalErrorException("Failed to lookup bucket " + bucketName,e);
  }
  PartInfo manifest=null;
  List<PartInfo> foundParts=null;
  try (TransactionResource tr=Entities.transactionFor(PartInfo.class)){
    PartInfo search=new PartInfo(bucketName,objectKey,uploadId);
    Criteria manifestCriteria=Entities.createCriteria(PartInfo.class);
    manifestCriteria.add(Example.create(search));
    manifestCriteria.add(Restrictions.isNull("partNumber"));
    manifestCriteria.add(Restrictions.isNull("cleanup"));
    List<PartInfo> foundManifests=manifestCriteria.list();
    if (foundManifests == null || foundManifests.size() != 1) {
      if (foundManifests == null) {
        throw new InternalErrorException("Got invalid metadata");
      }
 else       if (foundManifests.size() < 1) {
        throw new NoSuchUploadException("Multipart upload ID is invalid");
      }
 else {
        throw new InternalErrorException("Multiple manifests found for same uploadId");
      }
    }
 else {
      manifest=foundManifests.get(0);
      if (manifest.getMetaData() != null) {
        manifest.getMetaData().size();
      }
    }
    Criteria partCriteria=Entities.createCriteria(PartInfo.class);
    partCriteria.add(Example.create(search));
    partCriteria.add(Restrictions.isNotNull("partNumber"));
    foundParts=partCriteria.list();
    if (foundParts != null && !foundParts.isEmpty()) {
      for (      PartInfo foundPart : foundParts) {
        foundPart.setCleanup(Boolean.TRUE);
      }
    }
 else {
    }
    manifest.setCleanup(Boolean.TRUE);
    tr.commit();
  }
 catch (  WalrusException e) {
    throw e;
  }
catch (  Exception e) {
    LOG.error("Failed to process part metadata for upload-id=" + uploadId + ", object-key="+ objectKey+ ", bucket="+ bucketName,e);
    throw new InternalErrorException("Failed to process part metadata for upload-id=" + uploadId + ", object-key="+ objectKey+ ", bucket="+ bucketName,e);
  }
  firePartsCleanupTask(bucketName,objectKey,uploadId);
  return reply;
}
