{
  ListBucketResponseType reply=(ListBucketResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  Account account=ctx.getAccount();
  String bucketName=request.getBucket();
  try {
    Transactions.find(new BucketInfo(bucketName));
  }
 catch (  NoSuchElementException e) {
    throw new NoSuchBucketException(bucketName);
  }
catch (  Exception e) {
    LOG.error("Failed to look up metadata for bucket=" + bucketName,e);
    throw new InternalErrorException("Failed to lookup bucket " + bucketName,e);
  }
  String prefix=request.getPrefix();
  String delimiter=request.getDelimiter();
  String marker=request.getMarker();
  int maxKeys=-1;
  reply.setName(bucketName);
  reply.setIsTruncated(false);
  reply.setPrefix(prefix);
  reply.setMarker(marker);
  reply.setDelimiter(delimiter);
  if (request.getMaxKeys() != null) {
    maxKeys=Integer.parseInt(request.getMaxKeys());
    if (maxKeys < 0) {
      throw new InvalidArgumentException("max-keys","Argument max-keys must be an integer between 0 and " + Integer.MAX_VALUE);
    }
 else     if (maxKeys == 0) {
      reply.setMaxKeys(maxKeys);
      reply.setContents(new ArrayList<ListEntry>());
      reply.setCommonPrefixesList(new ArrayList<CommonPrefixesEntry>());
      return reply;
    }
  }
 else {
    maxKeys=WalrusProperties.MAX_KEYS;
    reply.setMaxKeys(maxKeys);
  }
  try (TransactionResource tr=Entities.transactionFor(ObjectInfo.class)){
    final int queryStrideSize=maxKeys + 1;
    ObjectInfo searchObj=new ObjectInfo();
    searchObj.setBucketName(bucketName);
    Criteria objCriteria=Entities.createCriteria(ObjectInfo.class);
    objCriteria.add(Example.create(searchObj));
    objCriteria.addOrder(Order.asc("objectKey"));
    objCriteria.setMaxResults(queryStrideSize);
    objCriteria.setReadOnly(true);
    if (!Strings.isNullOrEmpty(marker)) {
      objCriteria.add(Restrictions.gt("objectKey",marker));
    }
 else {
      marker="";
    }
    if (!Strings.isNullOrEmpty(prefix)) {
      objCriteria.add(Restrictions.like("objectKey",prefix,MatchMode.START));
    }
 else {
      prefix="";
    }
    if (Strings.isNullOrEmpty(delimiter)) {
      delimiter="";
    }
    List<ObjectInfo> objectInfos=null;
    int resultKeyCount=0;
    ArrayList<ListEntry> contents=new ArrayList<ListEntry>();
    String nextMarker=null;
    TreeSet<String> commonPrefixes=new TreeSet<String>();
    int firstResult=-1;
    CanonicalUser owner=new CanonicalUser(account.getCanonicalId(),account.getName());
    do {
      objCriteria.setFirstResult(queryStrideSize * (++firstResult));
      objectInfos=(List<ObjectInfo>)objCriteria.list();
      if (objectInfos.size() > 0) {
        for (        ObjectInfo objectInfo : objectInfos) {
          String objectKey=objectInfo.getObjectKey();
          if (!Strings.isNullOrEmpty(delimiter)) {
            String[] parts=objectKey.substring(prefix.length()).split(delimiter,2);
            if (parts.length > 1) {
              String prefixString=prefix + parts[0] + delimiter;
              if (!StringUtils.equals(prefixString,marker) && !commonPrefixes.contains(prefixString)) {
                if (resultKeyCount == maxKeys) {
                  reply.setNextMarker(nextMarker);
                  reply.setIsTruncated(true);
                  resultKeyCount++;
                  break;
                }
                commonPrefixes.add(prefixString);
                resultKeyCount++;
                if (resultKeyCount == maxKeys) {
                  nextMarker=prefixString;
                }
              }
              continue;
            }
          }
          if (resultKeyCount == maxKeys) {
            reply.setNextMarker(nextMarker);
            reply.setIsTruncated(true);
            resultKeyCount++;
            break;
          }
          ListEntry listEntry=new ListEntry();
          listEntry.setKey(objectKey);
          listEntry.setEtag(objectInfo.getEtag());
          listEntry.setLastModified(DateFormatter.dateToListingFormattedString(objectInfo.getLastModified()));
          listEntry.setStorageClass(objectInfo.getStorageClass());
          listEntry.setSize(objectInfo.getSize());
          listEntry.setStorageClass(objectInfo.getStorageClass());
          listEntry.setOwner(owner);
          contents.add(listEntry);
          resultKeyCount++;
          if (resultKeyCount == maxKeys) {
            nextMarker=objectKey;
          }
        }
      }
      if (resultKeyCount <= maxKeys && objectInfos.size() <= maxKeys) {
        break;
      }
    }
 while (resultKeyCount <= maxKeys);
    tr.commit();
    reply.setContents(contents);
    if (!commonPrefixes.isEmpty()) {
      ArrayList<CommonPrefixesEntry> commonPrefixesList=new ArrayList<CommonPrefixesEntry>();
      for (      String prefixEntry : commonPrefixes) {
        commonPrefixesList.add(new CommonPrefixesEntry(prefixEntry));
      }
      reply.setCommonPrefixesList(commonPrefixesList);
    }
    return reply;
  }
 catch (  Exception e) {
    LOG.error("Failed to lookup metadata for objects in bucket=" + bucketName,e);
    throw new InternalErrorException("Failed to lookup metadata for objects in bucket=" + bucketName,e);
  }
}
