{
  CreateBucketResponseType reply=(CreateBucketResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  Account account=ctx.getAccount();
  String bucketName=request.getBucket();
  String locationConstraint=request.getLocationConstraint();
  if (account == null) {
    throw new AccessDeniedException("Bucket",bucketName);
  }
  AccessControlList accessControlList=request.getAccessControlList();
  if (accessControlList == null) {
    accessControlList=new AccessControlList();
  }
  if (!checkBucketName(bucketName))   throw new InvalidBucketNameException(bucketName);
  EntityWrapper<BucketInfo> db=EntityWrapper.get(BucketInfo.class);
  BucketInfo bucketInfo=new BucketInfo(bucketName);
  List<BucketInfo> bucketList=db.queryEscape(bucketInfo);
  if (bucketList.size() > 0) {
    if (bucketList.get(0).getOwnerId().equals(account.getAccountNumber())) {
      db.rollback();
    }
 else {
      db.rollback();
      throw new BucketAlreadyExistsException(bucketName);
    }
  }
 else {
    BucketInfo bucket=new BucketInfo(account.getAccountNumber(),ctx.getUser().getUserId(),bucketName,new Date());
    ArrayList<GrantInfo> grantInfos=new ArrayList<GrantInfo>();
    bucket.addGrants(account.getAccountNumber(),grantInfos,accessControlList);
    bucket.setGrants(grantInfos);
    bucket.setBucketSize(0L);
    bucket.setLoggingEnabled(false);
    bucket.setVersioning(WalrusProperties.VersioningStatus.Disabled.toString());
    bucket.setHidden(false);
    if (locationConstraint != null && locationConstraint.length() > 0) {
      bucket.setLocation(locationConstraint);
    }
 else {
      bucket.setLocation(null);
    }
    try {
      db.add(bucket);
      db.commit();
      storageManager.createBucket(bucketName);
    }
 catch (    IOException ex) {
      LOG.error(ex,ex);
      throw new BucketAlreadyExistsException(bucketName);
    }
catch (    Exception ex) {
      LOG.error(ex,ex);
      db.rollback();
      if (Exceptions.isCausedBy(ex,ConstraintViolationException.class)) {
        throw new BucketAlreadyExistsException(bucketName);
      }
 else {
        throw new InternalErrorException("Unable to create bucket: " + bucketName);
      }
    }
  }
  reply.setBucket(bucketName);
  return reply;
}
