{
  final String bucketName=request.getBucket();
  final String objectKey=request.getKey();
  try {
    Transactions.find(new BucketInfo(bucketName));
  }
 catch (  NoSuchElementException e) {
    throw new NoSuchBucketException(bucketName);
  }
catch (  Exception e) {
    LOG.error("Failed to look up metadata for bucket=" + bucketName,e);
    throw new InternalErrorException("Failed to lookup bucket " + bucketName,e);
  }
  Boolean deleted=Boolean.FALSE;
  try {
    Entities.asTransaction(ObjectInfo.class,new Function<Boolean,String>(){
      @Override public String apply(      Boolean arg0){
        try {
          ObjectInfo objectInfo=Entities.uniqueResult(new ObjectInfo(bucketName,objectKey));
          if (!arg0) {
            try {
              if (objectInfo.isMultipart()) {
                deleteParts(bucketName,objectKey,objectInfo.getUploadId(),false);
              }
 else {
                storageManager.deleteObject(bucketName,objectInfo.getObjectName());
              }
            }
 catch (            IOException e) {
              LOG.warn("Failed to delete object-file=" + objectInfo.getObjectName() + ", bucket="+ bucketName+ " on disk. Cause: "+ e.getMessage());
            }
            arg0=Boolean.TRUE;
          }
          Entities.delete(objectInfo);
        }
 catch (        NoSuchElementException e) {
          LOG.debug("Metadata for object-key=" + objectKey + ", bucket="+ bucketName+ " not found. Nothing to delete");
        }
catch (        Exception e) {
          Exceptions.toUndeclared(e);
        }
        return null;
      }
    }
).apply(deleted);
  }
 catch (  Exception e) {
    LOG.error("Failed to delete object-key=" + objectKey + ", bucket="+ bucketName,e);
    throw new InternalErrorException("Failed to delete object-key=" + objectKey + ", bucket="+ bucketName,e);
  }
}
