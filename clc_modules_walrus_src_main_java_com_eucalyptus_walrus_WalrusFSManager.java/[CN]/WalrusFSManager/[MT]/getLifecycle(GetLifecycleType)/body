{
  GetLifecycleResponseType response=request.getReply();
  String bucketName=request.getBucket();
  BucketInfo bucket=ensureBucketAccess(bucketName,PolicySpec.S3_GETLIFECYCLECONFIGURATION);
  LifecycleRuleInfo example=new LifecycleRuleInfo();
  example.setBucketName(bucketName);
  EntityTransaction tran=Entities.get(LifecycleRuleInfo.class);
  List<LifecycleRuleInfo> rules=new ArrayList<>();
  try {
    rules=Entities.query(example);
    tran.commit();
  }
 catch (  NoSuchElementException nse) {
    tran.commit();
  }
catch (  Exception ex) {
    tran.rollback();
    LOG.error("caught exception retrieving object lifecycle rules for bucket " + bucketName);
    throw new WalrusException("InternalServerError","exception caught retrieving object lifecycle rules for bucket " + bucketName,"Bucket",bucketName,HttpResponseStatus.INTERNAL_SERVER_ERROR);
  }
  List<LifecycleRule> responseRules=new ArrayList<>();
  if (rules != null && rules.size() > 0) {
    for (    LifecycleRuleInfo ruleEntity : rules) {
      LifecycleRule ruleResponse=convertLifecycleRuleInfo(ruleEntity);
      responseRules.add(ruleResponse);
    }
  }
 else {
    throw new NoSuchLifecycleConfigurationException(bucketName);
  }
  LifecycleConfigurationType lifecycle=new LifecycleConfigurationType();
  lifecycle.setRules(responseRules);
  response.setLifecycle(lifecycle);
  BucketLogData logData=bucket.getLoggingEnabled() ? request.getLogData() : null;
  if (logData != null) {
    updateLogData(bucket,logData);
    response.setLogData(logData);
  }
  return response;
}
