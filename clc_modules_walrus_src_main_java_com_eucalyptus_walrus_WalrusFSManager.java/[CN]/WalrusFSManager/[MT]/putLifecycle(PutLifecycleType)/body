{
  PutLifecycleResponseType response=request.getReply();
  String bucketName=request.getBucket();
  BucketInfo bucket=ensureBucketAccess(bucketName,PolicySpec.S3_PUTLIFECYCLECONFIGURATION);
  List<LifecycleRuleInfo> ruleInfos=new ArrayList<>();
  if (request.getLifecycle() != null && request.getLifecycle().getRules() != null) {
    if (request.getLifecycle().getRules().size() > 1000) {
      throw new WalrusException("MalformedXML","The XML you provided was not well-formed or did not validate against our published schema","Bucket",bucketName,HttpResponseStatus.BAD_REQUEST);
    }
    List<String> ruleIds=new ArrayList<>();
    String badId=null;
    for (    LifecycleRule rule : request.getLifecycle().getRules()) {
      for (      String ruleId : ruleIds) {
        if (rule != null && (rule.getID() == null || rule.getID().equals(ruleId))) {
          badId=rule.getID() == null ? "null" : rule.getID();
        }
 else {
          ruleIds.add(ruleId);
        }
        if (badId != null) {
          break;
        }
      }
      if (badId != null) {
        throw new WalrusException("InvalidArgument","RuleId must be unique. Found same ID for more than one rule.","Argument",badId,HttpResponseStatus.BAD_REQUEST);
      }
 else {
        ruleInfos.add(convertLifecycleRule(rule,bucketName));
      }
    }
  }
  if (bucket.isVersioningEnabled() || bucket.isVersioningSuspended()) {
    throw new WalrusException("InvalidBucketState","Lifecycle configuration is currently not supported on a versioned bucket.","Bucket",bucketName,HttpResponseStatus.CONFLICT);
  }
  EntityTransaction rulesTran=Entities.get(LifecycleRuleInfo.class);
  try {
    deleteLifecycleRules(bucketName);
    if (ruleInfos != null && ruleInfos.size() > 0) {
      for (      LifecycleRuleInfo ruleInfo : ruleInfos) {
        Entities.merge(ruleInfo);
      }
    }
    rulesTran.commit();
  }
 catch (  Exception ex) {
    if (rulesTran.isActive()) {
      rulesTran.rollback();
    }
    LOG.error("caught exception while managing object lifecycle for bucket - " + bucketName + ", with error - "+ ex.getMessage());
    throw new WalrusException("InternalServerError","An exception was caught while managing the object lifecycle for bucket - " + bucketName,"Bucket",bucketName,HttpResponseStatus.INTERNAL_SERVER_ERROR);
  }
  return response;
}
