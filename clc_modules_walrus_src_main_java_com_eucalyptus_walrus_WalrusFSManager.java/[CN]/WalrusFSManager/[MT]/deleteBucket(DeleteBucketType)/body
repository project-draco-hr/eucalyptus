{
  DeleteBucketResponseType reply=(DeleteBucketResponseType)request.getReply();
  String bucketName=request.getBucket();
  Context ctx=Contexts.lookup();
  Account account=ctx.getAccount();
  EntityWrapper<BucketInfo> db=EntityWrapper.get(BucketInfo.class);
  BucketInfo searchBucket=new BucketInfo(bucketName);
  List<BucketInfo> bucketList=db.queryEscape(searchBucket);
  if (bucketList.size() > 0) {
    BucketInfo bucketFound=bucketList.get(0);
    BucketLogData logData=bucketFound.getLoggingEnabled() ? request.getLogData() : null;
    EntityWrapper<ObjectInfo> dbObject=db.recast(ObjectInfo.class);
    ObjectInfo searchObject=new ObjectInfo();
    searchObject.setBucketName(bucketName);
    List<ObjectInfo> objectInfos=dbObject.queryEscape(searchObject);
    if (objectInfos.size() == 0) {
      EntityWrapper<ImageCacheInfo> dbIC=db.recast(ImageCacheInfo.class);
      ImageCacheInfo searchImageCacheInfo=new ImageCacheInfo();
      searchImageCacheInfo.setBucketName(bucketName);
      List<ImageCacheInfo> foundImageCacheInfos=dbIC.queryEscape(searchImageCacheInfo);
      if (foundImageCacheInfos.size() > 0) {
        db.rollback();
        throw new BucketNotEmptyException(bucketName,logData);
      }
      db.delete(bucketFound);
      try {
        storageManager.deleteBucket(bucketName);
      }
 catch (      Exception ex) {
        LOG.error(ex);
      }
      if (logData != null) {
        updateLogData(bucketFound,logData);
        reply.setLogData(logData);
      }
    }
 else {
      db.rollback();
      throw new BucketNotEmptyException(bucketName,logData);
    }
  }
 else {
    db.rollback();
    throw new NoSuchBucketException(bucketName);
  }
  reply.setStatus(HttpResponseStatus.NO_CONTENT);
  reply.setStatusMessage("NO CONTENT");
  db.commit();
  return reply;
}
