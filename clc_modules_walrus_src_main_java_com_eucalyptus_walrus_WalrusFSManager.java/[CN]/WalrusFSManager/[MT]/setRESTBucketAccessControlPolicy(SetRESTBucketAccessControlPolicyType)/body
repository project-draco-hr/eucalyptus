{
  SetRESTBucketAccessControlPolicyResponseType reply=(SetRESTBucketAccessControlPolicyResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  Account account=ctx.getAccount();
  AccessControlPolicy accessControlPolicy=request.getAccessControlPolicy();
  AccessControlList accessControlList=null;
  String bucketName=request.getBucket();
  if (accessControlPolicy == null) {
    throw new AccessDeniedException("Bucket",bucketName);
  }
 else {
    accessControlList=accessControlPolicy.getAccessControlList();
    fixCanonicalIds(accessControlList,true,bucketName);
  }
  EntityWrapper<BucketInfo> db=EntityWrapper.get(BucketInfo.class);
  BucketInfo bucketInfo=new BucketInfo(bucketName);
  List<BucketInfo> bucketList=db.queryEscape(bucketInfo);
  if (bucketList.size() > 0) {
    BucketInfo bucket=bucketList.get(0);
    BucketLogData logData=bucket.getLoggingEnabled() ? request.getLogData() : null;
    String invalidValue=this.findInvalidGrant(accessControlList.getGrants());
    if (invalidValue != null) {
      db.rollback();
      throw new WalrusException("InvalidArgument","Invalid canned-acl or grant list permission: " + invalidValue,"Bucket",bucket.getBucketName(),HttpResponseStatus.BAD_REQUEST);
    }
    List<GrantInfo> grantInfos=new ArrayList<GrantInfo>();
    bucket.resetGlobalGrants();
    bucket.addGrants(bucket.getOwnerId(),grantInfos,accessControlList);
    bucket.setGrants(grantInfos);
    reply.setCode("204");
    reply.setDescription("OK");
    if (logData != null) {
      updateLogData(bucket,logData);
      reply.setLogData(logData);
    }
  }
 else {
    db.rollback();
    throw new NoSuchBucketException(bucketName);
  }
  db.commit();
  return reply;
}
