{
  UploadPartResponseType reply=(UploadPartResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  Account account=ctx.getAccount();
  String bucketName=request.getBucket();
  String objectKey=request.getKey();
  String key=bucketName + "." + objectKey;
  String randomKey=request.getRandomKey();
  String uploadId=request.getUploadId();
  Integer partNumber=Integer.parseInt(request.getPartNumber());
  WalrusDataMessenger messenger=WalrusRESTBinding.getWriteMessenger();
  Date lastModified=null;
  String md5=new String();
  Long oldBucketSize=0L;
  EntityWrapper<BucketInfo> db=EntityWrapper.get(BucketInfo.class);
  BucketInfo bucketInfo=new BucketInfo(bucketName);
  List<BucketInfo> bucketList=db.queryEscape(bucketInfo);
  if (bucketList.size() > 0) {
    BucketInfo bucket=bucketList.get(0);
    BucketLogData logData=bucket.getLoggingEnabled() ? request.getLogData() : null;
    long objSize=0;
    try {
      objSize=Long.valueOf(request.getContentLength());
    }
 catch (    NumberFormatException e) {
      LOG.error("Invalid content length " + request.getContentLength());
      objSize=1L;
    }
    if (ctx.hasAdministrativePrivileges() || (bucket.canWrite(account.getAccountNumber()) && (bucket.isGlobalWrite() || Lookups.checkPrivilege(PolicySpec.S3_PUTOBJECT,PolicySpec.VENDOR_S3,PolicySpec.S3_RESOURCE_BUCKET,bucketName,null)))) {
      if (logData != null) {
        reply.setLogData(logData);
      }
      String objectName=null;
      String versionId=null;
      Long oldObjectSize=0L;
      ObjectInfo objectInfo=null;
      try {
        objectName=UUID.randomUUID().toString();
        ObjectInfo searchManifest=new ObjectInfo(bucketName,objectKey);
        searchManifest.setUploadId(uploadId);
        searchManifest.setManifest(Boolean.TRUE);
        searchManifest.setUploadComplete(Boolean.FALSE);
        searchManifest.setCleanup(Boolean.FALSE);
        EntityWrapper<ObjectInfo> dbObject=db.recast(ObjectInfo.class);
        ObjectInfo foundManifest=dbObject.uniqueResultEscape(searchManifest);
        if (foundManifest != null) {
          versionId=foundManifest.getVersionId();
          objectInfo=new ObjectInfo(bucketName,objectKey);
          objectInfo.setOwnerId(account.getAccountNumber());
          objectInfo.setObjectName(objectName);
          objectInfo.setUploadId(uploadId);
          objectInfo.setPartNumber(partNumber);
          objectInfo.setManifest(Boolean.FALSE);
          objectInfo.setUploadComplete(Boolean.FALSE);
          objectInfo.setCleanup(Boolean.FALSE);
          objectInfo.setVersionId(versionId);
          dbObject.add(objectInfo);
        }
 else {
          throw new EucalyptusCloudException("Multipart upload ID is invalid. Intitiate a multipart upload request before uploading the parts");
        }
        String bucketOwnerId=bucket.getOwnerId();
        dbObject.commit();
      }
 catch (      Exception ex) {
        throw new EucalyptusCloudException(ex);
      }
      WalrusDataQueue<WalrusDataMessage> putQueue=messenger.getQueue(key,randomKey);
      try {
        WalrusDataMessage dataMessage;
        String tempObjectName=objectName;
        MessageDigest digest=null;
        long size=0;
        FileIO fileIO=null;
        while ((dataMessage=putQueue.take()) != null) {
          if (putQueue.getInterrupted()) {
            if (WalrusDataMessage.isEOF(dataMessage)) {
              WalrusMonitor monitor=messenger.getMonitor(key);
              if (monitor.getLastModified() == null) {
                LOG.trace("Monitor wait: " + key + " random: "+ randomKey);
synchronized (monitor) {
                  monitor.wait();
                }
              }
              LOG.trace("Monitor resume: " + key + " random: "+ randomKey);
              lastModified=monitor.getLastModified();
              md5=monitor.getMd5();
              if (fileIO != null) {
                fileIO.finish();
              }
              ObjectDeleter objectDeleter=new ObjectDeleter(bucketName,tempObjectName,null,null,-1L,ctx.getUser().getName(),ctx.getUser().getUserId(),ctx.getAccount().getName(),ctx.getAccount().getAccountNumber());
              Threads.lookup(Walrus.class,WalrusFSManager.ObjectDeleter.class).limitTo(10).submit(objectDeleter);
              LOG.info("Transfer interrupted: " + key);
              messenger.removeQueue(key,randomKey);
              break;
            }
            continue;
          }
          if (WalrusDataMessage.isStart(dataMessage)) {
            tempObjectName=UUID.randomUUID().toString();
            digest=Digest.MD5.get();
            try {
              fileIO=storageManager.prepareForWrite(bucketName,tempObjectName);
            }
 catch (            Exception ex) {
              messenger.removeQueue(key,randomKey);
              throw new EucalyptusCloudException(ex);
            }
          }
 else           if (WalrusDataMessage.isEOF(dataMessage)) {
            if (digest != null) {
              md5=Hashes.bytesToHex(digest.digest());
            }
 else {
              WalrusMonitor monitor=messenger.getMonitor(key);
              md5=monitor.getMd5();
              lastModified=monitor.getLastModified();
              if (md5 == null) {
                LOG.error("ETag did not match for: " + randomKey + " Computed MD5 is null");
                throw new ContentMismatchException(bucketName + "/" + objectKey);
              }
              break;
            }
            String contentMD5=request.getContentMD5();
            if (contentMD5 != null) {
              String contentMD5AsHex=Hashes.bytesToHex(Base64.decode(contentMD5));
              if (!contentMD5AsHex.equals(md5)) {
                if (fileIO != null) {
                  fileIO.finish();
                }
                cleanupTempObject(ctx,bucketName,tempObjectName);
                messenger.removeQueue(key,randomKey);
                LOG.error("ETag did not match for: " + randomKey + " Expected: "+ contentMD5AsHex+ " Computed: "+ md5);
                throw new ContentMismatchException(bucketName + "/" + objectKey);
              }
            }
            if (!ctx.hasAdministrativePrivileges() && !Permissions.canAllocate(PolicySpec.VENDOR_S3,PolicySpec.S3_RESOURCE_OBJECT,bucketName,PolicySpec.S3_PUTOBJECT,ctx.getUser(),oldBucketSize + size)) {
              cleanupTempObject(ctx,bucketName,tempObjectName);
              messenger.removeQueue(key,randomKey);
              LOG.error("Quota exceeded for Walrus putObject");
              throw new EntityTooLargeException("Key",objectKey);
            }
            boolean success=false;
            int retryCount=0;
            do {
              try {
                incrementBucketSize(bucketName,objectKey,oldBucketSize,size);
                success=true;
              }
 catch (              EntityTooLargeException ex) {
                cleanupTempObject(ctx,bucketName,tempObjectName);
                messenger.removeQueue(key,randomKey);
                throw ex;
              }
catch (              NoSuchBucketException ex) {
                cleanupTempObject(ctx,bucketName,tempObjectName);
                messenger.removeQueue(key,randomKey);
                throw ex;
              }
catch (              RollbackException ex) {
                retryCount++;
                LOG.trace("retrying update: " + bucketName);
              }
catch (              EucalyptusCloudException ex) {
                cleanupTempObject(ctx,bucketName,tempObjectName);
                messenger.removeQueue(key,randomKey);
                throw ex;
              }
            }
 while (!success && (retryCount < 5));
            try {
              if (fileIO != null) {
                fileIO.finish();
              }
              storageManager.renameObject(bucketName,tempObjectName,objectName);
            }
 catch (            IOException ex) {
              LOG.error(ex);
              messenger.removeQueue(key,randomKey);
              throw new EucalyptusCloudException(objectKey);
            }
            lastModified=new Date();
            ObjectInfo searchObject=new ObjectInfo(bucketName,objectKey);
            searchObject.setVersionId(versionId);
            searchObject.setPartNumber(partNumber);
            searchObject.setUploadId(uploadId);
            EntityWrapper<ObjectInfo> dbObject=EntityWrapper.get(ObjectInfo.class);
            ObjectInfo foundObject;
            try {
              foundObject=dbObject.getUniqueEscape(searchObject);
              if (ctx.hasAdministrativePrivileges() || foundObject.canWriteACP(account.getAccountNumber())) {
                List<GrantInfo> grantInfos=new ArrayList<GrantInfo>();
                foundObject.setGrants(grantInfos);
              }
              if (WalrusProperties.enableTorrents) {
                EntityWrapper<TorrentInfo> dbTorrent=dbObject.recast(TorrentInfo.class);
                TorrentInfo torrentInfo=new TorrentInfo(bucketName,objectKey);
                List<TorrentInfo> torrentInfos=dbTorrent.queryEscape(torrentInfo);
                if (torrentInfos.size() > 0) {
                  TorrentInfo foundTorrentInfo=torrentInfos.get(0);
                  TorrentClient torrentClient=Torrents.getClient(bucketName + objectKey);
                  if (torrentClient != null) {
                    torrentClient.bye();
                  }
                  dbTorrent.delete(foundTorrentInfo);
                }
              }
 else {
                LOG.warn("Bittorrent support has been disabled. Please check pre-requisites");
              }
            }
 catch (            EucalyptusCloudException ex) {
              if (objectInfo != null) {
                foundObject=objectInfo;
              }
 else {
                dbObject.rollback();
                throw new EucalyptusCloudException("Unable to update object: " + bucketName + "/"+ objectKey);
              }
            }
            foundObject.setEtag(md5);
            foundObject.setSize(size);
            foundObject.setLastModified(lastModified);
            foundObject.setStorageClass("STANDARD");
            foundObject.setLast(true);
            foundObject.setDeleted(false);
            reply.setSize(size);
            if (logData != null) {
              logData.setObjectSize(size);
              updateLogData(bucket,logData);
            }
            if (objectInfo != null) {
              dbObject.add(foundObject);
            }
            success=false;
            try {
              dbObject.commit();
              success=true;
            }
 catch (            RollbackException ex) {
              dbObject.rollback();
              LOG.error(ex,ex);
            }
            dbObject=EntityWrapper.get(ObjectInfo.class);
            List<ObjectInfo> objectInfos=dbObject.queryEscape(searchObject);
            for (            ObjectInfo objInfo : objectInfos) {
              if (!success) {
                if (objInfo.getLast()) {
                  lastModified=objInfo.getLastModified();
                  md5=objInfo.getEtag();
                }
                success=true;
              }
              if (!versionId.equals(objInfo.getVersionId())) {
                objInfo.setLast(false);
              }
            }
            dbObject.commit();
            dbObject=EntityWrapper.get(ObjectInfo.class);
            ObjectInfo deleteMarker=new ObjectInfo(bucketName,objectKey);
            deleteMarker.setDeleted(true);
            deleteMarker.setUploadId(uploadId);
            deleteMarker.setPartNumber(partNumber);
            ObjectInfo foundDeleteMarker=null;
            try {
              foundDeleteMarker=dbObject.getUniqueEscape(deleteMarker);
              dbObject.delete(foundDeleteMarker);
            }
 catch (            Exception ex) {
              if (foundDeleteMarker != null) {
                LOG.error("Deletion of delete marker failed for: " + bucketName + "/"+ objectKey,ex);
              }
            }
            dbObject.commit();
            if (logData != null) {
              logData.setTurnAroundTime(Long.parseLong(new String(dataMessage.getPayload())));
            }
            WalrusMonitor monitor=messenger.getMonitor(key);
synchronized (monitor) {
              monitor.setLastModified(lastModified);
              monitor.setMd5(md5);
              monitor.notifyAll();
            }
            messenger.clearQueues(key);
            messenger.removeQueue(key,randomKey);
            LOG.info("Transfer complete: " + key);
            try {
              fireObjectCreationEvent(bucketName,objectKey,versionId,ctx.getUser().getUserId(),size,oldObjectSize);
            }
 catch (            Exception ex) {
              LOG.debug("Failed to fire reporting event for walrus PUT object operation",ex);
            }
            break;
          }
 else {
            assert(WalrusDataMessage.isData(dataMessage));
            byte[] data=dataMessage.getPayload();
            try {
              if (fileIO != null)               fileIO.write(data);
            }
 catch (            IOException ex) {
              LOG.error(ex);
            }
            size+=data.length;
            if (digest != null) {
              digest.update(data);
            }
          }
        }
      }
 catch (      Exception ex) {
        LOG.error(ex,ex);
        db.rollback();
        messenger.removeQueue(key,randomKey);
        throw new EucalyptusCloudException("Transfer interrupted: " + key + "."+ randomKey);
      }
    }
 else {
      db.rollback();
      messenger.removeQueue(key,randomKey);
      throw new AccessDeniedException("Bucket",bucketName,logData);
    }
  }
 else {
    db.rollback();
    messenger.removeQueue(key,randomKey);
    throw new NoSuchBucketException(bucketName);
  }
  reply.setEtag(md5);
  reply.setLastModified(DateUtils.format(lastModified.getTime(),DateUtils.RFC822_DATETIME_PATTERN));
  return reply;
}
