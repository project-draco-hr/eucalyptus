{
  DeleteObjectResponseType reply=(DeleteObjectResponseType)request.getReply();
  final String bucketName=request.getBucket();
  final String objectKey=request.getKey();
  try {
    Transactions.find(new BucketInfo(bucketName));
  }
 catch (  NoSuchElementException e) {
    throw new NoSuchBucketException(bucketName);
  }
catch (  Exception e) {
    LOG.error("Failed to look up metadata for bucket=" + bucketName,e);
    throw new InternalErrorException("Failed to lookup bucket " + bucketName,e);
  }
  Boolean taskAdded=Boolean.FALSE;
  try {
    Entities.asTransaction(ObjectInfo.class,new Function<Boolean,String>(){
      @Override public String apply(      Boolean arg0){
        try {
          ObjectInfo objectInfo=Entities.uniqueResult(new ObjectInfo(bucketName,objectKey));
          if (!arg0) {
            ObjectDeleter objectDeleter=new ObjectDeleter(bucketName,objectInfo.getObjectName(),objectKey,objectInfo.getUploadId());
            Threads.lookup(WalrusBackend.class,WalrusFSManager.ObjectDeleter.class).limitTo(10).submit(objectDeleter);
            arg0=Boolean.TRUE;
          }
          Entities.delete(objectInfo);
        }
 catch (        NoSuchElementException e) {
          LOG.debug("Metadata for object-key=" + objectKey + ", bucket="+ bucketName+ " not found. Nothing to delete");
        }
catch (        Exception e) {
          Exceptions.toUndeclared(e);
        }
        return null;
      }
    }
).apply(taskAdded);
  }
 catch (  Exception e) {
    LOG.error("Failed to delete object-key=" + objectKey + ", bucket="+ bucketName,e);
    throw new InternalErrorException("Failed to delete object-key=" + objectKey + ", bucket="+ bucketName,e);
  }
  reply.setStatus(HttpResponseStatus.NO_CONTENT);
  reply.setStatusMessage("NO CONTENT");
  return reply;
}
