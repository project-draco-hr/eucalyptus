{
  SetBucketVersioningStatusResponseType reply=(SetBucketVersioningStatusResponseType)request.getReply();
  String bucket=request.getBucket();
  Context ctx=Contexts.lookup();
  EntityWrapper<BucketInfo> db=EntityWrapper.get(BucketInfo.class);
  BucketInfo bucketInfo;
  try {
    bucketInfo=db.getUniqueEscape(new BucketInfo(bucket));
  }
 catch (  EucalyptusCloudException ex) {
    db.rollback();
    throw new NoSuchBucketException(bucket);
  }
  if (request.getVersioningStatus() != null) {
    String status=request.getVersioningStatus();
    if (WalrusProperties.VersioningStatus.Enabled.toString().equals(status))     bucketInfo.setVersioning(WalrusProperties.VersioningStatus.Enabled.toString());
 else     if (WalrusProperties.VersioningStatus.Suspended.toString().equals(status) && WalrusProperties.VersioningStatus.Enabled.toString().equals(bucketInfo.getVersioning()))     bucketInfo.setVersioning(WalrusProperties.VersioningStatus.Suspended.toString());
    try {
      deleteLifecycleRules(bucket);
    }
 catch (    Exception ex) {
      LOG.error("encountered an exception while attempting to remove lifecycle rules for bucket " + bucket + ", the lifecycle rules need removed because buckets cannot have lifecycle configuration and "+ "versioning at the same time, the exception message is "+ ex.getMessage());
    }
  }
  try {
    deleteLifecycleRules(bucket);
  }
 catch (  Exception ex) {
    LOG.error("encountered an exception while attempting to remove lifecycle rules for bucket " + bucket + ", the lifecycle rules need removed because buckets cannot have lifecycle configuration and "+ "versioning at the same time, the exception message is "+ ex.getMessage());
  }
  db.commit();
  return reply;
}
