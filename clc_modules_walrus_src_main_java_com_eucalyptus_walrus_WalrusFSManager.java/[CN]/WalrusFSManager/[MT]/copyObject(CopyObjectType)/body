{
  CopyObjectResponseType reply=(CopyObjectResponseType)request.getReply();
  String srcBucketName=request.getSourceBucket();
  String srcObjectKey=request.getSourceObject();
  String destBucketName=request.getDestinationBucket();
  String destObjectKey=request.getDestinationObject();
  String metadataDirective=request.getMetadataDirective();
  if (metadataDirective == null) {
    metadataDirective="COPY";
  }
  try {
    Transactions.find(new BucketInfo(srcBucketName));
  }
 catch (  NoSuchElementException e) {
    throw new NoSuchBucketException(srcBucketName);
  }
catch (  Exception e) {
    LOG.error("Failed to look up metadata for bucket=" + srcBucketName,e);
    throw new InternalErrorException("Failed to lookup bucket " + srcBucketName,e);
  }
  ObjectInfo srcObjectInfo=null;
  try (TransactionResource tr=Entities.transactionFor(ObjectInfo.class)){
    srcObjectInfo=Entities.uniqueResult(new ObjectInfo(srcBucketName,srcObjectKey));
    if (srcObjectInfo.getMetaData() != null) {
      srcObjectInfo.getMetaData().size();
    }
    tr.commit();
  }
 catch (  NoSuchElementException e) {
    throw new NoSuchEntityException(srcObjectKey);
  }
catch (  Exception e) {
    LOG.error("Failed to look up metadata for object-key=" + srcObjectKey + ", bucket="+ srcBucketName,e);
    throw new InternalErrorException("Failed to look up metadata for object-key=" + srcObjectKey + ", bucket="+ srcBucketName,e);
  }
  if (!StringUtils.equalsIgnoreCase(srcBucketName,destBucketName)) {
    try {
      Transactions.find(new BucketInfo(destBucketName));
    }
 catch (    NoSuchElementException e) {
      throw new NoSuchBucketException(destBucketName);
    }
catch (    Exception e) {
      LOG.error("Failed to look up metadata for bucket=" + destBucketName,e);
      throw new InternalErrorException("Failed to lookup bucket " + destBucketName,e);
    }
  }
  String prevDestObjectName=null;
  String destinationObjectName=UUID.randomUUID().toString();
  String etag=srcObjectInfo.getEtag();
  Date lastModified=null;
  try {
    if (srcObjectInfo.isMultipart()) {
      List<PartInfo> parts=getOrderedListOfParts(srcObjectInfo);
      storageManager.copyMultipartObject(parts,destBucketName,destinationObjectName);
    }
 else {
      storageManager.copyObject(srcBucketName,srcObjectInfo.getObjectName(),destBucketName,destinationObjectName);
    }
    lastModified=new Date();
    try (TransactionResource tr=Entities.transactionFor(ObjectInfo.class)){
      ObjectInfo destObjectInfo=null;
      try {
        destObjectInfo=Entities.uniqueResult(new ObjectInfo(destBucketName,destObjectKey));
        prevDestObjectName=destObjectInfo.getObjectName();
      }
 catch (      NoSuchElementException e) {
        destObjectInfo=Entities.persist(new ObjectInfo(destBucketName,destObjectKey));
      }
      destObjectInfo.setObjectName(destinationObjectName);
      destObjectInfo.setSize(srcObjectInfo.getSize());
      destObjectInfo.setStorageClass(srcObjectInfo.getStorageClass());
      destObjectInfo.setContentType(srcObjectInfo.getContentType());
      destObjectInfo.setContentDisposition(srcObjectInfo.getContentDisposition());
      destObjectInfo.setEtag(etag);
      destObjectInfo.setLastModified(lastModified);
      if (!metadataDirective.equals("REPLACE")) {
        destObjectInfo.setMetaData(srcObjectInfo.cloneMetaData());
      }
 else {
        destObjectInfo.replaceMetaData(request.getMetaData());
      }
      tr.commit();
    }
 catch (    Exception e) {
      LOG.error("Failed to update metadata for object-key=" + destObjectKey + ", bucket="+ destBucketName,e);
      throw new InternalErrorException("Failed to update metadata for object-key=" + destObjectKey + ", bucket="+ destBucketName,e);
    }
    if (prevDestObjectName != null) {
      ObjectDeleter objectDeleter=new ObjectDeleter(destBucketName,prevDestObjectName,null,null);
      Threads.lookup(WalrusBackend.class,WalrusFSManager.ObjectDeleter.class).limitTo(10).submit(objectDeleter);
    }
  }
 catch (  WalrusException e) {
    throw e;
  }
catch (  Exception e) {
    LOG.error("Failed to copy source-object-key=" + srcObjectKey + ", source-bucket="+ srcBucketName+ " to destination-object-key="+ destObjectKey+ ", destination-bucket="+ destBucketName);
    throw new InternalErrorException("Failed to copy source-object-key=" + srcObjectKey + ", source-bucket="+ srcBucketName+ " to destination-object-key="+ destObjectKey+ ", destination-bucket="+ destBucketName,e);
  }
  reply.setEtag(etag);
  reply.setLastModified(DateFormatter.dateToListingFormattedString(lastModified));
  reply.setCopySourceVersionId(WalrusProperties.NULL_VERSION_ID);
  reply.setVersionId(WalrusProperties.NULL_VERSION_ID);
  return reply;
}
