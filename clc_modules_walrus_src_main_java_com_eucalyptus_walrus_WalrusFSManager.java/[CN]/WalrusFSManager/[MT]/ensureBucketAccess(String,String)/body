{
  Context ctx=Contexts.lookup();
  Account account=ctx.getAccount();
  boolean isAdmin=ctx.hasAdministrativePrivileges();
  BucketInfo exampleBucket=new BucketInfo(bucketName);
  List<BucketInfo> infos=null;
  BucketInfo bucket=null;
  EntityTransaction bucketTran=Entities.get(BucketInfo.class);
  try {
    infos=Entities.query(exampleBucket);
    if (infos != null && infos.size() > 0) {
      bucket=infos.get(0);
    }
 else {
      bucketTran.commit();
      throw new NoSuchBucketException(bucketName);
    }
    bucketTran.commit();
  }
 catch (  Exception ex) {
    if (bucketTran.isActive()) {
      bucketTran.rollback();
    }
    if (ex instanceof AccessDeniedException) {
      throw (AccessDeniedException)ex;
    }
 else     if (ex instanceof NoSuchBucketException) {
      throw (NoSuchBucketException)ex;
    }
 else {
      LOG.error("caught exception retrieving object lifecycle rules for bucket " + bucketName + " message - "+ ex.getMessage());
      throw new WalrusException("InternalServerError","exception caught retrieving object lifecycle rules for bucket " + bucketName,"Bucket",bucketName,HttpResponseStatus.INTERNAL_SERVER_ERROR);
    }
  }
  return bucket;
}
