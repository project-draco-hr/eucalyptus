{
  final Account account=user.getAccount();
  final List<PolicyVersion> policies=Lists.newArrayList();
  if (user.isEnabled()) {
    if (user.isAccountAdmin()) {
      policies.add(PolicyVersions.getAdministratorPolicy());
    }
 else {
      Iterables.addAll(policies,Iterables.transform(user.getPolicies(),PolicyVersions.policyVersion(PolicyScope.User,Accounts.getUserArn(user))));
      for (      final Group group : Iterables.filter(user.getGroups(),Predicates.not(Accounts.isUserGroup()))) {
        Iterables.addAll(policies,Iterables.transform(group.getPolicies(),PolicyVersions.policyVersion(PolicyScope.Group,Accounts.getGroupArn(group))));
      }
    }
    EuareUser admin=null;
    try {
      admin=account.lookupAdmin();
    }
 catch (    AuthException e) {
    }
    if (admin != null) {
      Iterables.addAll(policies,Iterables.transform(admin.getPolicies(),PolicyVersions.policyVersion(PolicyScope.Account,user.getAccountNumber())));
    }
  }
  this.name=user.getName();
  this.path=user.getPath();
  this.userId=user.getUserId();
  this.authenticatedId=user.getUserId();
  this.canonicalId=account.getCanonicalId();
  this.token=user.getToken();
  this.accountAlias=account.getName();
  this.accountNumber=account.getAccountNumber();
  this.enabled=user.isEnabled();
  this.accountAdmin=user.isAccountAdmin();
  this.systemAdmin=user.isSystemAdmin();
  this.systemUser=user.isSystemUser();
  this.keys=ImmutableList.copyOf(Iterables.transform(user.getKeys(),keyWrapper(this)));
  this.certificates=ImmutableList.copyOf(Iterables.filter(user.getCertificates(),propertyPredicate(false,revoked())));
  this.principalPolicies=ImmutableList.copyOf(policies);
}
