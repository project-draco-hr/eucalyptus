{
  if (type == Type.AAAA)   return (SetResponse.ofType(SetResponse.SUCCESSFUL));
  final String nameString=name.toString();
  if (nameString.startsWith("autoscaling.")) {
    return buildResponseForComponent(name,type,listenerAddress,AutoScaling.class);
  }
 else   if (nameString.startsWith("cloudwatch.")) {
    return buildResponseForComponent(name,type,listenerAddress,CloudWatch.class);
  }
 else   if (nameString.startsWith("compute.") || nameString.startsWith("eucalyptus.")) {
    return buildResponseForComponent(name,type,listenerAddress,Compute.class);
  }
 else   if (nameString.startsWith("euare.")) {
    return buildResponseForComponent(name,type,listenerAddress,Euare.class);
  }
 else   if (nameString.startsWith("loadbalancing.")) {
    return buildResponseForComponent(name,type,listenerAddress,LoadBalancing.class);
  }
 else   if (nameString.startsWith("objectstorage.") || nameString.matches(".*\\.objectstorage\\..*") || nameString.startsWith("walrus.")|| nameString.matches(".*\\.walrus\\..*")) {
    SetResponse resp=new SetResponse(SetResponse.SUCCESSFUL);
    try {
      List<InetAddress> osgIps=ObjectStorageAddresses.getObjectStorageAddress();
      for (      InetAddress osgIp : osgIps) {
        resp.addRRset(new RRset(new ARecord(name,1,20,TopologyDnsResolver.maphost(listenerAddress,osgIp))));
      }
    }
 catch (    EucalyptusCloudException e) {
      LOG.error(e);
      return super.findRecords(name,type,listenerAddress);
    }
    return resp;
  }
 else   if (nameString.startsWith("tokens.")) {
    return buildResponseForComponent(name,type,listenerAddress,Tokens.class);
  }
 else {
    return super.findRecords(name,type,listenerAddress);
  }
}
