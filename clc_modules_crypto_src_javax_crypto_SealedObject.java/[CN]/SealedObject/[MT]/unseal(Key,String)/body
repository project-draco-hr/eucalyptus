{
  AlgorithmParameters params=null;
  if (this.encodedParams != null) {
    try {
      if (provider != null)       params=AlgorithmParameters.getInstance(this.paramsAlg,provider);
 else       params=AlgorithmParameters.getInstance(this.paramsAlg);
    }
 catch (    NoSuchProviderException nspe) {
      if (provider == null) {
        throw new NoSuchAlgorithmException(this.paramsAlg + " not found");
      }
 else {
        throw new NoSuchProviderException(nspe.getMessage());
      }
    }
    params.init(this.encodedParams);
  }
  Cipher c;
  try {
    if (provider != null)     c=Cipher.getInstance(this.sealAlg,provider);
 else     c=Cipher.getInstance(this.sealAlg);
  }
 catch (  NoSuchPaddingException nspe) {
    throw new NoSuchAlgorithmException("Padding that was used in " + "sealing operation not " + "available");
  }
catch (  NoSuchProviderException nspe) {
    if (provider == null) {
      throw new NoSuchAlgorithmException(this.sealAlg + " not found");
    }
 else {
      throw new NoSuchProviderException(nspe.getMessage());
    }
  }
  try {
    if (params != null)     c.init(Cipher.DECRYPT_MODE,key,params);
 else     c.init(Cipher.DECRYPT_MODE,key);
  }
 catch (  InvalidAlgorithmParameterException iape) {
    throw new RuntimeException(iape.getMessage());
  }
  byte[] content=c.doFinal(this.encryptedContent);
  ByteArrayInputStream b=new ByteArrayInputStream(content);
  ObjectInput a=new extObjectInputStream(b);
  try {
    Object obj=a.readObject();
    return obj;
  }
  finally {
    a.close();
  }
}
