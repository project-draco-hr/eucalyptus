{
  String bootstrapConfig=System.getProperty(Bootstrapper.BOOTSTRAP_CONFIG_PROPERTY);
  if (bootstrapConfig == null) {
    LOG.fatal("Bootstrap configuration property is undefined: " + Bootstrapper.BOOTSTRAP_CONFIG_PROPERTY);
    return false;
  }
  try {
    this.configs.add(new ConfigResource(bootstrapConfig));
  }
 catch (  Exception e) {
    LOG.fatal("Couldn't load bootstrap configuration file: " + bootstrapConfig,e);
    return false;
  }
  LOG.info("Eucalyptus component discovery [" + BaseDirectory.LIB.toString() + "]");
  File libDir=new File(BaseDirectory.LIB.toString());
  for (  File f : libDir.listFiles()) {
    if (f.getName().startsWith(EucalyptusProperties.NAME) && f.getName().endsWith(".jar")) {
      try {
        LOG.info("Found eucalyptus component jar: " + f.getName());
        ServiceJarFile jar=new ServiceJarFile(f);
        this.bootstrappers.addAll(jar.getBootstrappers(this.getClass()));
        this.configs.addAll(jar.getConfigResources());
      }
 catch (      IOException e) {
        LOG.fatal(e,e);
        SystemBootstrapper.shutdown(false);
        return false;
      }
    }
  }
  try {
    LOG.info("-> Configuring...");
    context=new DefaultMuleContextFactory().createMuleContext(new SpringXmlConfigurationBuilder(configs.toArray(new ConfigResource[]{})));
    for (    Bootstrapper b : this.bootstrappers) {
      LOG.info("-> Found bootsrapper " + b.getClass().getSimpleName() + ".load()Z");
    }
    for (    Bootstrapper b : this.bootstrappers) {
      LOG.info("-> Invoking bootsrapper " + b.getClass().getSimpleName() + ".load()Z");
      b.load();
    }
  }
 catch (  Exception e) {
    LOG.info(e,e);
  }
  return true;
}
