{
  LOG.info("Looking for Eucalyptus components in: " + BaseDirectory.LIB.toString());
  File libDir=new File(BaseDirectory.LIB.toString());
  for (  File f : libDir.listFiles()) {
    if (f.getName().startsWith(EucalyptusProperties.NAME)) {
      JarFile jar=new JarFile(f);
      LOG.info("Found eucalyptus component jar: " + f.getName());
      URLClassLoader classLoader=URLClassLoader.newInstance(new URL[]{f.getAbsoluteFile().toURL()});
      Enumeration<JarEntry> jarList=jar.entries();
      while (jarList.hasMoreElements()) {
        JarEntry j=jarList.nextElement();
        if (j.getName().endsWith(".class")) {
          String classGuess=j.getName().replaceAll("/",".").replaceAll(".class","");
          try {
            Class c=classLoader.loadClass(classGuess);
            if (Bootstrapper.class.isAssignableFrom(c) && !Bootstrapper.class.equals(c)) {
              try {
                Bootstrapper b=(Bootstrapper)c.newInstance();
                this.bootstrappers.add(b);
                LOG.info("-> Registered bootsrapper instance: " + c.getSimpleName());
              }
 catch (              Exception e) {
                LOG.info("-> Failed to create bootstrapper instance: " + c.getSimpleName(),e);
              }
            }
          }
 catch (          Exception e) {
            LOG.error("Error occurred while trying to process class: " + classGuess);
          }
        }
      }
      LOG.info("-> Loaded properties...");
      JarEntry entry=jar.getJarEntry(Bootstrapper.PROPERTIES);
      InputStream in=jar.getInputStream(entry);
      List<ConfigResource> conf=Lists.newArrayList();
      Properties props=new Properties();
      props.load(in);
      props.list(System.out);
      String servicesEntryPath=null;
      try {
        servicesEntryPath=props.getProperty(Bootstrapper.SERVICES_PROPERTY);
        JarEntry servicesEntry=jar.getJarEntry(Bootstrapper.BASEDIR + servicesEntryPath);
        ConfigResource servicesResource=new ConfigResource(servicesEntryPath,jar.getInputStream(servicesEntry));
        conf.add(servicesResource);
        LOG.info("-> Added configuration " + servicesEntryPath + "...");
      }
 catch (      Exception e) {
        if (servicesEntryPath != null) {
          LOG.info("-> Skipping " + servicesEntryPath + "...");
        }
      }
      String modelEntryPath=null;
      try {
        modelEntryPath=props.getProperty(Bootstrapper.MODEL_PROPERTY);
        JarEntry modelEntry=jar.getJarEntry(Bootstrapper.BASEDIR + modelEntryPath);
        ConfigResource modelResource=new ConfigResource(modelEntryPath,jar.getInputStream(modelEntry));
        conf.add(modelResource);
        LOG.info("-> Added configuration " + modelEntryPath + "...");
      }
 catch (      Exception e) {
        if (modelEntryPath != null) {
          LOG.info("-> Skipping " + modelEntryPath + "...");
        }
      }
    }
  }
  try {
    LOG.info("-> Configuring...");
    configs.add(new ConfigResource("eucalyptus-bootstrap.xml"));
    context=new DefaultMuleContextFactory().createMuleContext(new SpringXmlConfigurationBuilder(configs.toArray(new ConfigResource[]{})));
    for (    Bootstrapper b : this.bootstrappers) {
      LOG.info("-> Invoking bootsrapper " + b.getClass().getSimpleName() + ".load()");
      b.load();
    }
  }
 catch (  Exception e) {
    LOG.info(e,e);
  }
  return true;
}
