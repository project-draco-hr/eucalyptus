{
  Logs.init();
  Thread.setDefaultUncaughtExceptionHandler(new UncaughtExceptionHandler(){
    @Override public void uncaughtException(    Thread t,    Throwable e){
      try {
        String stack=Joiner.on("\t\n").join(Thread.currentThread().getStackTrace());
        LOG.error(stack);
        LOG.error(e,e);
      }
 catch (      Exception ex) {
        try {
          System.out.println(Joiner.on("\t\n").join(Thread.currentThread().getStackTrace()));
          e.printStackTrace();
          ex.printStackTrace();
        }
 catch (        Exception ex1) {
          System.out.println("Failed because of badness in uncaught exception path.");
          System.out.println("Thread:      " + t.toString());
          System.out.println("Exception:   " + e.getClass());
          System.out.println("Message:     " + e.getMessage());
          System.out.println("All threads:\n");
          for (          Map.Entry<Thread,StackTraceElement[]> ent : Thread.getAllStackTraces().entrySet()) {
          }
        }
      }
    }
  }
);
  BootstrapArgs.init();
  Security.addProvider(new BouncyCastleProvider());
  try {
    if (!BootstrapArgs.isInitializeSystem()) {
      Bootstrap.init();
      Bootstrap.Stage stage=Bootstrap.transition();
      stage.load();
    }
    return true;
  }
 catch (  Throwable t) {
    SystemBootstrapper.handleException(t);
    return false;
  }
}
