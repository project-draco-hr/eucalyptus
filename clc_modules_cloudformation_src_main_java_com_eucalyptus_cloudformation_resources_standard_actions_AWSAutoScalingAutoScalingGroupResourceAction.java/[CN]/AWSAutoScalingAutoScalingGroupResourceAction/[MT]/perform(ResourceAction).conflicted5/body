{
  AWSAutoScalingAutoScalingGroupResourceAction action=(AWSAutoScalingAutoScalingGroupResourceAction)resourceAction;
  ServiceConfiguration configuration=Topology.lookup(AutoScaling.class);
  CreationPolicy creationPolicy=CreationPolicy.parse(action.info.getCreationPolicyJson());
  if (creationPolicy != null && creationPolicy.getResourceSignal() != null) {
    Set<String> instanceIds=Sets.newHashSet();
    DescribeAutoScalingGroupsType describeAutoScalingGroupsType=MessageHelper.createMessage(DescribeAutoScalingGroupsType.class,action.info.getEffectiveUserId());
    AutoScalingGroupNames autoScalingGroupNames=new AutoScalingGroupNames();
    autoScalingGroupNames.getMember().add(action.info.getPhysicalResourceId());
    describeAutoScalingGroupsType.setAutoScalingGroupNames(autoScalingGroupNames);
    DescribeAutoScalingGroupsResponseType describeAutoScalingGroupsResponseType=AsyncRequests.sendSync(configuration,describeAutoScalingGroupsType);
    if (describeAutoScalingGroupsResponseType != null && describeAutoScalingGroupsResponseType.getDescribeAutoScalingGroupsResult() != null && describeAutoScalingGroupsResponseType.getDescribeAutoScalingGroupsResult().getAutoScalingGroups() != null && describeAutoScalingGroupsResponseType.getDescribeAutoScalingGroupsResult().getAutoScalingGroups().getMember() != null) {
      for (      AutoScalingGroupType autoScalingGroupType : describeAutoScalingGroupsResponseType.getDescribeAutoScalingGroupsResult().getAutoScalingGroups().getMember()) {
        if (!Objects.equals(autoScalingGroupType.getAutoScalingGroupName(),action.info.getPhysicalResourceId()))         continue;
        if (autoScalingGroupType.getInstances() != null && autoScalingGroupType.getInstances().getMember() != null) {
          for (          Instance instance : autoScalingGroupType.getInstances().getMember()) {
            instanceIds.add(instance.getInstanceId());
          }
        }
      }
    }
    Collection<SignalEntity> signals=SignalEntityManager.getSignals(action.getStackEntity().getStackId(),action.info.getAccountId(),action.info.getLogicalResourceId(),action.getStackEntity().getStackVersion());
    int numSuccessSignals=0;
    if (signals != null) {
      for (      SignalEntity signal : signals) {
        if (signal.getProcessed() && signal.getStatus() == SignalEntity.Status.SUCCESS) {
          numSuccessSignals++;
          continue;
        }
        if (!instanceIds.contains(signal.getUniqueId()))         continue;
        if (signal.getStatus() == SignalEntity.Status.FAILURE) {
          throw new ResourceFailureException("Received FAILURE signal with UniqueId " + signal.getUniqueId());
        }
        if (!signal.getProcessed()) {
          StackEventEntityManager.addSignalStackEvent(signal);
          signal.setProcessed(true);
          SignalEntityManager.updateSignal(signal);
        }
        numSuccessSignals++;
      }
    }
    if (numSuccessSignals < creationPolicy.getResourceSignal().getCount()) {
      long durationMs=System.currentTimeMillis() - Long.valueOf(JsonHelper.getJsonNodeFromString(action.info.getEucaCreateStartTime()).asText());
      if (TimeUnit.MILLISECONDS.toSeconds(durationMs) > creationPolicy.getResourceSignal().getTimeout()) {
        throw new ResourceFailureException("Failed to receive " + creationPolicy.getResourceSignal().getCount() + " resource signal(s) within the specified duration");
      }
      throw new RetryAfterConditionCheckFailedException("Not enough success signals yet");
    }
  }
  return action;
}
