{
  Collection<ObsoleteInstance> obsoleteInstances=ObsoleteInstance.jsonToObsoleteInstances(rollingUpdateStateEntity.getObsoleteInstancesJson());
  Set<String> terminatingInstanceIds=Sets.newHashSet();
  for (  ObsoleteInstance obsoleteInstance : obsoleteInstances) {
    if (obsoleteInstance.getLastKnownState() == TerminationState.TERMINATING) {
      terminatingInstanceIds.add(obsoleteInstance.getInstanceId());
    }
  }
  if (!isAllTerminated(terminatingInstanceIds,newAction.info.getEffectiveUserId())) {
    throw new NotAResourceFailureException("Still waiting on terminating instances");
  }
 else {
    int numTerminatedInstances=0;
    for (    ObsoleteInstance obsoleteInstance : obsoleteInstances) {
      if (obsoleteInstance.getLastKnownState() == TerminationState.TERMINATING) {
        obsoleteInstance.setLastKnownState(TerminationState.TERMINATED);
        numTerminatedInstances++;
      }
 else       if (obsoleteInstance.getLastKnownState() == TerminationState.TERMINATING) {
        numTerminatedInstances++;
      }
    }
    int progress=obsoleteInstances.size() == 0 ? 100 : 100 * numTerminatedInstances / obsoleteInstances.size();
    addStackEventForRollingUpdate(newAction,"Successfully terminated instance(s) " + terminatingInstanceIds + " (Progress "+ progress+ "%).");
    rollingUpdateStateEntity.setObsoleteInstancesJson(ObsoleteInstance.obsoleteInstancesToJson(obsoleteInstances));
    rollingUpdateStateEntity.setState(State.WAIT_TO_SETTLE);
    return rollingUpdateStateEntity;
  }
}
