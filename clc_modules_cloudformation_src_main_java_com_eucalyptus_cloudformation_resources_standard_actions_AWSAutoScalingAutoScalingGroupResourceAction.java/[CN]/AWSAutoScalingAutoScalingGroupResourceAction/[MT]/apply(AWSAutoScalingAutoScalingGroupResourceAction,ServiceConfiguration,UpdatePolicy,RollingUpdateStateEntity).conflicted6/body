{
  Collection<ObsoleteInstance> obsoleteInstances=ObsoleteInstance.jsonToObsoleteInstances(rollingUpdateStateEntity.getObsoleteInstancesJson());
  Collection<String> obsoleteButStillRunningInstanceIds=Lists.newArrayList();
  for (  ObsoleteInstance obsoleteInstance : obsoleteInstances) {
    if (obsoleteInstance.getLastKnownState() == TerminationState.RUNNING) {
      obsoleteButStillRunningInstanceIds.add(obsoleteInstance.getInstanceId());
    }
  }
  AutoScalingGroupType autoScalingGroupType=getExistingUniqueAutoscalingGroupType(configuration,newAction);
  if (obsoleteButStillRunningInstanceIds.isEmpty()) {
    rollingUpdateStateEntity.setState(State.RESUME_PROCESSES);
    return rollingUpdateStateEntity;
  }
 else {
    boolean isLastRound=(obsoleteButStillRunningInstanceIds.size() <= rollingUpdateStateEntity.getBatchSize());
    List<String> terminatingInstanceIds=Lists.newArrayList();
    for (    ObsoleteInstance obsoleteInstance : obsoleteInstances) {
      if (obsoleteInstance.getLastKnownState() == TerminationState.RUNNING) {
        obsoleteInstance.setLastKnownState(TerminationState.TERMINATING);
        terminatingInstanceIds.add(obsoleteInstance.getInstanceId());
        if (terminatingInstanceIds.size() == rollingUpdateStateEntity.getBatchSize())         break;
      }
    }
    rollingUpdateStateEntity.setObsoleteInstancesJson(ObsoleteInstance.obsoleteInstancesToJson(obsoleteInstances));
    Set<String> allRunningInstanceIds=Sets.newHashSet();
    if (autoScalingGroupType.getInstances() != null && autoScalingGroupType.getInstances().getMember() != null) {
      for (      Instance instance : autoScalingGroupType.getInstances().getMember()) {
        if (instance.getLifecycleState().equals("InService")) {
          allRunningInstanceIds.add(instance.getInstanceId());
        }
      }
    }
    int replacementNum;
    if (!isLastRound) {
      replacementNum=terminatingInstanceIds.size();
    }
 else {
      int numGood=allRunningInstanceIds.size() - terminatingInstanceIds.size();
      replacementNum=numGood > rollingUpdateStateEntity.getDesiredCapacity() ? 0 : rollingUpdateStateEntity.getDesiredCapacity() - numGood;
    }
    addStackEventForRollingUpdate(newAction,"Terminating instance(s) " + terminatingInstanceIds + "; replacing with "+ replacementNum+ " new instance(s).");
    for (    String terminatingInstanceId : terminatingInstanceIds) {
      TerminateInstanceInAutoScalingGroupType terminateInstanceInAutoScalingGroupType=MessageHelper.createMessage(TerminateInstanceInAutoScalingGroupType.class,newAction.info.getEffectiveUserId());
      terminateInstanceInAutoScalingGroupType.setInstanceId(terminatingInstanceId);
      terminateInstanceInAutoScalingGroupType.setShouldDecrementDesiredCapacity(false);
      try {
        sendSyncWithRetryOnScalingEvent(configuration,terminateInstanceInAutoScalingGroupType);
      }
 catch (      final Exception e) {
        final Optional<AsyncExceptions.AsyncWebServiceError> error=AsyncExceptions.asWebServiceError(e);
        if (error.isPresent()) switch (Strings.nullToEmpty(error.get().getCode())) {
case "ValidationError":
          continue;
      }
      throw e;
    }
  }
  if (isLastRound) {
    UpdateAutoScalingGroupType updateAutoScalingGroupType=MessageHelper.createMessage(UpdateAutoScalingGroupType.class,newAction.info.getEffectiveUserId());
    updateAutoScalingGroupType.setAutoScalingGroupName(newAction.info.getPhysicalResourceId());
    updateAutoScalingGroupType.setDesiredCapacity(rollingUpdateStateEntity.getDesiredCapacity());
    updateAutoScalingGroupType.setMinSize(rollingUpdateStateEntity.getMinSize());
    sendSyncWithRetryOnScalingEvent(configuration,updateAutoScalingGroupType);
  }
  rollingUpdateStateEntity.setState(State.WAIT_FOR_TERMINATE);
  return rollingUpdateStateEntity;
}
}
