{
  ServiceConfiguration configuration=Topology.lookup(AutoScaling.class);
switch (stepNum) {
case 0:
    String autoScalingGroupName=getDefaultPhysicalResourceId();
  CreateAutoScalingGroupType createAutoScalingGroupType=new CreateAutoScalingGroupType();
createAutoScalingGroupType.setAutoScalingGroupName(autoScalingGroupName);
if (properties.getInstanceId() != null) {
throw new ValidationErrorException("InstanceId not supported");
}
if (properties.getLaunchConfigurationName() == null) {
throw new ValidationErrorException("LaunchConfiguration required (as InstanceId not supported)");
}
if (properties.getAvailabilityZones() != null) {
createAutoScalingGroupType.setAvailabilityZones(new AvailabilityZones(properties.getAvailabilityZones()));
}
createAutoScalingGroupType.setDefaultCooldown(properties.getCooldown());
createAutoScalingGroupType.setDesiredCapacity(properties.getDesiredCapacity());
createAutoScalingGroupType.setHealthCheckGracePeriod(properties.getHealthCheckGracePeriod());
createAutoScalingGroupType.setLaunchConfigurationName(properties.getLaunchConfigurationName());
if (properties.getLoadBalancerNames() != null) {
createAutoScalingGroupType.setLoadBalancerNames(new LoadBalancerNames(properties.getLoadBalancerNames()));
}
createAutoScalingGroupType.setMaxSize(properties.getMaxSize());
createAutoScalingGroupType.setMinSize(properties.getMinSize());
if (properties.getTerminationPolicies() != null) {
createAutoScalingGroupType.setTerminationPolicies(new TerminationPolicies(properties.getTerminationPolicies()));
}
if (properties.getVpcZoneIdentifier() != null && properties.getVpcZoneIdentifier().size() > 1) {
throw new Exception("Multiple values for vpc zone identifier not supported");
}
 else if (properties.getVpcZoneIdentifier() != null && properties.getVpcZoneIdentifier().size() == 1) {
createAutoScalingGroupType.setVpcZoneIdentifier(properties.getVpcZoneIdentifier().get(0));
}
List<AutoScalingTag> tags=TagHelper.getAutoScalingStackTags(info,getStackEntity());
if (properties.getTags() != null && !properties.getTags().isEmpty()) {
TagHelper.checkReservedAutoScalingTemplateTags(properties.getTags());
tags.addAll(properties.getTags());
}
createAutoScalingGroupType.setTags(convertTags(tags));
createAutoScalingGroupType.setUserId(info.getEffectiveUserId());
createAutoScalingGroupType.markPrivileged();
AsyncRequests.<CreateAutoScalingGroupType,CreateAutoScalingGroupResponseType>sendSync(configuration,createAutoScalingGroupType);
info.setPhysicalResourceId(autoScalingGroupName);
info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(info.getPhysicalResourceId())));
break;
case 1:
if (properties.getNotificationConfiguration() != null) {
PutNotificationConfigurationType putNotificationConfigurationType=new PutNotificationConfigurationType();
putNotificationConfigurationType.setAutoScalingGroupName(info.getPhysicalResourceId());
putNotificationConfigurationType.setTopicARN(properties.getNotificationConfiguration().getTopicARN());
AutoScalingNotificationTypes autoScalingNotificationTypes=new AutoScalingNotificationTypes();
ArrayList<String> member=Lists.newArrayList(properties.getNotificationConfiguration().getNotificationTypes());
autoScalingNotificationTypes.setMember(member);
putNotificationConfigurationType.setNotificationTypes(autoScalingNotificationTypes);
putNotificationConfigurationType.setEffectiveUserId(info.getEffectiveUserId());
AsyncRequests.<PutNotificationConfigurationType,PutNotificationConfigurationResponseType>sendSync(configuration,putNotificationConfigurationType);
}
break;
case 2:
break;
default :
throw new IllegalStateException("Invalid step " + stepNum);
}
}
