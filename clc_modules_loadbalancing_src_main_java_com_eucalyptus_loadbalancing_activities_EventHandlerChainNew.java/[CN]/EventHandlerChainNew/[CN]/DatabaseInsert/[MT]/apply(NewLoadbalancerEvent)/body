{
  LoadBalancer lb=null;
  try {
    lb=LoadBalancers.getLoadbalancer(evt.getContext().getUserFullName(),evt.getLoadBalancer());
  }
 catch (  NoSuchElementException ex) {
    throw new EventHandlerException("can't find the specified loadbalancer user owns",ex);
  }
catch (  Exception ex) {
    throw new EventHandlerException("can't query the loadbalancer due to unknown reason",ex);
  }
  List<LoadBalancerZone> zones=Lists.newArrayList();
  for (  String zoneName : evt.getZones()) {
    LoadBalancerZone lbZone=null;
    try {
      lbZone=LoadBalancers.findZone(lb,zoneName);
      zones.add(lbZone);
    }
 catch (    NoSuchElementException ex) {
      throw new EventHandlerException("Can't find the zone in user's loadbalancer (" + zoneName + ")",ex);
    }
catch (    Exception ex) {
      throw new EventHandlerException("Can't find the zone due to unknown reason");
    }
  }
  final Function<LoadBalancerZone,LoadBalancerServoInstance> persistInstance=new Function<LoadBalancerZone,LoadBalancerServoInstance>(){
    public LoadBalancerServoInstance apply(    final LoadBalancerZone zone){
      final LoadBalancerServoInstance instance=LoadBalancerServoInstance.named(zone);
      instance.setState(LoadBalancerServoInstance.STATE.Pending);
      instance.setInstanceId(UUID.randomUUID().toString().substring(0,6));
      LoadBalancerServoInstance written=Entities.persist(instance);
      return written;
    }
  }
;
  for (  LoadBalancerZone zone : zones) {
    try {
      int numVm=Integer.parseInt(EventHandlerChainNew.LOADBALANCER_NUM_VM);
      for (int i=0; i < numVm; i++) {
        LoadBalancerServoInstance persist=Entities.asTransaction(LoadBalancerServoInstance.class,persistInstance).apply(zone);
        this.uniqueEntries.add(persist.getInstanceId());
      }
    }
 catch (    Exception ex) {
      throw new EventHandlerException("Failed to persist the loadbalancer vm",ex);
    }
  }
}
