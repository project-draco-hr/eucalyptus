{
  this.event=evt;
  LoadBalancer lb=null;
  try {
    lb=LoadBalancers.getLoadbalancer(evt.getContext(),evt.getLoadBalancer());
  }
 catch (  NoSuchElementException ex) {
    throw new EventHandlerException("Could not find the loadbalancer with name=" + evt.getLoadBalancer(),ex);
  }
catch (  Exception ex) {
    throw new EventHandlerException("Error while looking for loadbalancer with name=" + evt.getLoadBalancer(),ex);
  }
  String groupName=String.format("euca-internal-%s-%s",lb.getOwnerAccountNumber(),lb.getDisplayName());
  String groupDesc=String.format("group for loadbalancer %s",evt.getLoadBalancer());
  EntityTransaction db=Entities.get(LoadBalancerSecurityGroup.class);
  try {
    final LoadBalancerSecurityGroup exist=Entities.uniqueResult(LoadBalancerSecurityGroup.named(lb,this.groupOwnerAccountId,groupName));
    db.commit();
    if (exist != null)     throw new EventHandlerException("Cleaning-up resources for the loadbalancer with same name");
  }
 catch (  NoSuchElementException ex) {
    db.rollback();
  }
catch (  Exception ex) {
    db.rollback();
  }
 finally {
    if (db.isActive())     db.rollback();
  }
  boolean groupFound=false;
  try {
    List<SecurityGroupItemType> groups=EucalyptusActivityTasks.getInstance().describeSecurityGroups(Lists.newArrayList(groupName));
    if (groups != null && groups.size() > 0) {
      final SecurityGroupItemType current=groups.get(0);
      if (groupName.equals(current.getGroupName())) {
        groupFound=true;
        this.createdGroupId=current.getGroupId();
        this.groupOwnerAccountId=current.getAccountId();
      }
    }
  }
 catch (  Exception ex) {
    groupFound=false;
  }
  if (!groupFound) {
    try {
      EucalyptusActivityTasks.getInstance().createSecurityGroup(groupName,groupDesc);
      createdGroup=groupName;
      List<SecurityGroupItemType> groups=EucalyptusActivityTasks.getInstance().describeSecurityGroups(Lists.newArrayList(groupName));
      if (groups != null && groups.size() > 0) {
        final SecurityGroupItemType current=groups.get(0);
        if (groupName.equals(current.getGroupName())) {
          this.groupOwnerAccountId=current.getAccountId();
          this.createdGroupId=current.getGroupId();
        }
      }
    }
 catch (    Exception ex) {
      throw new EventHandlerException("Failed to create the security group for loadbalancer",ex);
    }
  }
 else {
    createdGroup=groupName;
  }
  if (this.createdGroup == null || this.groupOwnerAccountId == null)   throw new EventHandlerException("Failed to create the security group for loadbalancer");
  db=Entities.get(LoadBalancerSecurityGroup.class);
  try {
    Entities.uniqueResult(LoadBalancerSecurityGroup.named(lb,this.groupOwnerAccountId,groupName));
    db.commit();
  }
 catch (  NoSuchElementException ex) {
    final LoadBalancerSecurityGroup newGroup=LoadBalancerSecurityGroup.named(lb,this.groupOwnerAccountId,groupName);
    LoadBalancerSecurityGroup written=Entities.persist(newGroup);
    db.commit();
  }
catch (  Exception ex) {
    db.rollback();
    throw new EventHandlerException("Error while persisting security group",ex);
  }
 finally {
    if (db.isActive())     db.rollback();
  }
}
