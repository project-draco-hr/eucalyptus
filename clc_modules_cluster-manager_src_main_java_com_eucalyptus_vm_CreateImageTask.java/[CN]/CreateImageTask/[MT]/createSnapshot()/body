{
  final List<Map.Entry<String,String>> volumesToSnapshot=Lists.newArrayList();
  volumesToSnapshot.add(this.getInstanceRootVolume());
  List<String> suppressedDevice=new ArrayList<String>();
  for (  BlockDeviceMappingItemType device : blockDevices) {
    if (device.getNoDevice() != null)     suppressedDevice.add(device.getDeviceName());
  }
  for (  Map.Entry<String,String> vol : getInstanceNonRootVolumes()) {
    if (!suppressedDevice.contains(vol.getKey()))     volumesToSnapshot.add(vol);
  }
  Boolean isRootDevice=true;
  for (  final Map.Entry<String,String> volume : volumesToSnapshot) {
    final String deviceName=volume.getKey();
    final String volumeId=volume.getValue();
    String snapshotId=null;
    try {
      final EucalyptusCreateSnapshotTask task=new EucalyptusCreateSnapshotTask(volumeId,String.format("Created by CreateImage(%s) for %s from %s",instanceId,getImageId(),volumeId));
      final CheckedListenableFuture<Boolean> result=task.dispatch();
      if (result.get()) {
        snapshotId=task.getSnapshotId();
      }
 else       throw new EucalyptusCloudException(String.format("Unable to create the snapshot from volume %s",volumeId));
    }
 catch (    final Exception ex) {
      throw Exceptions.toUndeclared(ex);
    }
    LOG.debug(String.format("Created snapshot %s from volume %s for device %s",snapshotId,volumeId,deviceName));
    try (TransactionResource db=Entities.transactionFor(VmInstance.class)){
      final VmInstance vm=Entities.uniqueResult(VmInstance.named(this.instanceId));
      vm.getRuntimeState().getVmCreateImageTask().addSnapshot(deviceName,snapshotId,isRootDevice,isDeleteOnTerminate(volumeId));
      isRootDevice=false;
      Entities.persist(vm);
      db.commit();
    }
 catch (    final Exception ex) {
      LOG.error("failed to add new snapshot",ex);
      throw Exceptions.toUndeclared(ex);
    }
  }
}
