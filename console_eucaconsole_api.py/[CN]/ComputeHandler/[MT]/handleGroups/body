def handleGroups(self, action, clc, callback=None):
    if (action == 'DescribeSecurityGroups'):
        filters = self.get_filter_args()
        return clc.get_all_security_groups(filters, callback)
    elif (action == 'CreateSecurityGroup'):
        name = self.get_argument('GroupName')
        name = base64.b64decode(name)
        desc = self.get_argument('GroupDescription')
        desc = base64.b64decode(desc)
        return clc.create_security_group(name, desc, callback)
    elif (action == 'DeleteSecurityGroup'):
        name = self.get_argument('GroupName', None)
        group_id = self.get_argument('GroupId', None)
        return clc.delete_security_group(name, group_id, callback)
    elif (action == 'AuthorizeSecurityGroupIngress'):
        name = self.get_argument('GroupName', None)
        group_id = self.get_argument('GroupId', None)
        ip_protocol = self.get_argument_list('IpPermissions', 'IpProtocol')
        numRules = len(ip_protocol)
        from_port = self.get_argument_list('IpPermissions', 'FromPort')
        to_port = self.get_argument_list('IpPermissions', 'ToPort')
        src_security_group_name = self.get_argument_list('IpPermissions', 'Groups', 'GroupName', numRules)
        src_security_group_owner_id = self.get_argument_list('IpPermissions', 'Groups', 'UserId', numRules)
        src_security_group_group_id = self.get_argument_list('IpPermissions', 'Groups', 'GroupId', numRules)
        cidr_ip = self.get_argument_list('IpPermissions', 'IpRanges', 'CidrIp', numRules)
        clc.authorize_security_group(name, src_security_group_name, src_security_group_owner_id, ip_protocol, from_port, to_port, cidr_ip, group_id, src_security_group_group_id, callback)
        return
    elif (action == 'RevokeSecurityGroupIngress'):
        name = self.get_argument('GroupName', None)
        group_id = self.get_argument('GroupId', None)
        ip_protocol = self.get_argument_list('IpPermissions', 'IpProtocol')
        numRules = len(ip_protocol)
        from_port = self.get_argument_list('IpPermissions', 'FromPort')
        to_port = self.get_argument_list('IpPermissions', 'ToPort')
        src_security_group_name = self.get_argument_list('IpPermissions', 'Groups', 'GroupName', numRules)
        src_security_group_owner_id = self.get_argument_list('IpPermissions', 'Groups', 'UserId', numRules)
        src_security_group_group_id = self.get_argument_list('IpPermissions', 'Groups', 'GroupId', numRules)
        cidr_ip = self.get_argument_list('IpPermissions', 'IpRanges', 'CidrIp', numRules)
        clc.revoke_security_group(name, src_security_group_name, src_security_group_owner_id, ip_protocol, from_port, to_port, cidr_ip, group_id, src_security_group_group_id, callback)
        return
