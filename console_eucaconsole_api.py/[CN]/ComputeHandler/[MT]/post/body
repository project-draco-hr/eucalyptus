@tornado.web.asynchronous
def post(self):
    if (not self.authorized()):
        raise tornado.web.HTTPError(401, 'not authorized')
    if (not self.user_session.clc):
        if self.should_use_mock():
            self.user_session.clc = MockClcInterface()
        else:
            host = eucaconsole.config.get('server', 'clchost')
            if self.user_session.host_override:
                host = self.user_session.host_override
            self.user_session.clc = BotoClcInterface(host, self.user_session.access_key, self.user_session.secret_key, self.user_session.session_token)
        self.user_session.clc = CachingClcInterface(self.user_session.clc, eucaconsole.config)
    self.user_session.session_lifetime_requests += 1
    try:
        action = self.get_argument('Action')
        if ((action.find('Describe') == (-1)) and (action.find('GetDashSummary') == (-1))):
            self.user_session.session_last_used = time.time()
            self.check_xsrf_cookie()
        if (action == 'GetKeyPairFile'):
            name = self.get_argument('KeyName')
            result = self.user_session.keypair_cache[name]
            self.set_header('Content-Type', 'application/x-pem-file;charset=ISO-8859-1')
            self.set_header('Content-Disposition', (('attachment; filename="' + name) + '.pem"'))
            self.write(result)
            self.finish()
            del self.user_session.keypair_cache[name]
            return
        if (action == 'GetDashSummary'):
            ret = ''
            zone = self.get_argument('AvailabilityZone', 'all')
            if isinstance(self.user_session.clc, CachingClcInterface):
                ret = self.user_session.clc.get_cache_summary(zone)
            self.callback(eucaconsole.cachingclcinterface.Response(data=ret))
        elif (action == 'SetDataInterest'):
            resources = self.get_argument_list('Resources.member')
            if isinstance(self.user_session.clc, CachingClcInterface):
                ret = self.user_session.clc.set_data_interest(resources)
            self.callback(eucaconsole.cachingclcinterface.Response(data=ret))
        elif (action == 'RunInstances'):
            user_data_file = []
            try:
                user_data_file = self.request.files['user_data_file']
            except KeyError:
                pass
            if (len(user_data_file) > 0):
                self.handleRunInstances(action, self.user_session.clc, user_data_file[0].body, self.callback)
            else:
                self.handleRunInstances(action, self.user_session.clc, None, self.callback)
        elif (action == 'DescribeAvailabilityZones'):
            filters = self.get_filter_args()
            self.user_session.clc.get_all_zones(filters, self.callback)
        elif (action.find('Image') > (-1)):
            self.handleImages(action, self.user_session.clc, self.callback)
        elif ((action.find('Instance') > (-1)) or (action == 'GetConsoleOutput')):
            self.handleInstances(action, self.user_session.clc, self.callback)
        elif (action.find('Address') > (-1)):
            self.handleAddresses(action, self.user_session.clc, self.callback)
        elif (action.find('KeyPair') > (-1)):
            self.handleKeypairs(action, self.user_session.clc, self.callback)
        elif (action.find('SecurityGroup') > (-1)):
            self.handleGroups(action, self.user_session.clc, self.callback)
        elif (action.find('Volume') > (-1)):
            self.handleVolumes(action, self.user_session.clc, self.callback)
        elif (action.find('Snapshot') > (-1)):
            self.handleSnapshots(action, self.user_session.clc, self.callback)
        elif (action.find('Tags') > (-1)):
            self.handleTags(action, self.user_session.clc, self.callback)
        elif (action == 'GetPassword'):
            self.handleGetPassword(self.user_session.clc, self.callback)
    except Exception as ex:
        logging.error('Could not fulfill request, exception to follow')
        logging.error('Since we got here, client likely not notified either!')
        logging.exception(ex)
