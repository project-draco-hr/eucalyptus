def callback(self, response):
    if response.error:
        err = response.error
        ret = '[]'
        if isinstance(err, BotoServerError):
            ret = ClcError(err.status, err.reason, err.message)
            self.set_status(err.status)
        elif issubclass(err.__class__, Exception):
            if isinstance(err, socket.timeout):
                ret = ClcError(504, 'Timed out', None)
                self.set_status(504)
            else:
                ret = ClcError(500, err.message, None)
                self.set_status(500)
        self.set_header('Content-Type', 'application/json;charset=UTF-8')
        self.set_header('Cache-control', 'no-store')
        self.set_header('Pragma', 'no-cache')
        self.write(json.dumps(ret, cls=self.json_encoder))
        self.finish()
        logging.exception(err)
    else:
        try:
            try:
                if eucaconsole.config.get('test', 'apidelay'):
                    time.sleep((int(eucaconsole.config.get('test', 'apidelay')) / 1000.0))
            except ConfigParser.NoOptionError:
                pass
            summary = False
            if summary:
                ret = Response(extract_ids(response.data))
            else:
                ret = Response(response.data)
            data = json.dumps(ret, cls=self.json_encoder, indent=2)
            self.set_header('Content-Type', 'application/json;charset=UTF-8')
            self.set_header('Cache-control', 'no-store')
            self.set_header('Pragma', 'no-cache')
            self.write(data)
            self.finish()
        except Exception as err:
            print err
