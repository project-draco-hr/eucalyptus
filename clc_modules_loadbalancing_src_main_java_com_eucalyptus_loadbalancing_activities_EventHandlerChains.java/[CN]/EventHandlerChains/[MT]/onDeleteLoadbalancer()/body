{
  if (onDeleteLoadbalancerChain == null) {
    onDeleteLoadbalancerChain=new EventHandlerChain<DeleteLoadbalancerEvent>(){
      @Override public EventHandlerChain<DeleteLoadbalancerEvent> build(){
        this.insert(new EventHandler<DeleteLoadbalancerEvent>(){
          @Override public void apply(          DeleteLoadbalancerEvent evt){
            LOG.info("onDeleteLoadbalancer");
          }
        }
);
        final LoadbalancerInstanceTerminator instTerm=new LoadbalancerInstanceTerminator();
        this.insert(instTerm);
        this.insert(new EventHandler<DeleteLoadbalancerEvent>(){
          @Override public void apply(          DeleteLoadbalancerEvent evt) throws EventHandlerException {
            final EntityTransaction db=Entities.get(LoadBalancerServoInstance.class);
            for (            String terminated : instTerm.getTerminatedInstances()) {
              try {
                final LoadBalancerServoInstance instance=Entities.uniqueResult(LoadBalancerServoInstance.named(terminated));
                Entities.delete(instance);
                db.commit();
              }
 catch (              NoSuchElementException e) {
                LOG.error("No servo instance named " + terminated + " found in DB");
              }
catch (              Exception e) {
                db.rollback();
                LOG.error("failed to delete a servo instance from DB",e);
                throw new EventHandlerException("Failed to delete the servo instance " + terminated,e);
              }
            }
          }
        }
);
        return this;
      }
    }
.build();
  }
  return onDeleteLoadbalancerChain;
}
