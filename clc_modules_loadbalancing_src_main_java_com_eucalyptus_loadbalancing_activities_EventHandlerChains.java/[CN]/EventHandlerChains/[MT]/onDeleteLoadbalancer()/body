{
  if (onDeleteLoadbalancerChain == null) {
    onDeleteLoadbalancerChain=new EventHandlerChain<DeleteLoadbalancerEvent>(){
      @Override public EventHandlerChain<DeleteLoadbalancerEvent> build(){
        this.insert(new EventHandler<DeleteLoadbalancerEvent>(){
          @Override public void apply(          DeleteLoadbalancerEvent evt){
            LOG.info("onDeleteLoadbalancer");
          }
        }
);
        this.insert(new LoadbalancerInstanceTerminator());
        this.insert(new EventHandler<DeleteLoadbalancerEvent>(){
          @Override public void apply(          DeleteLoadbalancerEvent evt) throws EventHandlerException {
            final EntityTransaction db=Entities.get(LoadBalancer.class);
            try {
              final LoadBalancer lb=Entities.uniqueResult(LoadBalancer.named(user,lbName));
              Entities.delete(lb);
              db.commit();
            }
 catch (            NoSuchElementException e) {
              throw new LoadBalancingException("No loadbalancer is found with name = " + lbName,e);
            }
catch (            Exception e) {
              db.rollback();
              LOG.error("failed to delete a loadbalancer",e);
              throw new LoadBalancingException("Failed to delete the loadbalancer " + lbName,e);
            }
          }
        }
);
        return this;
      }
    }
.build();
  }
  return onDeleteLoadbalancerChain;
}
