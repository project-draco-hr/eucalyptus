{
  if (onNewLoadbalancerChain == null) {
    onNewLoadbalancerChain=new EventHandlerChain<NewLoadbalancerEvent>(){
      @Override public EventHandlerChain<NewLoadbalancerEvent> build(){
        final LoadbalancerInstanceLauncher launcher=new LoadbalancerInstanceLauncher();
        this.insert(launcher);
        this.insert(new EventHandler<NewLoadbalancerEvent>(){
          @Override public void apply(          NewLoadbalancerEvent evt) throws EventHandlerException {
            final EntityTransaction db=Entities.get(LoadBalancerServoInstance.class);
            String zoneToLaunch=null;
            if (evt.getZones().size() > 0)             zoneToLaunch=Lists.newArrayList(evt.getZones()).get(0);
            for (            String launched : launcher.getLaunchedInstances()) {
              try {
                Entities.uniqueResult(LoadBalancerServoInstance.named(launched));
              }
 catch (              NoSuchElementException ex) {
                final LoadBalancerServoInstance newInstance=LoadBalancerServoInstance.named(launched,zoneToLaunch);
                newInstance.setLoadbalancer(evt.getLoadBalancer(),evt.getContext().getUserFullName());
                Entities.persist(newInstance);
                db.commit();
              }
catch (              Exception ex) {
                LOG.error("failed to persist the servo instance " + launched,ex);
                db.rollback();
                throw new EventHandlerException("failed to persist the servo instance",ex);
              }
            }
          }
        }
);
        return this;
      }
    }
.build();
  }
  return onNewLoadbalancerChain;
}
