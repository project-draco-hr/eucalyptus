{
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
switch (stepNum) {
case 0:
    validateProperties();
  if (properties.getRouteTableId().isEmpty()) {
    throw new ValidationErrorException("RouteTableId is a required field");
  }
DescribeRouteTablesType describeRouteTablesType=new DescribeRouteTablesType();
describeRouteTablesType.setEffectiveUserId(info.getEffectiveUserId());
RouteTableIdSetType routeTableIdSet=new RouteTableIdSetType();
RouteTableIdSetItemType routeTableIdSetItem=new RouteTableIdSetItemType();
routeTableIdSetItem.setRouteTableId(properties.getRouteTableId());
routeTableIdSet.setItem(Lists.newArrayList(routeTableIdSetItem));
describeRouteTablesType.setRouteTableIdSet(routeTableIdSet);
DescribeRouteTablesResponseType describeRouteTablesResponseType=AsyncRequests.<DescribeRouteTablesType,DescribeRouteTablesResponseType>sendSync(configuration,describeRouteTablesType);
if (describeRouteTablesResponseType.getRouteTableSet() == null || describeRouteTablesResponseType.getRouteTableSet().getItem() == null || describeRouteTablesResponseType.getRouteTableSet().getItem().isEmpty()) {
throw new ValidationErrorException("No such route table with id '" + properties.getRouteTableId());
}
CreateRouteType createRouteType=new CreateRouteType();
createRouteType.setEffectiveUserId(info.getEffectiveUserId());
createRouteType.setRouteTableId(properties.getRouteTableId());
if (!Strings.isNullOrEmpty(properties.getGatewayId())) {
createRouteType.setGatewayId(properties.getGatewayId());
}
if (!Strings.isNullOrEmpty(properties.getInstanceId())) {
createRouteType.setInstanceId(properties.getInstanceId());
}
if (!Strings.isNullOrEmpty(properties.getVpcPeeringConnectionId())) {
createRouteType.setVpcPeeringConnectionId(properties.getVpcPeeringConnectionId());
}
if (!Strings.isNullOrEmpty(properties.getNetworkInterfaceId())) {
createRouteType.setNetworkInterfaceId(properties.getNetworkInterfaceId());
}
createRouteType.setDestinationCidrBlock(properties.getDestinationCidrBlock());
CreateRouteResponseType createRouteResponseType=AsyncRequests.<CreateRouteType,CreateRouteResponseType>sendSync(configuration,createRouteType);
info.setPhysicalResourceId(getDefaultPhysicalResourceId());
info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(info.getPhysicalResourceId())));
break;
default :
throw new IllegalStateException("Invalid step " + stepNum);
}
}
