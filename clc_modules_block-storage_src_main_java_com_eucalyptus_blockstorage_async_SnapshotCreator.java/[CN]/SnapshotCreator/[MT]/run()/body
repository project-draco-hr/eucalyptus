{
  EucaSemaphore semaphore=EucaSemaphoreDirectory.getSolitarySemaphore(volumeId);
  try {
    Boolean shouldTransferSnapshots=true;
    StorageResource snapshotResource=null;
    SnapshotTransfer snapshotTransfer=null;
    String bucket=null;
    SnapshotProgressCallback progressCallback=null;
    shouldTransferSnapshots=StorageInfo.getStorageInfo().getShouldTransferSnapshots();
    if (shouldTransferSnapshots) {
      snapshotTransfer=new S3SnapshotTransfer(snapshotId,snapshotId);
      bucket=snapshotTransfer.prepareForUpload();
      if (snapshotTransfer == null || StringUtils.isBlank(bucket)) {
        throw new EucalyptusCloudException("Failed to initialize snapshot transfer mechanism for uploading " + snapshotId);
      }
    }
    try {
      try {
        semaphore.acquire();
      }
 catch (      InterruptedException ex) {
        throw new EucalyptusCloudException("Failed to create snapshot " + snapshotId + " as the semaphore could not be acquired");
      }
      if (!isSnapshotMarkedFailed(snapshotId)) {
        progressCallback=new SnapshotProgressCallback(snapshotId);
        snapshotResource=blockManager.createSnapshot(this.volumeId,this.snapshotId,this.snapPointId,shouldTransferSnapshots);
        progressCallback.updateBackendProgress(50);
      }
 else {
        throw new EucalyptusCloudException("Snapshot " + this.snapshotId + " marked as failed by another thread");
      }
    }
  finally {
      semaphore.release();
    }
    Future<String> uploadFuture=null;
    if (shouldTransferSnapshots) {
      if (snapshotResource == null) {
        throw new EucalyptusCloudException("Snapshot file unknown. Cannot transfer snapshot");
      }
      String snapshotLocation=SnapshotInfo.generateSnapshotLocationURI(SnapshotTransferConfiguration.OSG,bucket,snapshotId);
      Entities.asTransaction(SnapshotInfo.class,new Function<String,SnapshotInfo>(){
        @Override public SnapshotInfo apply(        String arg0){
          SnapshotInfo snapshotInfo=null;
          try {
            snapshotInfo=Entities.uniqueResult(new SnapshotInfo(snapshotId));
            snapshotInfo.setSnapshotLocation(arg0);
          }
 catch (          TransactionException|NoSuchElementException e) {
            LOG.debug("Failed to update upload location for snapshot " + snapshotId + ". Skipping it and moving on",e);
          }
          return snapshotInfo;
        }
      }
).apply(snapshotLocation);
      if (!isSnapshotMarkedFailed(snapshotId)) {
        try {
          uploadFuture=snapshotTransfer.upload(snapshotResource,progressCallback);
        }
 catch (        Exception e) {
          throw new EucalyptusCloudException("Failed to upload snapshot " + snapshotId + " to objectstorage",e);
        }
      }
 else {
        throw new EucalyptusCloudException("Snapshot " + this.snapshotId + " marked as failed by another thread");
      }
    }
 else {
    }
    try {
      LOG.debug("Finishing up " + snapshotId + " on block storage backend");
      blockManager.finishVolume(snapshotId);
      LOG.info("Finished creating " + snapshotId + " on block storage backend");
      progressCallback.updateBackendProgress(50);
    }
 catch (    EucalyptusCloudException ex) {
      LOG.warn("Failed to complete snapshot " + snapshotId + " on backend",ex);
      throw ex;
    }
    if (uploadFuture != null) {
      LOG.debug("Waiting for upload of " + snapshotId + " to complete");
      if (uploadFuture.get() != null) {
        LOG.info("Uploaded " + snapshotId + " to object storage gateway, etag result - "+ uploadFuture.get());
      }
 else {
        LOG.warn("Failed to upload " + snapshotId + " to object storage gateway failed. Check prior logs for exact errors");
        throw new EucalyptusCloudException("Failed to upload " + snapshotId + " to object storage gateway");
      }
    }
    markSnapshotAvailable();
  }
 catch (  Exception ex) {
    LOG.error("Failed to create snapshot " + snapshotId,ex);
    try {
      markSnapshotFailed();
    }
 catch (    TransactionException|NoSuchElementException e) {
      LOG.warn("Cannot update " + snapshotId + " status to failed on SC",e);
    }
  }
}
