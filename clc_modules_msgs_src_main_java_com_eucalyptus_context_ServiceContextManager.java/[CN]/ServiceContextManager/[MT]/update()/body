{
  this.canHasWrite.lock();
  Bootstrap.awaitFinished();
  try {
    final List<ComponentId> reloadComponentIds=this.shouldReload();
    if (!Bootstrap.isShuttingDown() && !reloadComponentIds.isEmpty()) {
      if (this.context != null) {
        shutdown();
      }
      this.context=this.createContext(reloadComponentIds);
      if (Bootstrap.isShuttingDown()) {
        this.running.set(false);
        shutdown();
        return;
      }
      assertThat(this.context,notNullValue());
      try {
        this.context.start();
        this.client=new MuleClient(this.context);
        this.endpointToService.clear();
        this.serviceToEndpoint.clear();
        for (        final Object o : this.context.getRegistry().lookupServices()) {
          final Service s=(Service)o;
          for (          final Object p : s.getInboundRouter().getEndpoints()) {
            final InboundEndpoint in=(InboundEndpoint)p;
            this.endpointToService.put(in.getEndpointURI().toString(),s.getName());
            this.serviceToEndpoint.put(s.getName(),in.getEndpointURI().toString());
          }
        }
      }
 catch (      final Exception e) {
        LOG.error(e,e);
        throw Exceptions.toUndeclared(new ServiceInitializationException("Failed to start service this.context.",e));
      }
    }
  }
  finally {
    this.canHasWrite.unlock();
  }
  if (Bootstrap.isShuttingDown()) {
    this.running.set(false);
    shutdown();
    return;
  }
}
