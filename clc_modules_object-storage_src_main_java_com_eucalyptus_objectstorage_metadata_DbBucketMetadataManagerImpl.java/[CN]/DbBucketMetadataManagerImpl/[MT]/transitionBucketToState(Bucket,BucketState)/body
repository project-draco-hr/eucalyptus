{
  Function<Bucket,Bucket> transitionFunction=null;
switch (destState) {
case creating:
    transitionFunction=BucketStateTransitions.TRANSITION_TO_CREATING;
  break;
case extant:
transitionFunction=BucketStateTransitions.TRANSITION_TO_EXTANT;
break;
case deleting:
transitionFunction=BucketStateTransitions.TRANSITION_TO_DELETING;
break;
default :
LOG.error("Unexpected destination state: " + destState);
throw new IllegalArgumentException();
}
try {
return Entities.asTransaction(Bucket.class,transitionFunction).apply(bucket);
}
 catch (IllegalResourceStateException e) {
throw e;
}
catch (ConstraintViolationException e) {
IllegalResourceStateException ex=new IllegalResourceStateException();
ex.initCause(e);
throw ex;
}
catch (PersistentObjectException e) {
throw new NoSuchEntityException("Bucket entity not found for merge",e);
}
catch (Exception e) {
throw new MetadataOperationFailureException(e);
}
}
