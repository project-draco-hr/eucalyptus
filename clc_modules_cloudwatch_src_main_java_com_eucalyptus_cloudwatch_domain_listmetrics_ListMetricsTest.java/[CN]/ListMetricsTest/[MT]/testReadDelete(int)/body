{
  try {
    ListMetricManager.deleteAllMetrics();
    LOG.fatal("Assertion Result: " + assertSize(0,ListMetricManager.listMetrics(null,null,null,null,null,null)));
    Date start=new Date();
    String accountId="account_this";
    List<List<ListMetricDimension>> dimensionChoices=new ArrayList<List<ListMetricDimension>>();
    for (int i=1; i <= n; i++) {
      ListMetricDimension d1=new ListMetricDimension("dimension_" + i,"dimension_this");
      ListMetricDimension d2=new ListMetricDimension("dimension_" + i,"dimension_both");
      dimensionChoices.add(Lists.newArrayList(d1,d2));
    }
    List<String> metricNames=Lists.newArrayList("metric_name_this","metric_name_both");
    List<String> namespaces=Lists.newArrayList("namespace_this","namespace_both");
    for (    String metricName : metricNames) {
      for (      String namespace : namespaces) {
        for (        Collection<ListMetricDimension> dimensions : new PowerChoiceIterable<ListMetricDimension>(dimensionChoices)) {
          ListMetricManager.addMetric(accountId,metricName,namespace,toDimensionMap(dimensions));
        }
      }
    }
    Date middle=new Date();
    accountId="account_that";
    dimensionChoices=new ArrayList<List<ListMetricDimension>>();
    for (int i=1; i <= n; i++) {
      ListMetricDimension d1=new ListMetricDimension("dimension_" + i,"dimension_that");
      ListMetricDimension d2=new ListMetricDimension("dimension_" + i,"dimension_both");
      dimensionChoices.add(Lists.newArrayList(d1,d2));
    }
    metricNames=Lists.newArrayList("metric_name_that","metric_name_both");
    namespaces=Lists.newArrayList("namespace_that","namespace_both");
    for (    String metricName : metricNames) {
      for (      String namespace : namespaces) {
        for (        Collection<ListMetricDimension> dimensions : new PowerChoiceIterable<ListMetricDimension>(dimensionChoices)) {
          ListMetricManager.addMetric(accountId,metricName,namespace,toDimensionMap(dimensions));
        }
      }
    }
    Date end=new Date();
    LOG.fatal("start=" + start);
    LOG.fatal("middle=" + middle);
    LOG.fatal("end=" + end);
    List<String> accountNames=new ArrayList<String>();
    accountNames.add(null);
    accountNames.add("account_this");
    accountNames.add("account_that");
    metricNames=new ArrayList<String>();
    metricNames.add(null);
    metricNames.add("metric_name_this");
    metricNames.add("metric_name_that");
    metricNames.add("metric_name_both");
    namespaces=new ArrayList<String>();
    namespaces.add(null);
    namespaces.add("namespace_this");
    namespaces.add("namespace_that");
    namespaces.add("namespace_both");
    List<Date> afters=new ArrayList<Date>();
    afters.add(null);
    afters.add(start);
    afters.add(middle);
    afters.add(end);
    List<Date> befores=new ArrayList<Date>();
    befores.add(null);
    befores.add(start);
    befores.add(middle);
    befores.add(end);
    dimensionChoices=new ArrayList<List<ListMetricDimension>>();
    for (int i=1; i <= n; i++) {
      ListMetricDimension d1=new ListMetricDimension("dimension_" + i,"dimension_that");
      ListMetricDimension d2=new ListMetricDimension("dimension_" + i,"dimension_both");
      ListMetricDimension d3=new ListMetricDimension("dimension_" + i,"dimension_this");
      dimensionChoices.add(Lists.newArrayList(d1,d2,d3));
    }
    int totalReads=0;
    int totalExpectedReads=3 * 4 * 4* 4* 4* intPow(4,n);
    for (    String accountName : accountNames) {
      for (      String metricName : metricNames) {
        for (        String namespace : namespaces) {
          for (          Date after : afters) {
            for (            Date before : befores) {
              for (              Collection<ListMetricDimension> dimensions : new PowerChoiceIterable<ListMetricDimension>(dimensionChoices)) {
                Collection<ListMetric> metrics=ListMetricManager.listMetrics(accountName,metricName,namespace,toDimensionMap(dimensions),after,before);
                int numValues=predictedResults(accountName,metricName,namespace,toDimensionMap(dimensions),after,before,start,middle,end,n);
                boolean checkAccuracy=assertSize(numValues,metrics);
                if (!checkAccuracy) {
                  LOG.fatal("Expected: " + numValues + ", got "+ (metrics == null ? 0 : metrics.size()));
                  LOG.fatal(paramsToString(accountName,metricName,namespace,toDimensionMap(dimensions),after,before,start,middle,end,n));
                }
                totalReads++;
                if (totalReads % 1000 == 0) {
                  LOG.fatal("Read " + totalReads + " of "+ totalExpectedReads);
                }
              }
            }
          }
        }
      }
    }
    LOG.fatal("Assertion Result: " + assertSize(intPow(2,3) * intPow(3,n),ListMetricManager.listMetrics(null,null,null,null,null,null)));
    ListMetricManager.deleteMetrics(start);
    LOG.fatal("Assertion Result: " + assertSize(intPow(2,3) * intPow(3,n),ListMetricManager.listMetrics(null,null,null,null,null,null)));
    ListMetricManager.deleteMetrics(middle);
    LOG.fatal("Assertion Result: " + assertSize(intPow(2,2) * intPow(3,n),ListMetricManager.listMetrics(null,null,null,null,null,null)));
    ListMetricManager.deleteMetrics(end);
    LOG.fatal("Assertion Result: " + assertSize(0,ListMetricManager.listMetrics(null,null,null,null,null,null)));
  }
 catch (  Throwable ex) {
    LOG.fatal(ex,ex);
    ex.printStackTrace();
  }
}
