{
  String imageLocation=request.getImageLocation();
  String[] imagePathParts;
  try {
    imagePathParts=ImageUtil.getImagePathParts(imageLocation);
    ImageUtil.checkBucketAcl(request,imagePathParts);
  }
 catch (  EucalyptusCloudException e) {
    LOG.trace(e,e);
    throw e;
  }
  ImageInfo imageInfo=new ImageInfo(imageLocation,request.getUserId(),"available",true);
  try {
    WalrusUtil.verifyManifestIntegrity(imageInfo);
  }
 catch (  EucalyptusCloudException e) {
    throw new EucalyptusCloudException("Image registration failed because the manifest referenced is invalid or unavailable.");
  }
  String userName=request.getUserId();
  Document inputSource=ImageUtil.getManifestDocument(imagePathParts,userName);
  XPath xpath=XPathFactory.newInstance().newXPath();
  String arch=ImageUtil.extractArchitecture(inputSource,xpath);
  imageInfo.setArchitecture((arch == null) ? "i386" : arch);
  String kernelId=ImageUtil.extractKernelId(inputSource,xpath);
  String ramdiskId=ImageUtil.extractRamdiskId(inputSource,xpath);
  List<ProductCode> prodCodes=extractProductCodes(inputSource,xpath);
  imageInfo.getProductCodes().addAll(prodCodes);
  if ("yes".equals(kernelId) || "true".equals(kernelId) || imagePathParts[1].startsWith("vmlinuz")) {
    if (!request.isAdministrator())     throw new EucalyptusCloudException("Only administrators can register kernel images.");
    imageInfo.setImageType(ImageManager.IMAGE_KERNEL);
    imageInfo.setImageId(ImageUtil.newImageId(ImageManager.IMAGE_KERNEL_PREFIX,imageInfo.getImageLocation()));
    imageInfo.setPlatform(ImageManager.IMAGE_PLATFORM_DEFAULT);
  }
 else   if ("yes".equals(ramdiskId) || "true".equals(ramdiskId) || imagePathParts[1].startsWith("initrd")) {
    if (!request.isAdministrator())     throw new EucalyptusCloudException("Only administrators can register ramdisk images.");
    imageInfo.setImageType(ImageManager.IMAGE_RAMDISK);
    imageInfo.setImageId(ImageUtil.newImageId(ImageManager.IMAGE_RAMDISK_PREFIX,imageInfo.getImageLocation()));
    imageInfo.setPlatform(ImageManager.IMAGE_PLATFORM_DEFAULT);
  }
 else {
    if (imagePathParts[1].startsWith(ImageManager.IMAGE_PLATFORM_WINDOWS) && System.getProperty("euca.disable.windows") == null) {
      imageInfo.setPlatform(ImageManager.IMAGE_PLATFORM_WINDOWS);
    }
 else {
      imageInfo.setPlatform(ImageManager.IMAGE_PLATFORM_DEFAULT);
      if (kernelId != null) {
        try {
          ImageUtil.getImageInfobyId(kernelId);
        }
 catch (        EucalyptusCloudException e) {
          throw new EucalyptusCloudException("Referenced kernel id is invalid: " + kernelId);
        }
      }
      if (ramdiskId != null) {
        try {
          ImageUtil.getImageInfobyId(ramdiskId);
        }
 catch (        EucalyptusCloudException e) {
          throw new EucalyptusCloudException("Referenced ramdisk id is invalid: " + ramdiskId);
        }
      }
    }
    imageInfo.setImageType(ImageManager.IMAGE_MACHINE);
    imageInfo.setKernelId(kernelId);
    imageInfo.setRamdiskId(ramdiskId);
    imageInfo.setImageId(ImageUtil.newImageId(ImageManager.IMAGE_MACHINE_PREFIX,imageInfo.getImageLocation()));
  }
  String signature=null;
  try {
    signature=(String)xpath.evaluate("/manifest/signature/text()",inputSource,XPathConstants.STRING);
  }
 catch (  XPathExpressionException e) {
    LOG.warn(e.getMessage());
  }
  imageInfo.setSignature(signature);
  EntityWrapper<ImageInfo> db=new EntityWrapper<ImageInfo>();
  try {
    db.add(imageInfo);
    UserInfo user=UserInfoStore.getUserInfo(new UserInfo(request.getUserId()));
    imageInfo.getPermissions().add(user);
    db.commit();
    LOG.info("Registering image pk=" + imageInfo.getId() + " ownerId="+ user.getUserName());
  }
 catch (  NoSuchUserException e) {
    db.rollback();
    throw new EucalyptusCloudException("can not find user info");
  }
  LOG.info("Triggering cache population in Walrus for: " + imageInfo.getId());
  WalrusUtil.checkValid(imageInfo);
  WalrusUtil.triggerCaching(imageInfo);
  RegisterImageResponseType reply=(RegisterImageResponseType)request.getReply();
  reply.setImageId(imageInfo.getImageId());
  return reply;
}
