{
  final Object payloadObject=exception.getFailedMessage().getPayload();
  final EucalyptusCloudException cloudException=Exceptions.findCause(exception,EucalyptusCloudException.class);
  EventRecord.here(TokensErrorHandler.class,EventType.MSG_REPLY,payloadObject.getClass().getSimpleName()).debug();
  LOG.trace("Caught exception while servicing: " + payloadObject);
  if (cloudException != null) {
    try {
      final BaseMessage payload=parsePayload(payloadObject);
      final TokensErrorResponseType errorResp=new TokensErrorResponseType();
      final HttpResponseStatus status;
      final String code;
      final String type;
      if (cloudException instanceof TokensException) {
        final TokensException tokensException=(TokensException)cloudException;
        status=tokensException.getStatus();
        code=tokensException.getError();
        type=tokensException.getType();
      }
 else {
        status=HttpResponseStatus.INTERNAL_SERVER_ERROR;
        code=INTERNAL_FAILURE;
        type="Receiver";
      }
      errorResp.setHttpStatus(status);
      errorResp.setCorrelationId(payload.getCorrelationId());
      errorResp.setRequestId(payload.getCorrelationId());
      final TokensErrorType error=new TokensErrorType();
      error.setType(type);
      error.setCode(code);
      error.setMessage(cloudException.getMessage());
      errorResp.getErrors().add(error);
      Contexts.response(errorResp);
    }
 catch (    final PayloadParseException e) {
      LOG.error("Failed to parse payload ",e.getCause());
    }
  }
 else {
    LOG.error("Unable to handle exception",exception);
  }
}
