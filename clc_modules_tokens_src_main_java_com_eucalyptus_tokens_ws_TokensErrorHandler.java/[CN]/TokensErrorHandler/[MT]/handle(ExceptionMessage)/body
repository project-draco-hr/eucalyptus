{
  EventRecord.here(TokensErrorHandler.class,EventType.MSG_REPLY,exMsg.getPayload().getClass().getSimpleName()).debug();
  LOG.trace("Caught exception while servicing: " + exMsg.getPayload());
  final Throwable exception=exMsg.getException();
  if (exception instanceof MessagingException && exception.getCause() instanceof EucalyptusCloudException) {
    try {
      final EucalyptusCloudException cloudException=(EucalyptusCloudException)exception.getCause();
      final BaseMessage payload=parsePayload(((MessagingException)exception).getUmoMessage().getPayload());
      final TokensErrorResponseType errorResp=new TokensErrorResponseType();
      final HttpResponseStatus status;
      final String code;
      if (cloudException instanceof TokensException) {
        final TokensException tokensException=(TokensException)cloudException;
        status=tokensException.getStatus();
        code=tokensException.getError();
      }
 else {
        status=HttpResponseStatus.INTERNAL_SERVER_ERROR;
        code=INTERNAL_FAILURE;
      }
      errorResp.setHttpStatus(status);
      errorResp.setCorrelationId(payload.getCorrelationId());
      errorResp.setRequestId(payload.getCorrelationId());
      final TokensErrorType error=new TokensErrorType();
      error.setType("Receiver");
      error.setCode(code);
      error.setMessage(cloudException.getMessage());
      errorResp.getErrors().add(error);
      Contexts.response(errorResp);
    }
 catch (    final PayloadParseException e) {
      LOG.error("Failed to parse payload ",e.getCause());
    }
  }
 else {
    LOG.error("Unable to handle exception",exception);
  }
}
