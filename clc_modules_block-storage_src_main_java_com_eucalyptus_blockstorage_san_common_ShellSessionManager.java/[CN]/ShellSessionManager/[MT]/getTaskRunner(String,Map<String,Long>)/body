{
  return new TaskRunner(){
    private boolean connected=false;
    private int taskNumber=1;
    private Map<String,Long> timingMap=timings == null ? Maps.<String,Long>newLinkedHashMap() : timings;
    private void init(){
      try {
        connect();
        connected=true;
      }
 catch (      EucalyptusCloudException e) {
        LOG.error(e);
      }
    }
    @Override public String runTask(    final AbstractSANTask task) throws InterruptedException {
      String returnValue="";
      if (!connected) {
        timingMap.put("begin",System.currentTimeMillis());
        init();
        timingMap.put("connect",System.currentTimeMillis());
      }
      if (!connected)       return returnValue;
      timingMap.put("pre-task-" + taskNumber,System.currentTimeMillis());
      try {
        writer.write("" + task.getCommand() + task.getEOFCommand());
        writer.flush();
        for (String line=null; (line=reader.readLine()) != null; ) {
          line=line + "\r";
          if (line.contains("" + task.getEOFCommand()))           break;
          returnValue+=line;
        }
      }
 catch (      IOException e) {
        LOG.error(e,e);
      }
 finally {
        timingMap.put("task-" + taskNumber,System.currentTimeMillis());
        taskNumber++;
      }
      return returnValue;
    }
    @Override public void close(){
      timingMap.put("pre-close",System.currentTimeMillis());
      try {
        if (writer != null)         try {
          writer.write("logout\r");
          writer.flush();
        }
 catch (        Exception e) {
          LOG.warn("Error logging out of session",e);
        }
        if (reader != null) {
          Closeables.close(reader,true);
          reader=null;
        }
        if (writer != null) {
          Closeables.close(writer,true);
          writer=null;
        }
        if (channel != null) {
          channel.getSession().disconnect();
          channel.disconnect();
          channel=null;
        }
      }
 catch (      JSchException|IOException e) {
        LOG.error(e,e);
      }
 finally {
        timingMap.put("close",System.currentTimeMillis());
        if (logTiming)         dumpTiming(timingMap,description);
      }
    }
  }
;
}
