{
  try {
    POLICY_NAME_CHECKER.check(name);
  }
 catch (  InvalidValueException e) {
    Debugging.logError(LOG,e,"Invalid policy name " + name);
    throw new AuthException(AuthException.INVALID_NAME,e);
  }
  if (DatabaseAuthUtils.policyNameinList(name,this.getPolicies()) && !allowUpdate) {
    Debugging.logError(LOG,null,"Policy name already used: " + name);
    throw new AuthException(AuthException.INVALID_NAME);
  }
  final PolicyPolicy policyPolicy=PolicyParser.getInstance().parse(policy);
  final PolicyEntity parsedPolicy=PolicyEntity.create(name,policyPolicy.getPolicyVersion(),policy);
  if (this.isAccountAdmin() && containsAllowEffect(policyPolicy)) {
    throw new PolicyParseException("Policy with Allow effect can not be assigned to account/account admin");
  }
  try (final TransactionResource db=Entities.transactionFor(UserEntity.class)){
    UserEntity userEntity=DatabaseAuthUtils.getUnique(UserEntity.class,"userId",this.delegate.getUserId());
    final GroupEntity groupEntity=getUserGroupEntity(userEntity);
    if (groupEntity == null) {
      throw new RuntimeException("Can't find user group for user " + this.delegate.getName());
    }
    final PolicyEntity remove=DatabaseAuthUtils.removeGroupPolicy(groupEntity,name);
    if (remove != null) {
      Entities.delete(remove);
    }
    Entities.persist(parsedPolicy);
    parsedPolicy.setGroup(groupEntity);
    groupEntity.getPolicies().add(parsedPolicy);
    db.commit();
    return new DatabasePolicyProxy(parsedPolicy);
  }
 catch (  Exception e) {
    Debugging.logError(LOG,e,"Failed to attach policy for " + this.delegate.getName());
    throw new AuthException("Failed to attach policy",e);
  }
}
