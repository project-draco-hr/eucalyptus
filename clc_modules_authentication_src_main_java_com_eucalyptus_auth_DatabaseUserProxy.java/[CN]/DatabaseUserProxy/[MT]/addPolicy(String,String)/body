{
  try {
    POLICY_NAME_CHECKER.check(name);
  }
 catch (  InvalidValueException e) {
    Debugging.logError(LOG,e,"Invalid policy name " + name);
    throw new AuthException(AuthException.INVALID_NAME,e);
  }
  if (DatabaseAuthUtils.policyNameinList(name,this.getPolicies())) {
    Debugging.logError(LOG,null,"Policy name already used: " + name);
    throw new AuthException(AuthException.INVALID_NAME);
  }
  PolicyEntity parsedPolicy=PolicyParser.getInstance().parse(policy);
  parsedPolicy.setName(name);
  EntityWrapper<GroupEntity> db=EntityWrapper.get(GroupEntity.class);
  try {
    UserEntity userEntity=DatabaseAuthUtils.getUnique(db.recast(UserEntity.class),UserEntity.class,"userId",this.delegate.getUserId());
    GroupEntity groupEntity=getUserGroupEntity(userEntity);
    if (groupEntity == null) {
      throw new RuntimeException("Can't find user group for user " + this.delegate.getName());
    }
    db.recast(PolicyEntity.class).add(parsedPolicy);
    parsedPolicy.setGroup(groupEntity);
    for (    StatementEntity statement : parsedPolicy.getStatements()) {
      db.recast(StatementEntity.class).add(statement);
      statement.setPolicy(parsedPolicy);
      for (      AuthorizationEntity auth : statement.getAuthorizations()) {
        db.recast(AuthorizationEntity.class).add(auth);
        auth.setStatement(statement);
      }
      for (      ConditionEntity cond : statement.getConditions()) {
        db.recast(ConditionEntity.class).add(cond);
        cond.setStatement(statement);
      }
    }
    groupEntity.getPolicies().add(parsedPolicy);
    db.commit();
    return new DatabasePolicyProxy(parsedPolicy);
  }
 catch (  Exception e) {
    db.rollback();
    Debugging.logError(LOG,e,"Failed to attach policy for " + this.delegate.getName());
    throw new AuthException("Failed to attach policy",e);
  }
}
