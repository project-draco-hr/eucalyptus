{
  String directory=SubDirectory.KEYS.toString() + File.separator + config.getName();
  File keyDir=new File(directory);
  LOG.info("creating keys in " + directory);
  if (!keyDir.mkdir() && !keyDir.exists()) {
    throw new ServiceRegistrationException("Failed to create cluster key directory: " + keyDir.getAbsolutePath());
  }
 else   if (!keyDir.canWrite()) {
    throw new ServiceRegistrationException("Cluster key directory is not writeable: " + keyDir.getAbsolutePath());
  }
  KeyPair clusterKp=Certs.generateKeyPair();
  X509Certificate clusterX509=Certs.generateServiceCertificate(clusterKp,"cc-" + config.getName());
  KeyPair nodeKp=Certs.generateKeyPair();
  X509Certificate nodeX509=Certs.generateServiceCertificate(nodeKp,"nc-" + config.getName());
  FileWriter out=null;
  try {
    PEMFiles.write(directory + File.separator + "cluster-pk.pem",clusterKp.getPrivate());
    PEMFiles.write(directory + File.separator + "cluster-cert.pem",clusterX509);
    PEMFiles.write(directory + File.separator + "node-pk.pem",nodeKp.getPrivate());
    PEMFiles.write(directory + File.separator + "node-cert.pem",nodeX509);
    X509Certificate systemX509=SystemCredentialProvider.getCredentialProvider(Component.eucalyptus).getCertificate();
    String hexSig=Hmacs.generateSystemToken("vtunpass".getBytes());
    PEMFiles.write(directory + File.separator + "cloud-cert.pem",systemX509);
    out=new FileWriter(directory + File.separator + "vtunpass");
    out.write(hexSig);
    out.flush();
    out.close();
  }
 catch (  IOException ex) {
    LOG.error(ex,ex);
    throw new ServiceRegistrationException("Failed to store cluster keys: " + ex.getMessage(),ex);
  }
 finally {
    if (out != null) {
      try {
        out.close();
      }
 catch (      IOException e) {
        LOG.error(e);
      }
    }
  }
  EntityWrapper<ClusterCredentials> credDb=Authentication.getEntityWrapper();
  try {
    ClusterCredentials componentCredentials=new ClusterCredentials(config.getName());
    try {
      componentCredentials=credDb.getUnique(componentCredentials);
      componentCredentials.setClusterCertificate(X509Cert.fromCertificate(clusterX509));
      componentCredentials.setNodeCertificate(X509Cert.fromCertificate(nodeX509));
      credDb.merge(componentCredentials);
    }
 catch (    Exception ex) {
      componentCredentials.setClusterCertificate(X509Cert.fromCertificate(clusterX509));
      componentCredentials.setNodeCertificate(X509Cert.fromCertificate(nodeX509));
      credDb.add(componentCredentials);
    }
    credDb.commit();
  }
 catch (  Exception e) {
    LOG.error(e,e);
    credDb.rollback();
  }
}
