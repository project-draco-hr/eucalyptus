{
  Writer writer=new OutputStreamWriter(os);
  writer.write("<html><body>\n");
  writer.write("<h1>Instance Report</h1>\n");
  writer.write("<h4>Begin:" + ms2Date(report.getBeginMs()) + "</h4>\n");
  writer.write("<h4>End:" + ms2Date(report.getEndMs()) + "</h4>\n");
  writer.write("<h3>Resource Usage Section</h3>\n");
  writer.write("<table border=0>\n");
  writer.write((new Row(VALUE_WIDTH)).addEmptyCols(6,LABEL_WIDTH).addEmptyCols(5,VALUE_WIDTH).addCol("Net In " + units.getSizeUnit(),VALUE_WIDTH,3,"center").addCol("Net Out " + units.getSizeUnit(),VALUE_WIDTH,3,"center").toString());
  writer.write((new Row(VALUE_WIDTH)).addEmptyCols(6,LABEL_WIDTH).addCol("InstanceId").addCol("Type").addCol("#").addCol("Time").addCol("CpuUsage%").addCol("Between").addCol("Within").addCol("Public").addCol("Between").addCol("Within").addCol("Public").toString());
  for (  String zoneName : report.getZones().keySet()) {
    AvailabilityZoneArtEntity zone=report.getZones().get(zoneName);
    writer.write((new InsRow()).addCol("Zone: " + zoneName,LABEL_WIDTH,3,"left").addEmptyCols(3,LABEL_WIDTH).addCol("cumul.").addCol("cumul.").addUsageCols(zone.getUsageTotals().getInstanceTotals(),units).toString());
    for (    String clusterName : zone.getClusters().keySet()) {
      ClusterArtEntity cluster=zone.getClusters().get(clusterName);
      writer.write((new InsRow()).addEmptyCols(1,LABEL_WIDTH).addCol("Cluster: " + clusterName,LABEL_WIDTH,3,"left").addEmptyCols(2,LABEL_WIDTH).addCol("cumul.").addCol("cumul.").addUsageCols(cluster.getUsageTotals().getInstanceTotals(),units).toString());
      for (      String accountName : cluster.getAccounts().keySet()) {
        AccountArtEntity account=cluster.getAccounts().get(accountName);
        writer.write((new InsRow()).addEmptyCols(2,LABEL_WIDTH).addCol("Account: " + accountName,LABEL_WIDTH,3,"left").addEmptyCols(1,LABEL_WIDTH).addCol("cumul.").addCol("cumul.").addUsageCols(account.getUsageTotals().getInstanceTotals(),units).toString());
        for (        String userName : account.getUsers().keySet()) {
          UserArtEntity user=account.getUsers().get(userName);
          writer.write((new InsRow()).addEmptyCols(3,LABEL_WIDTH).addCol("User: " + userName,LABEL_WIDTH,3,"left").addCol("cumul.").addCol("cumul.").addUsageCols(user.getUsageTotals().getInstanceTotals(),units).toString());
          for (          String instanceUuid : user.getInstances().keySet()) {
            InstanceArtEntity instance=user.getInstances().get(instanceUuid);
            writer.write((new InsRow()).addEmptyCols(6,LABEL_WIDTH).addCol(instance.getInstanceId()).addCol(instance.getInstanceType()).addUsageCols(instance.getUsage(),units).toString());
          }
        }
      }
    }
  }
  writer.write("</table>\n");
  writer.write("<h3>Instance Running Times Section</h3>\n");
  writer.write("<table border=0>\n");
  writer.write((new Row(VALUE_WIDTH)).addEmptyCols(6,LABEL_WIDTH).addCol("m1.Small",VALUE_WIDTH,2,"center").addCol("c1.Medium",VALUE_WIDTH,2,"center").addCol("m1.Large",VALUE_WIDTH,2,"center").addCol("c1.Large",VALUE_WIDTH,2,"center").addCol("m1.XLarge",VALUE_WIDTH,2,"center").toString());
  writer.write(new Row(VALUE_WIDTH).addEmptyCols(6,LABEL_WIDTH).addCol("num",VALUE_WIDTH,1,"center").addCol("time",VALUE_WIDTH,1,"center").addCol("num",VALUE_WIDTH,1,"center").addCol("time",VALUE_WIDTH,1,"center").addCol("num",VALUE_WIDTH,1,"center").addCol("time",VALUE_WIDTH,1,"center").addCol("num",VALUE_WIDTH,1,"center").addCol("time",VALUE_WIDTH,1,"center").addCol("num",VALUE_WIDTH,1,"center").addCol("time",VALUE_WIDTH,1,"center").toString());
  for (  String zoneName : report.getZones().keySet()) {
    AvailabilityZoneArtEntity zone=report.getZones().get(zoneName);
    writer.write((new InsRow()).addCol("Zone: " + zoneName,LABEL_WIDTH,3,"left").addEmptyCols(3,LABEL_WIDTH).addTimeCols(zone.getUsageTotals(),units).toString());
    for (    String clusterName : zone.getClusters().keySet()) {
      ClusterArtEntity cluster=zone.getClusters().get(clusterName);
      writer.write((new InsRow()).addEmptyCols(1,LABEL_WIDTH).addCol("Cluster: " + clusterName,LABEL_WIDTH,3,"left").addEmptyCols(2,LABEL_WIDTH).addTimeCols(cluster.getUsageTotals(),units).toString());
      for (      String accountName : cluster.getAccounts().keySet()) {
        AccountArtEntity account=cluster.getAccounts().get(accountName);
        writer.write((new InsRow()).addEmptyCols(2,LABEL_WIDTH).addCol("Account: " + accountName,LABEL_WIDTH,3,"left").addEmptyCols(1,LABEL_WIDTH).addTimeCols(account.getUsageTotals(),units).toString());
        for (        String userName : account.getUsers().keySet()) {
          UserArtEntity user=account.getUsers().get(userName);
          writer.write((new InsRow()).addEmptyCols(3,LABEL_WIDTH).addCol("User: " + userName,LABEL_WIDTH,3,"left").addTimeCols(user.getUsageTotals(),units).toString());
        }
      }
    }
  }
  writer.write("</table>\n");
  writer.write("</body></html>\n");
  writer.flush();
}
