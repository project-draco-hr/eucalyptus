{
  final List<Callable<CheckedListenableFuture<P>>> callables=Lists.newArrayList();
  final StateMachine<P,S,?> fsm=hasFsm.getStateMachine();
  if (toStates.length > 0) {
    for (    final S toState : toStates) {
      callables.add(new Callable<CheckedListenableFuture<P>>(){
        @Override public CheckedListenableFuture<P> call(){
          try {
            CheckedListenableFuture<P> res=fsm.transition(toState);
            res.get();
            return res;
          }
 catch (          final IllegalStateException ex) {
            Logs.exhaust().error(ex,ex);
            return Futures.predestinedFailedFuture(ex);
          }
catch (          final ExistingTransitionException ex) {
            Logs.exhaust().error(ex,ex);
            return Futures.predestinedFailedFuture(ex.getCause());
          }
catch (          final UndeclaredThrowableException ex) {
            Logs.exhaust().error(ex,ex);
            return Futures.predestinedFailedFuture(ex.getCause());
          }
catch (          final Throwable ex) {
            Logs.exhaust().error(ex,ex);
            return Futures.predestinedFailedFuture(ex);
          }
        }
      }
);
    }
  }
 else {
    callables.add(new Callable<CheckedListenableFuture<P>>(){
      @Override public CheckedListenableFuture<P> call(){
        CheckedListenableFuture<P> ret=Futures.predestinedFuture(hasFsm.getStateMachine().getParent());
        return ret;
      }
    }
);
  }
  return callables;
}
