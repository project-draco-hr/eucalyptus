{
  LoadBalancer lb;
  try {
    lb=LoadBalancers.getLoadbalancer(evt.getContext(),evt.getLoadBalancer());
  }
 catch (  NoSuchElementException ex) {
    throw new EventHandlerException("Could not find the loadbalancer with name=" + evt.getLoadBalancer(),ex);
  }
catch (  Exception ex) {
    throw new EventHandlerException("Error while looking for loadbalancer with name=" + evt.getLoadBalancer(),ex);
  }
  if (lb.getLoadbalancerDeploymentVersion() == null || !DeploymentVersion.getVersion(lb.getLoadbalancerDeploymentVersion()).isEqualOrLaterThan(DeploymentVersion.v4_2_0)) {
    throw new EventHandlerException("Enabling zone is not supported for loadbalancers created prior to 4.2. Please create a new loadbalancer.");
  }
  final List<LoadBalancerZoneCoreView> availableZones=Lists.newArrayList(Collections2.filter(lb.getZones(),new Predicate<LoadBalancerZoneCoreView>(){
    @Override public boolean apply(    @Nullable LoadBalancerZoneCoreView arg0){
      return arg0.getState().equals(LoadBalancerZone.STATE.InService);
    }
  }
));
  final List<String> zoneNames=Lists.newArrayList(Iterables.transform(availableZones,LoadBalancerZoneCoreView.name()));
  evt.getZones().removeAll(zoneNames);
  try {
    final List<ClusterInfoType> zones=EucalyptusActivityTasks.getInstance().describeAvailabilityZones(false);
    final List<String> foundZones=Lists.transform(zones,new Function<ClusterInfoType,String>(){
      @Override public String apply(      @Nullable ClusterInfoType arg0){
        return arg0.getZoneName();
      }
    }
);
    for (    final String requestedZone : evt.getZones()) {
      if (!foundZones.contains(requestedZone)) {
        throw new EventHandlerException(String.format("The requested zone %s is not valid",requestedZone));
      }
    }
  }
 catch (  EventHandlerException ex) {
    throw ex;
  }
catch (  Exception ex) {
  }
}
