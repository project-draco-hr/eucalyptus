{
  LoadBalancer lb;
  try {
    lb=LoadBalancers.getLoadbalancer(evt.getContext(),evt.getLoadBalancer());
  }
 catch (  NoSuchElementException ex) {
    throw new EventHandlerException("Could not find the loadbalancer with name=" + evt.getLoadBalancer(),ex);
  }
catch (  Exception ex) {
    throw new EventHandlerException("Error while looking for loadbalancer with name=" + evt.getLoadBalancer(),ex);
  }
  final StoredResult<String> updated=this.getChain().findHandler(CreateOrUpdateAutoscalingGroup.class);
  if (updated != null && updated.getResult() != null) {
    for (    final String zone : updated.getResult()) {
      try (final TransactionResource db=Entities.transactionFor(LoadBalancerZone.class)){
        try {
          final LoadBalancerZone exist=Entities.uniqueResult(LoadBalancerZone.named(lb,zone));
          exist.setState(LoadBalancerZone.STATE.InService);
        }
 catch (        NoSuchElementException ex) {
          final String subnetId=evt.getZoneToSubnetIdMap() == null ? null : evt.getZoneToSubnetIdMap().get(zone);
          final LoadBalancerZone newZone=LoadBalancerZone.create(lb,zone,subnetId);
          newZone.setState(LoadBalancerZone.STATE.InService);
          Entities.persist(newZone);
          persistedZones.add(newZone);
        }
        db.commit();
      }
 catch (      Exception ex) {
        LOG.debug("Error adding load balancer zone",ex);
      }
    }
  }
}
