{
  RunningInstancesItemType runningInstance;
  try {
    final boolean dns=!ComponentIds.lookup(Dns.class).runLimitedServices();
    runningInstance=new RunningInstancesItemType();
    runningInstance.setAmiLaunchIndex(Integer.toString(input.launchRecord.getLaunchIndex()));
    if ((input.getBundleTaskState() != null) && !BundleState.none.equals(input.getBundleTaskState())) {
      runningInstance.setStateCode(Integer.toString(VmState.TERMINATED.getCode()));
      runningInstance.setStateName(VmState.TERMINATED.getName());
    }
 else {
      runningInstance.setStateCode(Integer.toString(input.getState().getCode()));
      runningInstance.setStateName(input.getState().getName());
    }
    runningInstance.setPlatform(input.getPlatform());
    runningInstance.setStateCode(Integer.toString(input.getState().getCode()));
    runningInstance.setStateName(input.getState().getName());
    runningInstance.setInstanceId(input.vmId.getInstanceId());
    runningInstance.setProductCodes(new ArrayList<String>());
    runningInstance.setImageId(input.bootRecord.getMachine().getDisplayName());
    runningInstance.setKernel(input.bootRecord.getKernel().getDisplayName());
    runningInstance.setRamdisk(input.bootRecord.getRamdisk().getDisplayName());
    if (dns) {
      String publicDnsName=input.getPublicDnsName();
      String privateDnsName=input.getPrivateDnsName();
      publicDnsName=(publicDnsName == null ? VmNetworkConfig.DEFAULT_IP : publicDnsName);
      privateDnsName=(privateDnsName == null ? VmNetworkConfig.DEFAULT_IP : privateDnsName);
      runningInstance.setDnsName(publicDnsName);
      runningInstance.setIpAddress(publicDnsName);
      runningInstance.setPrivateDnsName(privateDnsName);
      runningInstance.setPrivateIpAddress(privateDnsName);
    }
 else {
      String publicDnsName=input.getPublicAddress();
      String privateDnsName=input.getPrivateAddress();
      publicDnsName=(publicDnsName == null ? VmNetworkConfig.DEFAULT_IP : publicDnsName);
      privateDnsName=(privateDnsName == null ? VmNetworkConfig.DEFAULT_IP : privateDnsName);
      runningInstance.setPrivateDnsName(privateDnsName);
      runningInstance.setPrivateIpAddress(privateDnsName);
      if (!VmNetworkConfig.DEFAULT_IP.equals(publicDnsName)) {
        runningInstance.setDnsName(publicDnsName);
        runningInstance.setIpAddress(publicDnsName);
      }
 else {
        runningInstance.setDnsName(privateDnsName);
        runningInstance.setIpAddress(privateDnsName);
      }
    }
    runningInstance.setReason(input.runtimeState.getReason());
    if (input.bootRecord.getSshKeyPair() != null)     runningInstance.setKeyName(input.bootRecord.getSshKeyPair().getName());
 else     runningInstance.setKeyName("");
    runningInstance.setInstanceType(input.getVmType().getName());
    runningInstance.setPlacement(input.placement.getPartitionName());
    runningInstance.setLaunchTime(input.launchRecord.getLaunchTime());
    runningInstance.getBlockDevices().add(new InstanceBlockDeviceMapping("/dev/sda1"));
    for (    final VmVolumeAttachment attachedVol : input.runtimeState.getTransientVolumes().values()) {
      runningInstance.getBlockDevices().add(new InstanceBlockDeviceMapping(attachedVol.getDevice(),attachedVol.getVolumeId(),attachedVol.getStatus(),attachedVol.getAttachTime()));
    }
    return runningInstance;
  }
 catch (  final Exception ex) {
    LOG.error(ex,ex);
    throw Exceptions.toUndeclared(ex);
  }
}
