{
  return new Predicate<VmInfo>(){
    @Override public boolean apply(    final VmInfo runVm){
      if (!Entities.isPersistent(VmInstance.this)) {
        throw new TransientEntityException(this.toString());
      }
 else {
        final EntityTransaction db=Entities.get(VmInstance.class);
        try {
          final VmState state=VmState.Mapper.get(runVm.getStateName());
          final long splitTime=VmInstance.this.getSplitTime();
          final VmState oldState=VmInstance.this.getState();
          if ((VmState.PENDING.equals(state) || VmState.RUNNING.equals(state)) && (VmState.PENDING.equals(VmInstance.this.getState()) || VmState.RUNNING.equals(VmInstance.this.getState()))) {
            VmInstance.this.setState(VmState.Mapper.get(runVm.getStateName()),Reason.APPEND,"UPDATE");
            VmInstance.this.getRuntimeState().setServiceTag(runVm.getServiceTag());
            VmInstance.this.setBundleTaskState(runVm.getBundleTaskStateName());
            VmInstance.this.setCreateImageTaskState(runVm.getBundleTaskStateName());
            VmInstance.this.updateVolumeAttachments(runVm.getVolumes());
            VmInstance.this.updateAddresses(runVm.getNetParams().getIpAddress(),runVm.getNetParams().getIgnoredPublicIp());
          }
 else           if (VmStateSet.TERM.apply(VmInstance.this) && (VmInstance.this.getSplitTime() > VmInstances.BURY_TIME)) {
            VmInstance.this.setState(VmState.TERMINATED,Reason.EXPIRED);
          }
 else           if (VmStateSet.STOP.apply(VmInstance.this) && (VmInstance.this.getSplitTime() > VmInstances.BURY_TIME)) {
            VmInstance.this.setState(VmState.STOPPED,Reason.EXPIRED);
          }
 else           if (VmStateSet.NOT_RUNNING.apply(VmInstance.this) && (VmInstance.this.getSplitTime() > VmInstances.BURY_TIME)) {
            VmInstance.this.setState(VmState.BURIED,Reason.BURIED);
            VmInstances.deregister(VmInstance.this);
          }
 else {
            VmInstance.this.getRuntimeState().setServiceTag(runVm.getServiceTag());
            VmInstance.this.setBundleTaskState(runVm.getBundleTaskStateName());
            VmInstance.this.setCreateImageTaskState(runVm.getBundleTaskStateName());
            VmInstance.this.updateVolumeAttachments(runVm.getVolumes());
            VmInstance.this.updateAddresses(runVm.getNetParams().getIpAddress(),runVm.getNetParams().getIgnoredPublicIp());
            if (VmState.STOPPING.equals(VmInstance.this.getState()) && VmState.SHUTTING_DOWN.equals(VmState.Mapper.get(runVm.getStateName()))) {
              VmInstance.this.setState(VmState.STOPPED,Reason.APPEND,"STOPPED");
            }
 else             if (VmState.SHUTTING_DOWN.equals(VmInstance.this.getState()) && VmState.SHUTTING_DOWN.equals(VmState.Mapper.get(runVm.getStateName()))) {
              VmInstance.this.setState(VmState.TERMINATED,Reason.APPEND,"DONE");
            }
          }
          db.commit();
        }
 catch (        final Exception ex) {
          Logs.exhaust().error(ex,ex);
          db.rollback();
        }
      }
      return true;
    }
  }
;
}
