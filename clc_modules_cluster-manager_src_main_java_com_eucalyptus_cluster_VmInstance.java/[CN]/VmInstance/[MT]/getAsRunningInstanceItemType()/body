{
  final boolean dns=!ComponentIds.lookup(Dns.class).runLimitedServices();
  final RunningInstancesItemType runningInstance=new RunningInstancesItemType();
  runningInstance.setAmiLaunchIndex(Integer.toString(this.launchIndex));
  if ((this.getBundleTaskState() != null) && !BundleState.none.equals(this.getBundleTaskState())) {
    runningInstance.setStateCode(Integer.toString(VmState.TERMINATED.getCode()));
    runningInstance.setStateName(VmState.TERMINATED.getName());
  }
 else {
    runningInstance.setStateCode(Integer.toString(this.runtimeState.getReference().getCode()));
    runningInstance.setStateName(this.runtimeState.getReference().getName());
  }
  runningInstance.setPlatform(this.getPlatform());
  runningInstance.setStateCode(Integer.toString(this.runtimeState.getReference().getCode()));
  runningInstance.setStateName(this.runtimeState.getReference().getName());
  runningInstance.setInstanceId(this.instanceId);
  runningInstance.setProductCodes(new ArrayList<String>());
  try {
    runningInstance.setImageId(this.vbr.lookupRoot().getId());
  }
 catch (  final Exception ex) {
    LOG.error(ex,ex);
    runningInstance.setImageId("unknown");
  }
  try {
    runningInstance.setKernel(this.vbr.lookupKernel().getId());
  }
 catch (  final Exception ex) {
    LOG.error(ex,ex);
    runningInstance.setKernel("unknown");
  }
  try {
    runningInstance.setRamdisk(this.vbr.lookupRamdisk().getId());
  }
 catch (  final Exception ex) {
    LOG.error(ex,ex);
    runningInstance.setRamdisk("unknown");
  }
  if (dns) {
    String publicDnsName=this.getPublicDnsName();
    String privateDnsName=this.getPrivateDnsName();
    publicDnsName=(publicDnsName == null ? VmInstance.DEFAULT_IP : publicDnsName);
    privateDnsName=(privateDnsName == null ? VmInstance.DEFAULT_IP : privateDnsName);
    runningInstance.setDnsName(publicDnsName);
    runningInstance.setIpAddress(publicDnsName);
    runningInstance.setPrivateDnsName(privateDnsName);
    runningInstance.setPrivateIpAddress(privateDnsName);
  }
 else {
    String publicDnsName=this.getPublicAddress();
    String privateDnsName=this.getPrivateAddress();
    publicDnsName=(publicDnsName == null ? VmInstance.DEFAULT_IP : publicDnsName);
    privateDnsName=(privateDnsName == null ? VmInstance.DEFAULT_IP : privateDnsName);
    runningInstance.setPrivateDnsName(privateDnsName);
    runningInstance.setPrivateIpAddress(privateDnsName);
    if (!VmInstance.DEFAULT_IP.equals(publicDnsName)) {
      runningInstance.setDnsName(publicDnsName);
      runningInstance.setIpAddress(publicDnsName);
    }
 else {
      runningInstance.setDnsName(privateDnsName);
      runningInstance.setIpAddress(privateDnsName);
    }
  }
  runningInstance.setReason(this.getReason());
  if (this.getSshKeyPair() != null)   runningInstance.setKeyName(this.getSshKeyPair().getName());
 else   runningInstance.setKeyName("");
  runningInstance.setInstanceType(this.getVmType().getName());
  runningInstance.setPlacement(this.partitionName);
  runningInstance.setLaunchTime(this.launchTime);
  runningInstance.getBlockDevices().add(new InstanceBlockDeviceMapping("/dev/sda1"));
  for (  final AttachedVolume attachedVol : this.transientVolumes.values()) {
    runningInstance.getBlockDevices().add(new InstanceBlockDeviceMapping(attachedVol.getDevice(),attachedVol.getVolumeId(),attachedVol.getStatus(),attachedVol.getAttachTime()));
  }
  return runningInstance;
}
