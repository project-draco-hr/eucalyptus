{
  final EntityTransaction db=Entities.get(VmInstance.class);
  try {
    final VmType vmType=VmTypes.getVmType(input.getInstanceType().getName());
    final UserFullName userFullName=UserFullName.getInstance(input.getOwnerId());
    Partition partition;
    try {
      partition=Partitions.lookupByName(input.getPlacement());
    }
 catch (    final Exception ex2) {
      partition=Partitions.lookupByName("default");
    }
    @SuppressWarnings("deprecation") final BootableSet bootSet=Emis.newBootableSet(vmType,partition,input.getImageId(),input.getKernelId(),input.getRamdiskId());
    int launchIndex;
    try {
      launchIndex=Integer.parseInt(input.getLaunchIndex());
    }
 catch (    final Exception ex1) {
      launchIndex=1;
    }
    SshKeyPair keyPair=null;
    try {
      keyPair=KeyPairs.lookup(userFullName,input.getKeyValue());
    }
 catch (    final Exception ex) {
      keyPair=KeyPairs.noKey();
    }
    byte[] userData=null;
    try {
      userData=Base64.decode(input.getUserData());
    }
 catch (    final Exception ex) {
      userData=new byte[0];
    }
    List<NetworkGroup> networks=null;
    try {
      networks=Lists.transform(input.getGroupNames(),transformNetworkNames(userFullName));
    }
 catch (    final Exception ex) {
      LOG.error(ex,ex);
    }
    SetReference<PrivateNetworkIndex,VmInstance> index=null;
    ExtantNetwork exNet;
    final NetworkGroup network=(!networks.isEmpty() ? networks.get(0) : null);
    if (network != null) {
      if (!network.hasExtantNetwork()) {
        exNet=network.reclaim(input.getNetParams().getVlan());
      }
 else {
        exNet=network.extantNetwork();
        if (!exNet.getTag().equals(input.getNetParams().getVlan())) {
          exNet=null;
        }
 else {
          index=exNet.reclaimNetworkIndex(input.getNetParams().getNetworkIndex());
        }
      }
    }
    final VmInstance vmInst=new VmInstance.Builder().owner(userFullName).withIds(input.getInstanceId(),input.getReservationId()).bootRecord(bootSet,userData,keyPair,vmType).placement(partition,partition.getName()).networking(networks,index).build(launchIndex);
    vmInst.setNaturalId(input.getUuid());
    Address addr;
    try {
      addr=Addresses.getInstance().lookup(input.getNetParams().getIgnoredPublicIp());
      if (addr.isAssigned() && addr.getInstanceAddress().equals(input.getNetParams().getIpAddress()) && addr.getInstanceId().equals(input.getInstanceId())) {
        vmInst.updateAddresses(input.getNetParams().getIpAddress(),input.getNetParams().getIgnoredPublicIp());
      }
 else       if (!addr.isAssigned() && addr.isAllocated() && (addr.isSystemOwned() || addr.getOwner().equals(userFullName))) {
        vmInst.updateAddresses(input.getNetParams().getIpAddress(),input.getNetParams().getIgnoredPublicIp());
      }
 else {
        vmInst.updateAddresses(input.getNetParams().getIpAddress(),input.getNetParams().getIpAddress());
      }
    }
 catch (    final Exception ex) {
      LOG.error(ex);
    }
    Entities.persist(vmInst);
    db.commit();
    return true;
  }
 catch (  final Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
    return false;
  }
}
