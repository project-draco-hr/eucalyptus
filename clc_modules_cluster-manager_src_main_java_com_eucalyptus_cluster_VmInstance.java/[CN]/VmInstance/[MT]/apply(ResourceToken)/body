{
  final EntityTransaction db=Entities.get(VmInstance.class);
  try {
    final Allocation allocInfo=token.getAllocationInfo();
    VmInstance vmInst=new VmInstance.Builder().owner(allocInfo.getOwnerFullName()).withIds(token.getInstanceId(),allocInfo.getReservationId()).bootRecord(allocInfo.getBootSet(),allocInfo.getUserData(),allocInfo.getSshKeyPair(),allocInfo.getVmType()).placement(allocInfo.getPartition(),allocInfo.getRequest().getAvailabilityZone()).networking(allocInfo.getNetworkGroups(),token.getNetworkIndex()).build(token.getLaunchIndex());
    token.getNetworkIndex().set(vmInst);
    vmInst=Entities.persist(vmInst);
    db.commit();
    token.setVmInstance(vmInst);
    return vmInst;
  }
 catch (  final ResourceAllocationException ex) {
    db.rollback();
    Logs.extreme().error(ex,ex);
    throw Exceptions.toUndeclared(ex);
  }
catch (  final Exception ex) {
    db.rollback();
    Logs.extreme().error(ex,ex);
    throw Exceptions.toUndeclared(new TransactionExecutionException(ex));
  }
}
