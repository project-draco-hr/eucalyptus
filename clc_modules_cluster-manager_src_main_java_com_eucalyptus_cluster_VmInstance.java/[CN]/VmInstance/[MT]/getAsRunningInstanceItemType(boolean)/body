{
  RunningInstancesItemType runningInstance=new RunningInstancesItemType();
  runningInstance.setAmiLaunchIndex(Integer.toString(this.launchIndex));
  if (this.getBundleTaskState() != null && !BundleState.none.equals(this.getBundleTaskState())) {
    runningInstance.setStateCode(Integer.toString(VmState.TERMINATED.getCode()));
    runningInstance.setStateName(VmState.TERMINATED.getName());
  }
 else {
    runningInstance.setStateCode(Integer.toString(this.state.getReference().getCode()));
    runningInstance.setStateName(this.state.getReference().getName());
  }
  runningInstance.setPlatform(this.getPlatform());
  runningInstance.setStateCode(Integer.toString(this.state.getReference().getCode()));
  runningInstance.setStateName(this.state.getReference().getName());
  runningInstance.setInstanceId(this.instanceId);
  try {
    runningInstance.setImageId(this.vmTypeInfo.lookupRoot().getId());
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
  }
  try {
    runningInstance.setKernel(this.vmTypeInfo.lookupKernel().getId());
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
  }
  try {
    runningInstance.setRamdisk(this.vmTypeInfo.lookupRamdisk().getId());
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
  }
  if (dns) {
    runningInstance.setDnsName(this.getNetworkConfig().getPublicDnsName());
    runningInstance.setPrivateDnsName(this.getNetworkConfig().getPrivateDnsName());
  }
 else {
    runningInstance.setPrivateDnsName(this.getNetworkConfig().getIpAddress());
    if (!VmInstance.DEFAULT_IP.equals(this.getPublicAddress())) {
      runningInstance.setDnsName(this.getPublicAddress());
    }
 else {
      runningInstance.setDnsName(this.getNetworkConfig().getIpAddress());
    }
  }
  runningInstance.setReason(this.getReason());
  if (this.getKeyInfo() != null)   runningInstance.setKeyName(this.getKeyInfo().getName());
 else   runningInstance.setKeyName("");
  runningInstance.setInstanceType(this.getVmTypeInfo().getName());
  Group g=Iterables.find(Groups.listAllGroups(),new Predicate<Group>(){
    @Override public boolean apply(    Group arg0){
      return Iterables.any(arg0.getAuthorizations(),new Predicate<Authorization>(){
        @Override public boolean apply(        Authorization arg0){
          return arg0.check(new AvailabilityZonePermission(VmInstance.this.placement));
        }
      }
);
    }
  }
);
  runningInstance.setPlacement(g != null ? g.getName() : this.placement);
  runningInstance.setLaunchTime(this.launchTime);
  return runningInstance;
}
