{
  this.updateWatch.split();
  if (this.updateWatch.getSplitTime() > (1000 * 60 * 60)) {
    this.store();
    this.updateWatch.unsplit();
  }
 else {
    this.updateWatch.unsplit();
  }
  this.resetStopWatch();
  final VmState oldState=this.state.getReference();
  if (VmState.SHUTTING_DOWN.equals(newState) && VmState.SHUTTING_DOWN.equals(oldState) && Reason.USER_TERMINATED.equals(reason)) {
    VmInstances.cleanUp(this);
    if (!this.reasonDetails.contains(SEND_USER_TERMINATE)) {
      this.addReasonDetail(SEND_USER_TERMINATE);
    }
  }
 else   if (VmState.STOPPING.equals(newState) && VmState.STOPPING.equals(oldState) && Reason.USER_STOPPED.equals(reason)) {
    VmInstances.cleanUp(this);
    if (!this.reasonDetails.contains(SEND_USER_STOP)) {
      this.addReasonDetail(SEND_USER_STOP);
    }
  }
 else   if (VmState.TERMINATED.equals(newState) && VmState.TERMINATED.equals(oldState)) {
    VmInstances.getInstance().deregister(this.getName());
    try {
      Transactions.delete(this);
    }
 catch (    final ExecutionException ex) {
      LOG.error(ex,ex);
    }
  }
 else   if (!this.getState().equals(newState)) {
    if (Reason.APPEND.equals(reason)) {
      reason=this.reason;
    }
    this.addReasonDetail(extra);
    LOG.info(String.format("%s state change: %s -> %s",this.getInstanceId(),this.getState(),newState));
    this.reason=reason;
    if (this.state.isMarked() && VmState.PENDING.equals(this.getState())) {
      if (VmState.SHUTTING_DOWN.equals(newState) || VmState.PENDING.equals(newState)) {
        this.state.set(newState,true);
      }
 else {
        this.state.set(newState,false);
      }
    }
 else     if (this.state.isMarked() && VmState.SHUTTING_DOWN.equals(this.getState())) {
      LOG.debug("Ignoring events for state transition because the instance is marked as pending: " + oldState + " to "+ this.getState());
    }
 else     if (!this.state.isMarked()) {
      if ((oldState.ordinal() <= VmState.RUNNING.ordinal()) && (newState.ordinal() > VmState.RUNNING.ordinal())) {
        this.state.set(newState,false);
        VmInstances.cleanUp(this);
      }
 else       if (VmState.PENDING.equals(oldState) && VmState.RUNNING.equals(newState)) {
        this.state.set(newState,false);
      }
 else       if (VmState.TERMINATED.equals(newState) && (oldState.ordinal() <= VmState.RUNNING.ordinal())) {
        this.state.set(newState,false);
        VmInstances.getInstance().disable(this.getName());
        VmInstances.cleanUp(this);
      }
 else       if (VmState.TERMINATED.equals(newState) && (oldState.ordinal() > VmState.RUNNING.ordinal())) {
        this.state.set(newState,false);
        VmInstances.getInstance().disable(this.getName());
      }
 else       if ((oldState.ordinal() > VmState.RUNNING.ordinal()) && (newState.ordinal() <= VmState.RUNNING.ordinal())) {
        this.state.set(oldState,false);
        VmInstances.cleanUp(this);
      }
 else       if (newState.ordinal() > oldState.ordinal()) {
        this.state.set(newState,false);
      }
      this.store();
    }
 else {
      LOG.debug("Ignoring events for state transition because the instance is marked as pending: " + oldState + " to "+ this.getState());
    }
    if (!this.getState().equals(oldState)) {
      EventRecord.caller(VmInstance.class,EventType.VM_STATE,this.instanceId,this.owner,this.state.getReference().name(),this.launchTime);
    }
  }
}
