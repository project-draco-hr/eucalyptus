{
  super(owner,instanceId);
  this.bootSet=bootSet;
  this.privateNetwork=Boolean.FALSE;
  this.launchTime=new Date();
  this.blockBytes=0l;
  this.networkBytes=0l;
  this.reservationId=reservationId;
  this.launchIndex=launchIndex;
  this.instanceId=instanceId;
  this.clusterName=placement;
  String p=null;
  try {
    p=ServiceConfigurations.lookupByName(ClusterController.class,this.clusterName).getPartition();
  }
 catch (  final PersistenceException ex) {
    p=placement;
    LOG.debug("Failed to find cluster configuration named: " + this.clusterName + " using that as the partition name.");
  }
  this.partitionName=p;
  this.userData=userData;
  this.platform=platform;
  this.sshKeyPair=KeyPairs.noKey().equals(sshKeyPair) || (sshKeyPair == null) ? null : sshKeyPair;
  this.vmType=vmType;
  this.networkConfig.setMacAddress("d0:0d:" + VmInstances.asMacAddress(this.instanceId));
  this.networkConfig.setIpAddress(DEFAULT_IP);
  this.networkConfig.setIgnoredPublicIp(DEFAULT_IP);
  this.networkConfig.setPrivateDnsName(DEFAULT_IP);
  this.networkConfig.setPublicDnsName(DEFAULT_IP);
  this.updateDns();
  this.store();
}
