{
  final ImportKeyPairResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  boolean duplicate=false;
  try {
    KeyPairs.lookup(ctx.getUserFullName(),request.getKeyName());
    duplicate=true;
  }
 catch (  Exception e1) {
    try {
      final RSAPublicKey key=decodeKeyMaterial(request.getPublicKeyMaterial());
      final String keyFingerprint=KeyPairs.getPublicKeyFingerprint(key);
      if (keyFingerprint == null) {
        throw new GeneralSecurityException("Error generating fingerprint");
      }
      final Supplier<SshKeyPair> allocator=new Supplier<SshKeyPair>(){
        @Override public SshKeyPair get(){
          final SshKeyPair newKey=new SshKeyPair(ctx.getUserFullName(),request.getKeyName());
          newKey.setFingerPrint(keyFingerprint);
          newKey.setPublicKey(KeyPairs.rfc4253Format(ctx.getUserFullName(),request.getKeyName(),key));
          try {
            Transactions.save(newKey);
            reply.setKeyName(newKey.getDisplayName());
            reply.setKeyFingerprint(newKey.getFingerPrint());
          }
 catch (          TransactionException e) {
            LOG.warn("Error saving imported key",e);
          }
          return newKey;
        }
      }
;
      RestrictedTypes.allocateUnitlessResource(allocator);
    }
 catch (    GeneralSecurityException e) {
      LOG.warn("Error importing SSH public key",e);
      throw new EucalyptusCloudException("Key import error.");
    }
  }
  if (duplicate) {
    throw new EucalyptusCloudException("Duplicate key '" + request.getKeyName() + "'");
  }
  return reply;
}
