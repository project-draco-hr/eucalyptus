{
  final CreateKeyPairResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  Supplier<SshKeyPair> allocator=new Supplier<SshKeyPair>(){
    @Override public SshKeyPair get(){
      try {
        PrivateKey pk=KeyPairs.create(ctx.getUserFullName(),request.getKeyName());
        reply.setKeyFingerprint(Certs.getFingerPrint(pk));
        ByteArrayOutputStream byteOut=new ByteArrayOutputStream();
        PEMWriter privOut=new PEMWriter(new OutputStreamWriter(byteOut));
        try {
          privOut.writeObject(pk);
          privOut.close();
        }
 catch (        IOException e) {
          LOG.error(e);
          throw new EucalyptusCloudException(e);
        }
        reply.setKeyName(request.getKeyName());
        reply.setKeyMaterial(byteOut.toString());
        return KeyPairs.lookup(ctx.getUserFullName(),request.getKeyName());
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex);
      }
    }
  }
;
  RestrictedTypes.allocateUnitlessResource(allocator);
  return reply;
}
