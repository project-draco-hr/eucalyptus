{
  final Function<String,Volume> updateVolume=new Function<String,Volume>(){
    @Override public Volume apply(    final String input){
      final StringBuilder buf=new StringBuilder();
      try {
        final Volume v=Entities.uniqueResult(Volume.named(null,input));
        VmVolumeAttachment vmAttachedVol=null;
        boolean maybeBusy=false;
        String vmId=null;
        try {
          vmAttachedVol=VmInstances.lookupVolumeAttachment(v.getDisplayName());
          maybeBusy=true;
          vmId=vmAttachedVol.getVmInstance().getInstanceId();
        }
 catch (        final NoSuchElementException ex) {
        }
        State initialState=v.getState();
        if (!State.ANNIHILATING.equals(initialState) && !State.ANNIHILATED.equals(initialState) && maybeBusy) {
          initialState=State.BUSY;
        }
        buf.append("VolumeStateUpdate: Current Volume Info: [").append("Partition: ").append(v.getPartition()).append(" ").append("Name: ").append(v.getDisplayName()).append(" ").append("CurrentState: ").append(v.getState()).append(" ").append("Created: ").append(v.getCreationTimestamp()).append(" ]");
        if (vmAttachedVol != null) {
          buf.append(" Attachment: [ ").append("InstanceId: ").append(vmId).append(" ").append("AttachmentState: ").append(vmAttachedVol.getAttachmentState()).append(" ]");
        }
        String status=null;
        Integer size=0;
        String actualDeviceName="unknown";
        State volumeState=initialState;
        if (storageVolume != null) {
          status=storageVolume.getStatus();
          size=Integer.parseInt(storageVolume.getSize());
          actualDeviceName=storageVolume.getActualDeviceName();
          if (State.ANNIHILATING.equals(initialState) && State.ANNIHILATED.equals(Volumes.transformStorageState(v.getState(),status))) {
            volumeState=State.ANNIHILATED;
          }
 else {
            volumeState=Volumes.transformStorageState(v.getState(),status);
          }
          buf.append(" Incoming state update: [").append("State: ").append(storageVolume.getStatus()).append("=>").append(volumeState).append(" ").append("Size: ").append(storageVolume.getSize()).append("GB ").append("SourceSnapshotId: ").append(storageVolume.getSnapshotId()).append(" ").append("CreationTime: ").append(storageVolume.getCreateTime()).append(" ").append("DeviceName: ").append(storageVolume.getActualDeviceName()).append(" ] ");
        }
 else         if (State.ANNIHILATING.equals(v.getState())) {
          volumeState=State.ANNIHILATED;
        }
 else         if (State.GENERATING.equals(v.getState()) && v.lastUpdateMillis() > VOLUME_STATE_TIMEOUT) {
          volumeState=State.FAIL;
        }
 else         if (State.EXTANT.equals(v.getState()) && v.lastUpdateMillis() > VOLUME_STATE_TIMEOUT) {
          volumeState=State.ERROR;
        }
        v.setState(volumeState);
        try {
          if (v.getSize() <= 0) {
            v.setSize(size);
            if (EnumSet.of(State.GENERATING,State.EXTANT,State.BUSY).contains(volumeState)) {
              Volumes.fireUsageEvent(v,VolumeEvent.forVolumeCreate());
            }
          }
        }
 catch (        final Exception ex) {
          LOG.error(ex);
          Logs.extreme().error(ex,ex);
        }
        buf.append(" Resulting new-state: [").append(v.getState()).append("]");
        LOG.debug(buf.toString());
        return v;
      }
 catch (      final TransactionException ex) {
        LOG.error(buf.toString() + " failed because of " + ex.getMessage());
        Logs.extreme().error(buf.toString() + " failed because of " + ex.getMessage(),ex);
        throw Exceptions.toUndeclared(ex);
      }
catch (      final NoSuchElementException ex) {
        LOG.error(buf.toString() + " failed because of " + ex.getMessage());
        Logs.extreme().error(buf.toString() + " failed because of " + ex.getMessage(),ex);
        throw ex;
      }
    }
  }
;
  Entities.asTransaction(Volume.class,updateVolume).apply(volumeId);
}
