{
  if (accountName == null) {
    throw new AuthException(AuthException.EMPTY_ACCOUNT_NAME);
  }
  if (!forceDeleteSystem && DatabaseAuthUtils.isSystemAccount(accountName)) {
    throw new AuthException(AuthException.DELETE_SYSTEM_ACCOUNT);
  }
  if (!recursive && !DatabaseAuthUtils.isAccountEmpty(accountName)) {
    throw new AuthException(AuthException.ACCOUNT_DELETE_CONFLICT);
  }
  try (final TransactionResource db=Entities.transactionFor(AccountEntity.class)){
    if (recursive) {
      List<GroupEntity> groups=(List<GroupEntity>)Entities.createCriteria(GroupEntity.class).setCacheable(true).createCriteria("account").setCacheable(true).add(Restrictions.eq("name",accountName)).list();
      List<UserEntity> users=(List<UserEntity>)Entities.createCriteria(UserEntity.class).setCacheable(true).createCriteria("groups").setCacheable(true).add(Restrictions.eq("userGroup",true)).createCriteria("account").setCacheable(true).add(Restrictions.eq("name",accountName)).list();
      for (      GroupEntity g : groups) {
        Entities.delete(g);
      }
      for (      UserEntity u : users) {
        Entities.delete(u);
      }
    }
    AccountEntity account=(AccountEntity)Entities.createCriteria(AccountEntity.class).setCacheable(true).add(Restrictions.eq("name",accountName)).uniqueResult();
    if (account == null) {
      throw new NoSuchElementException("Can not find account " + accountName);
    }
    Entities.delete(account);
    db.commit();
  }
 catch (  Exception e) {
    Debugging.logError(LOG,e,"Failed to delete account " + accountName);
    throw new AuthException(AuthException.NO_SUCH_ACCOUNT,e);
  }
}
