{
  final ArrayListMultimap<String,Policy> results=ArrayListMultimap.create();
  try (final TransactionResource db=Entities.transactionFor(PolicyEntity.class)){
    @SuppressWarnings("unchecked") final List<Object[]> policyAndUserIds=Entities.createQuery(PolicyEntity.class,"select p, u.userId from PolicyEntity p " + "inner join p.group g " + "inner join g.users u "+ "where g.userGroup = true and " + qualifier(userIds) + " u.userId in (:userIds) ").setParameterList("userIds",identifiers(userIds)).setReadOnly(true).list();
    for (    final Object[] policyAndUserId : policyAndUserIds) {
      results.put((String)policyAndUserId[1],new DatabasePolicyProxy((PolicyEntity)policyAndUserId[0]));
    }
    return (Map<String,List<Policy>>)(Map)results.asMap();
  }
 catch (  Exception e) {
    Debugging.logError(LOG,e,"Failed to get policies by user identifiers");
    throw new AuthException("Failed to get policies by user identifiers",e);
  }
}
