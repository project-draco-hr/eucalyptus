{
  if (keyId == null || "".equals(keyId)) {
    throw new AuthException("Empty key ID");
  }
  EntityWrapper<UserEntity> db=EntityWrapper.get(UserEntity.class);
  try {
    @SuppressWarnings("unchecked") UserEntity result=(UserEntity)db.createCriteria(UserEntity.class).setCacheable(true).add(Restrictions.eq("enabled",true)).createCriteria("keys").setCacheable(true).add(Restrictions.and(Restrictions.eq("accessKey",keyId),Restrictions.eq("active",true))).setReadOnly(true).uniqueResult();
    if (result == null) {
      throw new NoSuchElementException("Can not find user with key " + keyId);
    }
    return new DatabaseUserProxy(result);
  }
 catch (  Exception e) {
    Debugging.logError(LOG,e,"Failed to find user with access key ID : " + keyId);
    throw new AuthException(AuthException.NO_SUCH_USER,e);
  }
 finally {
    db.rollback();
  }
}
