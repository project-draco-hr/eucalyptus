{
  final List<User> results=Lists.newArrayList();
  try (final TransactionResource db=Entities.transactionFor(UserEntity.class)){
    @SuppressWarnings("unchecked") final List<Object[]> userAndAccountNumbers=Entities.createQuery(UserEntity.class,"select u, a.accountNumber from UserEntity u " + "inner join u.groups g " + "inner join g.account a "+ "where g.userGroup = true and" + qualifier(accountIds) + " a.accountNumber in (:accountIds)").setParameterList("accountIds",identifiers(accountIds)).setReadOnly(true).list();
    for (    final Object[] userAndAccountNumber : userAndAccountNumbers) {
      final DatabaseUserProxy proxy;
      if (eager) {
        Entities.initialize(((UserEntity)userAndAccountNumber[0]).getInfo());
        proxy=new DatabaseUserProxy((UserEntity)userAndAccountNumber[0],(String)userAndAccountNumber[1],((UserEntity)userAndAccountNumber[0]).getInfo());
      }
 else {
        proxy=new DatabaseUserProxy((UserEntity)userAndAccountNumber[0],(String)userAndAccountNumber[1]);
      }
      results.add(proxy);
    }
    return results;
  }
 catch (  Exception e) {
    Debugging.logError(LOG,e,"Failed to get users by account identifiers");
    throw new AuthException("Failed to get users by account identifiers",e);
  }
}
