{
  ClusterConfiguration config=super.add(name,host,port);
  try {
    String ccAlias=String.format(Configuration.CLUSTER_KEY_FSTRING,config.getName());
    String ncAlias=String.format(Configuration.NODE_KEY_FSTRING,config.getName());
    String directory=SubDirectory.KEYS.toString() + File.separator + config.getName();
    File keyDir=new File(directory);
    Configuration.LOG.info("creating keys in " + directory);
    if (!keyDir.mkdir() && !keyDir.exists()) {
      throw new EucalyptusCloudException("Failed to create cluster key directory: " + keyDir.getAbsolutePath());
    }
    FileWriter out=null;
    try {
      KeyPair clusterKp=Certs.generateKeyPair();
      X509Certificate clusterX509=Certs.generateServiceCertificate(clusterKp,"cc-" + config.getName());
      PEMFiles.write(directory + File.separator + "cluster-pk.pem",clusterKp.getPrivate());
      PEMFiles.write(directory + File.separator + "cluster-cert.pem",clusterX509);
      KeyPair nodeKp=Certs.generateKeyPair();
      X509Certificate nodeX509=Certs.generateServiceCertificate(nodeKp,"nc-" + config.getName());
      PEMFiles.write(directory + File.separator + "node-pk.pem",nodeKp.getPrivate());
      PEMFiles.write(directory + File.separator + "node-cert.pem",nodeX509);
      X509Certificate systemX509=SystemCredentialProvider.getCredentialProvider(Component.eucalyptus).getCertificate();
      String hexSig=Hmacs.generateSystemToken("vtunpass".getBytes());
      PEMFiles.write(directory + File.separator + "cloud-cert.pem",systemX509);
      out=new FileWriter(directory + File.separator + "vtunpass");
      out.write(hexSig);
      out.flush();
      out.close();
      EntityWrapper<ClusterCredentials> credDb=Authentication.getEntityWrapper();
      ClusterCredentials componentCredentials=new ClusterCredentials(config.getName());
      try {
        List<ClusterCredentials> ccCreds=credDb.query(componentCredentials);
        for (        ClusterCredentials ccert : ccCreds) {
          credDb.delete(ccert);
        }
        componentCredentials.setClusterCertificate(X509Cert.fromCertificate(clusterX509));
        componentCredentials.setNodeCertificate(X509Cert.fromCertificate(nodeX509));
        credDb.add(componentCredentials);
        credDb.commit();
      }
 catch (      Exception e) {
        Configuration.LOG.error(e,e);
        credDb.rollback();
      }
    }
 catch (    Exception eee) {
      throw new EucalyptusCloudException(eee);
    }
 finally {
      if (out != null)       try {
        out.close();
      }
 catch (      IOException e) {
        LOG.error(e);
      }
    }
  }
 catch (  EucalyptusCloudException e) {
    throw new ServiceRegistrationException(e.getMessage(),e);
  }
  Groups.DEFAULT.addAuthorization(new AvailabilityZonePermission(config.getName()));
  return config;
}
