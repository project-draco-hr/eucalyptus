{
  if (e instanceof MessageEvent && ((MessageEvent)e).getMessage() instanceof MappingHttpRequest) {
    final MappingHttpRequest request=(MappingHttpRequest)((MessageEvent)e).getMessage();
    final String uri=request.getUri();
    final InetSocketAddress remoteAddr=((InetSocketAddress)ctx.getChannel().getRemoteAddress());
    String remoteHostOrInstanceId=remoteAddr.getAddress().getHostAddress();
    if ("127.0.0.1".equals(remoteHostOrInstanceId) && request.containsHeader(INSTANCE_ID_HEADER) && request.getHeader(INSTANCE_ID_HEADER).matches("i-[0-9a-fA-F]{8}")) {
      remoteHostOrInstanceId=request.getHeader(INSTANCE_ID_HEADER);
    }
    final String newUri;
    if (uri.startsWith("/latest/")) {
      newUri=uri.replaceAll("/latest[/]+",remoteHostOrInstanceId + ":");
    }
 else     if (uri.startsWith("/1.0/")) {
      newUri=uri.replaceAll("/1.0[/]+",remoteHostOrInstanceId + ":");
    }
 else {
      newUri=uri.replaceAll("/\\d\\d\\d\\d-\\d\\d-\\d\\d[/]+",remoteHostOrInstanceId + ":");
    }
    LOG.trace("Trying to get metadata: " + newUri);
    Object reply="".getBytes();
    Exception replyEx=null;
    if (uri.equals("/") || uri.isEmpty()) {
      reply=Joiner.on('\n').join(VERSION).getBytes(Charsets.UTF_8);
    }
 else {
      try {
        if (Bootstrap.isShuttingDown()) {
          reply="System shutting down".getBytes();
        }
 else         if (!Bootstrap.isFinished()) {
          reply="System is still starting up".getBytes();
        }
 else {
          reply=ServiceContext.send("eucalyptus-vmmetadata-request",newUri).get();
        }
      }
 catch (      Exception e1) {
        Logs.extreme().debug(e1,e1);
        replyEx=e1;
      }
 finally {
        Contexts.clear(request.getCorrelationId());
      }
    }
    if (Logs.extreme().isDebugEnabled()) {
      Logs.extreme().debug("VmMetadata reply info: " + reply + " "+ replyEx);
    }
    HttpResponse response;
    if (replyEx == null && reply instanceof byte[]) {
      response=new DefaultHttpResponse(request.getProtocolVersion(),HttpResponseStatus.OK);
      response.setHeader(HttpHeaders.Names.CONTENT_TYPE,"text/plain");
      ChannelBuffer buffer=ChannelBuffers.wrappedBuffer((byte[])reply);
      response.setContent(buffer);
      response.addHeader(HttpHeaders.Names.CONTENT_LENGTH,Integer.toString(buffer.readableBytes()));
    }
 else {
      response=new DefaultHttpResponse(request.getProtocolVersion(),HttpResponseStatus.NOT_FOUND);
      response.setHeader(HttpHeaders.Names.CONTENT_TYPE,"text/plain");
      ChannelBuffer buffer=ChannelBuffers.wrappedBuffer(ERROR_STRING.getBytes());
      response.setContent(buffer);
      response.addHeader(HttpHeaders.Names.CONTENT_LENGTH,Integer.toString(buffer.readableBytes()));
    }
    response.addHeader(HttpHeaders.Names.CONNECTION,HttpHeaders.Values.CLOSE);
    ctx.getChannel().write(response).addListener(ChannelFutureListener.CLOSE);
  }
 else {
    ctx.sendUpstream(e);
  }
}
