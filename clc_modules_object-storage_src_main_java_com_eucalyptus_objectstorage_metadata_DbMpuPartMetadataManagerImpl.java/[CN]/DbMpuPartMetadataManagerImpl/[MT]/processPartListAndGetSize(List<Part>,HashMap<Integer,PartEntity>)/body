{
  int lastPartNumber=0;
  long objectSize=0;
  int numPartsProcessed=0;
  for (  Part partInManifest : partsInManifest) {
    Integer partNumber=partInManifest.getPartNumber();
    if (partNumber < ObjectStorageProperties.MIN_PART_NUMBER || partNumber > ObjectStorageProperties.MAX_PART_NUMBER) {
      throw new InvalidArgumentException("PartNumber","Part number must be an integer between " + ObjectStorageProperties.MIN_PART_NUMBER + " and "+ ObjectStorageProperties.MAX_PART_NUMBER+ ", inclusive");
    }
    if (partNumber <= lastPartNumber) {
      throw new InvalidPartOrderException("partNumber: " + partNumber);
    }
    PartEntity actualPart=availableParts.get(partNumber);
    if (actualPart == null) {
      throw new InvalidPartException("partNumber: " + partNumber);
    }
    final long actualPartSize=actualPart.getSize();
    if ((++numPartsProcessed) < partsInManifest.size() && actualPartSize < ObjectStorageProperties.MPU_PART_MIN_SIZE) {
      throw new EntityTooSmallException("uploadId: " + actualPart.getUploadId() + " partNumber: "+ partNumber);
    }
    objectSize+=actualPartSize;
    lastPartNumber=partNumber;
  }
  return objectSize;
}
