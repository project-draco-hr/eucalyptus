{
  if (info.getPhysicalResourceId() == null)   return;
  ServiceConfiguration configuration=Topology.lookup(Euare.class);
  boolean seenAllUsers=false;
  boolean foundUser=false;
  String userMarker=null;
  while (!seenAllUsers && !foundUser) {
    ListUsersType listUsersType=new ListUsersType();
    listUsersType.setEffectiveUserId(info.getEffectiveUserId());
    if (userMarker != null) {
      listUsersType.setMarker(userMarker);
    }
    ListUsersResponseType listUsersResponseType=AsyncRequests.<ListUsersType,ListUsersResponseType>sendSync(configuration,listUsersType);
    if (listUsersResponseType.getListUsersResult().getIsTruncated() == Boolean.TRUE) {
      userMarker=listUsersResponseType.getListUsersResult().getMarker();
    }
 else {
      seenAllUsers=true;
    }
    if (listUsersResponseType.getListUsersResult().getUsers() != null && listUsersResponseType.getListUsersResult().getUsers().getMemberList() != null) {
      for (      UserType UserType : listUsersResponseType.getListUsersResult().getUsers().getMemberList()) {
        if (UserType.getUserName().equals(info.getPhysicalResourceId())) {
          foundUser=true;
          break;
        }
      }
    }
  }
  if (!foundUser)   return;
  if (properties.getGroups() != null) {
    boolean seenAllGroups=false;
    List<String> currentGroups=Lists.newArrayList();
    String groupMarker=null;
    while (!seenAllGroups) {
      ListGroupsForUserType listGroupsForUserType=new ListGroupsForUserType();
      listGroupsForUserType.setUserName(info.getPhysicalResourceId());
      listGroupsForUserType.setEffectiveUserId(info.getEffectiveUserId());
      if (groupMarker != null) {
        listGroupsForUserType.setMarker(groupMarker);
      }
      ListGroupsForUserResponseType listGroupsForUserResponseType=AsyncRequests.<ListGroupsForUserType,ListGroupsForUserResponseType>sendSync(configuration,listGroupsForUserType);
      if (listGroupsForUserResponseType.getListGroupsForUserResult().getIsTruncated() == Boolean.TRUE) {
        groupMarker=listGroupsForUserResponseType.getListGroupsForUserResult().getMarker();
      }
 else {
        seenAllGroups=true;
      }
      if (listGroupsForUserResponseType.getListGroupsForUserResult().getGroups() != null && listGroupsForUserResponseType.getListGroupsForUserResult().getGroups().getMemberList() != null) {
        for (        GroupType groupType : listGroupsForUserResponseType.getListGroupsForUserResult().getGroups().getMemberList()) {
          currentGroups.add(groupType.getGroupName());
        }
      }
    }
    for (    String groupName : properties.getGroups()) {
      if (currentGroups.contains(groupName)) {
        RemoveUserFromGroupType removeUserFromGroupType=new RemoveUserFromGroupType();
        removeUserFromGroupType.setGroupName(groupName);
        removeUserFromGroupType.setUserName(info.getPhysicalResourceId());
        removeUserFromGroupType.setEffectiveUserId(info.getEffectiveUserId());
        AsyncRequests.<RemoveUserFromGroupType,RemoveUserFromGroupResponseType>sendSync(configuration,removeUserFromGroupType);
      }
    }
  }
  if (properties.getPolicies() != null) {
    for (    EmbeddedIAMPolicy policy : properties.getPolicies()) {
      DeleteUserPolicyType deleteUserPolicyType=new DeleteUserPolicyType();
      deleteUserPolicyType.setUserName(info.getPhysicalResourceId());
      deleteUserPolicyType.setPolicyName(policy.getPolicyName());
      deleteUserPolicyType.setEffectiveUserId(info.getEffectiveUserId());
      AsyncRequests.<DeleteUserPolicyType,DeleteUserPolicyResponseType>sendSync(configuration,deleteUserPolicyType);
    }
  }
  DeleteUserType deleteUserType=new DeleteUserType();
  deleteUserType.setUserName(info.getPhysicalResourceId());
  deleteUserType.setEffectiveUserId(info.getEffectiveUserId());
  AsyncRequests.<DeleteUserType,DeleteUserResponseType>sendSync(configuration,deleteUserType);
}
