{
  String[] parsed=new String[2];
  Matcher matcher=PolicySpecConstants.ARN_PATTERN.matcher(resource);
  if (!matcher.matches()) {
    throw new JSONException("'" + resource + "' is not a valid ARN");
  }
  if (matcher.group(PolicySpecConstants.ARN_PATTERNGROUP_IAM) != null) {
    parsed[0]=matcher.group(PolicySpecConstants.ARN_PATTERNGROUP_IAM) + ":" + matcher.group(PolicySpecConstants.ARN_PATTERNGROUP_IAM_USERGROUP).toLowerCase();
    parsed[1]=matcher.group(PolicySpecConstants.ARN_PATTERNGROUP_IAM_ID);
  }
 else   if (matcher.group(PolicySpecConstants.ARN_PATTERNGROUP_EC2) != null) {
    String type=matcher.group(PolicySpecConstants.ARN_PATTERNGROUP_EC2_TYPE).toLowerCase();
    parsed[0]=matcher.group(PolicySpecConstants.ARN_PATTERNGROUP_EC2) + ":" + type;
    if (!PolicySpecConstants.EC2_RESOURCES.contains(type)) {
      throw new JSONException("EC2 type '" + type + "' is not supported");
    }
    parsed[1]=matcher.group(PolicySpecConstants.ARN_PATTERNGROUP_EC2_ID).toLowerCase();
  }
 else   if (matcher.group(PolicySpecConstants.ARN_PATTERNGROUP_S3) != null) {
    parsed[0]=matcher.group(PolicySpecConstants.ARN_PATTERNGROUP_S3) + ":";
    if (matcher.group(PolicySpecConstants.ARN_PATTERNGROUP_S3_OBJECT) != null) {
      parsed[0]+=PolicySpecConstants.S3_RESOURCE_OBJECT;
    }
 else {
      parsed[0]+=PolicySpecConstants.S3_RESOURCE_BUCKET;
    }
    parsed[1]=matcher.group(PolicySpecConstants.ARN_PATTERNGROUP_S3_BUCKET) + matcher.group(PolicySpecConstants.ARN_PATTERNGROUP_S3_OBJECT);
  }
 else {
    parsed[0]=PolicySpecConstants.ALL_RESOURCE;
    parsed[1]=PolicySpecConstants.ALL_RESOURCE;
  }
  return parsed;
}
