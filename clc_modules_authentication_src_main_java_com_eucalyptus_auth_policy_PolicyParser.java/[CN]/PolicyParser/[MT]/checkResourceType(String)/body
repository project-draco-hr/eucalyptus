{
  Matcher matcher=PolicySpecConstants.ARN_PATTERN.matcher(resource);
  if (!matcher.matches()) {
    throw new JSONException("'" + resource + "' is not a valid ARN");
  }
  String vendor=null;
  String type=null;
  if (matcher.group(PolicySpecConstants.ARN_PATTERNGROUP_IAM) != null) {
    vendor=matcher.group(PolicySpecConstants.ARN_PATTERNGROUP_IAM);
    type=matcher.group(PolicySpecConstants.ARN_PATTERNGROUP_IAM_USERGROUP);
  }
 else   if (matcher.group(PolicySpecConstants.ARN_PATTERNGROUP_EC2) != null) {
    vendor=matcher.group(PolicySpecConstants.ARN_PATTERNGROUP_EC2);
    type=matcher.group(PolicySpecConstants.ARN_PATTERNGROUP_EC2_TYPE).toLowerCase();
    if (!PolicySpecConstants.EC2_RESOURCES.contains(type)) {
      throw new JSONException("EC2 type '" + type + "' is not supported");
    }
  }
 else   if (matcher.group(PolicySpecConstants.ARN_PATTERNGROUP_S3) != null) {
    vendor=matcher.group(PolicySpecConstants.ARN_PATTERNGROUP_S3);
    if (matcher.group(PolicySpecConstants.ARN_PATTERNGROUP_S3_OBJECT) != null) {
      type=PolicySpecConstants.S3_RESOURCE_OBJECT;
    }
 else {
      type=PolicySpecConstants.S3_RESOURCE_BUCKET;
    }
  }
 else {
    return PolicySpecConstants.ALL_RESOURCE;
  }
  return vendor + ":" + type;
}
