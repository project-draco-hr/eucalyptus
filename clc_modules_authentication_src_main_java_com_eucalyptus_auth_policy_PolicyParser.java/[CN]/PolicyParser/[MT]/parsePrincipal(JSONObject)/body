{
  final String principalElement=JsonUtils.checkBinaryOption(statement,PolicySpec.PRINCIPAL,PolicySpec.NOTPRINCIPAL,attachmentType.isPrincipalRequired());
  final JSONObject principal=JsonUtils.getByType(JSONObject.class,statement,principalElement);
  if (principal == null)   return null;
  final String principalType=JsonUtils.checkBinaryOption(principal,PrincipalType.AWS.name(),PrincipalType.Service.name());
  final List<String> values=JsonUtils.parseStringOrStringList(principal,principalType);
  if (values.size() < 1 && attachmentType.isPrincipalRequired()) {
    throw new JSONException("Empty principal values");
  }
  if (values.size() > 0 && !attachmentType.isPrincipalRequired()) {
    throw new JSONException("Policy document should not specify a principal.");
  }
  boolean notPrincipal=PolicySpec.NOTPRINCIPAL.equals(principalElement);
  return new PrincipalEntity(notPrincipal,PrincipalType.valueOf(principalType),Sets.newHashSet(values));
}
