{
  String actionElement=JsonUtils.checkBinaryOption(statement,PolicySpecConstants.ACTION,PolicySpecConstants.NOTACTION);
  List<String> actions=JsonUtils.parseStringOrStringList(statement,actionElement);
  if (EffectType.Limit.name().equals(effect) && PolicySpecConstants.NOTACTION.equals(actionElement)) {
    throw new JSONException("Quota statement does not allow NotAction");
  }
  String resourceElement=JsonUtils.checkBinaryOption(statement,PolicySpecConstants.RESOURCE,PolicySpecConstants.NOTRESOURCE);
  List<String> resources=JsonUtils.parseStringOrStringList(statement,resourceElement);
  if (EffectType.Limit.name().equals(effect) && PolicySpecConstants.NOTRESOURCE.equals(resourceElement)) {
    throw new JSONException("Quota statement does not allow NotResource");
  }
  List<AuthorizationEntity> results=Lists.newArrayList();
  for (  String action : actions) {
    action=action.toLowerCase();
    checkAction(action);
    for (    String resource : resources) {
      String[] parsed=parseResourceArn(resource);
      if (actionMatchesResourceType(action,parsed[0])) {
        results.add(new AuthorizationEntity(EffectType.valueOf(effect),action,Boolean.valueOf(PolicySpecConstants.NOTACTION.equals(actionElement)),parsed[0],parsed[1],Boolean.valueOf(PolicySpecConstants.NOTRESOURCE.equals(resourceElement))));
      }
    }
  }
  return results;
}
