{
  Map<String,Set<String>> actionMap=Maps.newHashMap();
  for (  String action : actions) {
    action=action.toLowerCase();
    String vendor=checkAction(action);
    addToSetMap(actionMap,vendor,action);
  }
  Map<String,Set<String>> resourceMap=Maps.newHashMap();
  for (  String resource : resources) {
    String[] parsed=parseResourceArn(resource);
    addToSetMap(resourceMap,parsed[0],parsed[1]);
  }
  List<AuthorizationEntity> results=Lists.newArrayList();
  for (  Map.Entry<String,Set<String>> actionSetEntry : actionMap.entrySet()) {
    String vendor=actionSetEntry.getKey();
    Set<String> actionSet=actionSetEntry.getValue();
    for (    Map.Entry<String,Set<String>> resourceSetEntry : resourceMap.entrySet()) {
      String type=resourceSetEntry.getKey();
      Set<String> resourceSet=resourceSetEntry.getValue();
      if (PolicySpecConstants.ALL_ACTION.equals(vendor) || PolicySpecConstants.ALL_RESOURCE.equals(type) || type.startsWith(vendor)) {
        results.add(new AuthorizationEntity(EffectType.valueOf(effect),type,actionSet,Boolean.valueOf(PolicySpecConstants.NOTACTION.equals(actionElement)),resourceSet,Boolean.valueOf(PolicySpecConstants.NOTRESOURCE.equals(resourceElement))));
      }
    }
  }
  return results;
}
