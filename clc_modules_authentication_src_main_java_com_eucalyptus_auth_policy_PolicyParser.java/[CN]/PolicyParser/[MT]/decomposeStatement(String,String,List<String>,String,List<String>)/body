{
  Map<String,Set<String>> actionMap=Maps.newHashMap();
  for (  String action : actions) {
    action=action.toLowerCase();
    String vendor=checkAction(action);
    addToSetMap(actionMap,vendor,action);
  }
  Map<String,Set<String>> resourceMap=Maps.newHashMap();
  for (  String resource : resources) {
    Ern ern=Ern.parse(resource);
    addToSetMap(resourceMap,ern.getResourceType(),ern.getResourceName());
  }
  boolean notAction=Boolean.valueOf(PolicySpec.NOTACTION.equals(actionElement));
  boolean notResource=Boolean.valueOf(PolicySpec.NOTRESOURCE.equals(resourceElement));
  List<AuthorizationEntity> results=Lists.newArrayList();
  for (  Map.Entry<String,Set<String>> actionSetEntry : actionMap.entrySet()) {
    String vendor=actionSetEntry.getKey();
    Set<String> actionSet=actionSetEntry.getValue();
    for (    Map.Entry<String,Set<String>> resourceSetEntry : resourceMap.entrySet()) {
      String type=resourceSetEntry.getKey();
      Set<String> resourceSet=resourceSetEntry.getValue();
      if (PolicySpec.ALL_ACTION.equals(vendor) || PolicySpec.ALL_RESOURCE.equals(type) || type.startsWith(vendor)) {
        results.add(new AuthorizationEntity(EffectType.valueOf(effect),type,actionSet,notAction,resourceSet,notResource));
      }
    }
  }
  return results;
}
