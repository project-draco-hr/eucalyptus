{
  if (cloudWatchSupplier == null)   return;
  final InstanceUsageEvent event=cloudWatchSupplier.get();
  LOG.trace(event);
  if (!instanceInfoProvider.getInstanceId(event.getInstanceId()).equals(event.getInstanceId()) || !instanceInfoProvider.getMonitoring(event.getInstanceId())) {
    LOG.trace("Instance : " + event.getInstanceId() + " monitoring is not enabled");
    return;
  }
  if (instanceInfoProvider.getInstanceId(event.getInstanceId()).equals(event.getInstanceId()) && instanceInfoProvider.getMonitoring(event.getInstanceId())) {
    PutMetricDataType putMetricData=new PutMetricDataType();
    MetricDatum metricDatum=new MetricDatum();
    ArrayList<Dimension> dimArray=Lists.newArrayList();
    if (event.getDimension() != null && event.getValue() != null) {
      if (event.getDimension().startsWith("vol-")) {
        putMetricData.setNamespace("AWS/EBS");
        Dimension volDim=new Dimension();
        volDim.setName("VolumeId");
        volDim.setValue(event.getDimension());
        dimArray.add(volDim);
        if (event.getMetric().startsWith("Disk")) {
          final String convertedEBSMetricName=event.getMetric().replace("Disk","Volume");
          metricDatum.setMetricName(convertedEBSMetricName);
        }
 else {
          metricDatum.setMetricName(event.getMetric());
        }
      }
 else {
        putMetricData.setNamespace("AWS/EC2");
        populateInstanceDimensions(event.getInstanceId(),dimArray);
        if (UNSUPPORTED_EC2_METRICS.contains(event.getMetric())) {
          return;
        }
 else {
          metricDatum.setMetricName(event.getMetric());
        }
      }
    }
 else {
      LOG.debug("Event does not contain a dimension");
      return;
    }
    Dimensions dims=new Dimensions();
    dims.setMember(dimArray);
    MetricData metricData=new MetricData();
    metricDatum.setTimestamp(new Date(event.getValueTimestamp()));
    metricDatum.setDimensions(dims);
    metricDatum.setValue(event.getValue());
    final String unitType=containsUnitType(metricDatum.getMetricName());
    metricDatum.setUnit(unitType);
    if (ABSOLUTE_METRICS.containsKey(metricDatum.getMetricName())) {
      metricDatum.setMetricName(ABSOLUTE_METRICS.get(metricDatum.getMetricName()));
    }
    metricData.setMember(Lists.newArrayList(metricDatum));
    putMetricData.setMetricData(metricData);
    putMetricData.setUserId(instanceInfoProvider.getEffectiveUserId(event.getInstanceId()));
    putMetricData.markPrivileged();
    putMetricDataList.add(putMetricData);
  }
}
