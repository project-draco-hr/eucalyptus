{
  for (int i=0; i < valueNode.size(); i++) {
    Class<?> collectionTypeClass=(Class)collectionType;
    JsonNode itemNode=valueNode.get(i);
    if (collectionTypeClass.equals(String.class)) {
      if (!itemNode.isValueNode()) {
        throw new ValidationErrorException("Template error: " + fieldName + " must have members of type String");
      }
 else {
        addToCollection(collection,collectionTypeClass,itemNode.asText());
      }
    }
 else     if (collectionTypeClass.equals(Integer.class)) {
      if (!itemNode.isValueNode()) {
        throw new ValidationErrorException("Template error: " + fieldName + " must have members of type Integer");
      }
 else {
        try {
          addToCollection(collection,collectionTypeClass,Integer.valueOf(itemNode.asText()));
        }
 catch (        NumberFormatException ex) {
          throw new ValidationErrorException("Template error: " + fieldName + " must have members of type Integer ("+ itemNode.asText()+ ")");
        }
      }
    }
 else     if (collectionTypeClass.equals(Double.class)) {
      if (!itemNode.isValueNode()) {
        throw new ValidationErrorException("Template error: " + fieldName + " must have members of type Number");
      }
 else {
        try {
          addToCollection(collection,collectionTypeClass,Double.valueOf(itemNode.asText()));
        }
 catch (        NumberFormatException ex) {
          throw new ValidationErrorException("Template error: " + fieldName + " must have members of type Number ("+ itemNode.asText()+ ")");
        }
      }
    }
 else     if (collectionTypeClass.equals(Boolean.class)) {
      if (!itemNode.isValueNode()) {
        throw new ValidationErrorException("Template error: " + fieldName + " must have members of type Boolean");
      }
 else {
        addToCollection(collection,collectionTypeClass,Boolean.valueOf(itemNode.asText()));
      }
    }
 else     if (Collection.class.isAssignableFrom(collectionTypeClass)) {
      if (collectionType instanceof ParameterizedType) {
        if (!itemNode.isArray()) {
          throw new ValidationErrorException("Template error: " + fieldName + " must have members of type List");
        }
        Type innerCollectionType=((ParameterizedType)collection).getActualTypeArguments()[0];
        Object newObject=null;
        try {
          newObject=collectionTypeClass.newInstance();
        }
 catch (        IllegalAccessException|InstantiationException ex) {
          LOG.error("Class " + collectionTypeClass.getCanonicalName() + " may not have a public no-arg constructor.  This is needed for ResourcePropertyResolver.populateResourceProperties()");
          throw new InternalFailureException(ex.getMessage());
        }
        populateList((Collection<?>)newObject,itemNode,innerCollectionType,fieldName);
        addToCollection(collection,collectionTypeClass,newObject);
      }
 else {
        LOG.error("Class " + collectionTypeClass.getCanonicalName() + " has a Collection type which is a non-parameterized type.  This "+ "is not supported for ResourcePropertyResolver.populateResourceProperties");
        throw new InternalFailureException("Class " + collectionTypeClass.getCanonicalName() + " has a Collection type which is a non-parameterized type.  This "+ "is not supported for ResourcePropertyResolver.populateResourceProperties");
      }
    }
 else {
      Object newObject=null;
      try {
        newObject=collectionTypeClass.newInstance();
      }
 catch (      IllegalAccessException|InstantiationException ex) {
        LOG.error("Class " + collectionTypeClass + " may not have a public no-arg constructor.  This is needed for Reso/**/urceData.populateFields()");
        throw new InternalFailureException(ex.getMessage());
      }
      populateResourceProperties(newObject,itemNode);
      addToCollection(collection,collectionTypeClass,newObject);
    }
  }
}
