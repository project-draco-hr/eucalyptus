{
  if (jsonNode == null)   return;
  BeanInfo beanInfo=null;
  try {
    beanInfo=Introspector.getBeanInfo(object.getClass());
  }
 catch (  IntrospectionException ex) {
    LOG.error("Unable to create bean info for class " + object.getClass().getCanonicalName() + ".  Check signatures for getters and setters");
    throw new InternalFailureException(ex.getMessage());
  }
  Map<String,PropertyDescriptor> propertyDescriptorMap=Maps.newHashMap();
  for (  PropertyDescriptor propertyDescriptor : beanInfo.getPropertyDescriptors()) {
    propertyDescriptorMap.put(propertyDescriptor.getName(),propertyDescriptor);
  }
  for (  Field field : object.getClass().getDeclaredFields()) {
    Property property=field.getAnnotation(Property.class);
    if (property == null)     continue;
    String defaultName=field.getName().substring(0,1).toUpperCase() + field.getName().substring(1);
    String name=(property.name() == null || property.name().isEmpty() ? defaultName : property.name());
    Required required=field.getAnnotation(Required.class);
    if (required != null && !jsonNode.has(name)) {
      throw new ValidationErrorException("Template error: " + name + " is a required field");
    }
    if (!jsonNode.has(name))     continue;
    JsonNode valueNode=jsonNode.get(name);
    LOG.debug("Populating property with: " + name + "="+ valueNode+ " "+ valueNode.getClass());
    if (field.getType().equals(String.class)) {
      if (!valueNode.isValueNode()) {
        throw new ValidationErrorException("Template error: " + name + " must be of type String");
      }
 else {
        setField(propertyDescriptorMap,field,object,valueNode.asText());
      }
    }
 else     if (field.getType().equals(Integer.class)) {
      if (!valueNode.isValueNode()) {
        throw new ValidationErrorException("Template error: " + name + " must be of type Number");
      }
 else {
        try {
          if (valueNode.asText().isEmpty()) {
            if (required != null) {
              throw new ValidationErrorException("Template error: " + name + " can not be blank ("+ valueNode.asText()+ ")");
            }
 else {
              setField(propertyDescriptorMap,field,object,null);
            }
          }
 else {
            setField(propertyDescriptorMap,field,object,Integer.valueOf(valueNode.asText()));
          }
        }
 catch (        NumberFormatException ex) {
          throw new ValidationErrorException("Template error: " + name + " must be of type Integer ("+ valueNode.asText()+ ")");
        }
      }
    }
 else     if (field.getType().equals(Double.class)) {
      if (!valueNode.isValueNode()) {
        throw new ValidationErrorException("Template error: " + name + " must be of type Number");
      }
 else {
        try {
          if (valueNode.asText().isEmpty()) {
            if (required != null) {
              throw new ValidationErrorException("Template error: " + name + " can not be blank ("+ valueNode.asText()+ ")");
            }
 else {
              setField(propertyDescriptorMap,field,object,null);
            }
          }
 else {
            setField(propertyDescriptorMap,field,object,Double.valueOf(valueNode.asText()));
          }
        }
 catch (        NumberFormatException ex) {
          throw new ValidationErrorException("Template error: " + name + " must be of type Number ("+ valueNode.asText()+ ")");
        }
      }
    }
 else     if (field.getType().equals(Boolean.class)) {
      if (!valueNode.isValueNode()) {
        throw new ValidationErrorException("Template error: " + name + " must be of type Boolean");
      }
 else {
        setField(propertyDescriptorMap,field,object,Boolean.valueOf(valueNode.asText()));
      }
    }
 else     if (field.getType().equals(Object.class)) {
      setField(propertyDescriptorMap,field,object,new Object());
    }
 else     if (JsonNode.class.isAssignableFrom(field.getType())) {
      setField(propertyDescriptorMap,field,object,valueNode);
    }
 else     if (Collection.class.isAssignableFrom(field.getType())) {
      Type genericFieldType=field.getGenericType();
      if (genericFieldType instanceof ParameterizedType) {
        if (!valueNode.isArray()) {
          throw new ValidationErrorException("Template error: " + name + " must be of type List");
        }
        Type collectionType=((ParameterizedType)genericFieldType).getActualTypeArguments()[0];
        if (getField(propertyDescriptorMap,field,object) == null) {
          LOG.error("Class " + object.getClass() + " has a Collection type "+ field.getName()+ " that must be "+ "non-null ResourcePropertyResolver.populateResourceProperties can be called");
          throw new InternalFailureException("Class " + object.getClass() + " has a Collection type "+ field.getName()+ " that must be "+ "non-null ResourcePropertyResolver.populateResourceProperties can be called");
        }
        populateList((Collection<?>)getField(propertyDescriptorMap,field,object),valueNode,collectionType,field.getName());
      }
 else {
        LOG.error("Class " + object.getClass() + " has a Collection type "+ field.getName()+ " which is a non-parameterized type.  This "+ "is not supported for ResourcePropertyResolver.populateResourceProperties");
        throw new InternalFailureException("Class " + object.getClass() + " has a Collection type "+ field.getName()+ " which is a non-parameterized type.  This "+ "is not supported for ResourcePropertyResolver.populateResourceProperties");
      }
    }
 else {
      if (getField(propertyDescriptorMap,field,object) == null) {
        try {
          setField(propertyDescriptorMap,field,object,field.getType().newInstance());
        }
 catch (        IllegalAccessException|InstantiationException ex) {
          LOG.error("Class " + object.getClass() + " may not have a public no-arg constructor.  This is needed for ResourcePropertyResolver.populateResourceProperties()");
          throw new InternalFailureException(ex.getMessage());
        }
      }
      populateResourceProperties(getField(propertyDescriptorMap,field,object),valueNode);
    }
  }
}
