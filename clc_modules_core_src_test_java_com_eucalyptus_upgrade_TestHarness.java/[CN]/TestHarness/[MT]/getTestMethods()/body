{
  final Multimap<Class,Method> testMethods=ArrayListMultimap.create();
  List<Class> classList=Lists.newArrayList();
  for (  File f : new File(System.getProperty("euca.home") + "/usr/share/eucalyptus").listFiles()) {
    if (f.getName().startsWith("eucalyptus") && f.getName().endsWith(".jar") && !f.getName().matches(".*-ext-.*")) {
      try {
        JarFile jar=new JarFile(f);
        Enumeration<JarEntry> jarList=jar.entries();
        for (        JarEntry j : Collections.list(jar.entries())) {
          if (j.getName().matches(".*\\.class.{0,1}")) {
            String classGuess=j.getName().replaceAll("/",".").replaceAll("\\.class.{0,1}","");
            try {
              Class candidate=ClassLoader.getSystemClassLoader().loadClass(classGuess);
              for (              final Method m : candidate.getDeclaredMethods()) {
                if (Iterables.any(testAnnotations,new Predicate<Class<? extends Annotation>>(){
                  public boolean apply(                  Class<? extends Annotation> arg0){
                    return m.getAnnotation(arg0) != null;
                  }
                }
)) {
                  System.out.println("Added test class: " + candidate.getCanonicalName());
                  testMethods.put(candidate,m);
                }
              }
            }
 catch (            ClassNotFoundException e) {
            }
          }
        }
        jar.close();
      }
 catch (      Exception e) {
        System.out.println(e.getMessage());
        continue;
      }
    }
  }
  return testMethods;
}
