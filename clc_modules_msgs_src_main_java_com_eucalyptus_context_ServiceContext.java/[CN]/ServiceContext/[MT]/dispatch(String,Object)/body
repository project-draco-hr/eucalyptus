{
  dest=ServiceContextManager.mapServiceToEndpoint(dest);
  MuleContext muleCtx;
  try {
    muleCtx=ServiceContextManager.getContext();
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    throw new ServiceDispatchException("Failed to dispatch message to " + dest + " caused by failure to obtain service context reference: "+ ex.getMessage(),ex);
  }
  OutboundEndpoint endpoint;
  try {
    endpoint=muleCtx.getRegistry().lookupEndpointFactory().getOutboundEndpoint(dest);
    if (!endpoint.getConnector().isStarted()) {
      endpoint.getConnector().start();
    }
  }
 catch (  MuleException ex) {
    LOG.error(ex,ex);
    throw new ServiceDispatchException("Failed to dispatch message to " + dest + " caused by failure to obtain service endpoint reference: "+ ex.getMessage(),ex);
  }
  MuleMessage muleMsg=new DefaultMuleMessage(msg);
  MuleSession muleSession;
  try {
    muleSession=new DefaultMuleSession(muleMsg,((AbstractConnector)endpoint.getConnector()).getSessionHandler(),ServiceContextManager.getContext());
  }
 catch (  MuleException ex) {
    LOG.error(ex,ex);
    throw new ServiceDispatchException("Failed to dispatch message to " + dest + " caused by failure to contruct session: "+ ex.getMessage(),ex);
  }
  MuleEvent muleEvent=new DefaultMuleEvent(muleMsg,endpoint,muleSession,false);
  final Context ctx=msg instanceof BaseMessage ? Contexts.createWrapped(dest,(BaseMessage)msg) : null;
  try {
    dispatcherFactory.create(endpoint).dispatch(muleEvent);
  }
 catch (  DispatchException ex) {
    LOG.error(ex,ex);
    throw new ServiceDispatchException("Error while dispatching message (" + msg + ")t o "+ dest+ " caused by: "+ ex.getMessage(),ex);
  }
catch (  MuleException ex) {
    LOG.error(ex,ex);
    throw new ServiceDispatchException("Failed to dispatch message to " + dest + " caused by failure to obtain service dispatcher reference: "+ ex.getMessage(),ex);
  }
  Threads.enqueue(Empyrean.class,ServiceContext.class,new Callable<Boolean>(){
    @Override public Boolean call(){
      try {
        TimeUnit.SECONDS.sleep(60);
        Contexts.clear(ctx);
      }
 catch (      InterruptedException ex) {
        Thread.currentThread().interrupt();
      }
      return true;
    }
  }
);
}
