{
  dest=ServiceContextManager.mapServiceToEndpoint(dest);
  MuleContext muleCtx;
  try {
    muleCtx=ServiceContextManager.getContext();
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
    throw new ServiceDispatchException("Failed to dispatch message to " + dest + " caused by failure to obtain service context reference: "+ ex.getMessage(),ex);
  }
  OutboundEndpoint endpoint;
  try {
    endpoint=muleCtx.getEndpointFactory().getOutboundEndpoint(dest);
    perhapsConfigureConnector(endpoint.getConnector());
  }
 catch (  MuleException ex) {
    LOG.error(ex,ex);
    throw new ServiceDispatchException("Failed to dispatch message to " + dest + " caused by failure to obtain service endpoint reference: "+ ex.getMessage(),ex);
  }
  MuleSession muleSession=new DefaultMuleSession();
  final Context ctx;
  if (msg instanceof BaseMessage) {
    msg=((BaseMessage)msg).lookupAndSetCorrelationId();
    ctx=Contexts.createWrapped(dest,(BaseMessage)msg);
  }
 else   ctx=null;
  MessageDispatcher dispatcher=null;
  try {
    dispatcher=dispatcherFactory.create(endpoint);
    dispatcher.initialise();
    dispatcher.start();
    MuleMessage muleMsg=dispatcher.createMuleMessage(msg);
    MuleEvent muleEvent=new DefaultMuleEvent(muleMsg,endpoint.getExchangePattern(),(FlowConstruct)null,muleSession);
    dispatcher.process(muleEvent);
  }
 catch (  DispatchException ex) {
    LOG.error(ex,ex);
    throw new ServiceDispatchException("Error while dispatching message (" + msg + ") to "+ dest+ " caused by: "+ ex.getMessage(),ex);
  }
catch (  MuleException ex) {
    LOG.error(ex,ex);
    throw new ServiceDispatchException("Failed to dispatch message to " + dest + " caused by failure to obtain service dispatcher reference: "+ ex.getMessage(),ex);
  }
 finally {
    if (dispatcher != null)     dispatcher.dispose();
  }
  if (ctx != null) {
    Threads.enqueue(Empyrean.class,ServiceContext.class,8,new Callable<Boolean>(){
      private final long clearContextTime=System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(CONTEXT_TIMEOUT);
      private final String contextCorrelationId=ctx.getCorrelationId();
      @Override public Boolean call(){
        try {
          long sleepTime=clearContextTime - System.currentTimeMillis();
          if (sleepTime > 1) {
            Thread.sleep(sleepTime);
          }
          Contexts.clear(contextCorrelationId);
        }
 catch (        InterruptedException ex) {
          Thread.currentThread().interrupt();
        }
        return true;
      }
    }
);
  }
}
