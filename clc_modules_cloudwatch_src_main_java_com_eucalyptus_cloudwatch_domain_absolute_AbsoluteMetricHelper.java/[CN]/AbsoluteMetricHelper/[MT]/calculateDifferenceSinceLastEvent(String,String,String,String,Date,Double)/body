{
  MetricDifferenceInfo returnValue=null;
  EntityTransaction db=Entities.get(AbsoluteMetricHistory.class);
  try {
    Criteria criteria=Entities.createCriteria(AbsoluteMetricHistory.class).add(Restrictions.eq("namespace",namespace)).add(Restrictions.eq("metricName",metricName)).add(Restrictions.eq("dimensionName",dimensionName)).add(Restrictions.eq("dimensionValue",dimensionValue));
    AbsoluteMetricHistory lastEntity=(AbsoluteMetricHistory)criteria.uniqueResult();
    if (lastEntity == null) {
      lastEntity=new AbsoluteMetricHistory();
      lastEntity.setNamespace(namespace);
      lastEntity.setMetricName(metricName);
      lastEntity.setDimensionName(dimensionName);
      lastEntity.setDimensionValue(dimensionValue);
      lastEntity.setTimestamp(newTimestamp);
      lastEntity.setLastMetricValue(newMetricValue);
      Entities.persist(lastEntity);
      returnValue=null;
    }
 else {
      long elapsedTimeInMillis=Math.abs(newTimestamp.getTime() - lastEntity.getTimestamp().getTime());
      double valueDifference=Math.abs(newMetricValue - lastEntity.getLastMetricValue());
      lastEntity.setTimestamp(newTimestamp);
      lastEntity.setLastMetricValue(newMetricValue);
      returnValue=new MetricDifferenceInfo(valueDifference,elapsedTimeInMillis);
    }
    db.commit();
  }
 catch (  RuntimeException ex) {
    Logs.extreme().error(ex,ex);
    throw ex;
  }
 finally {
    if (db.isActive())     db.rollback();
  }
  return returnValue;
}
