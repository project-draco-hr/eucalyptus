{
  this.cleanup();
  setHeaderText("Editing " + user.getUserName());
  HorizontalPanel action=addActionBar();
  addTitle("Edit user <i>" + user.getUserName() + "</i>");
  addSeparator();
  Grid grid=addDataGrid(11);
  int i=0;
  final CheckBox admin=addCheckBoxRow(grid,i++,"Administrator",user.isAdministrator(),false);
  final PasswordTextBox password=addPasswordRow(grid,i++,"Password",user.getPassword(),false);
  final PasswordTextBox password2=addPasswordRow(grid,i++,"Retype Password",user.getPassword(),false);
  if (user.isAdministrator()) {
    password.setEnabled(false);
    password2.setEnabled(false);
  }
  final TextBox fullName=addTextBoxRow(grid,i++,"Full Name",user.getRealName(),false);
  final TextBox email=addTextBoxRow(grid,i++,"Email",user.getEmail(),false);
  final CheckBox skipConfirmation;
  if (!user.isConfirmed()) {
    skipConfirmation=addCheckBoxRow(grid,i++,"Skip Email Confirmation",false,false);
  }
 else {
    skipConfirmation=null;
  }
  final TextBox phone=addTextBoxRow(grid,i++,"Phone Number",user.getTelephoneNumber(),false);
  final TextBox affiliation=addTextBoxRow(grid,i++,"Affiliation",user.getAffiliation(),false);
  final TextBox pi=addTextBoxRow(grid,i++,"Project Leader",user.getProjectPIName(),false);
  final TextArea description=addTextAreaRow(grid,i++,"Project Description",user.getProjectDescription(),false);
  final ListBox groups=addListRow(grid,i++,"Groups",groupNames,selectedGroupNames,false);
  action.add(new Button("Finish",new ClickHandler(){
    public void onClick(    ClickEvent event){
      String passwordValue=password.getText();
      String password2Value=password2.getText();
      if (!passwordValue.equals(password2Value)) {
        showStatus("Passwords do not match.",true);
        return;
      }
      if (passwordValue.toLowerCase().contains(user.getUserName().toLowerCase())) {
        showStatus("Password can not contain user name",true);
        return;
      }
      if (passwordValue.length() < UserGroupControl.MIN_PASSWORD_LENGTH) {
        showStatus("Password must have at least " + UserGroupControl.MIN_PASSWORD_LENGTH + " characters.",true);
        return;
      }
      String fullNameValue=fullName.getText();
      if (fullNameValue.length() <= 0) {
        showStatus("Full name can not be empty.",true);
        return;
      }
      String emailValue=email.getText();
      if (emailValue.length() <= 0) {
        showStatus("Email can not be empty.",true);
        return;
      }
      UserInfoWeb updatedUser=new UserInfoWeb();
      updatedUser.setUserName(user.getUserName());
      updatedUser.setAdministrator(admin.getValue());
      updatedUser.setPassword(GWTUtils.md5(passwordValue));
      updatedUser.setRealName(fullNameValue);
      updatedUser.setEmail(emailValue);
      if (skipConfirmation == null) {
        updatedUser.setConfirmed(user.isConfirmed());
      }
 else {
        updatedUser.setConfirmed(skipConfirmation.getValue());
      }
      updatedUser.setTelephoneNumber(phone.getText());
      updatedUser.setAffiliation(affiliation.getText());
      updatedUser.setProjectPIName(pi.getText());
      updatedUser.setProjectDescription(description.getText());
      List<String> addToGroups=new ArrayList<String>();
      for (int i=0; i < groups.getItemCount(); i++) {
        if (groups.isItemSelected(i)) {
          addToGroups.add(groups.getItemText(i));
        }
      }
      control.updateUser(updatedUser,addToGroups);
    }
  }
));
  action.add(new Button("Cancel",new ClickHandler(){
    public void onClick(    ClickEvent event){
      control.displaySelectedUsers();
    }
  }
));
}
