{
  this.cleanup();
  setHeaderText("Adding user");
  HorizontalPanel action=addActionBar();
  addTitle("Add a new user");
  addSubtitle("<em style='color:red;'>Red</em> fields are required");
  addSeparator();
  Grid grid=addDataGrid(14);
  int i=0;
  final TextBox userName=addTextBoxRow(grid,i++,"User Name","",true);
  final CheckBox admin=addCheckBoxRow(grid,i++,"Administrator",false,false);
  final PasswordTextBox password=addPasswordRow(grid,i++,"Password","",true);
  final PasswordTextBox password2=addPasswordRow(grid,i++,"Retype Password","",true);
  final TextBox fullName=addTextBoxRow(grid,i++,"Full Name","",true);
  final TextBox email=addTextBoxRow(grid,i++,"Email","",true);
  final CheckBox skipConfirmation=addCheckBoxRow(grid,i++,"Skip Email Confirmation",false,false);
  final CheckBox approved=addCheckBoxRow(grid,i++,"Approved",true,false);
  final CheckBox enabled=addCheckBoxRow(grid,i++,"Enabled",true,false);
  final TextBox phone=addTextBoxRow(grid,i++,"Phone Number","",false);
  final TextBox affiliation=addTextBoxRow(grid,i++,"Role","",false);
  final TextBox pi=addTextBoxRow(grid,i++,"Department","",false);
  final TextArea description=addTextAreaRow(grid,i++,"Notes","",false);
  final ListBox groups=addListRow(grid,i++,"Groups",UserGroupUtils.removeSpecialGroups(groupNames),selectedGroupNames,false);
  action.add(new EucaButton("Finish",new ClickHandler(){
    public void onClick(    ClickEvent event){
      String userNameValue=userName.getText();
      int length=userNameValue.length();
      if (length <= 0) {
        showStatus("User name can't be empty.",true);
        return;
      }
      if (length > 30) {
        showStatus("User name length can't be larger than 30 characters",true);
        return;
      }
      if (userNameValue.matches(".*[^\\w\\-\\.@]+.*")) {
        showStatus("User name contains invalid characters.",true);
        return;
      }
      String passwordValue=password.getText();
      String password2Value=password2.getText();
      if (!passwordValue.equals(password2Value)) {
        showStatus("Passwords do not match.",true);
        return;
      }
      if (passwordValue.toLowerCase().contains(userNameValue.toLowerCase())) {
        showStatus("Password can not contain user name",true);
        return;
      }
      if (passwordValue.length() < UserGroupControl.MIN_PASSWORD_LENGTH) {
        showStatus("Password must have at least " + UserGroupControl.MIN_PASSWORD_LENGTH + " characters.",true);
        return;
      }
      String fullNameValue=fullName.getText();
      if (fullNameValue.length() <= 0) {
        showStatus("Full name can not be empty.",true);
        return;
      }
      String emailValue=email.getText();
      if (emailValue.length() <= 0) {
        showStatus("Email can not be empty.",true);
        return;
      }
      UserInfoWeb user=new UserInfoWeb();
      user.setUserName(userNameValue);
      user.setAdministrator(admin.getValue());
      user.setPassword(GWTUtils.md5(passwordValue));
      user.setRealName(fullNameValue);
      user.setEmail(emailValue);
      user.setConfirmed(skipConfirmation.getValue());
      user.setApproved(approved.getValue());
      user.setEnabled(enabled.getValue());
      user.setTelephoneNumber(phone.getText());
      user.setAffiliation(affiliation.getText());
      user.setProjectPIName(pi.getText());
      user.setProjectDescription(description.getText());
      control.addUser(user,getListSelectedItems(groups));
    }
  }
));
  action.add(new EucaButton("Cancel",new ClickHandler(){
    public void onClick(    ClickEvent event){
      control.displaySelectedUsers();
    }
  }
));
}
