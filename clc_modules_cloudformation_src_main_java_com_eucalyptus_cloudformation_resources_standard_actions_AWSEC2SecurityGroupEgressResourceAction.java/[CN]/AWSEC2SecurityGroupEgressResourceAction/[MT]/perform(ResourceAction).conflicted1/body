{
  AWSEC2SecurityGroupEgressResourceAction action=(AWSEC2SecurityGroupEgressResourceAction)resourceAction;
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
  if (action.info.getCreatedEnoughToDelete() != Boolean.TRUE)   return action;
  action.validateProperties();
  DescribeSecurityGroupsType describeSecurityGroupsType=MessageHelper.createMessage(DescribeSecurityGroupsType.class,action.info.getEffectiveUserId());
  describeSecurityGroupsType.setFilterSet(Lists.newArrayList(Filter.filter("group-id",action.properties.getGroupId())));
  DescribeSecurityGroupsResponseType describeSecurityGroupsResponseType=AsyncRequests.sendSync(configuration,describeSecurityGroupsType);
  ArrayList<SecurityGroupItemType> securityGroupItemTypeArrayList=describeSecurityGroupsResponseType.getSecurityGroupInfo();
  if (securityGroupItemTypeArrayList == null || securityGroupItemTypeArrayList.isEmpty()) {
    return action;
  }
  RevokeSecurityGroupEgressType revokeSecurityGroupEgressType=MessageHelper.createMessage(RevokeSecurityGroupEgressType.class,action.info.getEffectiveUserId());
  revokeSecurityGroupEgressType.setGroupId(action.properties.getGroupId());
  IpPermissionType ipPermissionType=new IpPermissionType(action.properties.getIpProtocol(),action.properties.getFromPort(),action.properties.getToPort());
  if (!Strings.isNullOrEmpty(action.properties.getCidrIp())) {
    ipPermissionType.setCidrIpRanges(Lists.newArrayList(action.properties.getCidrIp()));
  }
  if (!Strings.isNullOrEmpty(action.properties.getDestinationSecurityGroupId())) {
    ipPermissionType.setGroups(Lists.newArrayList(new UserIdGroupPairType(null,null,action.properties.getDestinationSecurityGroupId())));
  }
  revokeSecurityGroupEgressType.setIpPermissions(Lists.newArrayList(ipPermissionType));
  RevokeSecurityGroupEgressResponseType revokeSecurityGroupEgressResponseType=AsyncRequests.<RevokeSecurityGroupEgressType,RevokeSecurityGroupEgressResponseType>sendSync(configuration,revokeSecurityGroupEgressType);
  DescribeSecurityGroupsType describeSecurityGroupsType2=MessageHelper.createMessage(DescribeSecurityGroupsType.class,action.info.getEffectiveUserId());
  describeSecurityGroupsType2.setFilterSet(Lists.newArrayList(Filter.filter("group-id",action.properties.getGroupId())));
  DescribeSecurityGroupsResponseType describeSecurityGroupsResponseType2=AsyncRequests.sendSync(configuration,describeSecurityGroupsType);
  ArrayList<SecurityGroupItemType> securityGroupItemTypeArrayList2=describeSecurityGroupsResponseType2.getSecurityGroupInfo();
  if (securityGroupItemTypeArrayList2 == null || securityGroupItemTypeArrayList2.isEmpty()) {
    return action;
  }
  if (securityGroupItemTypeArrayList2.get(0).getIpPermissionsEgress() == null || securityGroupItemTypeArrayList2.get(0).getIpPermissionsEgress().isEmpty()) {
    AuthorizeSecurityGroupEgressType authorizeSecurityGroupEgressType=MessageHelper.createMessage(AuthorizeSecurityGroupEgressType.class,action.info.getEffectiveUserId());
    authorizeSecurityGroupEgressType.setGroupId(action.properties.getGroupId());
    authorizeSecurityGroupEgressType.setIpPermissions(Lists.newArrayList(DEFAULT_EGRESS_RULE()));
    AuthorizeSecurityGroupEgressResponseType authorizeSecurityGroupIngressResponseType=AsyncRequests.<AuthorizeSecurityGroupEgressType,AuthorizeSecurityGroupEgressResponseType>sendSync(configuration,authorizeSecurityGroupEgressType);
  }
  return action;
}
