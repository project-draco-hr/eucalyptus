{
  if (info.getPhysicalResourceId() == null)   return;
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
  validateProperties();
  DescribeSecurityGroupsType describeSecurityGroupsType=new DescribeSecurityGroupsType();
  describeSecurityGroupsType.setEffectiveUserId(info.getEffectiveUserId());
  describeSecurityGroupsType.setSecurityGroupIdSet(Lists.newArrayList(properties.getGroupId()));
  DescribeSecurityGroupsResponseType describeSecurityGroupsResponseType=AsyncRequests.<DescribeSecurityGroupsType,DescribeSecurityGroupsResponseType>sendSync(configuration,describeSecurityGroupsType);
  ArrayList<SecurityGroupItemType> securityGroupItemTypeArrayList=describeSecurityGroupsResponseType.getSecurityGroupInfo();
  if (securityGroupItemTypeArrayList == null || securityGroupItemTypeArrayList.isEmpty()) {
    return;
  }
  RevokeSecurityGroupEgressType revokeSecurityGroupEgressType=new RevokeSecurityGroupEgressType();
  revokeSecurityGroupEgressType.setEffectiveUserId(getResourceInfo().getEffectiveUserId());
  revokeSecurityGroupEgressType.setGroupId(properties.getGroupId());
  IpPermissionType ipPermissionType=new IpPermissionType(properties.getIpProtocol(),properties.getFromPort(),properties.getToPort());
  if (!Strings.isNullOrEmpty(properties.getCidrIp())) {
    ipPermissionType.setCidrIpRanges(Lists.newArrayList(properties.getCidrIp()));
  }
  if (!Strings.isNullOrEmpty(properties.getDestinationSecurityGroupId())) {
    ipPermissionType.setGroups(Lists.newArrayList(new UserIdGroupPairType(null,null,properties.getDestinationSecurityGroupId())));
  }
  revokeSecurityGroupEgressType.setIpPermissions(Lists.newArrayList(ipPermissionType));
  RevokeSecurityGroupEgressResponseType revokeSecurityGroupEgressResponseType=AsyncRequests.<RevokeSecurityGroupEgressType,RevokeSecurityGroupEgressResponseType>sendSync(configuration,revokeSecurityGroupEgressType);
  DescribeSecurityGroupsType describeSecurityGroupsType2=new DescribeSecurityGroupsType();
  describeSecurityGroupsType2.setEffectiveUserId(info.getEffectiveUserId());
  describeSecurityGroupsType2.setSecurityGroupIdSet(Lists.newArrayList(properties.getGroupId()));
  DescribeSecurityGroupsResponseType describeSecurityGroupsResponseType2=AsyncRequests.<DescribeSecurityGroupsType,DescribeSecurityGroupsResponseType>sendSync(configuration,describeSecurityGroupsType);
  ArrayList<SecurityGroupItemType> securityGroupItemTypeArrayList2=describeSecurityGroupsResponseType2.getSecurityGroupInfo();
  if (securityGroupItemTypeArrayList2 == null || securityGroupItemTypeArrayList2.isEmpty()) {
    return;
  }
  if (securityGroupItemTypeArrayList2.get(0).getIpPermissionsEgress() == null || securityGroupItemTypeArrayList2.get(0).getIpPermissionsEgress().isEmpty()) {
    AuthorizeSecurityGroupEgressType authorizeSecurityGroupEgressType=new AuthorizeSecurityGroupEgressType();
    authorizeSecurityGroupEgressType.setEffectiveUserId(getResourceInfo().getEffectiveUserId());
    authorizeSecurityGroupEgressType.setGroupId(properties.getGroupId());
    authorizeSecurityGroupEgressType.setIpPermissions(Lists.newArrayList(DEFAULT_EGRESS_RULE()));
    AuthorizeSecurityGroupEgressResponseType authorizeSecurityGroupIngressResponseType=AsyncRequests.<AuthorizeSecurityGroupEgressType,AuthorizeSecurityGroupEgressResponseType>sendSync(configuration,authorizeSecurityGroupEgressType);
  }
}
