{
  if (serverShutdown != null) {
    serverShutdown.run();
    serverShutdown=null;
  }
  final Executor workerPool=workerPool();
  final ChannelFactory serverChannelFactory=channelFactory(workerPool);
  final ChannelPipelineFactory serverPipelineFactory=Handlers.serverPipelineFactory();
  final ChannelGroup serverChannelGroup=channelGroup();
  final ChannelHandler channelGroupHandler=new SimpleChannelHandler(){
    @Override public void channelOpen(    ChannelHandlerContext ctx,    ChannelStateEvent e){
      serverChannelGroup.add(ctx.getChannel());
      ctx.sendUpstream(e);
    }
  }
;
  final ChannelPipelineFactory pipelineFactory=new ChannelPipelineFactory(){
    @Override public ChannelPipeline getPipeline() throws Exception {
      ChannelPipeline pipeline=serverPipelineFactory.getPipeline();
      pipeline.addFirst("channel-group-handler",channelGroupHandler);
      return pipeline;
    }
  }
;
  final ServerBootstrap bootstrap=serverBootstrap(serverChannelFactory,pipelineFactory);
  if (StackConfiguration.PORT != StackConfiguration.INTERNAL_PORT) {
    final Channel serverChannel=bootstrap.bind(new InetSocketAddress(StackConfiguration.PORT));
    serverChannelGroup.add(serverChannel);
  }
  final Channel serverChannel=bootstrap.bind(new InetSocketAddress(StackConfiguration.INTERNAL_PORT));
  serverChannelGroup.add(serverChannel);
  serverShutdown=new Runnable(){
    AtomicBoolean ranned=new AtomicBoolean(false);
    @Override public void run(){
      if (this.ranned.compareAndSet(false,true)) {
        serverChannelGroup.close().awaitUninterruptibly();
        serverChannelFactory.releaseExternalResources();
      }
    }
  }
;
  OrderedShutdown.register(Empyrean.class,serverShutdown);
}
