{
  if (serverShutdown != null) {
    serverShutdown.run();
    serverShutdown=null;
  }
  final Executor workerPool=workerPool();
  final ChannelFactory serverChannelFactory=channelFactory(workerPool);
  final ChannelPipelineFactory serverPipelineFactory=Handlers.serverPipelineFactory();
  final ChannelGroup serverChannelGroup=channelGroup();
  final ChannelHandler channelGroupHandler=new ChannelGroupChannelHandler(serverChannelGroup);
  final ChannelPipelineFactory pipelineFactory=new ChannelPipelineFactory(){
    @Override public ChannelPipeline getPipeline() throws Exception {
      ChannelPipeline pipeline=serverPipelineFactory.getPipeline();
      pipeline.addLast("channel-group-handler",channelGroupHandler);
      return pipeline;
    }
  }
;
  final ServerBootstrap bootstrap=serverBootstrap(serverChannelFactory,pipelineFactory);
  final List<Pair<InetAddress,Integer>> internalAddressAndPorts=Arrays.asList(Pair.pair(Internets.localHostInetAddress(),StackConfiguration.INTERNAL_PORT),Pair.pair(Internets.loopback(),StackConfiguration.INTERNAL_PORT));
  final Set<Pair<InetAddress,Integer>> listenerAddressAndPorts=Sets.newLinkedHashSet();
  listenerAddressAndPorts.addAll(internalAddressAndPorts);
  if (Bootstrap.isOperational()) {
    Iterables.addAll(listenerAddressAndPorts,Iterables.transform(Iterables.filter(Iterables.concat(Collections.singleton(Internets.any()),Internets.getAllInetAddresses()),Predicates.or(parse(Cidr.parse(),StackConfiguration.LISTENER_ADDRESS_MATCH))),CollectionUtils.flipCurried(Pair.<InetAddress,Integer>pair()).apply(StackConfiguration.PORT)));
  }
  if (listenerAddressAndPorts.contains(Pair.pair(Internets.any(),StackConfiguration.INTERNAL_PORT))) {
    listenerAddressAndPorts.removeAll(internalAddressAndPorts);
  }
  LOG.info("Starting web services listeners on " + Joiner.on(',').join(Iterables.transform(listenerAddressAndPorts,Pair.<InetAddress,Integer>left())));
  for (  final Pair<InetAddress,Integer> listenerAddressAndPort : listenerAddressAndPorts) {
    final InetAddress address=listenerAddressAndPort.getLeft();
    final int port=listenerAddressAndPort.getRight();
    try {
      final Channel serverChannel=bootstrap.bind(new InetSocketAddress(address,port));
      serverChannelGroup.add(serverChannel);
    }
 catch (    ChannelException ex) {
      LOG.error("Unable to bind web services listener " + address + ":"+ port+ ", port may be already in use.");
      Logs.extreme().error(ex,ex);
    }
  }
  try {
    serverShutdown=new Runnable(){
      AtomicBoolean ranned=new AtomicBoolean(false);
      @Override public void run(){
        if (this.ranned.compareAndSet(false,true)) {
          serverChannelGroup.close().awaitUninterruptibly();
          serverChannelFactory.releaseExternalResources();
        }
      }
    }
;
    OrderedShutdown.registerPreShutdownHook(serverShutdown);
  }
 catch (  Exception ex) {
    LOG.error(ex,ex);
  }
}
