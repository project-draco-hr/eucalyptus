{
  if (Bootstrap.isOperational() && event.isAsserted(60) && isRunning.compareAndSet(false,true)) {
    LOG.trace("Checking for updates to bootstrap.webservices properties");
    boolean different=false;
    Integer NEW_CHANNEL_CONNECT_TIMEOUT=StackConfiguration.CHANNEL_CONNECT_TIMEOUT;
    Boolean NEW_SERVER_CHANNEL_REUSE_ADDRESS=StackConfiguration.SERVER_CHANNEL_REUSE_ADDRESS;
    Boolean NEW_SERVER_CHANNEL_NODELAY=StackConfiguration.SERVER_CHANNEL_NODELAY;
    boolean NEW_CHANNEL_REUSE_ADDRESS=StackConfiguration.CHANNEL_REUSE_ADDRESS;
    Boolean NEW_CHANNEL_KEEP_ALIVE=StackConfiguration.CHANNEL_KEEP_ALIVE;
    Boolean NEW_CHANNEL_NODELAY=StackConfiguration.CHANNEL_NODELAY;
    Integer NEW_SERVER_POOL_MAX_THREADS=StackConfiguration.SERVER_POOL_MAX_THREADS;
    Long NEW_SERVER_POOL_MAX_MEM_PER_CONN=StackConfiguration.SERVER_POOL_MAX_MEM_PER_CONN;
    Long NEW_SERVER_POOL_TOTAL_MEM=StackConfiguration.SERVER_POOL_TOTAL_MEM;
    Long NEW_SERVER_POOL_TIMEOUT_MILLIS=StackConfiguration.SERVER_POOL_TIMEOUT_MILLIS;
    Integer NEW_SERVER_BOSS_POOL_MAX_THREADS=StackConfiguration.SERVER_BOSS_POOL_MAX_THREADS;
    Long NEW_SERVER_BOSS_POOL_MAX_MEM_PER_CONN=StackConfiguration.SERVER_BOSS_POOL_MAX_MEM_PER_CONN;
    Long NEW_SERVER_BOSS_POOL_TOTAL_MEM=StackConfiguration.SERVER_BOSS_POOL_TOTAL_MEM;
    Long NEW_SERVER_BOSS_POOL_TIMEOUT_MILLIS=StackConfiguration.SERVER_BOSS_POOL_TIMEOUT_MILLIS;
    Integer NEW_PORT=StackConfiguration.PORT;
    String NEW_LISTENER_ADDRESS_MATCH=Bootstrap.isOperational() ? StackConfiguration.LISTENER_ADDRESS_MATCH : "";
    if (!CHANNEL_CONNECT_TIMEOUT.equals(NEW_CHANNEL_CONNECT_TIMEOUT)) {
      LOG.info("bootstrap.webservices.channel_connect_timeout has changed: oldValue = " + CHANNEL_CONNECT_TIMEOUT + ", newValue = "+ NEW_CHANNEL_CONNECT_TIMEOUT);
      CHANNEL_CONNECT_TIMEOUT=NEW_CHANNEL_CONNECT_TIMEOUT;
      different=true;
    }
    if (SERVER_CHANNEL_REUSE_ADDRESS != NEW_SERVER_CHANNEL_REUSE_ADDRESS) {
      LOG.info("bootstrap.webservices.server_channel_reuse_address has changed: oldValue = " + SERVER_CHANNEL_REUSE_ADDRESS + ", newValue = "+ NEW_SERVER_CHANNEL_REUSE_ADDRESS);
      SERVER_CHANNEL_REUSE_ADDRESS=NEW_SERVER_CHANNEL_REUSE_ADDRESS;
      different=true;
    }
    if (SERVER_CHANNEL_NODELAY != NEW_SERVER_CHANNEL_NODELAY) {
      LOG.info("bootstrap.webservices.server_channel_nodelay has changed: oldValue = " + SERVER_CHANNEL_NODELAY + ", newValue = "+ NEW_SERVER_CHANNEL_NODELAY);
      SERVER_CHANNEL_NODELAY=NEW_SERVER_CHANNEL_NODELAY;
      different=true;
    }
    if (CHANNEL_REUSE_ADDRESS != NEW_CHANNEL_REUSE_ADDRESS) {
      LOG.info("bootstrap.webservices.channel_reuse_address has changed: oldValue = " + CHANNEL_REUSE_ADDRESS + ", newValue = "+ NEW_CHANNEL_REUSE_ADDRESS);
      CHANNEL_REUSE_ADDRESS=NEW_CHANNEL_REUSE_ADDRESS;
      different=true;
    }
    if (CHANNEL_KEEP_ALIVE != NEW_CHANNEL_KEEP_ALIVE) {
      LOG.info("bootstrap.webservices.channel_keep_alive has changed: oldValue = " + CHANNEL_KEEP_ALIVE + ", newValue = "+ NEW_CHANNEL_KEEP_ALIVE);
      CHANNEL_KEEP_ALIVE=NEW_CHANNEL_KEEP_ALIVE;
      different=true;
    }
    if (CHANNEL_NODELAY != NEW_CHANNEL_NODELAY) {
      LOG.info("bootstrap.webservices.channel_nodelay has changed: oldValue = " + CHANNEL_NODELAY + ", newValue = "+ NEW_CHANNEL_NODELAY);
      CHANNEL_NODELAY=NEW_CHANNEL_NODELAY;
      different=true;
    }
    if (!SERVER_POOL_MAX_THREADS.equals(NEW_SERVER_POOL_MAX_THREADS)) {
      LOG.info("bootstrap.webservices.server_pool_max_threads has changed: oldValue = " + SERVER_POOL_MAX_THREADS + ", newValue = "+ NEW_SERVER_POOL_MAX_THREADS);
      SERVER_POOL_MAX_THREADS=NEW_SERVER_POOL_MAX_THREADS;
      different=true;
    }
    if (!SERVER_POOL_MAX_MEM_PER_CONN.equals(NEW_SERVER_POOL_MAX_MEM_PER_CONN)) {
      LOG.info("bootstrap.webservices.server_pool_max_mem_per_conn has changed: oldValue = " + SERVER_POOL_MAX_MEM_PER_CONN + ", newValue = "+ NEW_SERVER_POOL_MAX_MEM_PER_CONN);
      SERVER_POOL_MAX_MEM_PER_CONN=NEW_SERVER_POOL_MAX_MEM_PER_CONN;
      different=true;
    }
    if (!SERVER_POOL_TOTAL_MEM.equals(NEW_SERVER_POOL_TOTAL_MEM)) {
      LOG.info("bootstrap.webservices.server_pool_total_mem has changed: oldValue = " + SERVER_POOL_TOTAL_MEM + ", newValue = "+ NEW_SERVER_POOL_TOTAL_MEM);
      SERVER_POOL_TOTAL_MEM=NEW_SERVER_POOL_TOTAL_MEM;
      different=true;
    }
    if (!SERVER_POOL_TIMEOUT_MILLIS.equals(NEW_SERVER_POOL_TIMEOUT_MILLIS)) {
      LOG.info("bootstrap.webservices.server_pool_timeout_millis has changed: oldValue = " + SERVER_POOL_TIMEOUT_MILLIS + ", newValue = "+ NEW_SERVER_POOL_TIMEOUT_MILLIS);
      SERVER_POOL_TIMEOUT_MILLIS=NEW_SERVER_POOL_TIMEOUT_MILLIS;
      different=true;
    }
    if (!SERVER_BOSS_POOL_MAX_THREADS.equals(NEW_SERVER_BOSS_POOL_MAX_THREADS)) {
      LOG.info("bootstrap.webservices.server_boss_pool_max_threads has changed: oldValue = " + SERVER_BOSS_POOL_MAX_THREADS + ", newValue = "+ NEW_SERVER_BOSS_POOL_MAX_THREADS);
      SERVER_BOSS_POOL_MAX_THREADS=NEW_SERVER_BOSS_POOL_MAX_THREADS;
      different=true;
    }
    if (!SERVER_BOSS_POOL_MAX_MEM_PER_CONN.equals(NEW_SERVER_BOSS_POOL_MAX_MEM_PER_CONN)) {
      LOG.info("bootstrap.webservices.server_boss_pool_max_mem_per_conn has changed: oldValue = " + SERVER_BOSS_POOL_MAX_MEM_PER_CONN + ", newValue = "+ NEW_SERVER_BOSS_POOL_MAX_MEM_PER_CONN);
      SERVER_BOSS_POOL_MAX_MEM_PER_CONN=NEW_SERVER_BOSS_POOL_MAX_MEM_PER_CONN;
      different=true;
    }
    if (!SERVER_BOSS_POOL_TOTAL_MEM.equals(NEW_SERVER_BOSS_POOL_TOTAL_MEM)) {
      LOG.info("bootstrap.webservices.server_boss_pool_total_mem has changed: oldValue = " + SERVER_BOSS_POOL_TOTAL_MEM + ", newValue = "+ NEW_SERVER_BOSS_POOL_TOTAL_MEM);
      SERVER_BOSS_POOL_TOTAL_MEM=NEW_SERVER_BOSS_POOL_TOTAL_MEM;
      different=true;
    }
    if (!SERVER_BOSS_POOL_TIMEOUT_MILLIS.equals(NEW_SERVER_BOSS_POOL_TIMEOUT_MILLIS)) {
      LOG.info("bootstrap.webservices.server_boss_pool_timeout_millis has changed: oldValue = " + SERVER_BOSS_POOL_TIMEOUT_MILLIS + ", newValue = "+ NEW_SERVER_BOSS_POOL_TIMEOUT_MILLIS);
      SERVER_BOSS_POOL_TIMEOUT_MILLIS=NEW_SERVER_BOSS_POOL_TIMEOUT_MILLIS;
      different=true;
    }
    if (!PORT.equals(NEW_PORT)) {
      LOG.info("bootstrap.webservices.port has changed: oldValue = " + PORT + ", newValue = "+ NEW_PORT);
      PORT=NEW_PORT;
      different=true;
    }
    if (!LISTENER_ADDRESS_MATCH.equals(NEW_LISTENER_ADDRESS_MATCH)) {
      LOG.info("bootstrap.webservices.listener_address_match has changed: oldValue = " + LISTENER_ADDRESS_MATCH + ", newValue = "+ NEW_LISTENER_ADDRESS_MATCH);
      LISTENER_ADDRESS_MATCH=NEW_LISTENER_ADDRESS_MATCH;
      different=true;
    }
    if (different) {
      LOG.info("One or more bootstrap.webservices properties have changed, restarting web services listeners [May change ports]");
      new Thread(Threads.threadUniqueName("web-services-restarter")){
        public void run(){
          try {
            restart();
            LOG.info("Web services restart complete");
          }
 catch (          Exception ex) {
            LOG.error(ex,ex);
          }
 finally {
            isRunning.set(false);
          }
        }
      }
.start();
    }
 else {
      isRunning.set(false);
      LOG.trace("No updates found to web services properties");
    }
  }
}
