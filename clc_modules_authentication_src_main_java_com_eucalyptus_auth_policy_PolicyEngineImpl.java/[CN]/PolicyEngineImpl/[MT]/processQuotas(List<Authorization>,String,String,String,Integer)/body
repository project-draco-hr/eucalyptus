{
  NumericGreaterThan ngt=new NumericGreaterThan();
  for (  Authorization auth : quotas) {
    LOG.debug("YE " + "evaluate quota " + auth);
    if (!evaluatePatterns(auth.getActions(),auth.isNotAction(),action)) {
      LOG.debug(" YE " + "action " + action + " not matching");
      continue;
    }
    if (!evaluatePatterns(auth.getResources(),auth.isNotResource(),resourceName)) {
      LOG.debug(" YE " + "resource " + resourceName + " not matching");
      continue;
    }
    QuotaKey.Scope scope=getAuthorizationScope(auth);
    String principalId=getAuthorizationPrincipalId(auth,scope);
    for (    Condition cond : auth.getConditions()) {
      Key key=Keys.getKeyInstance(Keys.getKeyClass(cond.getKey()));
      if (!(key instanceof QuotaKey)) {
        LOG.debug(" YE " + "not quota key");
        continue;
      }
      QuotaKey quotaKey=(QuotaKey)key;
      if (!key.canApply(action,resourceType)) {
        LOG.debug(" YE " + "can not apply key");
        continue;
      }
      String usageValue=quotaKey.value(scope,principalId,resourceName,quantity);
      String quotaValue=cond.getValues().toArray(new String[0])[0];
      if (ngt.check(usageValue,quotaValue)) {
        LOG.error("Quota " + key.getClass().getName() + " is exceeded: quota="+ quotaValue+ ", usage="+ usageValue);
        throw new AuthException(AuthException.QUOTA_EXCEEDED);
      }
    }
  }
}
