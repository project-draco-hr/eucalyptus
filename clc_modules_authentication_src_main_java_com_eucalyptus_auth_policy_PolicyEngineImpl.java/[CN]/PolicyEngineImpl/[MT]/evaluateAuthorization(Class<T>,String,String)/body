{
  try {
    User requestUser=RequestContext.getRequestUser();
    if (requestUser.isSystemAdmin()) {
      return;
    }
    BaseMessage request=RequestContext.getRequest();
    Map<String,Contract> contracts=RequestContext.getContracts();
    String userId=requestUser.getUserId();
    String accountId=requestUser.getAccount().getAccountId();
    String resourceType=getResourceType(resourceClass);
    String action=getAction(request.getClass());
    CachedKeyEvaluator keyEval=new CachedKeyEvaluator();
    ContractKeyEvaluator contractEval=new ContractKeyEvaluator(contracts);
    Decision decision=processAuthorizations(lookupGlobalAuthorizations(resourceType,accountId),action,resourceName,keyEval,contractEval);
    if ((decision == Decision.DENY) || (decision == Decision.DEFAULT && !resourceAccountId.equals(accountId))) {
      LOG.debug(request + " is rejected by global authorization check, due to decision " + decision);
      throw new AuthException(AuthException.ACCESS_DENIED);
    }
    if (requestUser.isAccountAdmin()) {
      return;
    }
    decision=processAuthorizations(lookupLocalAuthorizations(resourceType,userId),action,resourceName,keyEval,contractEval);
    if (decision == Decision.DENY || decision == Decision.DEFAULT) {
      LOG.debug(request + " is rejected by local authorization check, due to decision " + decision);
      throw new AuthException(AuthException.ACCESS_DENIED);
    }
  }
 catch (  AuthException e) {
    throw e;
  }
catch (  IllegalContextAccessException e) {
    throw new AuthException("Cannot invoke without a corresponding service context available.",e);
  }
catch (  Throwable e) {
    throw new AuthException("An error occurred while trying to evaluate policy for resource access",e);
  }
}
