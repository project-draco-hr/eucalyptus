{
  Map<String,String> m=new HashMap<String,String>();
  m.put("ami-id",this.getImageInfo().getImageId());
  m.put("ami-launch-index","" + this.getLaunchIndex());
  m.put("ami-manifest-path",this.getImageInfo().getImageLocation());
  m.put("hostname",this.getNetworkConfig().getIgnoredPublicIp());
  m.put("instance-id",this.getInstanceId());
  m.put("instance-type",this.getVmTypeInfo().getName());
  m.put("local-hostname",this.getNetworkConfig().getIpAddress());
  m.put("local-ipv4",this.getNetworkConfig().getIpAddress());
  m.put("public-hostname",this.getNetworkConfig().getIgnoredPublicIp());
  m.put("public-ipv4",this.getNetworkConfig().getIgnoredPublicIp());
  m.put("public-keys/","0=" + this.getKeyInfo().getName());
  m.put("placement/","availability-zone");
  m.put("reservation-id",this.getReservationId());
  m.put("ancestor-ami-ids","none");
  m.put("kernel-id",this.getImageInfo().getKernelId());
  m.put("ramdisk-id",this.getImageInfo().getRamdiskId());
  m.put("security-groups",this.getNetworkNames().toString());
  m.put("block-device-mapping","not yet supported.");
  m.put("product-codes","not yet supported.");
  if (path == null)   path="";
  String dir="";
  for (  String entry : m.keySet())   dir+=entry + "\n";
  m.put("",dir);
  m.put("public-keys/0","openssh-key");
  m.put("public-keys/0/","openssh-key");
  m.put("placement/availability-zone",this.getPlacement());
  m.put("public-keys/0/openssh-key",this.getKeyInfo().getValue());
  m.put("public-keys","0=" + this.getKeyInfo().getName());
  m.put("placement","availability-zone");
  LOG.debug("Servicing metadata request:" + path + " -> "+ m.get(path));
  return m.get(path);
}
