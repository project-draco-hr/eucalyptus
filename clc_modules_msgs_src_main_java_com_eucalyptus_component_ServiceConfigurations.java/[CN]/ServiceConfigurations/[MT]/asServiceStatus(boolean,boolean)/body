{
  return new Function<ServiceConfiguration,ServiceStatusType>(){
    @Override public ServiceStatusType apply(    final ServiceConfiguration config){
      return new ServiceStatusType(){
        /** 
 */
        private static final long serialVersionUID=1L;
{
          this.setServiceId(TypeMappers.transform(config,ServiceId.class));
          this.setLocalEpoch(Topology.epoch());
          try {
            this.setLocalState(config.lookupState().toString());
          }
 catch (          final Exception ex) {
            this.setLocalState("n/a: " + ex.getMessage());
          }
          if (showEvents) {
            this.getStatusDetails().addAll(Collections2.transform(Faults.lookup(config),TypeMappers.lookup(CheckException.class,ServiceStatusDetail.class)));
            if (!showEventStacks) {
              for (              final ServiceStatusDetail a : this.getStatusDetails()) {
                a.setStackTrace("");
              }
            }
          }
          try {
            List<ServiceAccount> accnts=ServiceConfigurationToServiceAccounts.INSTANCE.apply(config);
            if (accnts != null && accnts.size() > 0) {
              this.getServiceAccounts().addAll(accnts);
            }
          }
 catch (          Exception e) {
            LOG.warn("Failed finding service account for service: " + config.getName(),e);
          }
        }
      }
;
    }
  }
;
}
