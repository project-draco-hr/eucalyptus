{
  try {
    Type reportType=Type.valueOf(Param.type.get());
    try {
      Boolean doFlush=this.doFlush();
      final JRExporter exporter=reportType.setup(req,res,Param.name.get(req));
      ReportCache reportCache=getReportManager(Param.name.get(req),doFlush);
      LOG.info("--> scriptName:" + Param.name.get(req));
      String scriptName=Param.name.get(req);
      JasperPrint jasperPrint=null;
      if (scriptName.equals("user_vms") || scriptName.equals("user_storage") || scriptName.equals("user_s3")) {
        long start=Long.parseLong(Param.start.get(req));
        long end=Long.parseLong(Param.end.get(req));
        Period period=new Period(start,end);
        int criterionId=Integer.parseInt(Param.criterionId.get(req));
        int groupById=Integer.parseInt(Param.groupById.get(req));
        GroupByCriterion criterion=GroupByCriterion.values()[criterionId + 1];
        Units displayUnits=Units.DEFAULT_DISPLAY_UNITS;
        Map<String,String> params=new HashMap<String,String>();
        params.put("criterion",criterion.toString());
        params.put("timeUnit",displayUnits.getTimeUnit().toString());
        params.put("sizeUnit",displayUnits.getSizeUnit().toString());
        params.put("sizeTimeTimeUnit",displayUnits.getSizeTimeTimeUnit().toString());
        params.put("sizeTimeSizeUnit",displayUnits.getSizeTimeSizeUnit().toString());
        GroupByCriterion groupByCriterion=null;
        if (groupById > 0) {
          groupByCriterion=GroupByCriterion.values()[groupById - 1];
          params.put("groupByCriterion",groupByCriterion.toString());
        }
        if (scriptName.equals("user_vms")) {
          InstanceDisplayDb dbInstance=InstanceDisplayDb.getInstance();
          File jrxmlFile=null;
          JRDataSource dataSource=null;
          if (groupById == 0) {
            List<InstanceDisplayBean> list=dbInstance.search(period,criterion,displayUnits);
            dataSource=new JRBeanCollectionDataSource(list);
            jrxmlFile=new File(SubDirectory.REPORTS.toString() + File.separator + INSTANCE_REPORT_FILENAME);
          }
 else {
            List<InstanceDisplayBean> list=dbInstance.searchGroupBy(period,groupByCriterion,criterion,displayUnits);
            dataSource=new JRBeanCollectionDataSource(list);
            jrxmlFile=new File(SubDirectory.REPORTS.toString() + File.separator + NESTED_INSTANCE_REPORT_FILENAME);
          }
          JasperReport report=JasperCompileManager.compileReport(jrxmlFile.getAbsolutePath());
          jasperPrint=JasperFillManager.fillReport(report,params,dataSource);
        }
 else         if (scriptName.equals("user_storage")) {
          StorageDisplayDb dbStorage=StorageDisplayDb.getInstance();
          File jrxmlFile=null;
          JRDataSource dataSource=null;
          if (groupById == 0) {
            List<StorageDisplayBean> list=dbStorage.search(period,criterion,displayUnits);
            dataSource=new JRBeanCollectionDataSource(list);
            jrxmlFile=new File(SubDirectory.REPORTS.toString() + File.separator + STORAGE_REPORT_FILENAME);
          }
 else {
            List<StorageDisplayBean> list=dbStorage.searchGroupBy(period,groupByCriterion,criterion,displayUnits);
            dataSource=new JRBeanCollectionDataSource(list);
            jrxmlFile=new File(SubDirectory.REPORTS.toString() + File.separator + NESTED_STORAGE_REPORT_FILENAME);
          }
          JasperReport report=JasperCompileManager.compileReport(jrxmlFile.getAbsolutePath());
          jasperPrint=JasperFillManager.fillReport(report,params,dataSource);
        }
 else         if (scriptName.equals("user_s3")) {
          S3DisplayDb dbStorage=S3DisplayDb.getInstance();
          File jrxmlFile=null;
          JRDataSource dataSource=null;
          if (groupById == 0) {
            List<S3DisplayBean> list=dbStorage.search(period,criterion,displayUnits);
            dataSource=new JRBeanCollectionDataSource(list);
            jrxmlFile=new File(SubDirectory.REPORTS.toString() + File.separator + S3_REPORT_FILENAME);
          }
 else {
            List<S3DisplayBean> list=dbStorage.searchGroupBy(period,groupByCriterion,criterion,displayUnits);
            dataSource=new JRBeanCollectionDataSource(list);
            jrxmlFile=new File(SubDirectory.REPORTS.toString() + File.separator + NESTED_S3_REPORT_FILENAME);
          }
          JasperReport report=JasperCompileManager.compileReport(jrxmlFile.getAbsolutePath());
          jasperPrint=JasperFillManager.fillReport(report,params,dataSource);
        }
      }
 else {
        jasperPrint=reportCache.getJasperPrint(req);
      }
      exporter.setParameter(JRExporterParameter.JASPER_PRINT,jasperPrint);
      exporter.exportReport();
    }
 catch (    Throwable ex) {
      LOG.error(ex,ex);
      res.setContentType("text/plain");
      LOG.error("Could not create the report stream " + ex.getMessage() + " "+ ex.getLocalizedMessage());
      ex.printStackTrace(res.getWriter());
    }
 finally {
      reportType.close(res);
    }
  }
 catch (  NoSuchFieldException e) {
    LOG.debug(e,e);
    this.hasError("Failed to generate report: " + e.getMessage(),res);
  }
catch (  IOException e) {
    LOG.debug(e,e);
    this.hasError("Failed to generate report: " + e.getMessage(),res);
  }
}
