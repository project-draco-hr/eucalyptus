{
  LOG.trace("Touching class: " + ServiceDispatcher.class);
  for (  Component v : Component.values()) {
    LOG.info("Ensure component is initialized: " + LogUtil.dumpObject(v));
  }
  if (!Component.eucalyptus.isLocal()) {
    Component.eucalyptus.setHostAddress(Component.db.getHostAddress());
    registerComponent(Component.eucalyptus,new RemoteConfiguration(Component.eucalyptus,Component.eucalyptus.getUri()));
    Component.jetty.setHostAddress(Component.db.getHostAddress());
    registerComponent(Component.jetty,new RemoteConfiguration(Component.jetty,Component.jetty.getUri()));
    Component.cluster.setHostAddress(Component.db.getHostAddress());
    registerComponent(Component.cluster,new RemoteConfiguration(Component.cluster,Component.cluster.getUri()));
    Component.cluster.setHostAddress(Component.db.getHostAddress());
    registerComponent(Component.dns,new RemoteConfiguration(Component.dns,Component.dns.getUri()));
  }
 else   if (Component.eucalyptus.isLocal()) {
    try {
      registerLocalComponent(Component.db);
      Component.db.setHostAddress("127.0.0.1");
      System.setProperty("euca.db.url",Component.db.getUri().toASCIIString());
      registerLocalComponent(Component.dns);
      registerLocalComponent(Component.eucalyptus);
      registerLocalComponent(Component.cluster);
      registerLocalComponent(Component.jetty);
    }
 catch (    Exception e) {
      LOG.fatal(e,e);
      return false;
    }
  }
  if (!Component.walrus.isLocal()) {
    List<WalrusConfiguration> walri=Configuration.getWalrusConfigurations();
    for (    WalrusConfiguration w : walri) {
      try {
        if (NetworkUtil.testLocal(w.getHostName())) {
          Component.walrus.markLocal();
          registerLocalComponent(Component.walrus);
        }
 else {
          Component.walrus.setHostAddress(w.getHostName());
          registerComponent(Component.walrus,w);
        }
      }
 catch (      Exception e) {
        LOG.error("Failed to create walrus service proxy: " + e);
      }
      break;
    }
  }
 else {
    registerLocalComponent(Component.walrus);
  }
  List<StorageControllerConfiguration> scs=Configuration.getStorageControllerConfigurations();
  boolean hasLocal=false;
  for (  StorageControllerConfiguration sc : scs) {
    try {
      if (NetworkUtil.testLocal(sc.getHostName())) {
        hasLocal=true;
      }
 else {
        registerComponent(Component.storage,sc);
      }
    }
 catch (    Exception e) {
      LOG.error("Failed to create storage controller " + sc.getName() + " service proxy: "+ e);
    }
    if (hasLocal) {
      Component.storage.markLocal();
      registerLocalComponent(Component.storage);
    }
  }
  return true;
}
