{
  ListSigningCertificatesResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  String action=PolicySpec.requestToAction(request);
  Context ctx=Contexts.lookup();
  User requestUser=ctx.getUser();
  Account account=ctx.getAccount();
  User userFound=requestUser;
  if (request.getUserName() != null) {
    try {
      userFound=account.lookupUserByName(request.getUserName());
    }
 catch (    Exception e) {
      if (e instanceof AuthException && AuthException.NO_SUCH_USER.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.NOT_FOUND,EuareException.NO_SUCH_ENTITY,"Can not find user " + request.getUserName());
      }
 else {
        throw new EucalyptusCloudException(e);
      }
    }
  }
  if (!Permissions.isAuthorized(PolicySpec.IAM_RESOURCE_USER,getUserFullName(userFound),account,action,requestUser)) {
    throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,"Not authorized to list signing certificates for " + request.getUserName() + " by "+ requestUser.getName());
  }
  ListSigningCertificatesResultType result=reply.getListSigningCertificatesResult();
  result.setIsTruncated(false);
  ArrayList<SigningCertificateType> certs=result.getCertificates().getMemberList();
  try {
    for (    Certificate cert : userFound.getCertificates()) {
      if (!cert.isRevoked()) {
        SigningCertificateType c=new SigningCertificateType();
        c.setUserName(userFound.getName());
        c.setCertificateId(cert.getId());
        c.setCertificateBody(B64.url.decString(cert.getPem()));
        c.setStatus(cert.isActive() ? "Active" : "Inactive");
        c.setUploadDate(cert.getCreateDate());
        certs.add(c);
      }
    }
  }
 catch (  Exception e) {
    throw new EucalyptusCloudException(e);
  }
  return reply;
}
