{
  ListSigningCertificatesResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  Context ctx=Contexts.lookup();
  AuthContext requestUser=getAuthContext(ctx);
  Account account=getRealAccount(ctx,request.getDelegateAccount());
  EuareUser userFound=lookupUser(ctx);
  if (!Strings.isNullOrEmpty(request.getUserName()) || request.getDelegateAccount() != null) {
    userFound=lookupUserByName(account,Objects.firstNonNull(Strings.emptyToNull(request.getUserName()),userFound.getName()));
  }
  ListSigningCertificatesResultType result=reply.getListSigningCertificatesResult();
  result.setIsTruncated(false);
  ArrayList<SigningCertificateType> certs=result.getCertificates().getMemberList();
  try {
    for (    Certificate cert : Privileged.listSigningCertificates(requestUser,account,userFound)) {
      SigningCertificateType c=new SigningCertificateType();
      c.setUserName(userFound.getName());
      c.setCertificateId(cert.getCertificateId());
      c.setCertificateBody(B64.url.decString(cert.getPem()));
      c.setStatus(cert.isActive() ? "Active" : "Inactive");
      c.setUploadDate(cert.getCreateDate());
      certs.add(c);
    }
  }
 catch (  Exception e) {
    if (e instanceof AuthException) {
      if (AuthException.ACCESS_DENIED.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,"Not authorized to list signing certificates for " + request.getUserName() + " by "+ ctx.getUser().getName());
      }
    }
    LOG.error(e,e);
    throw new EucalyptusCloudException(e);
  }
  return reply;
}
