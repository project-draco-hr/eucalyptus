{
  CreateAccessKeyResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  Context ctx=Contexts.lookup();
  AuthContext requestUser=getAuthContext(ctx);
  Account account=getRealAccount(ctx,request);
  EuareUser userFound=lookupUser(ctx);
  if (!Strings.isNullOrEmpty(request.getUserName())) {
    userFound=lookupUserByName(account,request.getUserName());
  }
  try {
    AccessKey key=Privileged.createAccessKey(requestUser,account,userFound);
    AccessKeyType keyResult=reply.getCreateAccessKeyResult().getAccessKey();
    keyResult.setAccessKeyId(key.getAccessKey());
    keyResult.setCreateDate(key.getCreateDate());
    keyResult.setSecretAccessKey(key.getSecretKey());
    keyResult.setStatus(key.isActive() ? "Active" : "Inactive");
    keyResult.setUserName(userFound.getName());
  }
 catch (  Exception e) {
    if (e instanceof AuthException) {
      if (AuthException.ACCESS_DENIED.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,"Not authorized to create access key for user " + request.getUserName() + " by "+ ctx.getUser().getName());
      }
 else       if (AuthException.QUOTA_EXCEEDED.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.CONFLICT,EuareException.LIMIT_EXCEEDED,"Access key limit exceeded");
      }
    }
    LOG.error(e,e);
    throw new EucalyptusCloudException(e);
  }
  return reply;
}
