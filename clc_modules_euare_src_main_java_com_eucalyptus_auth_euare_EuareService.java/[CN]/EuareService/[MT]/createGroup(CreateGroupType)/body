{
  CreateGroupResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  String action=PolicySpec.requestToAction(request);
  Context ctx=Contexts.lookup();
  User requestUser=ctx.getUser();
  Account account=getRealAccount(ctx,request.getDelegateAccount());
  if (!Permissions.isAuthorized(PolicySpec.VENDOR_IAM,PolicySpec.IAM_RESOURCE_GROUP,"",account,action,requestUser)) {
    throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,"Not authorized to create group by " + requestUser.getName());
  }
  if (!Permissions.canAllocate(PolicySpec.VENDOR_IAM,PolicySpec.IAM_RESOURCE_GROUP,"",action,requestUser,1L)) {
    throw new EuareException(HttpResponseStatus.CONFLICT,EuareException.LIMIT_EXCEEDED,"Group quota exceeded");
  }
  try {
    Group newGroup=account.addGroup(request.getGroupName(),sanitizePath(request.getPath()));
    GroupType g=reply.getCreateGroupResult().getGroup();
    fillGroupResult(g,newGroup,account);
  }
 catch (  Exception e) {
    LOG.debug(e,e);
    if (e instanceof AuthException) {
      if (AuthException.GROUP_ALREADY_EXISTS.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.CONFLICT,EuareException.ENTITY_ALREADY_EXISTS,"Group " + request.getGroupName() + " already exists.");
      }
      if (AuthException.INVALID_NAME.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.BAD_REQUEST,EuareException.INVALID_NAME,"Invalid group name " + request.getGroupName());
      }
      if (AuthException.INVALID_PATH.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.BAD_REQUEST,EuareException.INVALID_PATH,"Invalid group path " + request.getPath());
      }
    }
    throw new EucalyptusCloudException(e);
  }
  return reply;
}
