{
  CreateGroupResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  Context ctx=Contexts.lookup();
  AuthContext requestUser=getAuthContext(ctx);
  Account account=getRealAccount(ctx,request.getDelegateAccount());
  try {
    Group newGroup=Privileged.createGroup(requestUser,account,request.getGroupName(),sanitizePath(request.getPath()));
    GroupType g=reply.getCreateGroupResult().getGroup();
    fillGroupResult(g,newGroup,account);
  }
 catch (  Exception e) {
    if (e instanceof AuthException) {
      if (AuthException.ACCESS_DENIED.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,"Not authorized to create group by " + ctx.getUser().getName());
      }
 else       if (AuthException.QUOTA_EXCEEDED.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.CONFLICT,EuareException.LIMIT_EXCEEDED,"Group quota exceeded");
      }
 else       if (AuthException.GROUP_ALREADY_EXISTS.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.CONFLICT,EuareException.ENTITY_ALREADY_EXISTS,"Group " + request.getGroupName() + " already exists.");
      }
 else       if (AuthException.INVALID_NAME.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.BAD_REQUEST,EuareException.INVALID_NAME,"Invalid group name " + request.getGroupName());
      }
 else       if (AuthException.INVALID_PATH.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.BAD_REQUEST,EuareException.INVALID_PATH,"Invalid group path " + request.getPath());
      }
    }
    LOG.error(e,e);
    throw new EucalyptusCloudException(e);
  }
  return reply;
}
