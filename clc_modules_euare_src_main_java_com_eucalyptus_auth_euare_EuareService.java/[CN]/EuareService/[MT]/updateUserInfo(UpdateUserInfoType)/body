{
  UpdateUserInfoResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  String action=PolicySpec.requestToAction(request);
  Context ctx=Contexts.lookup();
  User requestUser=ctx.getUser();
  Account account=ctx.getAccount();
  User userFound=requestUser;
  if (request.getUserName() != null) {
    try {
      userFound=account.lookupUserByName(request.getUserName());
    }
 catch (    Exception e) {
      if (e instanceof AuthException && AuthException.NO_SUCH_USER.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.NOT_FOUND,EuareException.NO_SUCH_ENTITY,"Can not find user " + request.getUserName());
      }
 else {
        throw new EucalyptusCloudException(e);
      }
    }
  }
  if (request.getInfoKey() == null) {
    throw new EuareException(HttpResponseStatus.BAD_REQUEST,"Empty key name","Empty key name");
  }
  if (!Permissions.isAuthorized(PolicySpec.IAM_RESOURCE_USER,getUserFullName(userFound),account,action,requestUser)) {
    throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,"Not authorized to get user by " + requestUser.getName());
  }
  try {
    if (request.getInfoValue() != null) {
      userFound.setInfo(request.getInfoKey(),request.getInfoValue());
    }
 else {
      Map<String,String> infoMap=userFound.getInfo();
      infoMap.remove(request.getInfoKey());
      userFound.setInfo(infoMap);
    }
  }
 catch (  Exception e) {
    throw new EucalyptusCloudException(e);
  }
  return reply;
}
