{
  final ListOpenIdConnectProvidersResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  final Context ctx=Contexts.lookup();
  final AuthContext requestUser=getAuthContext(ctx);
  final EuareAccount account=getRealAccount(ctx,request);
  if (!Permissions.perhapsAuthorized(IamPolicySpec.VENDOR_IAM,IamPolicySpec.IAM_LISTOPENIDCONNECTPROVIDERS,ctx.getAuthContext())) {
    throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.ACCESS_DENIED,"Not authorized to list openid connect providers");
  }
  final ArrayList<ArnType> providers=reply.getListOpenIdConnectProvidersResult().getArns().getMember();
  try (final AutoCloseable euareTx=readonlyTx()){
    for (    final EuareOpenIdConnectProvider provider : account.listOpenIdConnectProviders()) {
      if (Privileged.allowListOpenIdConnectProviders(requestUser,account,provider.getUrl())) {
        providers.add(new ArnType(provider.getArn()));
      }
    }
  }
 catch (  Exception e) {
    LOG.error(e,e);
    throw new EucalyptusCloudException(e);
  }
  return reply;
}
