{
  final ListOpenIdConnectProvidersResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  final Context ctx=Contexts.lookup();
  final AuthContext requestUser=getAuthContext(ctx);
  final EuareAccount account=getRealAccount(ctx,request);
  if (!Permissions.perhapsAuthorized(PolicySpec.VENDOR_IAM,PolicySpec.IAM_LISTOPENIDCONNECTPROVIDERS,ctx.getAuthContext())) {
    throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,"Not authorized to list openid connect providers");
  }
  final ArrayList<String> providers=new ArrayList<String>();
  try (final AutoCloseable euareTx=readonlyTx()){
    for (    final String provider : account.listOpenIdConnectProviders()) {
      if (Privileged.allowListOpenIdConnectProviders(requestUser,account,openIdConnectProviderUrlToArn(account,provider))) {
        providers.add(provider);
      }
    }
  }
 catch (  Exception e) {
    LOG.error(e,e);
    throw new EucalyptusCloudException(e);
  }
  reply.getListOpenIdConnectProvidersResult().setArn(providers);
  return reply;
}
