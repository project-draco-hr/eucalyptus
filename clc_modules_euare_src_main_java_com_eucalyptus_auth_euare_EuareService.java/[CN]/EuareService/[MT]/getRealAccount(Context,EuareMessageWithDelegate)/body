{
  final EuareAccount requestAccount;
  final String delegateAccount=request.getDelegateAccount();
  if (delegateAccount != null) {
    if (ctx.isAdministrator()) {
      try {
        EuareAccount account=Accounts.lookupAccountByName(delegateAccount);
        if (RestrictedTypes.filterPrivileged().apply(account)) {
          return account;
        }
      }
 catch (      AuthException e) {
        throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,"Can not find delegation account " + delegateAccount);
      }
    }
    throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,"Delegation access not authorized for " + delegateAccount);
  }
 else {
    try {
      requestAccount=com.eucalyptus.auth.euare.Accounts.lookupAccountById(ctx.getAccountNumber());
    }
 catch (    AuthException e) {
      throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,"Request account error " + ctx.getAccountNumber());
    }
    if (ctx.isAdministrator() && !RestrictedTypes.filterPrivileged().apply(requestAccount)) {
      throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,"Access not authorized for " + requestAccount);
    }
  }
  return requestAccount;
}
