{
  CreateSigningCertificateResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  Context ctx=Contexts.lookup();
  AuthContext requestUser=getAuthContext(ctx);
  Account account=getRealAccount(ctx,request.getDelegateAccount());
  EuareUser userFound=lookupUser(ctx);
  if (!Strings.isNullOrEmpty(request.getUserName())) {
    userFound=lookupUserByName(account,request.getUserName());
  }
  try {
    KeyPair keyPair=Certs.generateKeyPair();
    Certificate cert=Privileged.createSigningCertificate(requestUser,account,userFound,keyPair);
    SigningCertificateType result=reply.getCreateSigningCertificateResult().getCertificate();
    result.setUserName(userFound.getName());
    result.setCertificateId(cert.getCertificateId());
    result.setCertificateBody(B64.url.decString(cert.getPem()));
    result.setPrivateKey(X509CertHelper.privateKeyToPem(keyPair.getPrivate()));
    result.setStatus("Active");
    result.setUploadDate(cert.getCreateDate());
  }
 catch (  Exception e) {
    if (e instanceof AuthException) {
      if (AuthException.ACCESS_DENIED.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,"Not authorized to create signing certificate of " + request.getUserName() + "by "+ ctx.getUser().getName());
      }
 else       if (AuthException.QUOTA_EXCEEDED.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.CONFLICT,EuareException.LIMIT_EXCEEDED,"Signing certificate limit exceeded");
      }
    }
    LOG.error(e,e);
    throw new EucalyptusCloudException(e);
  }
  return reply;
}
