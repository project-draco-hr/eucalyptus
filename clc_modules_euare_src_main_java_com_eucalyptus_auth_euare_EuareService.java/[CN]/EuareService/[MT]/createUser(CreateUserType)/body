{
  CreateUserResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  String action=PolicySpec.requestToAction(request);
  Context ctx=Contexts.lookup();
  User requestUser=ctx.getUser();
  Account account=ctx.getAccount();
  if (!Permissions.isAuthorized(PolicySpec.IAM_RESOURCE_USER,"",account,action,requestUser)) {
    throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,"Not authorized to create user by " + requestUser.getName());
  }
  if (!Permissions.canAllocate(PolicySpec.IAM_RESOURCE_USER,"",action,requestUser,1L)) {
    throw new EuareException(HttpResponseStatus.CONFLICT,EuareException.LIMIT_EXCEEDED,"User quota exceeded");
  }
  try {
    User newUser=account.addUser(request.getUserName(),sanitizePath(request.getPath()),true,true,null);
    UserType u=reply.getCreateUserResult().getUser();
    fillUserResult(u,newUser,account);
  }
 catch (  Exception e) {
    if (e instanceof AuthException && AuthException.USER_ALREADY_EXISTS.equals(e.getMessage())) {
      throw new EuareException(HttpResponseStatus.CONFLICT,EuareException.ENTITY_ALREADY_EXISTS,"User " + request.getUserName() + " already exists.");
    }
 else {
      throw new EucalyptusCloudException(e);
    }
  }
  return reply;
}
