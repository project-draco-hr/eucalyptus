{
  final SignCertificateResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final AuthContext requestUser=getAuthContext(ctx);
  final String pubkey=request.getKey();
  final String instanceId=request.getInstance();
  Integer expirationDays=request.getExpirationDays();
  if (pubkey == null || pubkey.length() <= 0)   throw new EuareException(HttpResponseStatus.BAD_REQUEST,EuareException.INVALID_VALUE,"No public key is provided");
  if (instanceId == null || instanceId.length() <= 0)   throw new EuareException(HttpResponseStatus.BAD_REQUEST,EuareException.INVALID_VALUE,"No instance ID is provided");
  if (expirationDays == null)   expirationDays=180;
  if (!requestUser.isSystemAdmin()) {
    throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,"SignCertificate can be called by only system admin");
  }
  X509Certificate vmCert=null;
  try {
    vmCert=EuareServerCertificateUtil.generateVMCertificate(pubkey,instanceId,expirationDays);
  }
 catch (  final EuareException ex) {
    throw ex;
  }
catch (  final Exception ex) {
    throw new EuareException(HttpResponseStatus.INTERNAL_SERVER_ERROR,EuareException.INTERNAL_FAILURE);
  }
  final String certPem=B64.standard.encString(PEMFiles.getBytes(vmCert));
  final SignCertificateResultType result=new SignCertificateResultType();
  result.setCertificate(certPem);
  reply.setSignCertificateResult(result);
  reply.set_return(true);
  return reply;
}
