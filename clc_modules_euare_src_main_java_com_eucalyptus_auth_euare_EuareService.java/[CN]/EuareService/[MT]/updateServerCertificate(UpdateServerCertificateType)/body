{
  final UpdateServerCertificateResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  final Context ctx=Contexts.lookup();
  final AuthContext requestUser=getAuthContext(ctx);
  final EuareAccount account=getRealAccount(ctx,request);
  final String certName=request.getServerCertificateName();
  if (certName == null || certName.length() <= 0)   throw new EuareException(HttpResponseStatus.BAD_REQUEST,EuareException.INVALID_NAME,"Certificate name is empty");
  try {
    final String newCertName=request.getNewServerCertificateName();
    final String newPath=request.getNewPath();
    if ((newCertName != null && newCertName.length() > 0) || (newPath != null && newPath.length() > 0))     Privileged.updateServerCertificate(requestUser,account,certName,newCertName,newPath);
  }
 catch (  final AuthException ex) {
    if (AuthException.ACCESS_DENIED.equals(ex.getMessage()))     throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,"Not authorized to update server certificates by " + ctx.getUser().getName());
 else     if (AuthException.SERVER_CERT_NO_SUCH_ENTITY.equals(ex.getMessage()))     throw new EuareException(HttpResponseStatus.NOT_FOUND,EuareException.NO_SUCH_ENTITY,"Server certificate " + certName + " does not exist");
 else     if (AuthException.SERVER_CERT_ALREADY_EXISTS.equals(ex.getMessage()))     throw new EuareException(HttpResponseStatus.CONFLICT,EuareException.ENTITY_ALREADY_EXISTS,"Server certificate " + request.getNewServerCertificateName() + " already exists.");
 else {
      LOG.error("failed to update server certificate",ex);
      throw new EuareException(HttpResponseStatus.INTERNAL_SERVER_ERROR,EuareException.INTERNAL_FAILURE);
    }
  }
catch (  final Exception ex) {
    LOG.error("failed to update server certificate",ex);
    throw new EuareException(HttpResponseStatus.INTERNAL_SERVER_ERROR,EuareException.INTERNAL_FAILURE);
  }
  reply.set_return(true);
  return reply;
}
