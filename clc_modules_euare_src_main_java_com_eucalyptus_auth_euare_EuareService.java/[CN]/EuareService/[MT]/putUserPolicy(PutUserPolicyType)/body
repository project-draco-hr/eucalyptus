{
  PutUserPolicyResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  Context ctx=Contexts.lookup();
  User requestUser=ctx.getUser();
  Account account=getRealAccount(ctx,request.getDelegateAccount());
  User userFound=null;
  try {
    userFound=account.lookupUserByName(request.getUserName());
  }
 catch (  Exception e) {
    LOG.error(e,e);
    if (e instanceof AuthException && AuthException.NO_SUCH_USER.equals(e.getMessage())) {
      throw new EuareException(HttpResponseStatus.NOT_FOUND,EuareException.NO_SUCH_ENTITY,"Can not find user " + request.getUserName());
    }
 else {
      throw new EucalyptusCloudException(e);
    }
  }
  try {
    Privileged.putUserPolicy(requestUser,account,userFound,request.getPolicyName(),request.getPolicyDocument());
  }
 catch (  PolicyParseException e) {
    LOG.error(e,e);
    throw new EuareException(HttpResponseStatus.BAD_REQUEST,EuareException.MALFORMED_POLICY_DOCUMENT,"Error in uploaded policy: " + request.getPolicyDocument(),e);
  }
catch (  Exception e) {
    LOG.error(e,e);
    if (e instanceof AuthException) {
      if (AuthException.ACCESS_DENIED.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,"Not authorized to put user policy for " + request.getUserName() + " by "+ requestUser.getName());
      }
 else       if (AuthException.INVALID_NAME.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.BAD_REQUEST,EuareException.INVALID_NAME,"Invalid policy name " + request.getPolicyName());
      }
    }
    throw new EucalyptusCloudException(e);
  }
  return reply;
}
