{
  final UploadServerCertificateResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  final Context ctx=Contexts.lookup();
  final AuthContext requestUser=getAuthContext(ctx);
  final EuareAccount account=getRealAccount(ctx,request);
  final String pemCertBody=request.getCertificateBody();
  final String pemCertChain=request.getCertificateChain();
  final String path=Objects.firstNonNull(request.getPath(),"/");
  final String certName=request.getServerCertificateName();
  final String pemPk=request.getPrivateKey();
  try {
    Privileged.createServerCertificate(requestUser,account,pemCertBody,pemCertChain,path,certName,pemPk);
  }
 catch (  final AuthException ex) {
    if (AuthException.ACCESS_DENIED.equals(ex.getMessage()))     throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,"Not authorized to upload server certificate by " + ctx.getUser().getName());
 else     if (AuthException.SERVER_CERT_ALREADY_EXISTS.equals(ex.getMessage()))     throw new EuareException(HttpResponseStatus.CONFLICT,EuareException.ENTITY_ALREADY_EXISTS,"Server certificate " + certName + " already exists.");
 else     if (AuthException.INVALID_SERVER_CERT_NAME.equals(ex.getMessage()))     throw new EuareException(HttpResponseStatus.BAD_REQUEST,EuareException.INVALID_NAME,"Server certificate name " + certName + " is invalid format.");
 else     if (AuthException.INVALID_SERVER_CERT_PATH.equals(ex.getMessage()))     throw new EuareException(HttpResponseStatus.BAD_REQUEST,EuareException.INVALID_PATH,"Path " + path + " is invalid.");
 else     if (AuthException.QUOTA_EXCEEDED.equals(ex.getMessage()))     throw new EuareException(HttpResponseStatus.CONFLICT,EuareException.LIMIT_EXCEEDED,"Server certificate quota exceeded");
 else     if (AuthException.SERVER_CERT_INVALID_FORMAT.equals(ex.getMessage()))     throw new EuareException(HttpResponseStatus.BAD_REQUEST,EuareException.MALFORMED_CERTIFICATE,"Server certificate is malformed");
 else {
      LOG.error("Failed to create server certificate",ex);
      throw new EuareException(HttpResponseStatus.INTERNAL_SERVER_ERROR,EuareException.INTERNAL_FAILURE);
    }
  }
catch (  final Exception ex) {
    LOG.error("Failed to create server certificate",ex);
    throw new EuareException(HttpResponseStatus.INTERNAL_SERVER_ERROR,EuareException.INTERNAL_FAILURE);
  }
  try {
    final UploadServerCertificateResultType result=new UploadServerCertificateResultType();
    final ServerCertificateMetadataType metadata=getServerCertificateMetadata(account.lookupServerCertificate(certName));
    result.setServerCertificateMetadata(metadata);
    reply.setUploadServerCertificateResult(result);
  }
 catch (  final Exception ex) {
    LOG.error("Failed to set certificate metadata",ex);
  }
  reply.set_return(true);
  return reply;
}
