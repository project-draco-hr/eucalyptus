{
  DeleteAccountResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  Context ctx=Contexts.lookup();
  AuthContext requestUser=getAuthContext(ctx);
  Account accountFound=lookupAccountByName(request.getAccountName());
  try {
    boolean recursive=(request.getRecursive() != null && request.getRecursive());
    Privileged.deleteAccount(requestUser,accountFound,recursive);
  }
 catch (  Exception e) {
    if (e instanceof AuthException) {
      if (AuthException.ACCESS_DENIED.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,"Not authorized to delete account by " + ctx.getUser().getName());
      }
 else       if (AuthException.ACCOUNT_DELETE_CONFLICT.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.CONFLICT,EuareException.DELETE_CONFLICT,"Account " + request.getAccountName() + " can not be deleted.");
      }
 else       if (AuthException.DELETE_SYSTEM_ACCOUNT.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.CONFLICT,EuareException.DELETE_CONFLICT,"System account can not be deleted.");
      }
 else       if (AuthException.EMPTY_ACCOUNT_NAME.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.BAD_REQUEST,EuareException.INVALID_NAME,"Empty account name");
      }
    }
    LOG.error(e,e);
    throw new EucalyptusCloudException(e);
  }
  return reply;
}
