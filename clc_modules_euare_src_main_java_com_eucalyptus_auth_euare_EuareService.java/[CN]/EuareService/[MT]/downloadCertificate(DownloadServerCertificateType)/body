{
  final DownloadServerCertificateResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final AuthContext requestUser=getAuthContext(ctx);
  if (!requestUser.isSystemUser()) {
    throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,"The user not authorized to perform action");
  }
  final String sigB64=request.getSignature();
  final Date ts=request.getTimestamp();
  final String certPem=request.getDelegationCertificate();
  final String authSigB64=request.getAuthSignature();
  final String certArn=request.getCertificateArn();
  if (sigB64 == null || ts == null)   throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,"Signature and timestamp are required");
  final Date now=new Date();
  long tsDiff=now.getTime() - ts.getTime();
  final long TIMEOUT_MS=10 * 60 * 1000;
  if (tsDiff < 0 || Math.abs(tsDiff) > TIMEOUT_MS)   throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,"Invalid timestamp");
  final TimeZone tz=TimeZone.getTimeZone("UTC");
  final DateFormat df=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
  df.setTimeZone(tz);
  String tsAsIso=df.format(ts);
  final String payload=String.format("%s&%s",certArn,tsAsIso);
  try {
    if (!EuareServerCertificateUtil.verifySignature(certPem,payload,sigB64))     throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,"Invalid signature");
  }
 catch (  final EuareException ex) {
    throw ex;
  }
catch (  final Exception ex) {
    LOG.error("failed to verify signature",ex);
    throw new EuareException(HttpResponseStatus.INTERNAL_SERVER_ERROR,EuareException.INTERNAL_FAILURE);
  }
  final String certStr=B64.standard.decString(certPem);
  try {
    if (!EuareServerCertificateUtil.verifySignatureWithEuare(certStr,authSigB64))     throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,"Invalid signature");
  }
 catch (  final EuareException ex) {
    throw ex;
  }
catch (  final Exception ex) {
    LOG.error("failed to verify auth signature",ex);
    throw new EuareException(HttpResponseStatus.INTERNAL_SERVER_ERROR,EuareException.INTERNAL_FAILURE);
  }
  try {
    final ServerCertificateEntity cert=RestrictedTypes.doPrivileged(certArn,ServerCertificates.Lookup.INSTANCE);
  }
 catch (  final AuthException ex) {
    throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,"The user not authorized to download certificate");
  }
catch (  final NoSuchElementException ex) {
    throw new EuareException(HttpResponseStatus.BAD_REQUEST,EuareException.NO_SUCH_ENTITY,"Server certificate is not found");
  }
catch (  final Exception ex) {
    throw new EuareException(HttpResponseStatus.INTERNAL_SERVER_ERROR,EuareException.INTERNAL_FAILURE);
  }
  final DownloadServerCertificateResultType result=new DownloadServerCertificateResultType();
  try {
    result.setCertificateArn(certArn);
    final String serverCertPem=B64.standard.encString(EuareServerCertificateUtil.getServerCertificate(certArn));
    result.setServerCertificate(serverCertPem);
    final String pk=EuareServerCertificateUtil.getEncryptedKey(certArn,certPem);
    result.setServerPk(pk);
    final String msg=String.format("%s&%s",serverCertPem,pk);
    final String sig=EuareServerCertificateUtil.generateSignatureWithEuare(msg);
    result.setSignature(sig);
    reply.setDownloadServerCertificateResult(result);
  }
 catch (  final AuthException ex) {
    LOG.error("failed to prepare server certificate",ex);
    throw new EuareException(HttpResponseStatus.INTERNAL_SERVER_ERROR,EuareException.INTERNAL_FAILURE);
  }
catch (  final Exception ex) {
    LOG.error("failed to prepare server certificate",ex);
    throw new EuareException(HttpResponseStatus.INTERNAL_SERVER_ERROR,EuareException.INTERNAL_FAILURE);
  }
  return reply;
}
