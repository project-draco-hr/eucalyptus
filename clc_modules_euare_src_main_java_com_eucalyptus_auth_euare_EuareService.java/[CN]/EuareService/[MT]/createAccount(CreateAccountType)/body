{
  CreateAccountResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  Context ctx=Contexts.lookup();
  User requestUser=ctx.getUser();
  try {
    ACCOUNT_NAME_CHECKER.check(request.getAccountName());
  }
 catch (  InvalidValueException e) {
    throw new EuareException(HttpResponseStatus.BAD_REQUEST,EuareException.INVALID_NAME,"Account name: " + request.getAccountName() + " is invalid.");
  }
  if (!ctx.hasAdministrativePrivileges()) {
    throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,"Not authorized to create account by " + requestUser.getName());
  }
  try {
    Account newAccount=Accounts.addAccount(request.getAccountName());
    User admin=newAccount.addUser(User.ACCOUNT_ADMIN,"/",true,true,null);
    admin.resetToken();
    admin.createConfirmationCode();
    AccountType account=reply.getCreateAccountResult().getAccount();
    account.setAccountName(newAccount.getName());
    account.setAccountId(newAccount.getAccountNumber());
  }
 catch (  Exception e) {
    LOG.debug(e,e);
    if (e instanceof AuthException && AuthException.ACCOUNT_ALREADY_EXISTS.equals(e.getMessage())) {
      throw new EuareException(HttpResponseStatus.CONFLICT,EuareException.ENTITY_ALREADY_EXISTS,"Account " + request.getAccountName() + " already exists.");
    }
 else {
      throw new EucalyptusCloudException(e);
    }
  }
  return reply;
}
