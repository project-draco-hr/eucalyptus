{
  final ListRolePoliciesResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  final Context ctx=Contexts.lookup();
  final User requestUser=ctx.getUser();
  final Account account=getRealAccount(ctx,request.getDelegateAccount());
  final Role roleFound=lookupRoleByName(account,request.getRoleName());
  final ListRolePoliciesResult result=reply.getListRolePoliciesResult();
  result.setIsTruncated(false);
  final ArrayList<String> policies=result.getPolicyNames().getMemberList();
  try {
    for (    Policy p : Privileged.listRolePolicies(requestUser,account,roleFound)) {
      policies.add(p.getName());
    }
  }
 catch (  Exception e) {
    LOG.error(e,e);
    if (e instanceof AuthException) {
      if (AuthException.ACCESS_DENIED.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,"Not authorized to list role polices for " + request.getRoleName() + " by "+ requestUser.getName());
      }
    }
    throw new EucalyptusCloudException(e);
  }
  return reply;
}
