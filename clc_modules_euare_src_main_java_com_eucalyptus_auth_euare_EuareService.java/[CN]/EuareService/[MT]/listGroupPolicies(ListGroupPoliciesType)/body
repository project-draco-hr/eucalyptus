{
  ListGroupPoliciesResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  Context ctx=Contexts.lookup();
  AuthContext requestUser=getAuthContext(ctx);
  Account account=getRealAccount(ctx,request.getDelegateAccount());
  Group groupFound=lookupGroupByName(account,request.getGroupName());
  ListGroupPoliciesResultType result=reply.getListGroupPoliciesResult();
  result.setIsTruncated(false);
  ArrayList<String> policies=result.getPolicyNames().getMemberList();
  try {
    for (    Policy p : Privileged.listGroupPolicies(requestUser,account,groupFound)) {
      policies.add(p.getName());
    }
  }
 catch (  Exception e) {
    if (e instanceof AuthException) {
      if (AuthException.ACCESS_DENIED.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,"Not authorized to list group polices for " + request.getGroupName() + " by "+ ctx.getUser().getName());
      }
    }
    LOG.error(e,e);
    throw new EucalyptusCloudException(e);
  }
  return reply;
}
