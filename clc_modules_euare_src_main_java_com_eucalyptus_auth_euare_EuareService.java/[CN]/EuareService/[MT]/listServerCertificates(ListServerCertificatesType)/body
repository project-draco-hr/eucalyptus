{
  final ListServerCertificatesResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final User requestUser=ctx.getUser();
  final Account account=getRealAccount(ctx,request.getDelegateAccount());
  String pathPrefix=request.getPathPrefix();
  if (pathPrefix == null || pathPrefix.isEmpty())   pathPrefix="/";
  try {
    final List<ServerCertificate> certs=Privileged.listServerCertificate(requestUser,account,pathPrefix);
    final ListServerCertificatesResultType result=new ListServerCertificatesResultType();
    final ServerCertificateMetadataListTypeType lists=new ServerCertificateMetadataListTypeType();
    lists.setMemberList(new ArrayList<ServerCertificateMetadataType>(Collections2.transform(certs,new Function<ServerCertificate,ServerCertificateMetadataType>(){
      @Override public ServerCertificateMetadataType apply(      ServerCertificate cert){
        return getServerCertificateMetadata(cert);
      }
    }
)));
    result.setServerCertificateMetadataList(lists);
    reply.setListServerCertificatesResult(result);
  }
 catch (  final AuthException ex) {
    if (AuthException.ACCESS_DENIED.equals(ex.getMessage()))     throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,"Not authorized to list server certificates by " + requestUser.getName());
 else {
      LOG.error("failed to list server certificates",ex);
      throw new EuareException(HttpResponseStatus.INTERNAL_SERVER_ERROR,EuareException.INTERNAL_FAILURE);
    }
  }
catch (  final Exception ex) {
    LOG.error("failed to list server certificates",ex);
    throw new EuareException(HttpResponseStatus.INTERNAL_SERVER_ERROR,EuareException.INTERNAL_FAILURE);
  }
  reply.set_return(true);
  return reply;
}
