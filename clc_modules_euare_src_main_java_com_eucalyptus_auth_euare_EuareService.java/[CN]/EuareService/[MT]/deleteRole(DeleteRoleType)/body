{
  final DeleteRoleResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  final Context ctx=Contexts.lookup();
  final User requestUser=ctx.getUser();
  final Account account=getRealAccount(ctx,request.getDelegateAccount());
  final Role roleFound=lookupRoleByName(account,request.getRoleName());
  try {
    Privileged.deleteRole(requestUser,account,roleFound);
  }
 catch (  Exception e) {
    LOG.error(e,e);
    if (e instanceof AuthException) {
      if (AuthException.ACCESS_DENIED.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,"Not authorized to delete role by " + requestUser.getName());
      }
 else       if (AuthException.ROLE_DELETE_CONFLICT.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.CONFLICT,EuareException.DELETE_CONFLICT,"Attempted to delete role with resources attached by " + requestUser.getName());
      }
    }
    throw new EucalyptusCloudException(e);
  }
  return reply;
}
