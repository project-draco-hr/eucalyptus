{
  final CreateOpenIdConnectProviderResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  final Context ctx=Contexts.lookup();
  final AuthContext requestUser=getAuthContext(ctx);
  final EuareAccount account=getRealAccount(ctx,request);
  try {
    final EuareOpenIdConnectProvider newOpenIDConnectProvider=Privileged.createOpenIdConnectProvider(requestUser,account,request.getUrl(),request.getClientIDList(),request.getThumbprintList());
    reply.getCreateOpenIdConnectProviderResult().setOpenIDConnectProviderArn(Accounts.getOpenIdConnectProviderArn(newOpenIDConnectProvider));
  }
 catch (  Exception e) {
    if (e instanceof AuthException) {
      if (AuthException.ACCESS_DENIED.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,"Not authorized to create openid connect provider by " + ctx.getUser().getName());
      }
 else       if (AuthException.QUOTA_EXCEEDED.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.CONFLICT,EuareException.LIMIT_EXCEEDED,"Openid connect provider quota exceeded");
      }
 else       if (AuthException.OPENID_PROVIDER_ALREADY_EXISTS.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.CONFLICT,EuareException.ENTITY_ALREADY_EXISTS,"OpenIDConnectProvider " + request.getUrl() + " already exists.");
      }
 else       if (AuthException.INVALID_OPENID_PROVIDER_URL.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.BAD_REQUEST,EuareException.VALIDATION_ERROR,"Invalid provider url " + request.getUrl());
      }
    }
    LOG.error(e,e);
    throw new EucalyptusCloudException(e);
  }
  return reply;
}
