{
  UpdateUserResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  Context ctx=Contexts.lookup();
  User requestUser=ctx.getUser();
  Account account=getRealAccount(ctx,request.getDelegateAccount());
  User userFound=lookupUserByName(account,request.getUserName());
  try {
    String newPath=request.getNewPath() != null ? sanitizePath(request.getNewPath()) : null;
    Boolean enabled=request.getEnabled() != null ? "true".equalsIgnoreCase(request.getEnabled()) : null;
    Long passwordExpiration=request.getPasswordExpiration() != null ? Iso8601DateParser.parse(request.getPasswordExpiration()).getTime() : null;
    Privileged.modifyUser(requestUser,account,userFound,request.getNewUserName(),newPath,enabled,passwordExpiration,null);
    if (request.getRegStatus() != null) {
      userFound.setRegistrationStatus(parseRegStatIgnoreCase(request.getRegStatus()));
    }
  }
 catch (  IllegalArgumentException e) {
    LOG.error(e,e);
    throw new EuareException(HttpResponseStatus.BAD_REQUEST,EuareException.INVALID_VALUE,"Invalid registration status " + request.getRegStatus());
  }
catch (  ParseException e) {
    LOG.error(e,e);
    throw new EuareException(HttpResponseStatus.BAD_REQUEST,EuareException.INVALID_VALUE,"Invalid password expiration " + request.getPasswordExpiration());
  }
catch (  Exception e) {
    LOG.error(e,e);
    if (e instanceof AuthException) {
      if (AuthException.ACCESS_DENIED.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,"Not authorized to update user by " + requestUser.getName());
      }
 else       if (AuthException.USER_ALREADY_EXISTS.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.CONFLICT,EuareException.ENTITY_ALREADY_EXISTS,"User name " + request.getNewUserName() + " already exists.");
      }
 else       if (AuthException.INVALID_NAME.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.BAD_REQUEST,EuareException.INVALID_NAME,"Invalid new name " + request.getNewUserName());
      }
 else       if (AuthException.INVALID_PATH.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.BAD_REQUEST,EuareException.INVALID_PATH,"Invalid new path " + request.getNewPath());
      }
    }
    throw new EucalyptusCloudException(e);
  }
  return reply;
}
