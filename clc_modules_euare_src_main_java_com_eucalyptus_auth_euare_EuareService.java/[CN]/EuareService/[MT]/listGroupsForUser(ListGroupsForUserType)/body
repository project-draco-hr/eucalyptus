{
  ListGroupsForUserResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  Context ctx=Contexts.lookup();
  AuthContext requestUser=getAuthContext(ctx);
  EuareAccount account=getRealAccount(ctx,request);
  EuareUser userFound=lookupUserByName(account,request.getUserName());
  reply.getListGroupsForUserResult().setIsTruncated(false);
  ArrayList<GroupType> groups=reply.getListGroupsForUserResult().getGroups().getMemberList();
  try {
    for (    EuareGroup group : Privileged.listGroupsForUser(requestUser,account,userFound)) {
      GroupType g=new GroupType();
      fillGroupResult(g,group,account);
      groups.add(g);
    }
  }
 catch (  Exception e) {
    if (e instanceof AuthException) {
      if (AuthException.ACCESS_DENIED.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,"Not authorized to get user groups for " + request.getUserName() + " by "+ ctx.getUser().getName());
      }
    }
    LOG.error(e,e);
    throw new EucalyptusCloudException(e);
  }
  return reply;
}
