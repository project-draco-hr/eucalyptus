{
  ListAccessKeysResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  Context ctx=Contexts.lookup();
  User requestUser=ctx.getUser();
  Account account=getRealAccount(ctx,request.getDelegateAccount());
  User userFound=requestUser;
  if (request.getUserName() != null) {
    try {
      userFound=account.lookupUserByName(request.getUserName());
    }
 catch (    Exception e) {
      LOG.error(e,e);
      if (e instanceof AuthException && AuthException.NO_SUCH_USER.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.NOT_FOUND,EuareException.NO_SUCH_ENTITY,"Can not find user " + request.getUserName());
      }
 else {
        throw new EucalyptusCloudException(e);
      }
    }
  }
  ListAccessKeysResultType result=reply.getListAccessKeysResult();
  try {
    result.setIsTruncated(false);
    ArrayList<AccessKeyMetadataType> keys=result.getAccessKeyMetadata().getMemberList();
    for (    AccessKey k : Privileged.listAccessKeys(requestUser,account,userFound)) {
      AccessKeyMetadataType key=new AccessKeyMetadataType();
      key.setUserName(userFound.getName());
      key.setAccessKeyId(k.getAccessKey());
      key.setStatus(k.isActive() ? "Active" : "Inactive");
      keys.add(key);
    }
  }
 catch (  Exception e) {
    LOG.error(e,e);
    if (e instanceof AuthException) {
      if (AuthException.ACCESS_DENIED.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,"Not authorized to list access keys for " + request.getUserName() + " by "+ requestUser.getName());
      }
    }
    throw new EucalyptusCloudException(e);
  }
  return reply;
}
