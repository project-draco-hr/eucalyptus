{
  ListAccessKeysResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  String action=PolicySpec.requestToAction(request);
  User requestUser=Permissions.getUserById(request.getUserId());
  Account account=Permissions.getUserAccount(requestUser);
  User userFound=null;
  try {
    userFound=account.lookupUserByName(request.getUserName());
  }
 catch (  AuthException e) {
    if (AuthException.NO_SUCH_USER.equals(request.getUserName())) {
      throw new EuareException(404,EuareException.NO_SUCH_ENTITY,"Can not find user " + request.getUserName());
    }
 else {
      throw new EucalyptusCloudException(e);
    }
  }
  if (!Permissions.isAuthorized(PolicySpec.IAM_RESOURCE_USER,getUserFullName(userFound),account,action,requestUser)) {
    throw new EuareException(403,EuareException.NOT_AUTHORIZED,"Not authorized to list access keys for " + request.getUserName() + " by "+ requestUser.getName());
  }
  ListAccessKeysResultType result=reply.getListAccessKeysResult();
  try {
    result.setIsTruncated(false);
    ArrayList<AccessKeyMetadataType> keys=result.getAccessKeyMetadata().getMemberList();
    for (    AccessKey k : userFound.getKeys()) {
      AccessKeyMetadataType key=new AccessKeyMetadataType();
      key.setUserName(userFound.getName());
      key.setAccessKeyId(k.getId());
      key.setStatus(k.isActive() ? "Active" : "Inactive");
      keys.add(key);
    }
  }
 catch (  AuthException e) {
    throw new EucalyptusCloudException(e);
  }
  return reply;
}
