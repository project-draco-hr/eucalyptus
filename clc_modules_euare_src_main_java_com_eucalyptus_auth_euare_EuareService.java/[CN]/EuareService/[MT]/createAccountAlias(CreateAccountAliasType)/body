{
  CreateAccountAliasResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  Context ctx=Contexts.lookup();
  AuthContext requestUser=getAuthContext(ctx);
  EuareAccount account=getRealAccount(ctx,request);
  try {
    Privileged.modifyAccount(requestUser,account,request.getAccountAlias());
    return reply;
  }
 catch (  Exception e) {
    if (e instanceof AuthException) {
      if (AuthException.ACCESS_DENIED.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,"Not authorized to create account alias by " + ctx.getUser().getName());
      }
 else       if (AuthException.CONFLICT.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.CONFLICT,EuareException.ENTITY_ALREADY_EXISTS,"Can not change to a name already in use: " + request.getAccountAlias());
      }
 else       if (AuthException.ACCOUNT_ALREADY_EXISTS.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.CONFLICT,EuareException.ENTITY_ALREADY_EXISTS,"Account alias " + request.getAccountAlias() + " already exists.");
      }
 else       if (AuthException.INVALID_NAME.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.BAD_REQUEST,EuareException.INVALID_NAME,"Invalid account alias " + request.getAccountAlias());
      }
    }
    LOG.error(e,e);
    throw new EucalyptusCloudException(e);
  }
}
