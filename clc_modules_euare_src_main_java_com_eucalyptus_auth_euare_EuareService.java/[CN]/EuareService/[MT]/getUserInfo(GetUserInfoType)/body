{
  GetUserInfoResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  Context ctx=Contexts.lookup();
  AuthContext requestUser=getAuthContext(ctx);
  Account account=getRealAccount(ctx,request.getDelegateAccount());
  User userFound=ctx.getUser();
  if (!Strings.isNullOrEmpty(request.getUserName())) {
    userFound=lookupUserByName(account,request.getUserName());
  }
  try {
    if (!Privileged.allowReadUser(requestUser,account,userFound)) {
      throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,"Not authorized to get user info by " + ctx.getUser().getName());
    }
    ArrayList<UserInfoType> infos=reply.getGetUserInfoResult().getInfos().getMemberList();
    if (!Strings.isNullOrEmpty(request.getInfoKey())) {
      String value=userFound.getInfo(request.getInfoKey());
      if (value != null) {
        UserInfoType ui=new UserInfoType();
        ui.setKey(request.getInfoKey().toLowerCase());
        ui.setValue(value);
        infos.add(ui);
      }
    }
 else {
      for (      Map.Entry<String,String> entry : userFound.getInfo().entrySet()) {
        UserInfoType ui=new UserInfoType();
        ui.setKey(entry.getKey());
        ui.setValue(entry.getValue());
        infos.add(ui);
      }
    }
  }
 catch (  EuareException e) {
    LOG.error(e,e);
    throw e;
  }
catch (  Exception e) {
    LOG.error(e,e);
    throw new EucalyptusCloudException(e);
  }
  return reply;
}
