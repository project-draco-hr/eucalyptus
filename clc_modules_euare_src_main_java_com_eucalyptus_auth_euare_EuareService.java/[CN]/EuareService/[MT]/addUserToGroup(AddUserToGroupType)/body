{
  AddUserToGroupResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  Context ctx=Contexts.lookup();
  User requestUser=ctx.getUser();
  Account account=getRealAccount(ctx,request.getDelegateAccount());
  User userFound=null;
  try {
    userFound=account.lookupUserByName(request.getUserName());
  }
 catch (  Exception e) {
    LOG.error(e,e);
    if (e instanceof AuthException && AuthException.NO_SUCH_USER.equals(e.getMessage())) {
      throw new EuareException(HttpResponseStatus.NOT_FOUND,EuareException.NO_SUCH_ENTITY,"Can not find user " + request.getUserName());
    }
 else {
      throw new EucalyptusCloudException(e);
    }
  }
  Group groupFound=null;
  try {
    groupFound=account.lookupGroupByName(request.getGroupName());
  }
 catch (  Exception e) {
    LOG.error(e,e);
    if (e instanceof AuthException && AuthException.NO_SUCH_GROUP.equals(e.getMessage())) {
      throw new EuareException(HttpResponseStatus.NOT_FOUND,EuareException.NO_SUCH_ENTITY,"Can not find group " + request.getGroupName());
    }
 else {
      throw new EucalyptusCloudException(e);
    }
  }
  try {
    Privileged.addUserToGroup(requestUser,account,userFound,groupFound);
  }
 catch (  Exception e) {
    LOG.error(e,e);
    if (e instanceof AuthException) {
      if (AuthException.ACCESS_DENIED.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.FORBIDDEN,EuareException.NOT_AUTHORIZED,"Not authorized to add user to group by " + requestUser.getName());
      }
 else       if (AuthException.CONFLICT.equals(e.getMessage())) {
        throw new EuareException(HttpResponseStatus.CONFLICT,EuareException.ENTITY_ALREADY_EXISTS,"User " + request.getUserName() + " is already in the group "+ request.getGroupName());
      }
    }
    throw new EucalyptusCloudException(e);
  }
  return reply;
}
