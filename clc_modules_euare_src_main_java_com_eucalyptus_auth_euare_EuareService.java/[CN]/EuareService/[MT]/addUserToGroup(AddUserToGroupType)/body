{
  AddUserToGroupResponseType reply=request.getReply();
  reply.getResponseMetadata().setRequestId(reply.getCorrelationId());
  String action=PolicySpec.requestToAction(request);
  User requestUser=Permissions.getUserById(request.getUserId());
  Account account=Permissions.getUserAccount(requestUser);
  User userFound=null;
  try {
    userFound=account.lookupUserByName(request.getUserName());
  }
 catch (  Exception e) {
    if (e instanceof AuthException && AuthException.NO_SUCH_USER.equals(e.getMessage())) {
      throw new EuareException(404,EuareException.NO_SUCH_ENTITY,"Can not find user " + request.getUserName());
    }
 else {
      throw new EucalyptusCloudException(e);
    }
  }
  Group groupFound=null;
  try {
    groupFound=account.lookupGroupByName(request.getGroupName());
  }
 catch (  Exception e) {
    if (e instanceof AuthException && AuthException.NO_SUCH_GROUP.equals(e.getMessage())) {
      throw new EuareException(404,EuareException.NO_SUCH_ENTITY,"Can not find group " + request.getGroupName());
    }
 else {
      throw new EucalyptusCloudException(e);
    }
  }
  if (!Permissions.isAuthorized(PolicySpec.IAM_RESOURCE_GROUP,getGroupFullName(groupFound),account,action,requestUser)) {
    throw new EuareException(403,EuareException.NOT_AUTHORIZED,"Not authorized to access user by " + requestUser.getName());
  }
  if (!Permissions.isAuthorized(PolicySpec.IAM_RESOURCE_USER,getUserFullName(userFound),account,action,requestUser)) {
    throw new EuareException(403,EuareException.NOT_AUTHORIZED,"Not authorized to access group by " + requestUser.getName());
  }
  try {
    groupFound.addUserByName(userFound.getName());
  }
 catch (  Exception e) {
    throw new EucalyptusCloudException(e);
  }
  return reply;
}
