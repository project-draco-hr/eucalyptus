{
  SetResponse sr=null;
  byte rcode=Rcode.NOERROR;
  if (iterations > 6)   return Rcode.NOERROR;
  if (type == Type.SIG || type == Type.RRSIG) {
    type=Type.ANY;
    flags|=FLAG_SIGONLY;
  }
  try {
    sr=DnsResolvers.findRecords(response,new DnsRequest(){
      @Override public Record getQuery(){
        return response.getQuestion();
      }
      @Override public InetAddress getLocalAddress(){
        return ConnectionHandler.getLocalInetAddress();
      }
      @Override public InetAddress getRemoteAddress(){
        return ConnectionHandler.getRemoteInetAddress();
      }
    }
);
    if (sr == null) {
      return Rcode.SERVFAIL;
    }
 else {
      if (sr.isDelegation()) {
        RRset nsRecords=sr.getNS();
        addRRset(nsRecords.getName(),response,nsRecords,Section.AUTHORITY,flags);
      }
 else       if (sr.isCNAME()) {
        CNAMERecord cname=sr.getCNAME();
        RRset rrset=new RRset(cname);
        addRRset(name,response,rrset,Section.ANSWER,flags);
      }
 else       if (sr.isDNAME()) {
        DNAMERecord dname=sr.getDNAME();
        RRset rrset=new RRset(dname);
        addRRset(name,response,rrset,Section.ANSWER,flags);
        Name newname;
        try {
          newname=name.fromDNAME(dname);
        }
 catch (        NameTooLongException e) {
          return Rcode.YXDOMAIN;
        }
        if (newname != null) {
          rrset=new RRset(new CNAMERecord(name,dclass,0,newname));
          addRRset(name,response,rrset,Section.ANSWER,flags);
        }
      }
      if (sr.isSuccessful()) {
        if (type == Type.AAAA)         response.getHeader().setFlag(Flags.AA);
        return Rcode.NOERROR;
      }
 else       if (sr.isNXDOMAIN()) {
        response.getHeader().setRcode(Rcode.NXDOMAIN);
        return Rcode.NXDOMAIN;
      }
 else       if (response.getHeader().getRcode() == Rcode.REFUSED) {
        return Rcode.REFUSED;
      }
 else       return Rcode.SERVFAIL;
    }
  }
 catch (  Exception ex) {
    Logger.getLogger(DnsResolvers.class).error(ex);
    return Rcode.SERVFAIL;
  }
}
