{
  if (Bootstrap.isShuttingDown()) {
    return;
  }
 else {
    Logs.extreme().info("Hosts.entrySet(): " + hostKey + " => "+ host);
    try {
      if (host.isLocalHost() && host.hasDatabase() && Bootstrap.isLoaded()) {
        final boolean wasSynched=Databases.isSynchronized();
        final boolean wasVolatile=Databases.isVolatile();
        dbActivation.submit(new Runnable(){
          @Override public void run(){
            if (!wasSynched && !Databases.SyncState.SYNCING.isCurrent() && !Databases.isSynchronized()) {
              if (Databases.enable(host) && Databases.isSynchronized()) {
                UpdateEntry.INSTANCE.apply(Hosts.lookup(hostKey));
              }
            }
 else             if (wasVolatile && Bootstrap.isLoaded() && !Databases.ActiveHostSet.ACTIVATED.get().contains(hostKey)) {
              if (Databases.enable(host) && !Databases.isVolatile()) {
                UpdateEntry.INSTANCE.apply(Hosts.lookup(hostKey));
              }
            }
 else             if (wasVolatile && Bootstrap.isLoaded() && !Databases.isVolatile()) {
              UpdateEntry.INSTANCE.apply(Hosts.lookup(hostKey));
            }
 else             if (Bootstrap.isFinished() && !Databases.isVolatile()) {
              BootstrapComponent.SETUP.apply(Hosts.lookup(hostKey));
            }
          }
        }
);
      }
 else       if (Bootstrap.isFinished() && !host.isLocalHost() && host.hasSynced()) {
        BootstrapComponent.REMOTESETUP.apply(host);
      }
 else       if (InitializeAsCloudController.INSTANCE.apply(host)) {
        LOG.info("Hosts.entrySet(): INITIALIZED CLC => " + host);
      }
 else {
        Logs.extreme().debug("Hosts.entrySet(): UPDATED HOST => " + host);
      }
    }
 catch (    Exception ex) {
      LOG.error(ex,ex);
    }
    Logs.extreme().info("Hosts.entrySet(): " + hostKey + " finished.");
  }
}
