{
  final Host currentHost=Hosts.localHost();
  if (!BootstrapArgs.isCloudController() && currentHost.hasBootstrapped() && Databases.shouldInitialize()) {
    System.exit(123);
  }
  try {
    if (!Topology.isEnabled(Eucalyptus.class) && Hosts.getCoordinator() != null) {
      LOG.info("Setting up new coordinator: " + Hosts.getCoordinator());
      BootstrapComponent.setup(Eucalyptus.class,Hosts.getCoordinator().getBindAddress());
    }
  }
 catch (  Exception ex) {
    LOG.debug(ex);
    Logs.extreme().debug(ex,ex);
  }
  try {
    if (event.isAsserted(3L) && Bootstrap.isFinished() && !Hosts.list(Predicates.not(BootedFilter.INSTANCE)).isEmpty()) {
      LOG.info("Updating current host entry: " + currentHost);
      UpdateEntry.INSTANCE.apply(currentHost);
    }
 else     if (event.isAsserted(15L)) {
      LOG.info("Updating current host entry: " + currentHost);
      UpdateEntry.INSTANCE.apply(currentHost);
    }
  }
 catch (  Exception ex) {
    LOG.debug(ex);
    Logs.extreme().debug(ex,ex);
  }
  try {
    Set<Address> currentMembers=Sets.newHashSet(hostMap.getChannel().getView().getMembers());
    Map<String,Host> hostCopy=Maps.newHashMap(hostMap);
    Set<Address> currentHosts=Sets.newHashSet(Collections2.transform(hostCopy.values(),GroupAddressTransform.INSTANCE));
    Set<Address> strayHosts=Sets.difference(currentHosts,currentMembers);
    if (!strayHosts.isEmpty()) {
      LOG.info("Pruning orphan host entries: " + strayHosts);
    }
    for (    Address strayHost : strayHosts) {
      Host h=hostCopy.get(strayHost);
      LOG.info("Pruning orphan host: " + h);
      hostMap.remove(strayHost);
      BootstrapComponent.TEARDOWN.apply(h);
    }
  }
 catch (  Exception ex) {
    LOG.debug(ex);
    Logs.extreme().debug(ex,ex);
  }
}
