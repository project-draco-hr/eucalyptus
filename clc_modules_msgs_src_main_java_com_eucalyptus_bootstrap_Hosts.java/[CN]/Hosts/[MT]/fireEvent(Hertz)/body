{
  final Host currentHost=Hosts.localHost();
  if (!BootstrapArgs.isCloudController() && currentHost.hasBootstrapped() && Databases.shouldInitialize()) {
    System.exit(123);
  }
  if (!Topology.isEnabled(Eucalyptus.class) && Hosts.getCoordinator() != null) {
    BootstrapComponent.setup(Eucalyptus.class,Hosts.getCoordinator().getBindAddress());
  }
  if (event.isAsserted(3L) && Bootstrap.isFinished() && !Hosts.list(Predicates.not(BootedFilter.INSTANCE)).isEmpty()) {
    UpdateEntry.INSTANCE.apply(currentHost);
  }
 else   if (event.isAsserted(15L)) {
    UpdateEntry.INSTANCE.apply(currentHost);
  }
  Set<Address> currentMembers=Sets.newHashSet(hostMap.getChannel().getView().getMembers());
  Map<String,Host> hostCopy=Maps.newHashMap(hostMap);
  Set<Address> currentHosts=Sets.newHashSet(Collections2.transform(hostCopy.values(),GroupAddressTransform.INSTANCE));
  Set<Address> strayHosts=Sets.difference(currentHosts,currentMembers);
  for (  Address strayHost : strayHosts) {
    Host h=hostCopy.get(strayHost);
    BootstrapComponent.TEARDOWN.apply(h);
    hostMap.remove(strayHost);
  }
}
