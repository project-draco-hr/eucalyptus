{
  LOG.info("Hosts.viewChange(): new view [" + currentView.getViewId().getId() + ":"+ currentView.getViewId().getCoordAddress()+ "]=> "+ Joiner.on(", ").join(currentView.getMembers()));
  LOG.info(printMap("Hosts.viewChange(before):"));
  if (!joinMembers.isEmpty())   LOG.info("Hosts.viewChange(): joined   [" + currentView.getViewId().getId() + ":"+ currentView.getViewId().getCoordAddress()+ "]=> "+ Joiner.on(", ").join(joinMembers));
  if (!partMembers.isEmpty())   LOG.info("Hosts.viewChange(): parted   [" + currentView.getViewId().getId() + ":"+ currentView.getViewId().getCoordAddress()+ "]=> "+ Joiner.on(", ").join(partMembers));
  List<Address> allHostAddresses=Lists.transform(Hosts.list(),GroupAddressTransform.INSTANCE);
  Collection<Address> partedHosts=Collections2.filter(allHostAddresses,Predicates.in(partMembers));
  for (  final Address hostAddress : partedHosts) {
    LOG.info("Hosts.viewChange(): -> removed  => " + hostAddress);
  }
  if (!partMembers.isEmpty()) {
    Threads.lookup(Empyrean.class,Hosts.class,"viewChange").submit(PeriodicMembershipChecks.PRUNING);
  }
  Collection<Address> joinedHosts=Collections2.filter(allHostAddresses,Predicates.in(joinMembers));
  for (  final Address hostAddress : joinedHosts) {
    LOG.info("Hosts.viewChange(): -> added    => " + hostAddress);
  }
  if (currentView instanceof MergeView) {
    this.handleMergeView((MergeView)currentView);
  }
  LOG.info(printMap("Hosts.viewChange(after):"));
  LOG.info("Hosts.viewChange(): new view finished.");
}
