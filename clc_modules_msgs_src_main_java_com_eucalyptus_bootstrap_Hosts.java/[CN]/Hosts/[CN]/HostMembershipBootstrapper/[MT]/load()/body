{
  try {
    JChannel jchannel=HostManager.buildChannel();
    LOG.info("Started membership channel " + SystemIds.membershipGroupName());
    hostMap=new ReplicatedHashMap<String,Host>(jchannel);
    hostMap.setBlockingUpdates(true);
    HostManager.start();
    Runnable runMap=new Runnable(){
      public void run(){
        try {
          hostMap.start(STATE_INITIALIZE_TIMEOUT);
          OrderedShutdown.registerPreShutdownHook(new Runnable(){
            @Override public void run(){
              try {
                for (                Runnable r : PeriodicMembershipChecks.shutdownNow()) {
                  LOG.info("SHUTDOWN: Pending host pruning task: " + r);
                }
              }
 catch (              Exception ex1) {
                LOG.error(ex1,ex1);
              }
              try {
                hostMap.removeNotifier(HostMapStateListener.INSTANCE);
                try {
                  if (Hosts.contains(Internets.localHostIdentifier())) {
                    Hosts.remove(Internets.localHostIdentifier());
                  }
                }
 catch (                final Exception ex) {
                  LOG.error(ex,ex);
                }
                hostMap.stop();
              }
 catch (              final Exception ex) {
                LOG.error(ex,ex);
              }
            }
          }
);
        }
 catch (        Exception ex) {
          LOG.error(ex,ex);
          Exceptions.maybeInterrupted(ex);
          System.exit(123);
        }
      }
    }
;
    Timers.loggingWrapper(runMap,hostMap).call();
    LOG.info("Initial view: " + HostMapStateListener.INSTANCE.printMap());
    LOG.info("Searching for potential coordinator: " + Hosts.getCoordinator());
    Hosts.Coordinator.INSTANCE.await();
    Coordinator.INSTANCE.initialize(hostMap.values());
    LOG.info("Created local host entry: " + Hosts.localHost());
    hostMap.addNotifier(HostMapStateListener.INSTANCE);
    LOG.info("System view: " + HostMapStateListener.INSTANCE.printMap());
    UpdateEntry.INSTANCE.apply(Hosts.localHost());
    LOG.info("System coordinator: " + Hosts.getCoordinator());
    Hosts.awaitDatabases();
    LOG.info("Membership address for localhost: " + Hosts.localHost());
    for (    Host h : hostMap.values()) {
      BootstrapComponent.REMOTESETUP.apply(h);
    }
    PeriodicMembershipChecks.setup();
    return true;
  }
 catch (  final Exception ex) {
    LOG.fatal(ex,ex);
    BootstrapException.throwFatal("Failed to connect membership channel because of " + ex.getMessage(),ex);
    return false;
  }
}
