{
  try {
    HostManager.getInstance();
    LOG.info("Started membership channel " + SystemIds.membershipGroupName());
    hostMap=new ReplicatedHashMap<String,Host>(HostManager.getMembershipChannel());
    hostMap.setDeadlockDetection(true);
    hostMap.setBlockingUpdates(true);
    hostMap.addNotifier(HostMapStateListener.INSTANCE);
    Runnable runMap=new Runnable(){
      public void run(){
        try {
          hostMap.start(STATE_INITIALIZE_TIMEOUT);
          OrderedShutdown.register(Eucalyptus.class,new Runnable(){
            @Override public void run(){
              try {
                try {
                  hostMap.remove(Internets.localHostIdentifier());
                }
 catch (                final Exception ex) {
                  LOG.error(ex,ex);
                }
                hostMap.stop();
              }
 catch (              final Exception ex) {
                LOG.error(ex,ex);
              }
            }
          }
);
        }
 catch (        Exception ex) {
          LOG.error(ex,ex);
          Exceptions.maybeInterrupted(ex);
          System.exit(123);
        }
      }
    }
;
    Timers.loggingWrapper(runMap,hostMap).call();
    LOG.info("Initial view:\n" + HostMapStateListener.INSTANCE.printMap());
    LOG.info("Initial coordinator:\n" + Hosts.getCoordinator());
    Coordinator.INSTANCE.initialize(hostMap.values());
    final Host local=Host.create();
    LOG.info("Created local host entry: " + local);
    hostMap.put(local.getDisplayName(),local);
    Listeners.register(HostBootstrapEventListener.INSTANCE);
    LOG.info("System view:\n" + HostMapStateListener.INSTANCE.printMap());
    LOG.info("System coordinator:\n" + Hosts.getCoordinator());
    if (!BootstrapArgs.isCloudController()) {
      while (Hosts.listActiveDatabases().isEmpty()) {
        TimeUnit.SECONDS.sleep(5);
        LOG.info("Waiting for system view with database...");
      }
      if (Databases.shouldInitialize()) {
        doInitialize();
      }
    }
    LOG.info("Membership address for localhost: " + Hosts.localHost());
    return true;
  }
 catch (  final Exception ex) {
    LOG.fatal(ex,ex);
    BootstrapException.throwFatal("Failed to connect membership channel because of " + ex.getMessage(),ex);
    return false;
  }
}
