{
  long quantity=getVmAllocationNumber(vmAllocInfo);
  RunInstancesType request=vmAllocInfo.getRequest();
  Context ctx;
  try {
    ctx=Contexts.lookup(vmAllocInfo.getCorrelationId());
  }
 catch (  NoSuchContextException ex) {
    LOG.debug(ex);
    try {
      ctx=Contexts.lookup(vmAllocInfo.getRequest().getCorrelationId());
    }
 catch (    NoSuchContextException ex1) {
      LOG.debug(ex);
      throw new EucalyptusCloudException("CreateVmInstances failed because the user could not be looked up: " + ex.getMessage(),ex);
    }
  }
  User requestUser=ctx.getUser();
  UserFullName userFullName=ctx.getUserFullName();
  vmAllocInfo.setOwnerFullName(userFullName);
  String action=PolicySpec.requestToAction(request);
  String vmType=vmAllocInfo.getVmTypeInfo().getName();
  if (!Permissions.canAllocate(PolicySpec.VENDOR_EC2,PolicySpec.EC2_RESOURCE_VMTYPE,vmType,action,requestUser,1L)) {
    throw new EucalyptusCloudException("Quota exceeded in allocating vm type " + vmType + " for "+ requestUser.getName());
  }
  if (!Permissions.canAllocate(PolicySpec.VENDOR_EC2,PolicySpec.EC2_RESOURCE_INSTANCE,"",action,requestUser,quantity)) {
    throw new EucalyptusCloudException("Quota exceeded in allocating " + quantity + " vm instances for "+ requestUser.getName());
  }
  String reservationId=VmInstances.getId(vmAllocInfo.getReservationIndex(),0).replaceAll("i-","r-");
  int vmIndex=1;
  for (  ResourceToken token : vmAllocInfo.getAllocationTokens()) {
    if (Clusters.getInstance().hasNetworking()) {
      for (      Integer networkIndex : token.getPrimaryNetwork().getIndexes()) {
        VmInstance vmInst=getVmInstance(userFullName,vmAllocInfo,reservationId,token,vmIndex++,networkIndex);
        VmInstances.getInstance().register(vmInst);
        token.getInstanceIds().add(vmInst.getInstanceId());
      }
    }
 else {
      for (int i=0; i < token.getAmount(); i++) {
        VmInstance vmInst=getVmInstance(userFullName,vmAllocInfo,reservationId,token,vmIndex++,-1);
        VmInstances.getInstance().register(vmInst);
        token.getInstanceIds().add(vmInst.getInstanceId());
      }
    }
  }
  vmAllocInfo.setReservationId(reservationId);
  return vmAllocInfo;
}
