{
  long quantity=getVmAllocationNumber(vmAllocInfo);
  Context ctx=vmAllocInfo.getContext();
  User requestUser=ctx.getUser();
  UserFullName userFullName=ctx.getUserFullName();
  String action=PolicySpec.requestToAction(vmAllocInfo.getRequest());
  String vmType=vmAllocInfo.getVmTypeInfo().getName();
  if (!Permissions.canAllocate(PolicySpec.VENDOR_EC2,PolicySpec.EC2_RESOURCE_VMTYPE,vmType,action,requestUser,1L)) {
    throw new EucalyptusCloudException("Quota exceeded in allocating vm type " + vmType + " for "+ requestUser.getName());
  }
  if (!Permissions.canAllocate(PolicySpec.VENDOR_EC2,PolicySpec.EC2_RESOURCE_INSTANCE,"",action,requestUser,quantity)) {
    throw new EucalyptusCloudException("Quota exceeded in allocating " + quantity + " vm instances for "+ requestUser.getName());
  }
  String reservationId=VmInstances.getId(vmAllocInfo.getReservationIndex(),0).replaceAll("i-","r-");
  int vmIndex=1;
  for (  ResourceToken token : vmAllocInfo.getAllocationTokens()) {
    if (Clusters.getInstance().hasNetworking()) {
      for (      Integer networkIndex : token.getPrimaryNetwork().getIndexes()) {
        VmInstance vmInst=getVmInstance(userFullName,vmAllocInfo,reservationId,token,vmIndex++,networkIndex);
        VmInstances.getInstance().register(vmInst);
        token.getInstanceIds().add(vmInst.getInstanceId());
      }
    }
 else {
      for (int i=0; i < token.getAmount(); i++) {
        VmInstance vmInst=getVmInstance(userFullName,vmAllocInfo,reservationId,token,vmIndex++,-1);
        VmInstances.getInstance().register(vmInst);
        token.getInstanceIds().add(vmInst.getInstanceId());
      }
    }
  }
  return vmAllocInfo;
}
