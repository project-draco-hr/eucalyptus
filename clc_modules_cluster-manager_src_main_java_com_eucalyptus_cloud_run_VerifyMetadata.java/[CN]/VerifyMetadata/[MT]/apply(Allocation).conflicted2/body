{
  BootableImageInfo imageInfo=allocInfo.getBootSet().getMachine();
  final List<BlockDeviceMappingItemType> instanceMappings=allocInfo.getRequest().getBlockDeviceMapping() != null ? allocInfo.getRequest().getBlockDeviceMapping() : new ArrayList<BlockDeviceMappingItemType>();
  List<DeviceMapping> imageMappings=new ArrayList<DeviceMapping>(((ImageInfo)imageInfo).getDeviceMappings());
  instanceMappings.addAll(Lists.transform(Lists.newArrayList(Iterables.filter(imageMappings,new Predicate<DeviceMapping>(){
    @Override public boolean apply(    DeviceMapping arg0){
      return !Iterables.any(instanceMappings,Images.findBlockDeviceMappingItempType(arg0.getDeviceName()));
    }
  }
)),Images.DeviceMappingDetails.INSTANCE));
  ArrayList<BlockDeviceMappingItemType> resultedInstanceMappings=new ArrayList<>();
  if (imageInfo instanceof BlockStorageImageInfo) {
    if (!instanceMappings.isEmpty()) {
      resultedInstanceMappings=Images.validateBlockDeviceMappings(instanceMappings,EnumSet.of(AllowSuppressMapping,AllowEbsMapping,SkipExtraEphemeral));
      BlockStorageImageInfo bfebsImage=(BlockStorageImageInfo)imageInfo;
      Integer imageSizeGB=(int)(bfebsImage.getImageSizeBytes() / BYTES_PER_GB);
      Integer userRequestedSizeGB=null;
      BlockDeviceMappingItemType rootBlockDevice=Iterables.find(resultedInstanceMappings,Images.findEbsRootOptionalSnapshot(bfebsImage.getRootDeviceName()),null);
      if (rootBlockDevice != null) {
        if (StringUtils.isNotBlank(rootBlockDevice.getEbs().getSnapshotId()) && !StringUtils.equals(rootBlockDevice.getEbs().getSnapshotId(),bfebsImage.getSnapshotId())) {
          throw new InvalidMetadataException("Snapshot ID cannot be modified for the root device. " + "Source snapshot from the image registration will be used for creating the root device");
        }
 else         if (StringUtils.isNotBlank(rootBlockDevice.getVirtualName())) {
          throw new InvalidMetadataException("Logical type cannot be modified for the root device. " + "Source snapshot from the image registration will be used for creating the root device");
        }
 else         if (rootBlockDevice.getNoDevice() != null) {
          throw new InvalidMetadataException("Root device cannot be suppressed. " + "Source snapshot from the image registration will be used for creating the root device");
        }
 else         if ((userRequestedSizeGB=rootBlockDevice.getEbs().getVolumeSize()) != null && userRequestedSizeGB < imageSizeGB) {
          throw new InvalidMetadataException("Root device volume cannot be smaller than the image size");
        }
        if (rootBlockDevice.getEbs().getSnapshotId() == null) {
          rootBlockDevice.getEbs().setSnapshotId(bfebsImage.getSnapshotId());
        }
        if (rootBlockDevice.getEbs().getVolumeSize() == null) {
          rootBlockDevice.getEbs().setVolumeSize(imageSizeGB);
        }
        if (rootBlockDevice.getEbs().getDeleteOnTermination() == null) {
          rootBlockDevice.getEbs().setDeleteOnTermination(bfebsImage.getDeleteOnTerminate());
        }
      }
 else {
        throw new InvalidMetadataException("Root block device mapping not found\n");
      }
    }
  }
 else {
    resultedInstanceMappings=Images.validateBlockDeviceMappings(instanceMappings,EnumSet.of(AllowSuppressMapping,SkipExtraEphemeral));
  }
  allocInfo.getRequest().setBlockDeviceMapping(resultedInstanceMappings);
  return true;
}
