{
  LOG.debug(e,e);
  LOG.debug("Trying to remove invalid volume attachment " + this.getRequest().getVolumeId() + " from instance "+ this.getRequest().getInstanceId());
  try {
    VmInstance vm=VmInstances.getInstance().lookup(this.getRequest().getInstanceId());
    AttachedVolume failVol=new AttachedVolume(this.getRequest().getVolumeId());
    NavigableSet<AttachedVolume> volList=vm.getVolumes().subSet(failVol,true,failVol,true);
    if (!volList.isEmpty()) {
      AttachedVolume volume=volList.first();
      LOG.debug("Found volume attachment info in async error path: " + volume);
      try {
        Cluster cluster=Clusters.getInstance().lookup(vm.getPlacement());
        StorageControllerConfiguration sc=Configuration.lookupSc(cluster.getName());
        Dispatcher dispatcher=ServiceDispatcher.lookup(Components.lookup("storage"),sc.getHostName());
        String iqn=cluster.getNode(vm.getServiceTag()).getIqn();
        LOG.debug("Sending detach after async failure in attach volume: cluster=" + cluster.getName() + " iqn="+ iqn+ " sc="+ sc+ " dispatcher="+ dispatcher.getName()+ " uri="+ dispatcher.getAddress());
        dispatcher.send(new DetachStorageVolumeType(iqn,volume.getVolumeId()));
      }
 catch (      EucalyptusCloudException ex) {
        LOG.error(ex,ex);
      }
      vm.getVolumes().remove(failVol);
    }
 else {
      LOG.error("Failed to find volume attachment information for volume: " + failVol);
    }
    LOG.debug("Removed failed attachment: " + failVol.getVolumeId() + " -> "+ vm.getInstanceId());
    LOG.debug("Final volume attachments for " + vm.getInstanceId() + " "+ vm.getVolumes());
  }
 catch (  NoSuchElementException e1) {
  }
}
