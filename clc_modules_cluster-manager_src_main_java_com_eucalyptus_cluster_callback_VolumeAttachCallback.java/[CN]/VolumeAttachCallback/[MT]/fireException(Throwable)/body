{
  LOG.debug(e,e);
  LOG.debug("Trying to remove invalid volume attachment " + this.getRequest().getVolumeId() + " from instance "+ this.getRequest().getInstanceId());
  try {
    VmInstance vm=VmInstances.lookup(this.getRequest().getInstanceId());
    Partition partition=vm.lookupPartition();
    ServiceConfiguration cc=Topology.lookup(ClusterController.class,partition);
    Cluster cluster=Clusters.lookup(cc);
    ServiceConfiguration sc=Topology.lookup(Storage.class,partition);
    try {
      Dispatcher dispatcher=ServiceDispatcher.lookup(sc);
      String iqn=cluster.getNode(vm.getServiceTag()).getIqn();
      LOG.debug("Sending detach after async failure in attach volume: cluster=" + cluster.getName() + " iqn="+ iqn+ " sc="+ sc+ " dispatcher="+ dispatcher.getName()+ " uri="+ dispatcher.getAddress());
      dispatcher.send(new DetachStorageVolumeType(iqn,this.getRequest().getVolumeId()));
    }
 catch (    EucalyptusCloudException ex) {
      LOG.error(ex,ex);
    }
    final Function<String,VmInstance> removeVolAttachment=new Function<String,VmInstance>(){
      public VmInstance apply(      final String input){
        VmInstance vm=VmInstances.lookup(input);
        vm.removeVolumeAttachment(VolumeAttachCallback.this.getRequest().getVolumeId());
        return vm;
      }
    }
;
    Entities.asTransaction(VmInstance.class,removeVolAttachment).apply(this.getRequest().getInstanceId());
    LOG.debug("Removed failed attachment: " + this.getRequest().getVolumeId() + " -> "+ vm.getInstanceId());
  }
 catch (  Exception e1) {
    LOG.error(e1,e1);
  }
}
