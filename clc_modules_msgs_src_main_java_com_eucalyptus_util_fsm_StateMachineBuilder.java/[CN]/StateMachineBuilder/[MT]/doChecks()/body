{
  this.immutableStates=ImmutableList.copyOf(this.startState.asEnum.getEnumConstants(this.startState));
  if (this.transitions.isEmpty()) {
    throw new IllegalStateException("Started state machine with no registered transitions.");
  }
  T transitionName=this.transitions.iterator().next().getName();
  T[] trans=transitionName.asEnum.getEnumConstants(transitionName);
  Map<String,TransitionHandler<P,S,T>> alltransitions=Maps.newHashMap();
  for (  S s1 : this.immutableStates) {
    for (    S s2 : this.immutableStates) {
      alltransitions.put(String.format("%s.%s->%s.%s",s1,false,s2,false),null);
      alltransitions.put(String.format("%s.%s->%s.%s",s1,false,s2,true),null);
      alltransitions.put(String.format("%s.%s->%s.%s",s1,true,s2,false),null);
      alltransitions.put(String.format("%s.%s->%s.%s",s1,true,s2,true),null);
    }
  }
  LOG.debug("Starting state machine: " + this.parent.getClass().getSimpleName() + " "+ this.parent.getName());
  Multimap<T,TransitionHandler<P,S,T>> transNames=ArrayListMultimap.create();
  for (  TransitionHandler<P,S,T> t : this.transitions) {
    transNames.put(t.getName(),t);
  }
  for (  T t : trans) {
    for (    TransitionHandler<P,S,T> tr : transNames.get(t)) {
      String trKey=String.format("%s.%s->%s.%s (err=%s.%s)",tr.getFromState(),tr.getFromStateMark(),tr.getToState(),tr.getToStateMark(),tr.getErrorState(),tr.getErrorStateMark());
      if (alltransitions.get(trKey) != null) {
        LOG.error("Duplicate transition: " + tr + " AND "+ alltransitions.get(trKey));
        throw new IllegalStateException("Duplicate transition: " + tr + " AND "+ alltransitions.get(trKey));
      }
 else {
        alltransitions.put(trKey,tr);
      }
    }
  }
  for (  String trKey : alltransitions.keySet()) {
    if (alltransitions.get(trKey) != null) {
      LOG.debug(String.format("fsm %s %-60.60s %s",this.parent.getName(),trKey,alltransitions.get(trKey)));
    }
  }
}
