{
  EntityTransaction db=Entities.get(ExtantNetwork.class);
  SetReference<PrivateNetworkIndex,VmInstance> ref;
  try {
    ref=null;
    if (this.getIndexes().isEmpty()) {
      for (long i=NetworkGroups.networkingConfiguration().getMinNetworkIndex(); i < NetworkGroups.networkingConfiguration().getMaxNetworkIndex(); i++) {
        PrivateNetworkIndex newIdx=PrivateNetworkIndex.create(this,i);
        PrivateNetworkIndex netIdx=Entities.persist(newIdx);
        this.getIndexes().add(netIdx);
      }
      Entities.merge(this);
    }
    for (    PrivateNetworkIndex idx : Iterables.filter(this.getIndexes(),PrivateNetworkIndex.filterFree())) {
      try {
        ref=idx.allocate();
        break;
      }
 catch (      Exception ex1) {
        continue;
      }
    }
    Entities.merge(this);
    if (ref != null) {
      db.commit();
      return ref;
    }
 else {
      db.rollback();
      throw new TransactionExecutionException("Failed to allocate a private network index in network: " + this.displayName);
    }
  }
 catch (  TransactionException ex) {
    throw ex;
  }
catch (  Exception ex) {
    throw new TransactionExecutionException("Failed to allocate a private network index in network: " + this.displayName,ex);
  }
}
