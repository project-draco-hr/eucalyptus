{
  EntityTransaction db=Entities.get(ExtantNetwork.class);
  SetReference<PrivateNetworkIndex,VmInstance> ref=null;
  try {
    ExtantNetwork exNet=Entities.merge(this);
    PrivateNetworkIndex netIdx=null;
    for (    Long i : Numbers.shuffled(NetworkGroups.networkIndexInterval())) {
      try {
        Entities.uniqueResult(PrivateNetworkIndex.create(this,i));
        continue;
      }
 catch (      Exception ex) {
        try {
          netIdx=PrivateNetworkIndex.create(exNet,i);
          exNet.getIndexes().add(netIdx);
          netIdx=Entities.persist(netIdx);
          exNet=Entities.merge(exNet);
          break;
        }
 catch (        Exception ex1) {
          continue;
        }
      }
    }
    if (netIdx != null) {
      try {
        ref=netIdx.allocate();
        Entities.merge(this);
        db.commit();
        return ref;
      }
 catch (      Exception ex1) {
        db.rollback();
        throw new TransactionExecutionException("Failed to allocate a private network index in network: " + this.displayName);
      }
    }
 else {
      throw new TransactionExecutionException("Failed to allocate a private network index in network: " + this.displayName);
    }
  }
 catch (  TransactionException ex) {
    throw ex;
  }
catch (  Exception ex) {
    throw new TransactionExecutionException("Failed to allocate a private network index in network: " + this.displayName,ex);
  }
}
