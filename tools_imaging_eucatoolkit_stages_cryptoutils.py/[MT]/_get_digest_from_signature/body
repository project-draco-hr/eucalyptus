def _get_digest_from_signature(cert_filename, signature, algorithm):
    '\n    Attempts to recover the original digest from the signature provided\n    using the certificate provided. ie: /keys/cloud-cert.pem\n    :param cert_filename: local file path to certificate containing pubkey\n    :param signature: str buffer containing hex signature\n    :returns digest string\n    '
    digest_type = _get_digest_algorithm_from_string(algorithm)
    if ((not cert_filename) or (not signature)):
        raise ValueError("Bad value passed to _get_digest_from_signature. cert:'{0}', signature:'{1}'".format(cert_filename, signature))
    popen = Popen(['openssl', 'rsautl', '-verify', '-certin', '-inkey', cert_filename], stdin=PIPE, stdout=PIPE)
    (stdout, _) = popen.communicate(binascii.unhexlify(signature))
    return stdout[(- int(digest_type.digestsize)):]
