def _decrypt_hex_key(hex_encrypted_key, key_filename):
    "\n    Attempts to decrypt 'hex_encrypted_key' using key at local\n    file path 'key_filename'.\n    :param hex_encrypted_key: hex to decrypt\n    :param key_filename: local file path to key used to decrypt\n    :returns decrypted key\n    "
    if (not hex_encrypted_key):
        raise ValueError('Empty hex_encrypted_key passed to decrypt')
    if (not key_filename):
        raise ValueError('Empty key_filename passed to decrypt')
    popen = Popen(['openssl', 'rsautl', '-decrypt', '-pkcs', '-inkey', key_filename], stdin=PIPE, stdout=PIPE)
    binary_encrypted_key = binascii.unhexlify(hex_encrypted_key)
    (decrypted_key, _) = popen.communicate(binary_encrypted_key)
    try:
        int(decrypted_key, 16)
        return decrypted_key
    except ValueError as VE:
        VE.args = [((((('Failed to decrypt:"' + str(hex_encrypted_key)) + '", and keyfile:"') + str(key_filename)) + '".') + VE.message)]
        raise VE
