def _get_data_signature(data_to_sign, algorithm, key_filename):
    "\n    Creates a signature for 'data_to_sign' using the provided algorithm\n    and private key file path. ie: /keys/cloud-pk.pem\n    :param data_to_sign: string buffer with data to be signed\n    :param algorithm: algorithm name to be used in signature, ie:md5, sha256\n    :param key_filename: local path to private key to be used in signing\n    :returns signature string.\n    "
    if ((not data_to_sign) or (not algorithm) or (not key_filename)):
        raise ValueError("Bad value passed to _get_data_signature.data:'{0}', algorithm:'{1}', key:'{2}'".format(data_to_sign, algorithm, key_filename))
    digest = _get_digest_algorithm_from_string(algorithm)
    digest.update(data_to_sign)
    popen = Popen(['openssl', 'pkeyutl', '-sign', '-inkey', key_filename, '-pkeyopt', ('digest:' + digest.name)], stdin=PIPE, stdout=PIPE)
    (stdout, _) = popen.communicate(digest.digest())
    return binascii.hexlify(stdout)
