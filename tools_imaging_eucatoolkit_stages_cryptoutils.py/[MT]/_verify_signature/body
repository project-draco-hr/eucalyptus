def _verify_signature(cert_filename, signature, data, algorithm):
    '\n    Attempts to verify a signature by comparing the digest in the signature\n    vs the calculated digest using the data and algorithm provided. This\n    is currently done in separate stages to avoid writing temp files to disk.\n    :param cert_filename: local file path to certificate containing pubkey\n    :param signature: str buffer containing hex signature\n    :param data: str buffer to build digest from\n    :param algorithm: algorithm name, ie: md5, sha1, sha256, etc..\n    :raises ValueError if digests do not match\n    '
    sig_digest = _get_digest_from_signature(cert_filename=cert_filename, signature=signature, algorithm=algorithm)
    data_digest = _get_data_digest(data=data, algorithm=algorithm)
    sig_digest = binascii.hexlify(sig_digest)
    data_digest = binascii.hexlify(data_digest)
    if (sig_digest != data_digest):
        raise ValueError(((('Signature not verified. Signature digest:' + str(sig_digest).encode('hex')) + ', data_digest:') + str(data_digest).encode('hex')))
    return {'sig_digest': sig_digest, 'data_digest': data_digest, }
