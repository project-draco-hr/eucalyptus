{
  final List<UserPrincipal> results=Lists.newArrayList();
  try {
    DatabaseAuthUtils.invokeUnique(AccessKeyEntity.class,"accessKey",this.delegate.getAccessKey(),new Tx<AccessKeyEntity>(){
      public void fire(      AccessKeyEntity t){
        try {
          results.add(Accounts.userAsPrincipal(new DatabaseUserProxy(t.getUser())));
        }
 catch (        AuthException e) {
          throw Exceptions.toUndeclared(e);
        }
      }
    }
);
  }
 catch (  ExecutionException e) {
    Debugging.logError(LOG,e,"Failed to getUser for " + this.delegate);
    throw new AuthException(e);
  }
  return results.get(0);
}
