{
  ServiceConfiguration configuration=Topology.lookup(Euare.class);
switch (stepNum) {
case 0:
    String roleName=getDefaultPhysicalResourceId();
  CreateRoleType createRoleType=new CreateRoleType();
createRoleType.setEffectiveUserId(info.getEffectiveUserId());
createRoleType.setRoleName(roleName);
createRoleType.setPath(properties.getPath());
createRoleType.setAssumeRolePolicyDocument(properties.getAssumeRolePolicyDocument().toString());
CreateRoleResponseType createRoleResponseType=AsyncRequests.<CreateRoleType,CreateRoleResponseType>sendSync(configuration,createRoleType);
String arn=createRoleResponseType.getCreateRoleResult().getRole().getArn();
info.setPhysicalResourceId(roleName);
info.setArn(JsonHelper.getStringFromJsonNode(new TextNode(arn)));
info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(info.getPhysicalResourceId())));
break;
case 1:
if (properties.getPolicies() != null) {
for (EmbeddedIAMPolicy policy : properties.getPolicies()) {
PutRolePolicyType putRolePolicyType=new PutRolePolicyType();
putRolePolicyType.setRoleName(info.getPhysicalResourceId());
putRolePolicyType.setPolicyName(policy.getPolicyName());
putRolePolicyType.setPolicyDocument(policy.getPolicyDocument().toString());
putRolePolicyType.setEffectiveUserId(info.getEffectiveUserId());
AsyncRequests.<PutRolePolicyType,PutRolePolicyResponseType>sendSync(configuration,putRolePolicyType);
}
}
break;
default :
throw new IllegalStateException("Invalid step " + stepNum);
}
}
