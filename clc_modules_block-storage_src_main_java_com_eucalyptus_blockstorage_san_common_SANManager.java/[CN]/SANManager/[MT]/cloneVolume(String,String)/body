{
  String sanVolumeId=resourceIdOnSan(volumeId);
  SANVolumeInfo volInfo=new SANVolumeInfo(volumeId);
  SANVolumeInfo parentVolumeInfo=lookup(parentVolumeId);
  String sanParentVolumeId=parentVolumeInfo.getSanVolumeId();
  int size=parentVolumeInfo.getSize();
  try (TransactionResource tran=Entities.transactionFor(SANVolumeInfo.class)){
    SANVolumeInfo existingVol=Entities.uniqueResult(volInfo);
    LOG.info("Checking for " + existingVol.getSanVolumeId() + " on backend");
    if (connectionManager.snapshotExists(existingVol.getSanVolumeId(),existingVol.getIqn())) {
      throw new VolumeAlreadyExistsException("Existing resource found on backend for " + existingVol.getSanVolumeId());
    }
 else {
      LOG.debug("Found database record but resource does not exist on backend. Deleting database record for " + volumeId);
      Entities.delete(existingVol);
      tran.commit();
    }
  }
 catch (  NoSuchElementException ex) {
  }
catch (  VolumeAlreadyExistsException ex) {
    throw ex;
  }
catch (  Exception ex) {
    throw new EucalyptusCloudException(ex);
  }
  try {
    Transactions.save(volInfo.withSanVolumeId(sanVolumeId).withSize(size));
  }
 catch (  Exception ex) {
    LOG.warn("Failed to persist database record for " + volumeId,ex);
    throw new EucalyptusCloudException("Failed to persist database record for " + volumeId,ex);
  }
  LOG.info("Cloning " + sanVolumeId + " from "+ sanParentVolumeId+ " on backend");
  String iqn=connectionManager.cloneVolume(sanVolumeId,sanParentVolumeId,parentVolumeInfo.getIqn());
  if (iqn != null) {
    try (TransactionResource tran=Entities.transactionFor(SANVolumeInfo.class)){
      SANVolumeInfo existingVol=Entities.uniqueResult(volInfo);
      existingVol.setIqn(iqn);
      Entities.merge(existingVol);
      tran.commit();
    }
 catch (    Exception ex) {
      LOG.warn("Failed to update database record with IQN post creation for " + volumeId);
      throw new EucalyptusCloudException("Failed to update database record with IQN post creation for " + volumeId,ex);
    }
  }
 else {
    LOG.warn("Invalid IQN from backend for " + sanVolumeId);
    throw new EucalyptusCloudException("Failed to create " + volumeId + " due to invalid IQN from backend for "+ sanVolumeId);
  }
}
