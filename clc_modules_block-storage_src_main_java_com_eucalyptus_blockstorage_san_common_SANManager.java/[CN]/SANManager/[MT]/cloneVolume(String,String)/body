{
  String sanVolumeId=resourceIdOnSan(volumeId);
  String sanParentVolumeId=null;
  SANVolumeInfo volInfo=new SANVolumeInfo(volumeId);
  int size=-1;
  try {
    SANVolumeInfo parentVolumeInfo=Transactions.find(new SANVolumeInfo(parentVolumeId));
    if (parentVolumeInfo == null || StringUtils.isBlank(parentVolumeInfo.getSanVolumeId())) {
      throw new EucalyptusCloudException("Backend ID not found for " + parentVolumeId);
    }
    sanParentVolumeId=parentVolumeInfo.getSanVolumeId();
    size=parentVolumeInfo.getSize();
  }
 catch (  TransactionException|NoSuchElementException ex) {
    LOG.error(volumeId + ": Failed to lookup source volume entity",ex);
    throw new EucalyptusCloudException("Failed to lookup source volume entity for " + parentVolumeId,ex);
  }
  try (TransactionResource tran=Entities.transactionFor(SANVolumeInfo.class)){
    SANVolumeInfo existingVol=Entities.uniqueResult(volInfo);
    if (connectionManager.snapshotExists(existingVol.getSanVolumeId())) {
      throw new VolumeAlreadyExistsException("Volume already exists on storage backend for " + volumeId);
    }
 else {
      LOG.debug(volumeId + ": Found the database entity but the volume does not exist on SAN. Deleting the database entity");
      Entities.delete(existingVol);
      tran.commit();
    }
  }
 catch (  VolumeAlreadyExistsException ex) {
    throw ex;
  }
catch (  Exception ex) {
  }
  try {
    Transactions.save(volInfo.withSanVolumeId(sanVolumeId).withSize(size));
  }
 catch (  Exception ex) {
    LOG.error(volumeId + ": Failed to add database entity" + volumeId,ex);
    throw new EucalyptusCloudException("Failed to add database entity for " + volumeId,ex);
  }
  LOG.info("Cloning backend volume " + sanVolumeId + " mapping to "+ volumeId+ " from backend volume "+ sanParentVolumeId+ " mapping to "+ parentVolumeId);
  String iqn=connectionManager.cloneVolume(sanVolumeId,sanParentVolumeId);
  if (iqn != null) {
    try (TransactionResource tran=Entities.transactionFor(SANVolumeInfo.class)){
      SANVolumeInfo existingVol=Entities.uniqueResult(volInfo);
      existingVol.setIqn(iqn);
      Entities.merge(existingVol);
      tran.commit();
    }
 catch (    Exception ex) {
      LOG.error(volumeId + ": Failed to update database entity with IQN post volume creation");
      throw new EucalyptusCloudException("Failed to update database entity with IQN post volume creation for " + volumeId,ex);
    }
  }
 else {
    throw new EucalyptusCloudException("Unable to create volume: " + volumeId);
  }
}
