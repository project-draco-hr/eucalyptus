{
  try {
    lookup(snapshotId);
    LOG.debug("Found existing database record for " + snapshotId + ".  Will use that lun and record.");
    return null;
  }
 catch (  NoSuchRecordException e) {
    LOG.debug("Backend database record for " + snapshotId + " not found. Setting up holder on backend to hold the snapshot content downloaded from OSG");
  }
  String sanSnapshotId=resourceIdOnSan(snapshotId);
  String iqn=null;
  try {
    LOG.info("Creating " + sanSnapshotId + " of size "+ actualSizeInMB+ " MB on backend");
    iqn=connectionManager.createSnapshotHolder(sanSnapshotId,actualSizeInMB);
  }
 catch (  EucalyptusCloudException e) {
    LOG.warn("Failed to create backend resource for " + snapshotId);
    iqn=null;
  }
  if (iqn != null) {
    try {
      String scIqn=StorageProperties.getStorageIqn();
      if (scIqn == null) {
        throw new EucalyptusCloudException("Could not get the SC's initiator IQN, found null.");
      }
      String lun=null;
      try {
        LOG.info("Exporting " + sanSnapshotId + " on backend to Storage Controller host IQN "+ scIqn);
        lun=connectionManager.exportResource(sanSnapshotId,scIqn,iqn);
      }
 catch (      EucalyptusCloudException attEx) {
        LOG.warn("Failed to export " + sanSnapshotId + " on backend to Storage Controller",attEx);
        throw new EucalyptusCloudException("Failed to create " + snapshotId + " due to error exporting "+ sanSnapshotId+ " on backend to Storage Controller",attEx);
      }
      if (lun == null) {
        LOG.warn("Invalid value found for LUN upon exporting " + sanSnapshotId + " on backend");
        throw new EucalyptusCloudException("Failed to create " + snapshotId + " due to invalid value for LUN upon exporting "+ sanSnapshotId+ " on backend");
      }
      SANVolumeInfo snapInfo=new SANVolumeInfo(snapshotId,iqn + ',' + lun,sizeExpected).withSanVolumeId(sanSnapshotId);
      try {
        Transactions.save(snapInfo);
      }
 catch (      TransactionException e) {
        LOG.warn("Failed to update database record with IQN and LUN post creation for " + snapshotId);
        throw new EucalyptusCloudException("Failed to update database entity with IQN and LUN post creation for " + snapshotId,e);
      }
      StorageResource storageResource=null;
      try {
        LOG.info("Connecting " + sanSnapshotId + " on backend to Storage Controller for transfer");
        storageResource=connectionManager.connectTarget(iqn,lun);
        storageResource.setId(snapshotId);
      }
 catch (      Exception connEx) {
        LOG.warn("Failed to connect " + sanSnapshotId + " on backend to Storage Controller. Detaching and cleaning up",connEx);
        try {
          LOG.info("Unexporting " + sanSnapshotId + " on backend from Storage Controller host IQN "+ scIqn);
          connectionManager.unexportResource(sanSnapshotId,scIqn);
        }
 catch (        EucalyptusCloudException detEx) {
          LOG.debug("Could not unexport " + sanSnapshotId + " during cleanup of failed connection");
        }
        throw new EucalyptusCloudException("Failed to create " + snapshotId + " due to an error connecting "+ sanSnapshotId+ " on backend to Storage Controller",connEx);
      }
      return storageResource;
    }
 catch (    EucalyptusCloudException e) {
      LOG.debug("Deleting " + sanSnapshotId + " on backend");
      if (!connectionManager.deleteVolume(sanSnapshotId,iqn)) {
        LOG.debug("Failed to delete backend resource " + snapshotId);
      }
      throw e;
    }
  }
  return null;
}
