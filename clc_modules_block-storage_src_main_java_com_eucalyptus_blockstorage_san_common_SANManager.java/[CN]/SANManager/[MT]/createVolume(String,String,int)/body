{
  String sanVolumeId=resourceIdOnSan(volumeId);
  SANVolumeInfo volumeInfo=new SANVolumeInfo(volumeId);
  SANVolumeInfo snapInfo=lookup(snapshotId);
  String sanSnapshotId=snapInfo.getSanVolumeId();
  int snapSize=snapInfo.getSize();
  if (size <= 0) {
    size=snapSize;
  }
  try (TransactionResource tran=Entities.transactionFor(SANVolumeInfo.class)){
    SANVolumeInfo existingVol=Entities.uniqueResult(volumeInfo);
    LOG.info("Checking for " + existingVol.getSanVolumeId() + " on backend");
    if (connectionManager.volumeExists(existingVol.getSanVolumeId())) {
      throw new VolumeAlreadyExistsException("Existing resource found on backend for " + existingVol.getSanVolumeId());
    }
 else {
      LOG.debug("Found database record but resource does not exist on backend. Deleting database record for " + volumeId);
      Entities.delete(existingVol);
      tran.commit();
    }
  }
 catch (  NoSuchElementException ex) {
  }
catch (  VolumeAlreadyExistsException ex) {
    throw ex;
  }
catch (  Exception ex) {
    throw new EucalyptusCloudException(ex);
  }
  try {
    Transactions.save(volumeInfo.withSanVolumeId(sanVolumeId).withSize(size));
  }
 catch (  Exception ex) {
    LOG.warn("Failed to persist database record for " + volumeId,ex);
    throw new EucalyptusCloudException("Failed to persist database record for " + volumeId,ex);
  }
  LOG.info("Creating " + sanVolumeId + " from "+ sanSnapshotId+ " on backend");
  String iqn=connectionManager.createVolume(sanVolumeId,sanSnapshotId,snapSize,size);
  if (iqn != null) {
    try (TransactionResource tran=Entities.transactionFor(SANVolumeInfo.class)){
      SANVolumeInfo existingVol=Entities.uniqueResult(volumeInfo);
      existingVol.setIqn(iqn);
      Entities.merge(existingVol);
      tran.commit();
    }
 catch (    Exception ex) {
      LOG.warn("Failed to update database record with IQN post creation for " + volumeId);
      throw new EucalyptusCloudException("Failed to update database record with IQN post creation for " + volumeId,ex);
    }
  }
 else {
    LOG.warn("Invalid IQN from backend for " + sanVolumeId);
    throw new EucalyptusCloudException("Failed to create " + volumeId + " due to invalid IQN from backend for "+ sanVolumeId);
  }
  return size;
}
