{
  String sanSnapshotId=resourceIdOnSan(snapshotId);
  SANVolumeInfo snapInfo=new SANVolumeInfo(snapshotId);
  StorageResource storageResource=null;
  SANVolumeInfo volumeInfo=lookup(volumeId);
  String sanVolumeId=volumeInfo.getSanVolumeId();
  int size=volumeInfo.getSize();
  try (TransactionResource tran=Entities.transactionFor(SANVolumeInfo.class)){
    SANVolumeInfo existingSnap=Entities.uniqueResult(snapInfo);
    LOG.info("Checking for " + existingSnap.getSanVolumeId() + " on backend");
    if (connectionManager.snapshotExists(existingSnap.getSanVolumeId(),existingSnap.getIqn())) {
      throw new VolumeAlreadyExistsException("Existing resource found on backend for " + existingSnap.getSanVolumeId());
    }
 else {
      LOG.debug("Found database record but resource does not exist on backend. Deleting database record for " + snapshotId);
      Entities.delete(existingSnap);
      tran.commit();
    }
  }
 catch (  NoSuchElementException ex) {
  }
catch (  VolumeAlreadyExistsException ex) {
    throw ex;
  }
catch (  Exception ex) {
    throw new EucalyptusCloudException(ex);
  }
  try {
    Transactions.save(snapInfo.withSanVolumeId(sanSnapshotId).withSize(size).withSnapshotOf(volumeId));
  }
 catch (  Exception ex) {
    LOG.warn("Failed to persist database record for " + snapshotId,ex);
    throw new EucalyptusCloudException("Failed to persist database record for " + snapshotId,ex);
  }
  LOG.info("Creating " + sanSnapshotId + " from "+ sanVolumeId+ " using snapshot point "+ snapshotPointId+ " on backend");
  String iqn=connectionManager.createSnapshot(sanVolumeId,sanSnapshotId,snapshotPointId,volumeInfo.getIqn());
  if (iqn != null) {
    if (shouldTransferSnapshots) {
      String scIqn=StorageProperties.getStorageIqn();
      if (scIqn == null) {
        LOG.warn("Storage Controller IQN not found");
        throw new EucalyptusCloudException("Storage Controller IQN not found");
      }
      String lun=null;
      try {
        LOG.info("Exporting " + sanSnapshotId + " on backend to Storage Controller host IQN "+ scIqn);
        lun=connectionManager.exportResource(sanSnapshotId,scIqn,iqn);
      }
 catch (      EucalyptusCloudException attEx) {
        LOG.warn("Failed to export " + sanSnapshotId + " on backend to Storage Controller",attEx);
        throw new EucalyptusCloudException("Failed to create " + snapshotId + " due to error exporting "+ sanSnapshotId+ " on backend to Storage Controller",attEx);
      }
      if (lun == null) {
        LOG.warn("Invalid value found for LUN upon exporting " + sanSnapshotId + " on backend");
        throw new EucalyptusCloudException("Failed to create " + snapshotId + " due to invalid value for LUN upon exporting "+ sanSnapshotId+ " on backend");
      }
      try (TransactionResource tran=Entities.transactionFor(SANVolumeInfo.class)){
        SANVolumeInfo existingSnap=Entities.uniqueResult(snapInfo);
        existingSnap.setIqn(iqn + ',' + lun);
        Entities.merge(existingSnap);
        tran.commit();
      }
 catch (      Exception e) {
        LOG.warn("Failed to update database record with IQN and LUN post creation for " + snapshotId);
        throw new EucalyptusCloudException("Failed to update database entity with IQN and LUN post creation for " + snapshotId,e);
      }
      try {
        LOG.info("Connecting " + sanSnapshotId + " on backend to Storage Controller for transfer");
        storageResource=connectionManager.connectTarget(iqn,lun);
        storageResource.setId(snapshotId);
      }
 catch (      Exception connEx) {
        LOG.warn("Failed to connect " + sanSnapshotId + " on backend to Storage Controller. Detaching and cleaning up",connEx);
        try {
          LOG.info("Unexporting " + sanSnapshotId + " on backend from Storage Controller host IQN "+ scIqn);
          connectionManager.unexportResource(sanSnapshotId,scIqn);
        }
 catch (        EucalyptusCloudException detEx) {
          LOG.debug("Could not unexport " + sanSnapshotId + " during cleanup of failed connection");
        }
        throw new EucalyptusCloudException("Failed to create " + snapshotId + " due to an error connecting "+ sanSnapshotId+ " on backend to Storage Controller",connEx);
      }
    }
 else {
      try (TransactionResource tran=Entities.transactionFor(SANVolumeInfo.class)){
        SANVolumeInfo existingSnap=Entities.uniqueResult(snapInfo);
        existingSnap.setIqn(iqn);
        Entities.merge(existingSnap);
        tran.commit();
      }
 catch (      Exception ex) {
        LOG.warn("Failed to update database record with IQN post creation for " + snapshotId);
        throw new EucalyptusCloudException("Failed to update database record with IQN post creation for " + snapshotId,ex);
      }
    }
  }
 else {
    LOG.warn("Invalid IQN from backend for " + sanSnapshotId);
    throw new EucalyptusCloudException("Failed to create " + snapshotId + " due to invalid IQN from backend for "+ sanSnapshotId);
  }
  return storageResource;
}
