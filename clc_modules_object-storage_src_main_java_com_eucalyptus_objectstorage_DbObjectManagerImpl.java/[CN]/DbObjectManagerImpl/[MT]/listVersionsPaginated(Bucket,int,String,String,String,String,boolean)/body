{
  EntityTransaction db=Entities.get(ObjectEntity.class);
  try {
    PaginatedResult<ObjectEntity> result=new PaginatedResult<ObjectEntity>();
    HashSet<String> commonPrefixes=new HashSet<String>();
    if (maxEntries >= 0) {
      final int queryStrideSize=maxEntries + 1;
      ObjectEntity searchObj=new ObjectEntity();
      searchObj.setBucketName(bucket.getBucketName());
      if (latestOnly) {
        searchObj.setDeleted(false);
        searchObj.setIsLatest(true);
      }
      Criteria objCriteria=Entities.createCriteria(ObjectEntity.class);
      objCriteria.setReadOnly(true);
      objCriteria.setFetchSize(queryStrideSize);
      objCriteria.add(Example.create(searchObj));
      objCriteria.add(ObjectEntity.QueryHelpers.getNotPendingRestriction());
      objCriteria.add(ObjectEntity.QueryHelpers.getNotDeletingRestriction());
      objCriteria.add(ObjectEntity.QueryHelpers.getNotSnapshotRestriction());
      objCriteria.addOrder(Order.asc("objectKey"));
      objCriteria.addOrder(Order.desc("objectModifiedTimestamp"));
      objCriteria.setMaxResults(queryStrideSize);
      if (!Strings.isNullOrEmpty(fromKeyMarker)) {
        objCriteria.add(Restrictions.gt("objectKey",fromKeyMarker));
      }
 else {
        fromKeyMarker="";
      }
      if (!Strings.isNullOrEmpty(fromVersionId)) {
        objCriteria.add(Restrictions.gt("versionId",fromVersionId));
      }
 else {
        fromVersionId="";
      }
      if (!Strings.isNullOrEmpty(prefix)) {
        objCriteria.add(Restrictions.like("objectKey",prefix,MatchMode.START));
      }
 else {
        prefix="";
      }
      if (Strings.isNullOrEmpty(delimiter)) {
        delimiter="";
      }
      List<ObjectEntity> objectInfos=null;
      int resultKeyCount=0;
      String[] parts=null;
      String prefixString=null;
      boolean useDelimiter=!Strings.isNullOrEmpty(delimiter);
      int pages=0;
      do {
        parts=null;
        prefixString=null;
        objCriteria.setFirstResult(pages++ * queryStrideSize);
        objectInfos=(List<ObjectEntity>)objCriteria.list();
        if (objectInfos == null) {
          break;
        }
        for (        ObjectEntity objectRecord : objectInfos) {
          if (useDelimiter) {
            parts=objectRecord.getObjectKey().substring(prefix.length()).split(delimiter);
            if (parts.length > 1) {
              prefixString=prefix + parts[0] + delimiter;
              if (!commonPrefixes.contains(prefixString)) {
                if (resultKeyCount == maxEntries) {
                  result.setIsTruncated(true);
                  resultKeyCount++;
                  break;
                }
 else {
                  commonPrefixes.add(prefixString);
                  result.lastEntry=prefixString;
                  resultKeyCount++;
                }
              }
 else {
              }
              continue;
            }
          }
          if (resultKeyCount == maxEntries) {
            result.setIsTruncated(true);
            resultKeyCount++;
            break;
          }
          result.entityList.add(objectRecord);
          result.lastEntry=objectRecord;
          resultKeyCount++;
        }
        if (resultKeyCount <= maxEntries && objectInfos.size() <= maxEntries) {
          break;
        }
      }
 while (resultKeyCount <= maxEntries);
      if (commonPrefixes != null) {
        result.getCommonPrefixes().addAll(commonPrefixes);
        Collections.sort(result.getCommonPrefixes());
      }
    }
 else {
      throw new IllegalArgumentException("MaxKeys must be positive integer");
    }
    return result;
  }
 catch (  Exception e) {
    LOG.error("Error generating paginated object list of bucket " + bucket.getBucketName(),e);
    throw e;
  }
 finally {
    db.rollback();
  }
}
