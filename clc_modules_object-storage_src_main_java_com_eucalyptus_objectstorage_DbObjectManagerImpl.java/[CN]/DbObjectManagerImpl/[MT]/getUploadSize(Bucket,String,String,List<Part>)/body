{
  long size=0;
  int numPartsProcessed=0;
  for (  Part part : parts) {
    EntityTransaction db=Entities.get(PartEntity.class);
    try {
      Criteria search=Entities.createCriteria(PartEntity.class);
      PartEntity searchExample=new PartEntity(bucket.getBucketName(),objectKey,uploadId,part.getPartNumber());
      List<PartEntity> results=search.add(Example.create(searchExample)).add(PartEntity.QueryHelpers.getNotPendingRestriction()).list();
      db.commit();
      if (results.size() > 0) {
        long partSize=results.get(0).getSize();
        if (++numPartsProcessed < parts.size()) {
          if (partSize < StorageProperties.PART_MIN_SIZE) {
            throw new EntityTooSmallException("uploadId: " + uploadId + " partNumber: "+ part.getPartNumber());
          }
        }
      }
 else {
        throw new InternalErrorException("Part with partNumber: " + part.getPartNumber() + " not found.");
      }
    }
  finally {
      if (db != null && db.isActive()) {
        db.rollback();
      }
    }
  }
  return size;
}
