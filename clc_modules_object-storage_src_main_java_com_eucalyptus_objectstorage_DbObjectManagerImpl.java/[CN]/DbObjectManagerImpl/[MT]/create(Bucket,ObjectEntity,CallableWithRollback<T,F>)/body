{
  T result=null;
  try {
    ObjectEntity savedEntity=null;
    try {
      savedEntity=Transactions.saveDirect(object);
    }
 catch (    TransactionException e) {
      LOG.error("Transaction error creating initial object metadata for " + object.getResourceFullName(),e);
    }
catch (    Exception e) {
      LOG.error("Error creating initial object metadata for " + object.getResourceFullName(),e);
    }
    if (resourceModifier != null) {
      result=resourceModifier.call();
      Date updatedDate=null;
      if (result != null) {
        if (result.getLastModified() != null) {
          updatedDate=result.getLastModified();
        }
 else {
          updatedDate=new Date();
        }
        savedEntity.finalizeCreation(object.getVersionId(),updatedDate,result.getEtag());
      }
 else {
        throw new Exception("Backend returned null result");
      }
    }
 else {
      savedEntity.finalizeCreation(null,new Date(),"");
    }
    EntityTransaction db=Entities.get(ObjectEntity.class);
    try {
      Entities.mergeDirect(savedEntity);
      try {
        BucketManagers.getInstance().updateBucketSize(bucket.getBucketName(),savedEntity.getSize());
      }
 catch (      final Throwable f) {
        LOG.warn("Error updating bucket " + bucket.getBucketName() + " total object size. Not failing object put of .",f);
      }
      db.commit();
    }
 catch (    Exception e) {
      LOG.error("Error saving metadata object:" + bucket.getBucketName() + "/"+ object.getObjectKey()+ " version "+ object.getVersionId());
      throw e;
    }
 finally {
      if (db != null && db.isActive()) {
        db.rollback();
      }
    }
    fireRepairTask(bucket,savedEntity.getObjectKey());
    return result;
  }
 catch (  S3Exception e) {
    LOG.error("Error creating object: " + bucket.getBucketName() + "/"+ object.getObjectKey());
    try {
      if (resourceModifier != null) {
        resourceModifier.rollback(result);
      }
    }
 catch (    Exception ex) {
      LOG.error("Error rolling back object create",ex);
    }
    throw e;
  }
catch (  Exception e) {
    LOG.error("Error creating object: " + bucket.getBucketName() + "/"+ object.getObjectKey());
    try {
      if (resourceModifier != null) {
        resourceModifier.rollback(result);
      }
    }
 catch (    Exception ex) {
      LOG.error("Error rolling back object create",ex);
    }
    throw new InternalErrorException(object.getBucketName() + "/" + object.getObjectKey());
  }
}
