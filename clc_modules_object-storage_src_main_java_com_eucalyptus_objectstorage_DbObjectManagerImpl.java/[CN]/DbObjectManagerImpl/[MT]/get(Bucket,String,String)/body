{
  try {
    EntityTransaction db=Entities.get(ObjectEntity.class);
    try {
      ObjectEntity searchExample=new ObjectEntity(bucket.getBucketName(),objectKey,versionId);
      if (versionId == null) {
        searchExample.setIsLatest(true);
      }
      Criteria search=Entities.createCriteria(ObjectEntity.class);
      List<ObjectEntity> results=search.add(Example.create(searchExample)).addOrder(Order.desc("objectModifiedTimestamp")).add(ObjectEntity.QueryHelpers.getNotPendingRestriction()).add(ObjectEntity.QueryHelpers.getNotDeletingRestriction()).list();
      if (results == null || results.size() < 1) {
        throw new NoSuchElementException();
      }
 else       if (results.size() > 1) {
        this.repairObjectLatest(bucket.getBucketName(),objectKey);
        fireRepairTask(bucket,objectKey);
      }
      db.commit();
      return results.get(0);
    }
  finally {
      if (db != null && db.isActive()) {
        db.rollback();
      }
    }
  }
 catch (  NoSuchElementException ex) {
    throw ex;
  }
catch (  Exception e) {
    LOG.error("Error getting object entity for " + bucket.getBucketName() + "/"+ objectKey+ "?version="+ versionId,e);
    throw e;
  }
}
