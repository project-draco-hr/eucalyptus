{
  EntityTransaction db=Entities.get(ObjectEntity.class);
  try {
    PaginatedResult<ObjectEntity> result=new PaginatedResult<ObjectEntity>();
    HashSet<String> commonPrefixes=new HashSet<String>();
    if (maxParts >= 0) {
      final int queryStrideSize=maxParts + 1;
      ObjectEntity searchObj=new ObjectEntity();
      searchObj.setBucketName(bucket.getBucketName());
      searchObj.setObjectKey(objectKey);
      searchObj.setUploadId(uploadId);
      Criteria objCriteria=Entities.createCriteria(ObjectEntity.class);
      objCriteria.setReadOnly(true);
      objCriteria.setFetchSize(queryStrideSize);
      objCriteria.add(Example.create(searchObj));
      objCriteria.add(ObjectEntity.QueryHelpers.getNotPendingRestriction());
      objCriteria.add(ObjectEntity.QueryHelpers.getNotDeletingRestriction());
      objCriteria.add(ObjectEntity.QueryHelpers.getIsPartRestriction());
      objCriteria.add(ObjectEntity.QueryHelpers.getIsMultipartRestriction());
      objCriteria.addOrder(Order.asc("partNumber"));
      objCriteria.addOrder(Order.desc("objectModifiedTimestamp"));
      objCriteria.setMaxResults(queryStrideSize);
      if (partNumberMarker != null) {
        objCriteria.add(Restrictions.gt("partNumber",partNumberMarker));
      }
      List<ObjectEntity> objectInfos=null;
      int resultKeyCount=0;
      String[] parts=null;
      int pages=0;
      do {
        parts=null;
        objCriteria.setFirstResult(pages++ * queryStrideSize);
        objectInfos=(List<ObjectEntity>)objCriteria.list();
        if (objectInfos == null) {
          break;
        }
        for (        ObjectEntity objectRecord : objectInfos) {
          if (resultKeyCount == maxParts) {
            result.setIsTruncated(true);
            resultKeyCount++;
            break;
          }
          result.entityList.add(objectRecord);
          result.lastEntry=objectRecord;
          resultKeyCount++;
        }
        if (resultKeyCount <= maxParts && objectInfos.size() <= maxParts) {
          break;
        }
      }
 while (resultKeyCount <= maxParts);
    }
 else {
      throw new IllegalArgumentException("MaxKeys must be positive integer");
    }
    return result;
  }
 catch (  Exception e) {
    LOG.error("Error generating paginated parts list for upload ID " + uploadId,e);
    throw e;
  }
 finally {
    db.rollback();
  }
}
