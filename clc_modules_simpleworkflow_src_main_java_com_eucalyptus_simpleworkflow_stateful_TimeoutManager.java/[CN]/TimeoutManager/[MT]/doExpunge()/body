{
  try {
    for (    final WorkflowExecution workflowExecution : workflowExecutions.listRetentionExpired(System.currentTimeMillis(),Functions.<WorkflowExecution>identity())) {
      logger.debug("Removing workflow execution with expired retention period: " + workflowExecution.getDisplayName() + "/"+ workflowExecution.getWorkflowId());
      workflowExecutions.deleteByExample(workflowExecution);
    }
  }
 catch (  final SwfMetadataException e) {
    logger.error("Error processing workflow execution retention expiry",e);
  }
  try {
    for (    final ActivityType activityType : activityTypes.listDeprecatedExpired(System.currentTimeMillis(),Functions.<ActivityType>identity())) {
      logger.debug("Removing expired deprecated activity type: " + activityType.getDisplayName() + "/"+ activityType.getActivityVersion());
      activityTypes.deleteByExample(activityType);
    }
  }
 catch (  final SwfMetadataException e) {
    logger.error("Error processing deprecated activity type expiry",e);
  }
  try {
    for (    final WorkflowType workflowType : workflowTypes.listDeprecatedExpired(System.currentTimeMillis(),Functions.<WorkflowType>identity())) {
      logger.debug("Removing expired deprecated workflow type: " + workflowType.getDisplayName() + "/"+ workflowType.getWorkflowVersion());
      workflowTypes.deleteByExample(workflowType);
    }
  }
 catch (  final SwfMetadataException e) {
    logger.error("Error processing deprecated workflow type expiry",e);
  }
  try {
    for (    final Domain domain : domains.listDeprecatedExpired(System.currentTimeMillis(),Functions.<Domain>identity())) {
      logger.debug("Removing domain with expired retention period: " + domain.getDisplayName());
      domains.deleteByExample(domain);
    }
  }
 catch (  final SwfMetadataException e) {
    logger.error("Error processing domain retention expiry",e);
  }
}
