def __init__(self, host, username='root', password=None, keypair=None, keypath=None, proxy=None, proxy_username='root', proxy_password=None, proxy_keyname=None, proxy_keypath=None, priv_key_file=None, use_pub_keys=True, enable_ipv6_dns=False, timeout=60, retry=1, debugmethod=None, verbose=False, debug_connect=False):
    '\n\n\n        :param host: -mandatory - string, hostname or ip address to establish ssh connection to\n        :param username: - optional - string, username used to establish ssh session when keypath is not provided\n        :param password: - optional - string, password used to establish ssh session when keypath is not provided\n        :param keypair: - optional - boto keypair object, used to attept to derive local path to ssh key if present\n        :param keypath:  - optional - string, path to ssh key\n        :param proxy: - optional - host to proxy ssh connection through\n        :param proxy_username:  - optional ssh username of proxy host for authentication\n        :param proxy_password: - optional ssh password of proxy host for authentication\n        :param proxy_keypath: - optional path to ssh key to use for proxy authentication\n        :param proxy_keyname: - optional keyname for proxy authentication, will attempt to derive keypath from this\n        :param enable_ipv6_dns: - optional - boolean to allow ipv6 dns hostname resolution\n        :param timeout: - optional - integer, tcp timeout in seconds\n        :param retry: - optional - integer, # of attempts made to establish ssh session without auth failures\n        :param debugmethod: - method, used to handle debug msgs\n        :param verbose: - optional - boolean to flag debug output on or off mainly for cmd execution\n        :param debug_connect: - optional - boolean to flag debug output on or off for connection related operations\n        '
    self.host = host
    self.username = username
    self.password = password
    self.keypair = keypair
    self.keypath = keypath
    self.proxy = proxy
    self.proxy_username = proxy_username
    self.proxy_password = proxy_password
    self.proxy_keyname = proxy_keyname
    self.proxy_keypath = proxy_keypath
    self.use_pub_keys = use_pub_keys
    self.enable_ipv6_dns = enable_ipv6_dns
    self.timeout = timeout
    self.retry = retry
    self.debugmethod = debugmethod
    self.verbose = verbose
    self.priv_key_file = priv_key_file
    self.debug_connect = debug_connect
    self.lastcmd = ''
    self.lastexitcode = SshConnection.cmd_not_executed_code
    if (self.keypair is not None):
        self.keypath = (((os.getcwd() + '/') + self.keypair.name) + '.pem')
    if (self.keypath is not None):
        self.debug(((((('SSH connection has hostname:' + str(self.host)) + ' user:') + str(self.username)) + ' and keypath: ') + str(self.keypath)))
    else:
        self.debug(((((('SSH connection has hostname:' + str(self.host)) + ' user:') + str(self.username)) + ' password:') + str(self.mask_password(password))))
    if proxy:
        if (self.proxy_keyname is not None):
            self.proxy_keypath = (((os.getcwd() + '/') + self.proxy_keyname) + '.pem')
        if (self.proxy_keypath is not None):
            self.debug(((((('SSH proxy has hostname:' + str(self.proxy)) + ' user:') + str(self.proxy_username)) + ' and keypath: ') + str(self.proxy_keypath)))
        else:
            self.debug(((((('SSH proxy has hostname:' + str(self.proxy)) + ' user:') + str(proxy_username)) + ' password:') + str(self.mask_password(proxy_password))))
    if (self.use_pub_keys or (self.keypath is not None) or ((self.username is not None) and (self.password is not None))):
        self.connection = self.get_ssh_connection(self.host, username=self.username, password=self.password, keypath=self.keypath, proxy_username=self.proxy_username, proxy_password=self.proxy_password, proxy_keypath=self.proxy_keypath, enable_ipv6_dns=self.enable_ipv6_dns, timeout=self.timeout, retry=self.retry, verbose=self.debug_connect)
    else:
        raise Exception('Need either a keypath or username+password to create ssh connection')
