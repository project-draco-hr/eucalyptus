{
  if (!ReportingService.DATA_COLLECTION_ENABLED) {
    ReportingService.faultDisableReportingServiceIfNecessary();
    LOG.trace("Reporting service data collection disabled....VolumeEvent discarded");
    return;
  }
  Preconditions.checkNotNull(event,"Event is required");
  final long timeInMs=getCurrentTimeMillis();
  try {
    getReportingAccountCrud().createOrUpdateAccount(event.getAccountNumber(),lookupAccountAliasById(event.getAccountNumber()));
    getReportingUserCrud().createOrUpdateUser(event.getUserId(),event.getAccountNumber(),event.getUserName());
    final ReportingVolumeEventStore eventStore=getReportingVolumeEventStore();
switch (event.getActionInfo().getAction()) {
case VOLUMECREATE:
      eventStore.insertCreateEvent(event.getUuid(),event.getVolumeId(),timeInMs,event.getUserId(),event.getAvailabilityZone(),event.getSizeGB());
    break;
case VOLUMEDELETE:
  eventStore.insertDeleteEvent(event.getUuid(),timeInMs);
break;
case VOLUMEATTACH:
eventStore.insertAttachEvent(event.getUuid(),((EventActionInfo.InstanceEventActionInfo<VolumeAction>)event.getActionInfo()).getInstanceUuid(),event.getSizeGB(),timeInMs);
break;
case VOLUMEDETACH:
eventStore.insertDetachEvent(event.getUuid(),((InstanceEventActionInfo)event.getActionInfo()).getInstanceUuid(),timeInMs);
break;
}
}
 catch (AuthException e) {
LOG.error("Unable to fire volume reporting event.",e.getCause());
}
}
