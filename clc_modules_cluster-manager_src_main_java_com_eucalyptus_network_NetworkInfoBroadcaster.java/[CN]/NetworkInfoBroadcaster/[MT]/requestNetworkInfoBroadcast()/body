{
  final long requestedTime=System.currentTimeMillis();
  final Callable<Void> broadcastRequest=new Callable<Void>(){
    @SuppressWarnings("unused") @Override public Void call() throws Exception {
      boolean shouldBroadcast=false;
      boolean shouldRetryWithDelay=false;
      try (final LockResource lock=LockResource.lock(lastBroadcastTimeLock)){
        final long currentTime=System.currentTimeMillis();
        final long lastBroadcast=lastBroadcastTime.get();
        if (requestedTime >= lastBroadcast && lastBroadcast + TimeUnit.SECONDS.toMillis(NetworkGroups.MIN_BROADCAST_INTERVAL) < currentTime && activeBroadcastSemaphore.availablePermits() > 0) {
          if (lastBroadcastTime.compareAndSet(lastBroadcast,currentTime)) {
            shouldBroadcast=true;
          }
 else {
            broadcastTask(this);
          }
        }
 else         if (requestedTime >= lastBroadcastTime.get()) {
          shouldRetryWithDelay=true;
        }
      }
       if (shouldBroadcast) {
        try {
          broadcastNetworkInfo();
        }
 catch (        Exception e) {
          logger.error("Error broadcasting network information",e);
        }
      }
 else       if (shouldRetryWithDelay) {
        Thread.sleep(100);
        broadcastTask(this);
      }
      return null;
    }
  }
;
  broadcastTask(broadcastRequest);
}
