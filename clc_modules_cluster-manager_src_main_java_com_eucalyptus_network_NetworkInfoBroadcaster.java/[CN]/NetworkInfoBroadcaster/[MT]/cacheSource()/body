{
  final Supplier<Iterable<VmInstanceNetworkView>> instanceSupplier=Suppliers.memoize(instanceCache);
  final Supplier<Iterable<NetworkGroupNetworkView>> securityGroupSupplier=Suppliers.memoize(securityGroupCache);
  final Supplier<Iterable<VpcNetworkView>> vpcSupplier=Suppliers.memoize(vpcCache);
  final Supplier<Iterable<SubnetNetworkView>> subnetSupplier=Suppliers.memoize(subnetCache);
  final Supplier<Iterable<DhcpOptionSetNetworkView>> dhcpOptionsSupplier=Suppliers.memoize(dhcpOptionsCache);
  final Supplier<Iterable<NetworkAclNetworkView>> networkAclSupplier=Suppliers.memoize(networkAclCache);
  final Supplier<Iterable<RouteTableNetworkView>> routeTableSupplier=Suppliers.memoize(routeTableCache);
  final Supplier<Iterable<InternetGatewayNetworkView>> internetGatewaySupplier=Suppliers.memoize(internetGatewayCache);
  final Supplier<Iterable<NetworkInterfaceNetworkView>> networkInterfaceSupplier=Suppliers.memoize(networkInterfaceCache);
  final Supplier<Iterable<NatGatewayNetworkView>> natGatewaySupplier=Suppliers.memoize(natGatewayCache);
  return new NetworkInfoSource(){
    @Override public Iterable<VmInstanceNetworkView> getInstances(){
      return instanceSupplier.get();
    }
    @Override public Iterable<NetworkGroupNetworkView> getSecurityGroups(){
      return securityGroupSupplier.get();
    }
    @Override public Iterable<VpcNetworkView> getVpcs(){
      return vpcSupplier.get();
    }
    @Override public Iterable<SubnetNetworkView> getSubnets(){
      return subnetSupplier.get();
    }
    @Override public Iterable<DhcpOptionSetNetworkView> getDhcpOptionSets(){
      return dhcpOptionsSupplier.get();
    }
    @Override public Iterable<NetworkAclNetworkView> getNetworkAcls(){
      return networkAclSupplier.get();
    }
    @Override public Iterable<RouteTableNetworkView> getRouteTables(){
      return routeTableSupplier.get();
    }
    @Override public Iterable<InternetGatewayNetworkView> getInternetGateways(){
      return internetGatewaySupplier.get();
    }
    @Override public Iterable<NetworkInterfaceNetworkView> getNetworkInterfaces(){
      return networkInterfaceSupplier.get();
    }
    @Override public Iterable<NatGatewayNetworkView> getNatGateways(){
      return natGatewaySupplier.get();
    }
    @Override public Map<String,Iterable<? extends VersionedNetworkView>> getView(){
      return ImmutableMap.<String,Iterable<? extends VersionedNetworkView>>builder().put("instance",getInstances()).put("security-group",getSecurityGroups()).put("vpc",getVpcs()).put("subnet",getSubnets()).put("dhcp-option-set",getDhcpOptionSets()).put("network-acl",getNetworkAcls()).put("route-table",getRouteTables()).put("internet-gateway",getInternetGateways()).put("network-interface",getNetworkInterfaces()).put("nat-gateway",getNatGateways()).build();
    }
  }
;
}
