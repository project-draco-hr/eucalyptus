{
  final List<LoadBalancerPolicyTypeDescription> requiredPolicyTypes=initialize40();
  final LoadBalancerPolicyTypeDescription sslNego=new LoadBalancerPolicyTypeDescription("SSLNegotiationPolicyType","Listener policy that defines the ciphers and protocols that will be accepted by the load balancer. This policy can be associated only with HTTPS/SSL listeners.");
  final List<LoadBalancerPolicyAttributeTypeDescription> sslNegoAttributeTypes=Lists.newArrayList(new LoadBalancerPolicyAttributeTypeDescription("Protocol-SSLv2","Boolean",Cardinality.ZERO_OR_ONE),new LoadBalancerPolicyAttributeTypeDescription("Protocol-TLSv1","Boolean",Cardinality.ZERO_OR_ONE),new LoadBalancerPolicyAttributeTypeDescription("Protocol-SSLv3","Boolean",Cardinality.ZERO_OR_ONE),new LoadBalancerPolicyAttributeTypeDescription("Protocol-TLSv1.1","Boolean",Cardinality.ZERO_OR_ONE,"A description for Protocol-TLSv1.1"),new LoadBalancerPolicyAttributeTypeDescription("Protocol-TLSv1.2","Boolean",Cardinality.ZERO_OR_ONE,"A description for Protocol-TLSv1.2"),new LoadBalancerPolicyAttributeTypeDescription("Reference-Security-Policy","String",Cardinality.ZERO_OR_ONE,"The value of this attribute is the name of our sample policy (referring to our sample policy"),new LoadBalancerPolicyAttributeTypeDescription("Server-Defined-Cipher-Order","Boolean",Cardinality.ZERO_OR_ONE,"The value true means the policy will follow the cipher order"));
  for (  final String name : cipherNamesIn42) {
    sslNegoAttributeTypes.add(new LoadBalancerPolicyAttributeTypeDescription(name,"Boolean",Cardinality.ZERO_OR_ONE,String.format("A description for %s",name)));
  }
  for (  final LoadBalancerPolicyAttributeTypeDescription attrType : sslNegoAttributeTypes) {
    sslNego.addPolicyAttributeTypeDescription(attrType);
  }
  requiredPolicyTypes.add(sslNego);
  requiredPolicyTypes.add(new LoadBalancerPolicyTypeDescription("BackendServerAuthenticationPolicyType","Policy that controls authentication to back-end server(s) and contains one or more policies, such as an instance of a PublicKeyPolicyType. This policy can be associated only with back-end servers that are using HTTPS/SSL.",Lists.newArrayList(new LoadBalancerPolicyAttributeTypeDescription("PublicKeyPolicyName","PolicyName",Cardinality.ONE_OR_MORE))));
  requiredPolicyTypes.add(new LoadBalancerPolicyTypeDescription("ProxyProtocolPolicyType","Policy that controls whether to include the IP address and port of the originating request for TCP messages. This policy operates on TCP/SSL listeners only",Lists.newArrayList(new LoadBalancerPolicyAttributeTypeDescription("ProxyProtocol","Boolean",Cardinality.ONE))));
  requiredPolicyTypes.add(new LoadBalancerPolicyTypeDescription("PublicKeyPolicyType","Policy containing a list of public keys to accept when authenticating the back-end server(s). This policy cannot be applied directly to back-end servers or listeners but must be part of a BackendServerAuthenticationPolicyType.",Lists.newArrayList(new LoadBalancerPolicyAttributeTypeDescription("PublicKey","String",Cardinality.ONE))));
  return requiredPolicyTypes;
}
