{
  try {
    final InputStream fileStream=new FileInputStream(pathToAttributeJson);
    final ObjectMapper objectMapper=new ObjectMapper();
    final SSLSecurityPolicy policy=objectMapper.readValue(fileStream,SSLSecurityPolicy.class);
    final PolicyDescription policyDesc=new PolicyDescription();
    final String policyName=policy.PolicyName;
    final String policyTypeName=policy.PolicyTypeName;
    if (policyName == null || policyTypeName == null)     throw new Exception("PolicyName and PolicyTypeName must not be null");
    policyDesc.setPolicyName(policyName);
    policyDesc.setPolicyTypeName(policyTypeName);
    final List<PolicyAttributeDescription> policyAttrs=Lists.newArrayList(Iterables.filter(Lists.transform(policy.PolicyAttributeDescriptions,new Function<AttributeNameValuePair,PolicyAttributeDescription>(){
      @Override public PolicyAttributeDescription apply(      AttributeNameValuePair arg0){
        if (arg0.AttributeName == null || arg0.AttributeValue == null)         return null;
        final PolicyAttributeDescription attr=new PolicyAttributeDescription();
        attr.setAttributeName(arg0.AttributeName);
        attr.setAttributeValue(arg0.AttributeValue);
        return attr;
      }
    }
),Predicates.notNull()));
    final PolicyAttributeDescriptions descs=new PolicyAttributeDescriptions();
    descs.setMember((ArrayList<PolicyAttributeDescription>)policyAttrs);
    policyDesc.setPolicyAttributeDescriptions(descs);
    return policyDesc;
  }
 catch (  final Exception ex) {
    LOG.warn(String.format("Unable to read ELB security policy file: %s",pathToAttributeJson),ex);
    return null;
  }
}
