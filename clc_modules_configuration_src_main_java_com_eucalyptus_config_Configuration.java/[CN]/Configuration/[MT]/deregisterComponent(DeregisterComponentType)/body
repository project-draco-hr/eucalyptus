{
  EntityWrapper<ComponentConfiguration> db=null;
  ComponentConfiguration componentConfig=null;
  try {
    db=Configuration.getEntityWrapper();
    ComponentConfiguration searchConfig=ConfigurationUtil.getConfigurationInstance(request);
    searchConfig.setName(request.getName());
    componentConfig=db.getUnique(searchConfig);
    db.delete(componentConfig);
    db.commit();
  }
 catch (  Exception e) {
    db.rollback();
    throw new EucalyptusCloudException("Failed to find configuration for " + request.getClass().getSimpleName() + " named "+ request.getName());
  }
  if (request instanceof DeregisterClusterType) {
    try {
      ConfigurationUtil.removeClusterCredentials(request.getName());
    }
 catch (    Exception e) {
      LOG.error("BUG: removed cluster but failed to remove the credentials.");
    }
    try {
      db=Configuration.getEntityWrapper();
      StorageControllerConfiguration searchConfig=new StorageControllerConfiguration();
      searchConfig.setName(request.getName());
      componentConfig=db.getUnique(searchConfig);
      db.delete(componentConfig);
      db.commit();
    }
 catch (    Exception e) {
      db.rollback();
    }
  }
  StopComponentEvent e=null;
  if (Component.walrus.equals(componentConfig.getComponent()) && (Component.walrus.isLocal() || NetworkUtil.testLocal(componentConfig.getHostName()))) {
    e=StopComponentEvent.getLocal(componentConfig.getComponent());
  }
 else   if (Component.storage.equals(componentConfig.getComponent()) && (Component.storage.isLocal() || NetworkUtil.testLocal(componentConfig.getHostName()))) {
    e=StopComponentEvent.getLocal(componentConfig.getComponent());
  }
 else {
    e=StopComponentEvent.getRemote(componentConfig);
  }
  try {
    ListenerRegistry.getInstance().fireEvent(componentConfig.getComponent(),e);
  }
 catch (  EventVetoedException e1) {
    throw new EucalyptusCloudException(e1.getMessage(),e1);
  }
  DeregisterComponentResponseType reply=(DeregisterComponentResponseType)request.getReply();
  reply.set_return(true);
  return reply;
}
