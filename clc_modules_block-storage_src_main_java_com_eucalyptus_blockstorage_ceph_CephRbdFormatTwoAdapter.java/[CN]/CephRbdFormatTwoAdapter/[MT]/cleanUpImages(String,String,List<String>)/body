{
  LOG.debug("Clean up ceph-rbd images poolName=" + poolName + ", prefix="+ imagePrefix);
  executeRbdOpInPool(new Function<CephRbdConnectionManager,String>(){
    @Override public String apply(    CephRbdConnectionManager arg0){
      try {
        LOG.trace("Listing images in pool=" + poolName);
        List<String> imageNames=Arrays.asList(arg0.getRbd().list());
        for (        String imageName : imageNames) {
          if (imageName.startsWith(imagePrefix) || (toBeDeleted != null && toBeDeleted.contains(imageName))) {
            LOG.debug("Image=" + imageName + ", pool="+ poolName+ " marked for deletion, trying to clean it up");
            RbdImage image=null;
            try {
              LOG.trace("Opening image=" + imageName + ", pool="+ arg0.getPool()+ ", mode=read-write");
              image=arg0.getRbd().open(imageName);
              boolean canBeDeleted=true;
              List<String> snapChildren=null;
              LOG.trace("Listing snapshots of image=" + imageName + ", pool="+ arg0.getPool());
              List<RbdSnapInfo> snapList=image.snapList();
              if (snapList != null && !snapList.isEmpty()) {
                for (                RbdSnapInfo snap : snapList) {
                  LOG.trace("Listing clones of snapshot=" + snap.name + ", image="+ imageName+ ", pool="+ arg0.getPool());
                  if ((snapChildren=image.listChildren(snap.name)) != null && !snapChildren.isEmpty()) {
                    LOG.trace("Found clones of snapshot=" + snap.name + ": "+ snapChildren);
                    canBeDeleted=false;
                    break;
                  }
 else {
                    LOG.trace("No clones found for snapshot=" + snap.name);
                    if (image.snapIsProtected(snap.name)) {
                      LOG.trace("Unprotecting snapshot=" + snap.name + ", image="+ imageName+ ", pool="+ arg0.getPool());
                      image.snapUnprotect(snap.name);
                    }
                    LOG.debug("Removing snapshot=" + snap.name + ", image="+ imageName+ ", pool="+ arg0.getPool());
                    image.snapRemove(snap.name);
                    continue;
                  }
                }
              }
 else {
              }
              if (canBeDeleted) {
                arg0.getRbd().close(image);
                image=null;
                LOG.debug("Deleting image=" + imageName + ", pool="+ arg0.getPool());
                arg0.getRbd().remove(imageName);
              }
 else {
                if (!imageName.startsWith(imagePrefix)) {
                  String newImageName=imagePrefix + imageName;
                  LOG.debug("Cannot delete image as it may be associated with other images by a parent-child relationship. Renaming for future delete attempts currentImageName=" + imageName + ", newImageName="+ newImageName+ ", poolName="+ poolName);
                  arg0.getRbd().rename(imageName,newImageName);
                }
 else {
                  LOG.debug("Cannot delete image " + imageName + " in pool "+ poolName+ " as it may be associated with other images by a parent-child relationship. Will retry later");
                }
              }
            }
 catch (            RbdException e) {
              LOG.warn("Caught error while checking or deleting image " + imageName + " in pool "+ poolName+ ": "+ e.getMessage());
            }
 finally {
              if (image != null) {
                try {
                  LOG.trace("Closing image=" + imageName + ", pool="+ arg0.getPool());
                  arg0.getRbd().close(image);
                }
 catch (                Exception e) {
                  LOG.debug("Caught exception in image deletion while closing the image " + imageName,e);
                }
              }
            }
          }
 else {
          }
        }
        return null;
      }
 catch (      RbdException e) {
        LOG.warn("Caught error while listing or deleting images in pool " + poolName + ": "+ e.getMessage());
        throw new EucalyptusCephException("Failed to delete images in pool " + poolName,e);
      }
    }
  }
,poolName);
}
