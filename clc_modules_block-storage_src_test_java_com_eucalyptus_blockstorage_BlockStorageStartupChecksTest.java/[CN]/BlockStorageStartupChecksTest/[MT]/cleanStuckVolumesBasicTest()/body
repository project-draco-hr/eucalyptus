{
  VolumeInfo good=new VolumeInfo();
  good.setStatus(StorageProperties.Status.available.toString());
  good.setSize(new Integer(1));
  good.setUserName("unittestuser0");
  good.setVolumeId("vol-0000");
  good.setSnapshotId("snap-0000");
  good.setCreateTime(new Date());
  good.setZone("eucalyptus");
  VolumeInfo failOne=new VolumeInfo();
  failOne.setStatus(StorageProperties.Status.creating.toString());
  failOne.setSize(new Integer(1));
  failOne.setUserName("unittestuser0");
  failOne.setVolumeId("vol-0001");
  failOne.setSnapshotId("snap-0001");
  failOne.setCreateTime(new Date());
  failOne.setZone("eucalyptus");
  VolumeInfo failTwo=new VolumeInfo();
  failTwo.setStatus(StorageProperties.Status.failed.toString());
  failTwo.setSize(new Integer(1));
  failTwo.setUserName("unittestuser0");
  failTwo.setVolumeId("vol-0002");
  failTwo.setSnapshotId("snap-0002");
  failTwo.setCreateTime(new Date());
  failTwo.setZone("eucalyptus");
  try (TransactionResource tran=Entities.transactionFor(VolumeInfo.class)){
    good=Entities.persist(good);
    failOne=Entities.persist(failOne);
    failTwo=Entities.persist(failTwo);
    tran.commit();
  }
   BlockStorageController.updateStuckVolumes();
  List<VolumeInfo> remaining;
  try (TransactionResource tran=Entities.transactionFor(VolumeInfo.class)){
    VolumeInfo example=new VolumeInfo();
    example.setStatus(StorageProperties.Status.failed.toString());
    remaining=Entities.query(example);
    tran.commit();
  }
   assertTrue("expected to have a result set querying the eucalyptus_storage persistence context",remaining != null);
  assertTrue("expected 2 VolumeInfos to still exist, but " + remaining.size() + " exist",remaining.size() == 2);
}
