{
  List<LoadBalancerServoInstance> outOfService=null;
  final EntityTransaction db=Entities.get(LoadBalancerServoInstance.class);
  try {
    LoadBalancerServoInstance sample=LoadBalancerServoInstance.withState(LoadBalancerServoInstance.STATE.OutOfService.name());
    outOfService=Entities.query(sample);
    db.commit();
  }
 catch (  NoSuchElementException ex) {
    db.rollback();
  }
catch (  Exception ex) {
    db.rollback();
    LOG.warn("failed to query loadbalancer servo instance",ex);
  }
  if (outOfService == null || outOfService.size() <= 0)   return;
  final List<String> param=Lists.newArrayList();
  final Map<String,String> latestState=Maps.newHashMap();
  for (  final LoadBalancerServoInstance instance : outOfService) {
    String instanceId=instance.getInstanceId();
    if (instanceId == null)     continue;
    param.clear();
    param.add(instanceId);
    String instanceState=null;
    try {
      final List<RunningInstancesItemType> result=EucalyptusActivityTasks.getInstance().describeSystemInstances(param);
      if (result.isEmpty())       instanceState="terminated";
 else       instanceState=result.get(0).getStateName();
    }
 catch (    final Exception ex) {
      LOG.warn("failed to query instances",ex);
      continue;
    }
    latestState.put(instanceId,instanceState);
  }
  for (  String instanceId : latestState.keySet()) {
    String state=latestState.get(instanceId);
    if (state.equals("terminated")) {
      final EntityTransaction db2=Entities.get(LoadBalancerServoInstance.class);
      try {
        LoadBalancerServoInstance toDelete=Entities.uniqueResult(LoadBalancerServoInstance.named(instanceId));
        Entities.delete(toDelete);
        db2.commit();
      }
 catch (      Exception ex) {
        db2.rollback();
      }
    }
  }
}
