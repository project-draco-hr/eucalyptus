{
  Logs.extreme().error(reply);
  try {
    this.token.redeem();
  }
 catch (  Exception ex) {
    LOG.error(ex);
    Logs.extreme().error(ex,ex);
  }
  Function<VmInfo,Boolean> updateInstance=new Function<VmInfo,Boolean>(){
    @Override public Boolean apply(    final VmInfo input){
      final VmInstance vm=VmInstances.lookup(input.getInstanceId());
      vm.updateAddresses(input.getNetParams().getIpAddress(),input.getNetParams().getIgnoredPublicIp());
      final ServiceConfiguration ccConfig=Topology.lookup(ClusterController.class,vm.lookupPartition());
      final Address addr=VmRunCallback.this.token.getAddress();
      if (addr != null) {
        try {
          AsyncRequests.newRequest(addr.assign(vm).getCallback()).then(new Callback.Success<BaseMessage>(){
            @Override public void fire(            final BaseMessage response){
              vm.updateAddresses(addr.getInstanceAddress(),addr.getName());
            }
          }
).sendSync(ccConfig);
        }
 catch (        InterruptedException ex) {
          Exceptions.maybeInterrupted(ex);
          Addresses.release(addr);
        }
catch (        Exception ex) {
          LOG.error(ex);
          Logs.extreme().error(ex,ex);
          Addresses.release(addr);
        }
      }
      return true;
    }
  }
;
  for (  final VmInfo vmInfo : reply.getVms()) {
    if (vmInfo.equals(this.token.getInstanceId())) {
      try {
        Entities.asTransaction(VmInstance.class,updateInstance,10).apply(vmInfo);
        break;
      }
 catch (      RuntimeException ex) {
        LOG.error("Failed: " + this.token + " because of "+ ex.getMessage(),ex);
        throw ex;
      }
    }
    throw new EucalyptusClusterException("ccRunInstancesResponse: does not contain requested instance information for: " + this.token.getInstanceId() + " but return status is "+ reply.get_return()+ "\nccRunInstancesResponse:vms="+ reply.getVms());
  }
}
