{
  Logs.extreme().error(reply);
  try {
    this.token.redeem();
  }
 catch (  Exception ex) {
    LOG.error(ex);
    Logs.extreme().error(ex,ex);
  }
  Function<VmInfo,Boolean> updateInstance=new Function<VmInfo,Boolean>(){
    @Override public Boolean apply(    final VmInfo input){
      final VmInstance vm=VmInstances.lookup(input.getInstanceId());
      vm.updateAddresses(input.getNetParams().getIpAddress(),input.getNetParams().getIgnoredPublicIp());
      if (VmRunCallback.this.token.getRootVolume() != null) {
        try {
          String volumeId=VmRunCallback.this.token.getRootVolume().getDisplayName();
          VmVolumeAttachment volumeAttachment=vm.lookupVolumeAttachment(volumeId);
          ServiceConfiguration scConfig=Topology.lookup(ClusterController.class,vm.lookupPartition());
          Cluster cluster=Clusters.lookup(Topology.lookup(ClusterController.class,vm.lookupPartition()));
          String iqn=cluster.getNode(vm.getServiceTag()).getIqn();
          final AttachStorageVolumeType attachMsg=new AttachStorageVolumeType(iqn,volumeId);
          final AttachStorageVolumeResponseType scReply=AsyncRequests.sendSync(scConfig,attachMsg);
          volumeAttachment.setRemoteDevice(scReply.getRemoteDeviceString());
        }
 catch (        Exception ex) {
          LOG.error(ex);
          Logs.extreme().error(ex,ex);
        }
      }
      final Address addr=VmRunCallback.this.token.getAddress();
      if (addr != null) {
        try {
          AsyncRequests.newRequest(addr.assign(vm).getCallback()).then(new Callback.Success<BaseMessage>(){
            @Override public void fire(            final BaseMessage response){
              vm.updateAddresses(addr.getInstanceAddress(),addr.getName());
            }
          }
).dispatch(vm.getPartition());
        }
 catch (        Exception ex) {
          LOG.error(ex);
          Logs.extreme().error(ex,ex);
          Addresses.release(addr);
        }
      }
      return true;
    }
  }
;
  for (  final VmInfo vmInfo : reply.getVms()) {
    if (this.token.getInstanceId().equals(vmInfo.getInstanceId())) {
      try {
        Entities.asTransaction(VmInstance.class,updateInstance,10).apply(vmInfo);
        break;
      }
 catch (      RuntimeException ex) {
        LOG.error("Failed: " + this.token + " because of "+ ex.getMessage(),ex);
        throw ex;
      }
    }
    throw new EucalyptusClusterException("ccRunInstancesResponse: does not contain requested instance information for: " + this.token.getInstanceId() + " but return status is "+ reply.get_return()+ "\nccRunInstancesResponse:vms="+ reply.getVms());
  }
}
