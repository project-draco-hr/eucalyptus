{
  Logs.extreme().error(reply);
  try {
    this.token.redeem();
  }
 catch (  Exception ex) {
    LOG.error(this.token + ": " + ex);
    Logs.extreme().error(this.token + ": " + ex,ex);
  }
  final Function<VmInfo,Boolean> updateInstance=new Function<VmInfo,Boolean>(){
    @Override public Boolean apply(    final VmInfo input){
      final VmInstance vm=VmInstances.lookup(input.getInstanceId());
      try {
        VmInstances.setServiceTag(vm,input.getServiceTag());
      }
 catch (      Exception ex) {
        LOG.error(VmRunCallback.this.token + ": " + ex);
        Logs.extreme().error(VmRunCallback.this.token + ": " + ex,ex);
      }
      NetworkGroups.flushRules();
      return true;
    }
  }
;
  for (  final VmInfo vmInfo : reply.getVms()) {
    if (this.token.getInstanceId().equals(vmInfo.getInstanceId())) {
      try {
        Entities.asTransaction(VmInstance.class,updateInstance,10).apply(vmInfo);
        break;
      }
 catch (      RuntimeException ex) {
        LOG.error("Failed: " + this.token + " because of "+ ex.getMessage(),ex);
        throw ex;
      }
    }
    throw new EucalyptusClusterException("ccRunInstancesResponse: does not contain requested instance information for: " + this.token.getInstanceId() + " but return status is "+ reply.get_return()+ "\nccRunInstancesResponse:vms="+ reply.getVms());
  }
}
