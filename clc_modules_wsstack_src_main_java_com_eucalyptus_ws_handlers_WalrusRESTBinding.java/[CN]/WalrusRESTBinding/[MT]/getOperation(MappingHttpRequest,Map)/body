{
  String[] target=null;
  String path=getOperationPath(httpRequest);
  boolean walrusInternalOperation=false;
  String targetHost=httpRequest.getHeader(HttpHeaders.Names.HOST);
  if (targetHost.contains(".walrus")) {
    String bucket=targetHost.substring(0,targetHost.indexOf(".walrus"));
    path+=bucket + "/";
  }
  if (path.length() > 0) {
    target=getTarget(path);
  }
  String verb=httpRequest.getMethod().getName();
  String operationKey="";
  Map<String,String> params=httpRequest.getParameters();
  String operationName=null;
  long contentLength=0;
  String contentLengthString=httpRequest.getHeader(WalrusProperties.CONTENT_LEN);
  if (contentLengthString != null) {
    contentLength=Long.parseLong(contentLengthString);
  }
  if (httpRequest.containsHeader(StorageProperties.EUCALYPTUS_OPERATION)) {
    String value=httpRequest.getHeader(StorageProperties.EUCALYPTUS_OPERATION);
    for (    WalrusProperties.WalrusInternalOperations operation : WalrusProperties.WalrusInternalOperations.values()) {
      if (value.toLowerCase().equals(operation.toString().toLowerCase())) {
        operationName=operation.toString();
        walrusInternalOperation=true;
        break;
      }
    }
    if (!walrusInternalOperation) {
      for (      WalrusProperties.StorageOperations operation : WalrusProperties.StorageOperations.values()) {
        if (value.toLowerCase().equals(operation.toString().toLowerCase())) {
          operationName=operation.toString();
          walrusInternalOperation=true;
          if (httpRequest.containsHeader(StorageProperties.StorageParameters.EucaSnapSize.toString())) {
            operationParams.put("SnapshotSize",httpRequest.getAndRemoveHeader(StorageProperties.StorageParameters.EucaSnapSize.toString()));
          }
          break;
        }
      }
    }
  }
  if (target == null) {
    operationKey=SERVICE + verb;
  }
 else   if (target.length < 2) {
    if (!target[0].equals("")) {
      operationKey=BUCKET + verb;
      operationParams.put("Bucket",target[0]);
      if (verb.equals(WalrusProperties.HTTPVerb.POST.toString())) {
        Map formFields=httpRequest.getFormFields();
        String objectKey=null;
        String file=(String)formFields.get(WalrusProperties.FormField.file.toString());
        String authenticationHeader="";
        if (formFields.containsKey(WalrusProperties.FormField.key.toString())) {
          objectKey=(String)formFields.get(WalrusProperties.FormField.key.toString());
          objectKey=objectKey.replaceAll("\\$\\{filename\\}",file);
          operationParams.put("Key",objectKey);
        }
        if (formFields.containsKey(WalrusProperties.FormField.acl.toString())) {
          String acl=(String)formFields.get(WalrusProperties.FormField.acl.toString());
          httpRequest.addHeader(WalrusProperties.AMZ_ACL,acl);
        }
        if (formFields.containsKey(WalrusProperties.FormField.success_action_redirect.toString())) {
          String successActionRedirect=(String)formFields.get(WalrusProperties.FormField.success_action_redirect.toString());
          operationParams.put("SuccessActionRedirect",successActionRedirect);
        }
        if (formFields.containsKey(WalrusProperties.FormField.success_action_status.toString())) {
          Integer successActionStatus=Integer.parseInt((String)formFields.get(WalrusProperties.FormField.success_action_status.toString()));
          if (successActionStatus == 200 || successActionStatus == 201)           operationParams.put("SuccessActionStatus",successActionStatus);
 else           operationParams.put("SuccessActionStatus",204);
        }
 else {
          operationParams.put("SuccessActionStatus",204);
        }
        if (formFields.containsKey(WalrusProperties.CONTENT_TYPE)) {
          operationParams.put("ContentType",formFields.get(WalrusProperties.CONTENT_TYPE));
        }
        String key=target[0] + "." + objectKey;
        String randomKey=key + "." + Hashes.getRandom(10);
        if (contentLengthString != null)         operationParams.put("ContentLength",(new Long(contentLength).toString()));
        operationParams.put(WalrusProperties.Headers.RandomKey.toString(),randomKey);
        putQueue=getWriteMessenger().interruptAllAndGetQueue(key,randomKey);
        handleFirstChunk(httpRequest,(ChannelBuffer)formFields.get(WalrusProperties.IGNORE_PREFIX + "FirstDataChunk"),contentLength);
      }
    }
 else {
      operationKey=SERVICE + verb;
    }
  }
 else {
    operationKey=OBJECT + verb;
    String objectKey="";
    String splitOn="";
    for (int i=1; i < target.length; ++i) {
      objectKey+=splitOn + target[i];
      splitOn="/";
    }
    operationParams.put("Bucket",target[0]);
    operationParams.put("Key",objectKey);
    if (!params.containsKey(WalrusProperties.OperationParameter.acl.toString())) {
      if (verb.equals(WalrusProperties.HTTPVerb.PUT.toString())) {
        if (httpRequest.containsHeader(WalrusProperties.COPY_SOURCE.toString())) {
          String copySource=httpRequest.getHeader(WalrusProperties.COPY_SOURCE.toString());
          String[] sourceTarget=getTarget(copySource);
          String sourceObjectKey="";
          String sourceSplitOn="";
          if (sourceTarget.length > 1) {
            for (int i=1; i < sourceTarget.length; ++i) {
              sourceObjectKey+=sourceSplitOn + sourceTarget[i];
              sourceSplitOn="/";
            }
            operationParams.put("SourceBucket",sourceTarget[0]);
            operationParams.put("SourceObject",sourceObjectKey);
            operationParams.put("DestinationBucket",operationParams.remove("Bucket"));
            operationParams.put("DestinationObject",operationParams.remove("Key"));
            String metaDataDirective=httpRequest.getHeader(WalrusProperties.METADATA_DIRECTIVE.toString());
            if (metaDataDirective != null) {
              operationParams.put("MetadataDirective",metaDataDirective);
            }
            AccessControlListType accessControlList;
            if (contentLength > 0) {
              accessControlList=null;
              accessControlList=getAccessControlList(httpRequest);
            }
 else {
              accessControlList=new AccessControlListType();
            }
            operationParams.put("AccessControlList",accessControlList);
            operationKey+=WalrusProperties.COPY_SOURCE.toString();
            Set<String> headerNames=httpRequest.getHeaderNames();
            for (            String key : headerNames) {
              for (              WalrusProperties.CopyHeaders header : WalrusProperties.CopyHeaders.values()) {
                if (key.replaceAll("-","").equals(header.toString().toLowerCase())) {
                  String value=httpRequest.getHeader(key);
                  parseExtendedHeaders(operationParams,header.toString(),value);
                }
              }
            }
          }
 else {
            throw new BindingException("Malformed COPY request");
          }
        }
 else {
          String key=target[0] + "." + objectKey;
          String randomKey=key + "." + Hashes.getRandom(10);
          String contentType=httpRequest.getHeader(WalrusProperties.CONTENT_TYPE);
          if (contentType != null)           operationParams.put("ContentType",contentType);
          String contentDisposition=httpRequest.getHeader("Content-Disposition");
          if (contentDisposition != null)           operationParams.put("ContentDisposition",contentDisposition);
          if (contentLengthString != null)           operationParams.put("ContentLength",(new Long(contentLength).toString()));
          operationParams.put(WalrusProperties.Headers.RandomKey.toString(),randomKey);
          putQueue=getWriteMessenger().interruptAllAndGetQueue(key,randomKey);
          handleFirstChunk(httpRequest,contentLength);
        }
      }
 else       if (verb.equals(WalrusProperties.HTTPVerb.GET.toString())) {
        if (!walrusInternalOperation) {
          if (params.containsKey("torrent")) {
            operationParams.put("GetTorrent",Boolean.TRUE);
          }
 else {
            operationParams.put("GetData",Boolean.TRUE);
            operationParams.put("InlineData",Boolean.FALSE);
            operationParams.put("GetMetaData",Boolean.TRUE);
          }
          Set<String> headerNames=httpRequest.getHeaderNames();
          boolean isExtendedGet=false;
          for (          String key : headerNames) {
            for (            WalrusProperties.ExtendedGetHeaders header : WalrusProperties.ExtendedGetHeaders.values()) {
              if (key.replaceAll("-","").equals(header.toString())) {
                String value=httpRequest.getHeader(key);
                isExtendedGet=true;
                parseExtendedHeaders(operationParams,header.toString(),value);
              }
            }
          }
          if (isExtendedGet) {
            operationKey+="extended";
            operationParams.put("ReturnCompleteObjectOnConditionFailure",Boolean.FALSE);
          }
        }
        if (params.containsKey(WalrusProperties.GetOptionalParameters.IsCompressed.toString())) {
          Boolean isCompressed=Boolean.parseBoolean(params.remove(WalrusProperties.GetOptionalParameters.IsCompressed.toString()));
          operationParams.put("IsCompressed",isCompressed);
        }
      }
 else       if (verb.equals(WalrusProperties.HTTPVerb.HEAD.toString())) {
        if (!walrusInternalOperation) {
          operationParams.put("GetData",Boolean.FALSE);
          operationParams.put("InlineData",Boolean.FALSE);
          operationParams.put("GetMetaData",Boolean.TRUE);
        }
      }
    }
  }
  if (verb.equals(WalrusProperties.HTTPVerb.PUT.toString()) && params.containsKey(WalrusProperties.OperationParameter.acl.toString())) {
    operationParams.put("AccessControlPolicy",getAccessControlPolicy(httpRequest));
  }
  ArrayList paramsToRemove=new ArrayList();
  boolean addMore=true;
  Iterator iterator=params.keySet().iterator();
  while (iterator.hasNext()) {
    Object key=iterator.next();
    String keyString=key.toString().toLowerCase();
    boolean dontIncludeParam=false;
    for (    WalrusAuthenticationHandler.SecurityParameter securityParam : WalrusAuthenticationHandler.SecurityParameter.values()) {
      if (keyString.equals(securityParam.toString().toLowerCase())) {
        dontIncludeParam=true;
        break;
      }
    }
    if (dontIncludeParam)     continue;
    String value=params.get(key);
    if (value != null) {
      String[] keyStringParts=keyString.split("-");
      if (keyStringParts.length > 1) {
        keyString="";
        for (int i=0; i < keyStringParts.length; ++i) {
          keyString+=toUpperFirst(keyStringParts[i]);
        }
      }
 else {
        keyString=toUpperFirst(keyString);
      }
      operationParams.put(keyString,value);
    }
    if (addMore) {
      operationKey+=keyString.toLowerCase();
      addMore=false;
    }
    paramsToRemove.add(key);
  }
  for (  Object key : paramsToRemove) {
    params.remove(key);
  }
  if (!walrusInternalOperation) {
    operationName=operationMap.get(operationKey);
  }
  if ("CreateBucket".equals(operationName)) {
    String locationConstraint=getLocationConstraint(httpRequest);
    if (locationConstraint != null)     operationParams.put("LocationConstraint",locationConstraint);
  }
  return operationName;
}
