{
  try {
    if (ImagingServiceLaunchers.getInstance().shouldEnable()) {
      ImagingServiceLaunchers.getInstance().enable();
      LOG.debug("Imaging service worker launched");
      return;
    }
  }
 catch (  Exception ex) {
    LOG.error("Failed to enable imaging service workers");
    return;
  }
  if (!ImagingServiceLaunchers.getInstance().isWorkedEnabled()) {
    LOG.warn("Imaging worker is not currently enabled");
    return;
  }
  for (  final ImagingTask task : tasks) {
    try {
      if (isExpired(task)) {
        try {
          ImagingTasks.transitState(task,ImportTaskState.NEW,ImportTaskState.CANCELLING,ImportTaskState.STATE_MSG_TASK_EXPIRED);
        }
 catch (        final Exception ex) {
          ;
        }
        continue;
      }
      if (task instanceof ImportVolumeImagingTask)       processNewImportVolumeImagingTask((ImportVolumeImagingTask)task);
 else       if (task instanceof ImportInstanceImagingTask)       processNewImportInstanceImagingTask((ImportInstanceImagingTask)task);
 else       if (task instanceof DiskImagingTask)       ImagingTasks.transitState(task,ImportTaskState.NEW,ImportTaskState.PENDING,"");
 else       throw new Exception("Invalid ImagingTask");
    }
 catch (    final Exception ex) {
      try {
        ImagingTasks.transitState(task,ImportTaskState.NEW,ImportTaskState.FAILED,ImportTaskState.STATE_MSG_FAILED_UNEXPECTED);
      }
 catch (      final Exception ex2) {
        ;
      }
      LOG.error("Failed to process new task",ex);
    }
  }
}
