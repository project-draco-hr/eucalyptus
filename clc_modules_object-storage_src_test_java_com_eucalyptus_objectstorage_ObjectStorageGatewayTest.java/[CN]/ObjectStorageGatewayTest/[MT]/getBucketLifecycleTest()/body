{
  final BucketLifecycleManager bucketLifecycleManagerMock=context.mock(BucketLifecycleManager.class);
  final BucketMetadataManager bucketManagerMock=context.mock(BucketMetadataManager.class);
  final RequestAuthorizationHandler requestAuthorizationHandlerMock=context.mock(RequestAuthorizationHandler.class);
  BucketLifecycleManagers.setInstance(bucketLifecycleManagerMock);
  BucketMetadataManagers.setInstance(bucketManagerMock);
  OsgAuthorizationHandler.setInstance(requestAuthorizationHandlerMock);
  final String bucketName="my-test-bucket";
  final Bucket bucket=new Bucket();
  bucket.setBucketName(bucketName);
  bucket.setState(BucketState.extant);
  final String fakeUuid="fakeuuid";
  bucket.withUuid(fakeUuid);
  final GetBucketLifecycleType request=new GetBucketLifecycleType();
  request.setBucket(bucketName);
  context.checking(new Expectations(){
{
      oneOf(bucketManagerMock).lookupExtantBucket(bucketName);
      will(returnValue(bucket));
      oneOf(requestAuthorizationHandlerMock).operationAllowed(request,bucket,null,0);
      will(returnValue(true));
      oneOf(bucketLifecycleManagerMock).getLifecycleRules(fakeUuid);
      will(returnValue(Collections.EMPTY_LIST));
    }
  }
);
  ObjectStorageGateway osg=new ObjectStorageGateway();
  GetBucketLifecycleResponseType response=osg.getBucketLifecycle(request);
  assertTrue("expected a response",response != null);
  assertTrue("expected response to contain an empty set of lifecycle rules",response.getLifecycleConfiguration().getRules().size() == 0);
}
