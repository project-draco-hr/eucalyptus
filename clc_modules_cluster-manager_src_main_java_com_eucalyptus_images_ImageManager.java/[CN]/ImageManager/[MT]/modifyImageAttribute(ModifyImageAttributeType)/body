{
  final ModifyImageAttributeResponseType reply=(ModifyImageAttributeResponseType)request.getReply();
  final EntityTransaction tx=Entities.get(ImageInfo.class);
  try {
    final ImageInfo imgInfo=Entities.uniqueResult(Images.exampleWithImageId(imageIdentifier(request.getImageId())));
    if (!canModifyImage(imgInfo)) {
      throw new EucalyptusCloudException("Not authorized to modify image attribute");
    }
switch (request.getImageAttribute()) {
case LaunchPermission:
      if (request.isAdd()) {
        imgInfo.addPermissions(verifyUserIds(request.getUserIds()));
        if (request.isGroupAll()) {
          imgInfo.setImagePublic(true);
        }
      }
 else {
        imgInfo.removePermissions(request.getUserIds());
        if (request.isGroupAll()) {
          imgInfo.setImagePublic(false);
        }
      }
    break;
case ProductCode:
  for (  String productCode : request.getProductCodes()) {
    imgInfo.addProductCode(productCode);
  }
break;
case Description:
imgInfo.setDescription(request.getDescription());
break;
}
tx.commit();
reply.set_return(true);
}
 catch (EucalyptusCloudException e) {
tx.rollback();
reply.set_return(false);
throw e;
}
catch (TransactionException|NoSuchElementException ex) {
tx.rollback();
throw new EucalyptusCloudException(ex);
}
return reply;
}
