{
  ModifyImageAttributeResponseType reply=(ModifyImageAttributeResponseType)request.getReply();
  final Context ctx=Contexts.lookup();
  final String requestAccountId=ctx.getUserFullName().getAccountNumber();
  final User requestUser=ctx.getUser();
  final String action=PolicySpec.requestToAction(request);
  EntityWrapper<ImageInfo> db=EntityWrapper.get(ImageInfo.class);
  ImageInfo imgInfo=null;
  try {
    String accountId=null;
    try {
      if (request.getQueryUserGroup().isEmpty() && request.getQueryUserId().isEmpty())       throw new EucalyptusCloudException("No AccountId provided");
      for (int i=0; i < request.getQueryUserId().size(); i++) {
        accountId=request.getQueryUserId().get(i);
        Accounts.lookupAccountById(accountId);
      }
    }
 catch (    AuthException e) {
      throw new EucalyptusCloudException("Not a valid AccountId : " + accountId);
    }
    imgInfo=db.getUnique(Images.exampleWithImageId(request.getImageId()));
    if (!ctx.hasAdministrativePrivileges() && (!imgInfo.getOwnerAccountNumber().equals(requestAccountId) || !RestrictedTypes.filterPrivileged().apply(imgInfo))) {
      throw new EucalyptusCloudException("Not authorized to modify image attribute");
    }
    for (    String productCode : request.getProductCodes()) {
      imgInfo.addProductCode(productCode);
    }
    if (request.getAttribute() != null) {
      if (ADD.equals(request.getOperationType())) {
        imgInfo.addPermissions(request.getQueryUserId());
        if (!request.getQueryUserGroup().isEmpty()) {
          imgInfo.setImagePublic(true);
        }
      }
 else {
        imgInfo.removePermissions(request.getQueryUserId());
        if (!request.getQueryUserGroup().isEmpty()) {
          imgInfo.setImagePublic(false);
        }
      }
    }
    db.commit();
    reply.set_return(true);
  }
 catch (  EucalyptusCloudException e) {
    db.rollback();
    reply.set_return(false);
    throw e;
  }
  return reply;
}
