{
  DescribeImagesResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final String requestAccountId=ctx.getUserFullName().getAccountNumber();
  final Set<String> imageSelectionSet=request.getImagesSet() != null ? new HashSet<String>(request.getImagesSet()) : new HashSet<String>();
  final Set<String> ownerSelectionSet=request.getOwnersSet() != null ? new HashSet<String>(request.getOwnersSet()) : new HashSet<String>();
  if (ownerSelectionSet.remove(SELF)) {
    ownerSelectionSet.add(requestAccountId);
  }
  final Set<String> exeBySelectionSet=request.getExecutableBySet() != null ? new HashSet<String>(request.getExecutableBySet()) : new HashSet<String>();
  final boolean exeByNonEmpty=exeBySelectionSet.size() > 0;
  final boolean exeByHasSelf=exeBySelectionSet.remove(SELF);
  final boolean exeByHasAll=exeBySelectionSet.remove(ALL);
  final Predicate<ImageInfo> imageFilter=new Predicate<ImageInfo>(){
    @Override public boolean apply(    ImageInfo image){
      if (imageSelectionSet.size() > 0 && !imageSelectionSet.contains(image.getDisplayName())) {
        return false;
      }
      if (!ctx.hasAdministrativePrivileges() && !image.isAllowed(requestAccountId)) {
        return false;
      }
      if (ownerSelectionSet.size() > 0 && !ownerSelectionSet.contains(image.getOwnerAccountNumber())) {
        return false;
      }
      if (exeByNonEmpty) {
        if (!((exeByHasAll && image.getImagePublic()) || (exeByHasSelf && (image.getOwner().isOwner(requestAccountId) || image.hasPermission(requestAccountId))) || (!exeBySelectionSet.isEmpty() && (image.getOwner().isOwner(requestAccountId) && image.hasPermission((String[])exeBySelectionSet.toArray()))))) {
          return false;
        }
      }
      return true;
    }
  }
;
  Predicate<ImageInfo> filter=Predicates.and(imageFilter,RestrictedTypes.filterPrivileged());
  List<ImageDetails> imageDetailsList=Transactions.filteredTransform(new ImageInfo(),filter,Images.TO_IMAGE_DETAILS);
  reply.getImagesSet().addAll(imageDetailsList);
  ImageUtil.cleanDeregistered();
  return reply;
}
