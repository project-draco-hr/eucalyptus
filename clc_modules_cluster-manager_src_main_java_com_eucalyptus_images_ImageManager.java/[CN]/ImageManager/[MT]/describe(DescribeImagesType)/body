{
  DescribeImagesResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final String requestAccountId=ctx.getUserFullName().getAccountNumber();
  final Set<String> imageSelectionSet=request.getImagesSet() != null ? new HashSet<String>(request.getImagesSet()) : new HashSet<String>();
  final Set<String> ownerSelectionSet=request.getOwnersSet() != null ? new HashSet<String>(request.getOwnersSet()) : new HashSet<String>();
  if (ownerSelectionSet.remove(SELF)) {
    ownerSelectionSet.add(requestAccountId);
  }
  final Set<String> exeBySelectionSet=request.getExecutableBySet() != null ? new HashSet<String>(request.getExecutableBySet()) : new HashSet<String>();
  final boolean exeByNonEmpty=exeBySelectionSet.size() > 0;
  final boolean exeByHasSelf=exeBySelectionSet.remove(SELF);
  final boolean exeByHasAll=exeBySelectionSet.remove(ALL);
  final Predicate<ImageInfo> imageFilter=new Predicate<ImageInfo>(){
    /** 
 * @param t
 * @param accountIds
 * @return true if image t has launch permission for any of the account in accountIds
 */
    private boolean allowsAny(    ImageInfo t,    Set<String> accountIds){
      final Set<LaunchPermission> permissions=t.getPermissions();
      for (      String aid : accountIds) {
        if (permissions.contains(new LaunchPermission(t,aid))) {
          return true;
        }
      }
      return false;
    }
    @Override public boolean apply(    ImageInfo t){
      if (imageSelectionSet.size() > 0 && !imageSelectionSet.contains(t.getDisplayName())) {
        return false;
      }
      if (!ctx.hasAdministrativePrivileges() && !t.checkPermissionForTx(requestAccountId)) {
        return false;
      }
      if (ownerSelectionSet.size() > 0 && !ownerSelectionSet.contains(t.getOwnerAccountId())) {
        return false;
      }
      if (exeByNonEmpty) {
        if (!((exeByHasAll && t.getImagePublic()) || (exeByHasSelf && !t.getImagePublic()) || (exeBySelectionSet.size() > 0 && t.getOwnerAccountId().equals(requestAccountId) && allowsAny(t,exeBySelectionSet)))) {
          return false;
        }
      }
      if (!Lookups.checkPrivilege(request,PolicySpec.VENDOR_EC2,PolicySpec.EC2_RESOURCE_IMAGE,t.getDisplayName(),t.getOwner())) {
        return false;
      }
      return true;
    }
  }
;
  List<ImageDetails> imageDetailsList=Transactions.filteredTransform(new ImageInfo(),imageFilter,Images.TO_IMAGE_DETAILS);
  reply.getImagesSet().addAll(imageDetailsList);
  ImageUtil.cleanDeregistered();
  return reply;
}
