{
  DescribeImagesResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final String requestAccountId=ctx.getUserFullName().getAccountNumber();
  final List<String> ownersSet=request.getOwnersSet();
  if (ownersSet.remove(Images.SELF)) {
    ownersSet.add(requestAccountId);
  }
  Predicate<ImageInfo> privilegesFilter=Predicates.or(Images.FilterPermissions.INSTANCE,CloudMetadatas.filterPrivilegesById(request.getImagesSet()));
  Predicate<ImageInfo> requestFilter=Predicates.or(privilegesFilter,CloudMetadatas.filterPrivilegesByOwningAccount(ownersSet));
  Predicate<ImageInfo> filter=Predicates.and(requestFilter,Images.filterExecutableBy(ownersSet));
  List<ImageDetails> imageDetailsList=Transactions.filteredTransform(new ImageInfo(),filter,Images.TO_IMAGE_DETAILS);
  reply.getImagesSet().addAll(imageDetailsList);
  ImageUtil.cleanDeregistered();
  return reply;
}
