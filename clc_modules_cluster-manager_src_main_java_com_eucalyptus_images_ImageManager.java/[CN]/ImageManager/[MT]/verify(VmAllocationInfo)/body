{
  RunInstancesType msg=vmAllocInfo.getRequest();
  VmTypeInfo vmType=vmAllocInfo.getVmTypeInfo();
  ImageInfo searchDiskInfo=new ImageInfo(msg.getImageId());
  EntityWrapper<ImageInfo> db=new EntityWrapper<ImageInfo>();
  ImageInfo diskInfo=null;
  ArrayList<String> productCodes=Lists.newArrayList();
  try {
    diskInfo=db.getUnique(searchDiskInfo);
    for (    ProductCode p : diskInfo.getProductCodes()) {
      productCodes.add(p.getValue());
    }
  }
 catch (  EucalyptusCloudException e) {
    db.rollback();
    throw new EucalyptusCloudException("Failed to find disk image: " + msg.getImageId());
  }
  vmAllocInfo.setPlatform(diskInfo.getPlatform());
  UserInfo user=null;
  try {
    user=UserInfoStore.getUserInfo(new UserInfo(msg.getUserId()));
  }
 catch (  NoSuchUserException e1) {
    db.rollback();
    throw new EucalyptusCloudException("Can not find user info for this image.");
  }
  if (!diskInfo.isAllowed(user)) {
    db.rollback();
    throw new EucalyptusCloudException("You do not have permissions to run this image.");
  }
  if ("deregistered".equals(diskInfo.getImageState())) {
    db.delete(diskInfo);
    db.rollback();
    throw new EucalyptusCloudException("The requested image is deregistered.");
  }
  ImageInfo kernelInfo=null;
  ImageInfo ramdiskInfo=null;
  String defaultKernelId=null;
  String defaultRamdiskId=null;
  try {
    defaultKernelId=SystemConfiguration.getSystemConfiguration().getDefaultKernel();
    defaultRamdiskId=SystemConfiguration.getSystemConfiguration().getDefaultRamdisk();
  }
 catch (  Exception e1) {
  }
  String kernelId=ImageUtil.getImageInfobyId(msg.getKernelId(),diskInfo.getKernelId(),defaultKernelId);
  if (kernelId == null) {
    db.rollback();
    throw new EucalyptusCloudException("Unable to determine required kernel image.");
  }
  try {
    kernelInfo=db.getUnique(new ImageInfo(kernelId));
  }
 catch (  EucalyptusCloudException e) {
    db.rollback();
    throw new EucalyptusCloudException("Failed to find kernel image: " + kernelId);
  }
  if (!kernelInfo.isAllowed(user)) {
    db.rollback();
    throw new EucalyptusCloudException("You do not have permission to launch: " + kernelInfo.getImageId());
  }
  if (!"kernel".equals(kernelInfo.getImageType())) {
    db.rollback();
    throw new EucalyptusCloudException("Image specified is not a kernel: " + kernelInfo.toString());
  }
  boolean nord=(ImageUtil.isSet(msg.getKernelId()) && !ImageUtil.isSet(msg.getRamdiskId()));
  nord|=(!ImageUtil.isSet(msg.getKernelId()) && ImageUtil.isSet(diskInfo.getKernelId()) && !ImageUtil.isSet(diskInfo.getRamdiskId())&& !ImageUtil.isSet(msg.getRamdiskId()));
  String ramdiskId=nord ? null : ImageUtil.getImageInfobyId(msg.getRamdiskId(),diskInfo.getRamdiskId(),defaultRamdiskId);
  if (!diskInfo.isAllowed(user)) {
    db.rollback();
    throw new EucalyptusCloudException("You do not have permission to launch: " + diskInfo.getImageId());
  }
  if (ramdiskId != null) {
    try {
      ramdiskInfo=db.getUnique(new ImageInfo(ramdiskId));
    }
 catch (    EucalyptusCloudException e) {
      db.rollback();
      throw new EucalyptusCloudException("Failed to find ramdisk image: " + ramdiskId);
    }
    if (!ramdiskInfo.isAllowed(user)) {
      db.rollback();
      throw new EucalyptusCloudException("You do not have permission to launch: " + ramdiskInfo.getImageId());
    }
  }
  db.commit();
  if ((ramdiskInfo != null) && !"ramdisk".equals(ramdiskInfo.getImageType())) {
    throw new EucalyptusCloudException("Image specified is not a ramdisk: " + ramdiskInfo.toString());
  }
  ImageUtil.checkStoredImage(ramdiskInfo);
  ArrayList<String> ancestorIds=ImageUtil.getAncestors(msg.getUserId(),diskInfo.getImageLocation());
  Long imgSize=ImageUtil.getSize(msg.getUserId(),diskInfo.getImageLocation());
  if (imgSize > 1024l * 1024l * 1024l* vmType.getDisk()) {
    throw new EucalyptusCloudException("image too large [size=" + imgSize / (1024l * 1024l) + "MB] for instance type " + vmType.getName() + " [disk=" + vmType.getDisk() * 1024l + "MB]");
  }
  ImageUtil.checkStoredImage(kernelInfo);
  ImageUtil.checkStoredImage(diskInfo);
  VirtualBootRecord ref=null;
  vmType.setRoot(diskInfo.getImageId(),diskInfo.getImageLocation(),imgSize * 1024);
  if (kernelInfo != null) {
    vmType.setKernel(kernelInfo.getImageId(),kernelInfo.getImageLocation());
  }
  if (ramdiskInfo != null) {
    vmType.setRamdisk(ramdiskInfo.getImageId(),ramdiskInfo.getImageLocation());
  }
  return vmAllocInfo;
}
