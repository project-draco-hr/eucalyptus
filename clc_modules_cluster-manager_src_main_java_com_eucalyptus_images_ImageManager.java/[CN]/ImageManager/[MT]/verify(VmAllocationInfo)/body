{
  RunInstancesType msg=vmAllocInfo.getRequest();
  VmTypeInfo vmType=vmAllocInfo.getVmTypeInfo();
  String imageId=msg.getImageId();
  ImageInfo diskInfo=null;
  try {
    diskInfo=Authorizations.lookupPrivileged(ImageInfo.class,imageId,new ImageOwnerLookup(),new ResourceLookup<ImageInfo>(){
      @Override public ImageInfo resolve(      String name) throws ResourceLookupException {
        ImageInfo searchDiskInfo=new ImageInfo(name);
        EntityWrapper<ImageInfo> db=new EntityWrapper<ImageInfo>();
        ImageInfo image=null;
        try {
          image=db.getUnique(searchDiskInfo);
        }
 catch (        EucalyptusCloudException e) {
          db.rollback();
          throw new ResourceLookupException("Failed to find disk image: " + name);
        }
        if ("deregistered".equals(image.getImageState())) {
          db.delete(image);
          db.rollback();
          throw new ResourceLookupException("The requested image is deregistered.");
        }
        db.commit();
        return image;
      }
    }
);
  }
 catch (  ResourceLookupException e) {
    throw new EucalyptusCloudException(e);
  }
catch (  AuthException e) {
    throw new EucalyptusCloudException("Access to disk image " + imageId + " is denied.",e);
  }
  vmAllocInfo.setPlatform(diskInfo.getPlatform());
  ImageInfo kernelInfo=null;
  ImageInfo ramdiskInfo=null;
  String defaultKernelId=null;
  String defaultRamdiskId=null;
  try {
    defaultKernelId=SystemConfiguration.getSystemConfiguration().getDefaultKernel();
    defaultRamdiskId=SystemConfiguration.getSystemConfiguration().getDefaultRamdisk();
  }
 catch (  Exception e1) {
  }
  if (!ImageManager.IMAGE_PLATFORM_WINDOWS.equals(diskInfo.getPlatform())) {
    final String kernelId=ImageUtil.getImageInfobyId(msg.getKernelId(),diskInfo.getKernelId(),defaultKernelId);
    if (kernelId == null) {
      throw new EucalyptusCloudException("Unable to determine required kernel image.");
    }
    try {
      kernelInfo=Authorizations.lookupPrivileged(ImageInfo.class,kernelId,new ImageOwnerLookup(),new ResourceLookup<ImageInfo>(){
        @Override public ImageInfo resolve(        String name) throws ResourceLookupException {
          EntityWrapper<ImageInfo> db=new EntityWrapper<ImageInfo>();
          ImageInfo image=null;
          try {
            image=db.getUnique(new ImageInfo(kernelId));
          }
 catch (          EucalyptusCloudException e) {
            db.rollback();
            throw new ResourceLookupException("Failed to find kernel image: " + kernelId);
          }
          if (!"kernel".equals(image.getImageType())) {
            db.rollback();
            throw new ResourceLookupException("Image specified is not a kernel: " + image.toString());
          }
          db.commit();
          return image;
        }
      }
);
    }
 catch (    ResourceLookupException e) {
      throw new EucalyptusCloudException(e);
    }
catch (    AuthException e) {
      throw new EucalyptusCloudException("Access to kernel image " + kernelId + " is denied.",e);
    }
    boolean nord=(ImageUtil.isSet(msg.getKernelId()) && !ImageUtil.isSet(msg.getRamdiskId())) || (!ImageUtil.isSet(msg.getKernelId()) && ImageUtil.isSet(diskInfo.getKernelId()) && !ImageUtil.isSet(diskInfo.getRamdiskId())&& !ImageUtil.isSet(msg.getRamdiskId()));
    final String ramdiskId=nord ? null : ImageUtil.getImageInfobyId(msg.getRamdiskId(),diskInfo.getRamdiskId(),defaultRamdiskId);
    if (ramdiskId != null) {
      try {
        ramdiskInfo=Authorizations.lookupPrivileged(ImageInfo.class,ramdiskId,new ImageOwnerLookup(),new ResourceLookup<ImageInfo>(){
          @Override public ImageInfo resolve(          String name) throws ResourceLookupException {
            EntityWrapper<ImageInfo> db=new EntityWrapper<ImageInfo>();
            ImageInfo image=null;
            try {
              image=db.getUnique(new ImageInfo(ramdiskId));
            }
 catch (            EucalyptusCloudException e) {
              db.rollback();
              throw new ResourceLookupException("Failed to find ramdisk image: " + ramdiskId);
            }
            db.commit();
            if ((image != null) && !"ramdisk".equals(image.getImageType())) {
              throw new ResourceLookupException("Image specified is not a ramdisk: " + image.toString());
            }
            return image;
          }
        }
);
      }
 catch (      ResourceLookupException e) {
        throw new EucalyptusCloudException(e);
      }
catch (      AuthException e) {
        throw new EucalyptusCloudException("Access to ramdisk image " + ramdiskId + " is denied.",e);
      }
    }
    ImageUtil.checkStoredImage(ramdiskInfo);
  }
  ArrayList<String> ancestorIds=ImageUtil.getAncestors(msg.getUserId(),diskInfo.getImageLocation());
  Long imgSize=ImageUtil.getSize(msg.getUserId(),diskInfo.getImageLocation());
  if (imgSize > 1024l * 1024l * 1024l* vmType.getDisk()) {
    throw new EucalyptusCloudException("image too large [size=" + imgSize / (1024l * 1024l) + "MB] for instance type " + vmType.getName() + " [disk=" + vmType.getDisk() * 1024l + "MB]");
  }
  ImageUtil.checkStoredImage(kernelInfo);
  ImageUtil.checkStoredImage(diskInfo);
  vmType.setRoot(diskInfo.getImageId(),diskInfo.getImageLocation(),imgSize * 1024);
  if (kernelInfo != null) {
    vmType.setKernel(kernelInfo.getImageId(),kernelInfo.getImageLocation());
  }
  if (ramdiskInfo != null) {
    vmType.setRamdisk(ramdiskInfo.getImageId(),ramdiskInfo.getImageLocation());
  }
  return vmAllocInfo;
}
