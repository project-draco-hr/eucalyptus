{
  final Context ctx=Contexts.lookup();
  ImageInfo imageInfo=null;
  final String rootDevName=(request.getRootDeviceName() != null) ? request.getRootDeviceName() : "/dev/sda1";
  final String eki=request.getKernelId();
  final String eri=request.getRamdiskId();
  if (request.getImageLocation() != null) {
    final ImageManifest manifest=ImageManifests.lookup(request.getImageLocation());
    LOG.debug("Obtained manifest information for requested image registration: " + manifest);
    List<DeviceMapping> vbr=Lists.transform(request.getBlockDeviceMappings(),Images.deviceMappingGenerator(imageInfo));
    final ImageMetadata.Architecture arch=(request.getArchitecture() == null ? null : ImageMetadata.Architecture.valueOf(request.getArchitecture()));
    Supplier<ImageInfo> allocator=new Supplier<ImageInfo>(){
      @Override public ImageInfo get(){
        try {
          return Images.createFromManifest(ctx.getUserFullName(),request.getName(),request.getDescription(),arch,eki,eri,manifest);
        }
 catch (        Exception ex) {
          LOG.error(ex);
          Logs.extreme().error(ex,ex);
          throw Exceptions.toUndeclared(ex);
        }
      }
    }
;
    imageInfo=RestrictedTypes.allocateUnitlessResource(allocator);
    imageInfo.getDeviceMappings().addAll(vbr);
  }
 else   if (rootDevName != null && Iterables.any(request.getBlockDeviceMappings(),Images.findEbsRoot(rootDevName))) {
    Supplier<ImageInfo> allocator=new Supplier<ImageInfo>(){
      @Override public ImageInfo get(){
        try {
          return Images.createFromDeviceMapping(ctx.getUserFullName(),request.getName(),request.getDescription(),eki,eri,rootDevName,request.getBlockDeviceMappings());
        }
 catch (        EucalyptusCloudException ex) {
          throw new RuntimeException(ex);
        }
      }
    }
;
    imageInfo=RestrictedTypes.allocateUnitlessResource(allocator);
  }
 else {
    throw new EucalyptusCloudException("Malformed registration. A request must specify either " + "a manifest path or a snapshot to use for BFE. Provided values are: imageLocation=" + request.getImageLocation() + " blockDeviceMappings="+ request.getBlockDeviceMappings());
  }
  RegisterImageResponseType reply=(RegisterImageResponseType)request.getReply();
  reply.setImageId(imageInfo.getDisplayName());
  return reply;
}
