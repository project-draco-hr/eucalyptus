{
  final Context ctx=Contexts.lookup();
  User requestUser=Contexts.lookup().getUser();
  String action=PolicySpec.requestToAction(request);
  if (!ctx.hasAdministrativePrivileges()) {
    if (!Permissions.isAuthorized(PolicySpec.VENDOR_EC2,PolicySpec.EC2_RESOURCE_IMAGE,"",ctx.getAccount(),action,requestUser)) {
      throw new EucalyptusCloudException("Register image is not allowed for " + requestUser.getName());
    }
    if (!Permissions.canAllocate(PolicySpec.VENDOR_EC2,PolicySpec.EC2_RESOURCE_IMAGE,"",action,requestUser,1L)) {
      throw new EucalyptusCloudException("Quota exceeded in registering image for " + requestUser.getName());
    }
  }
  ImageInfo imageInfo=null;
  final String rootDevName=(request.getRootDeviceName() != null) ? request.getRootDeviceName() : "/dev/sda1";
  final String eki=request.getKernelId();
  final String eri=request.getRamdiskId();
  if (request.getManifestLocation() != null) {
    ImageManifest manifest=ImageManifests.lookup(request.getManifestLocation());
    LOG.debug("Obtained manifest information for requested image registration: " + manifest);
    List<DeviceMapping> vbr=Lists.transform(request.getBlockDeviceMappings(),Images.deviceMappingGenerator(imageInfo));
    imageInfo=Images.createFromManifest(ctx.getUserFullName(),request.getName(),request.getDescription(),eki,eri,manifest);
    imageInfo.getDeviceMappings().addAll(vbr);
  }
 else   if (rootDevName != null && Iterables.any(request.getBlockDeviceMappings(),Images.findEbsRoot(rootDevName))) {
    imageInfo=Images.createFromDeviceMapping(ctx.getUserFullName(),request.getName(),request.getDescription(),eki,eri,rootDevName,request.getBlockDeviceMappings());
  }
 else {
    throw new EucalyptusCloudException("Malformed registration. A request must specify either " + "a manifest path or a snapshot to use for BFE. Provided values are: imageLocation=" + request.getManifestLocation() + " blockDeviceMappings="+ request.getBlockDeviceMappings());
  }
  RegisterImageResponseType reply=(RegisterImageResponseType)request.getReply();
  reply.setImageId(imageInfo.getDisplayName());
  return reply;
}
