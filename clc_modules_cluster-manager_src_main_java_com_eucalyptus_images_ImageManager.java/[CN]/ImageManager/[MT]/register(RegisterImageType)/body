{
  String imageLocation=request.getImageLocation();
  User requestUser=Contexts.lookup().getUser();
  String[] imagePathParts;
  try {
    imagePathParts=ImageUtil.getImagePathParts(imageLocation);
    ImageUtil.checkBucketAcl(request,imagePathParts);
  }
 catch (  EucalyptusCloudException e) {
    LOG.trace(e,e);
    throw e;
  }
  try {
    WalrusUtil.verifyManifestIntegrity(request.getUser(),imageLocation);
  }
 catch (  EucalyptusCloudException e) {
    throw new EucalyptusCloudException("Image registration failed because the manifest referenced is invalid or unavailable.");
  }
  Document inputSource=ImageUtil.getManifestDocument(imagePathParts,request.getUserErn());
  XPath xpath=XPathFactory.newInstance().newXPath();
  String arch=ImageUtil.extractArchitecture(inputSource,xpath);
  ImageInfo imageInfo=null;
  String architecture=((arch == null) ? "i386" : arch);
  String kernelId=ImageUtil.extractKernelId(inputSource,xpath);
  String ramdiskId=ImageUtil.extractRamdiskId(inputSource,xpath);
  List<ProductCode> prodCodes=extractProductCodes(inputSource,xpath);
  Images.Type imageType=Images.Type.machine;
  Images.Platform platform=Images.Platform.linux;
  String newImageId=null;
  String signature=null;
  try {
    signature=(String)xpath.evaluate("/manifest/signature/text()",inputSource,XPathConstants.STRING);
  }
 catch (  XPathExpressionException e) {
    LOG.warn(e.getMessage());
  }
  if ("yes".equals(kernelId) || "true".equals(kernelId) || imagePathParts[1].startsWith("vmlinuz")) {
    if (Contexts.lookup().hasSystemPrivileges()) {
      throw new EucalyptusCloudException("Only administrators can register kernel images.");
    }
    imageType=Images.Type.kernel;
    imageInfo=new KernelImageInfo(request.getUserErn(),ImageUtil.newImageId(imageType.getTypePrefix(),imageLocation),imageLocation,Images.Architecture.valueOf(arch.toLowerCase()),Images.Platform.linux);
  }
 else   if ("yes".equals(ramdiskId) || "true".equals(ramdiskId) || imagePathParts[1].startsWith("initrd")) {
    if (Contexts.lookup().hasSystemPrivileges()) {
      throw new EucalyptusCloudException("Only administrators can register ramdisk images.");
    }
    imageType=Images.Type.ramdisk;
    imageInfo=new RamdiskImageInfo(request.getUserErn(),ImageUtil.newImageId(imageType.getTypePrefix(),imageLocation),imageLocation,Images.Architecture.valueOf(arch.toLowerCase()),Images.Platform.linux);
  }
 else {
    if (imagePathParts[1].startsWith(Images.Platform.windows.toString()) && System.getProperty("euca.disable.windows") == null) {
      imageType=Images.Type.machine;
      imageInfo=new MachineImageInfo(request.getUserErn(),ImageUtil.newImageId(imageType.getTypePrefix(),imageLocation),imageLocation,Images.Architecture.valueOf(arch.toLowerCase()),Images.Platform.windows);
    }
 else {
      if (kernelId != null) {
        try {
          ImageUtil.getImageInfobyId(kernelId);
        }
 catch (        EucalyptusCloudException e) {
          throw new EucalyptusCloudException("Referenced kernel id is invalid: " + kernelId);
        }
      }
      if (ramdiskId != null) {
        try {
          ImageUtil.getImageInfobyId(ramdiskId);
        }
 catch (        EucalyptusCloudException e) {
          throw new EucalyptusCloudException("Referenced ramdisk id is invalid: " + ramdiskId);
        }
      }
      imageType=Images.Type.machine;
      imageInfo=new MachineImageInfo(request.getUserErn(),ImageUtil.newImageId(imageType.getTypePrefix(),imageLocation),imageLocation,Images.Architecture.valueOf(arch.toLowerCase()),Images.Platform.windows,kernelId,ramdiskId);
    }
  }
  imageInfo.setSignature(signature);
  EntityWrapper<ImageInfo> db=new EntityWrapper<ImageInfo>();
  try {
    db.add(imageInfo);
    db.commit();
    LOG.info("Registering image pk=" + imageInfo.getId() + " ownerId="+ request.getUserErn());
  }
 catch (  Exception e) {
    db.rollback();
    throw new EucalyptusCloudException("failed to register image.");
  }
  imageInfo.grantPermission(request.getUser());
  imageInfo.grantPermission(ImageUserGroup.ALL);
  LOG.info("Triggering cache population in Walrus for: " + imageInfo.getId());
  WalrusUtil.checkValid(imageInfo);
  WalrusUtil.triggerCaching(imageInfo);
  RegisterImageResponseType reply=(RegisterImageResponseType)request.getReply();
  reply.setImageId(imageInfo.getDisplayName());
  return reply;
}
