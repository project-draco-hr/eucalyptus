{
  Long unencryptedSize=0L;
  boolean failed=false;
  try {
    if (!imageSizeExceeded) {
      LOG.info("Unzipping image: " + bucketName + "/"+ manifestKey);
      unzipImage(decryptedImageName,tarredImageName);
      LOG.info("Untarring image: " + bucketName + "/"+ manifestKey);
      unencryptedSize=untarImage(tarredImageName,imageName);
    }
 else {
      File imageFile=new File(imageName);
      if (imageFile.exists()) {
        unencryptedSize=imageFile.length();
      }
 else {
        LOG.error("Could not find image: " + imageName);
        imageSizeExceeded=false;
        return -1L;
      }
    }
    Long oldCacheSize=0L;
    EntityWrapper<ImageCacheInfo> db=new EntityWrapper<ImageCacheInfo>();
    List<ImageCacheInfo> imageCacheInfos=db.query(new ImageCacheInfo());
    for (    ImageCacheInfo imageCacheInfo : imageCacheInfos) {
      if (imageCacheInfo.getInCache()) {
        oldCacheSize+=imageCacheInfo.getSize();
      }
    }
    db.commit();
    if ((oldCacheSize + unencryptedSize) > WalrusProperties.IMAGE_CACHE_SIZE) {
      LOG.error("Maximum image cache size exceeded when decrypting " + bucketName + "/"+ manifestKey);
      failed=true;
      imageSizeExceeded=true;
      spaceNeeded=unencryptedSize;
    }
  }
 catch (  Exception ex) {
    LOG.warn(ex);
    failed=true;
  }
  if (failed) {
    if (!imageSizeExceeded) {
      try {
        storageManager.deleteAbsoluteObject(tarredImageName);
        storageManager.deleteAbsoluteObject(imageName);
      }
 catch (      Exception exception) {
        LOG.error(exception);
      }
    }
    return -1L;
  }
  LOG.info("Cached image: " + bucketName + "/"+ manifestKey+ " size: "+ String.valueOf(unencryptedSize));
  return unencryptedSize;
}
