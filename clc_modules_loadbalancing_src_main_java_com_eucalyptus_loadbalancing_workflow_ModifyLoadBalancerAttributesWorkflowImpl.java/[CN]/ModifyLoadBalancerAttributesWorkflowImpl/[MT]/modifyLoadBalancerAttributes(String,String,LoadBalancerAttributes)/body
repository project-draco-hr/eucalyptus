{
  this.accountNumber=accountNumber;
  this.loadbalancer=loadbalancer;
  task=new TryCatchFinally(){
    @Override protected void doTry() throws Throwable {
      if (attributes.getAccessLog() == null)       return;
      if (attributes.getAccessLog().getEnabled()) {
        policyCreator=client.modifyLoadBalancerAttributesCreateAccessLogPolicy(accountNumber,loadbalancer,attributes.getAccessLog().getEnabled(),attributes.getAccessLog().getS3BucketName(),attributes.getAccessLog().getS3BucketPrefix() != null ? attributes.getAccessLog().getS3BucketPrefix() : "",attributes.getAccessLog().getEmitInterval());
      }
 else {
        final Promise<Void> policyRemover=client.modifyLoadBalancerAttributesDeleteAccessLogPolicy(accountNumber,loadbalancer,attributes.getAccessLog().getEnabled(),attributes.getAccessLog().getS3BucketName(),attributes.getAccessLog().getS3BucketPrefix() != null ? attributes.getAccessLog().getS3BucketPrefix() : "",attributes.getAccessLog().getEmitInterval());
      }
      final Promise<Void> persistence=client.modifyLoadBalancerAttributesPersistAttributes(accountNumber,loadbalancer,attributes.getAccessLog().getEnabled(),attributes.getAccessLog().getS3BucketName(),attributes.getAccessLog().getS3BucketPrefix() != null ? attributes.getAccessLog().getS3BucketPrefix() : "",attributes.getAccessLog().getEmitInterval());
    }
    @Override protected void doCatch(    Throwable e) throws Throwable {
      if (e instanceof CancellationException) {
        LOG.warn("Workflow for modifying attributes is cancelled");
        state=ElbWorkflowState.WORKFLOW_CANCELLED;
        return;
      }
      if (policyCreator != null) {
        rollback(policyCreator);
      }
      state=ElbWorkflowState.WORKFLOW_FAILED;
      LOG.error("Workflow for modifying attributes has failed",e);
    }
    @Override protected void doFinally() throws Throwable {
      if (state == ElbWorkflowState.WORKFLOW_RUNNING)       state=ElbWorkflowState.WORKFLOW_SUCCESS;
    }
  }
;
}
