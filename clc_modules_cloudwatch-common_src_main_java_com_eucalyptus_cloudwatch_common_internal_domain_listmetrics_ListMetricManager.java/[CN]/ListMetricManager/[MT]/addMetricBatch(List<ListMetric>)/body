{
  Multimap<PrefetchFields,ListMetric> dataBatchPrefetchMap=LinkedListMultimap.create();
  for (  final ListMetric item : dataBatch) {
    PrefetchFields prefetchFields=new PrefetchFields(item.getAccountId(),item.getNamespace(),item.getMetricName());
    dataBatchPrefetchMap.put(prefetchFields,item);
  }
  for (  List<PrefetchFields> prefetchFieldsListPartial : Iterables.partition(dataBatchPrefetchMap.keySet(),LIST_METRIC_NUM_DB_OPERATIONS_PER_TRANSACTION)) {
    EntityTransaction db=Entities.get(ListMetric.class);
    try {
      int numOperations=0;
      for (      PrefetchFields prefetchFields : prefetchFieldsListPartial) {
        Map<NonPrefetchFields,ListMetric> dataCache=Maps.newHashMap();
        Criteria criteria=Entities.createCriteria(ListMetric.class).add(Restrictions.eq("accountId",prefetchFields.getAccountId())).add(Restrictions.eq("namespace",prefetchFields.getNamespace())).add(Restrictions.eq("namespace",prefetchFields.getMetricName()));
        List<ListMetric> results=(List<ListMetric>)criteria.list();
        for (        ListMetric result : results) {
          dataCache.put(new NonPrefetchFields(result.getMetricType(),result.getDimensionMap()),result);
        }
        for (        ListMetric listMetric : dataBatchPrefetchMap.get(prefetchFields)) {
          NonPrefetchFields cacheKey=new NonPrefetchFields(listMetric.getMetricType(),listMetric.getDimensionMap());
          if (dataCache.containsKey(cacheKey)) {
            dataCache.get(cacheKey).updateTimeStamps();
          }
 else {
            Entities.persist(listMetric);
            dataCache.put(cacheKey,listMetric);
          }
        }
        numOperations++;
        if (numOperations % LIST_METRIC_NUM_DB_OPERATIONS_UNTIL_SESSION_FLUSH == 0) {
          Entities.flushSession(ListMetric.class);
          Entities.clearSession(ListMetric.class);
        }
      }
      db.commit();
    }
 catch (    RuntimeException ex) {
      Logs.extreme().error(ex,ex);
      throw ex;
    }
 finally {
      if (db.isActive())       db.rollback();
    }
  }
}
