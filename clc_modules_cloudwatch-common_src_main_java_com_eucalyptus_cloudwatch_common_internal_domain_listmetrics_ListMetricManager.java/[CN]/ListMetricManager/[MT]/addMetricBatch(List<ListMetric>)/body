{
  EntityTransaction db=Entities.get(ListMetric.class);
  try {
    HashSet<ListMetricCacheLoadKey> loadedKeys=Sets.newHashSet();
    HashMap<ListMetricCacheKey,ListMetric> cache=Maps.newHashMap();
    Collection<ListMetricCacheKey> cacheKeys=prune(dataBatch);
    List<ListMetric> listMetrics=Lists.newArrayList();
    for (    ListMetricCacheKey cacheKey : cacheKeys) {
      listMetrics.add(createMetric(cacheKey.getLoadKey().getAccountId(),cacheKey.getMetricName(),cacheKey.getLoadKey().getNamespace(),cacheKey.getDimensionMap(),cacheKey.getMetricType()));
    }
    for (    ListMetric metric : listMetrics) {
      ListMetricCacheLoadKey loadKey=new ListMetricCacheLoadKey();
      loadKey.setAccountId(metric.getAccountId());
      loadKey.setNamespace(metric.getNamespace());
      if (!loadedKeys.contains(loadKey)) {
        Criteria criteria=Entities.createCriteria(ListMetric.class).add(Restrictions.eq("accountId",metric.getAccountId())).add(Restrictions.eq("namespace",metric.getNamespace()));
        List<ListMetric> results=(List<ListMetric>)criteria.list();
        for (        ListMetric result : results) {
          ListMetricCacheKey key=new ListMetricCacheKey();
          key.setLoadKey(loadKey);
          key.setDimensionMap(result.getDimensionMap());
          key.setMetricName(result.getMetricName());
          key.setMetricType(result.getMetricType());
          cache.put(key,result);
        }
        loadedKeys.add(loadKey);
      }
      ListMetricCacheKey key=new ListMetricCacheKey();
      key.setDimensionMap(metric.getDimensionMap());
      key.setLoadKey(loadKey);
      key.setMetricName(metric.getMetricName());
      key.setMetricType(metric.getMetricType());
      ListMetric inDbMetric=cache.get(key);
      if (inDbMetric != null) {
        inDbMetric.setVersion(1 + inDbMetric.getVersion());
      }
 else {
        cache.put(key,metric);
        Entities.persist(metric);
      }
    }
    db.commit();
  }
 catch (  RuntimeException ex) {
    Logs.extreme().error(ex,ex);
    throw ex;
  }
 finally {
    if (db.isActive())     db.rollback();
  }
}
