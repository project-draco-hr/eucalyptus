{
  String existingValue=(String)t.getValue();
  if (existingValue != null && !"<unset>".equals(existingValue)) {
    if (newValue != null && !newValue.equals(existingValue)) {
      throw new ConfigurablePropertyException("Cannot change extant storage backend configuration. You must deregister all SCs in the partition before you can change the configuration value");
    }
  }
 else {
    String probablePartitionName=((MultiDatabasePropertyEntry)t).getEntrySetName();
    if (probablePartitionName == null) {
      throw new ConfigurablePropertyException("Could not determing partition name from property to check validity");
    }
    String[] parts=probablePartitionName.split("\\.");
    if (parts == null || parts.length == 0) {
      throw new ConfigurablePropertyException("Could not determing partition name from property to check validity: " + probablePartitionName);
    }
    probablePartitionName=parts[0];
    List<ServiceConfiguration> scConfigs=null;
    try {
      scConfigs=ServiceConfigurations.listPartition(Storage.class,probablePartitionName);
    }
 catch (    NoSuchElementException e) {
      throw new ConfigurablePropertyException("No Storage Controller configurations found for partition: " + probablePartitionName);
    }
    final String proposedValue=newValue;
    final Set<String> validEntries=Sets.newHashSet();
    EntityTransaction tx=Entities.get(StorageControllerConfiguration.class);
    try {
      if (!Iterables.any(scConfigs,new Predicate<ServiceConfiguration>(){
        @Override public boolean apply(        ServiceConfiguration config){
          if (config.isVmLocal()) {
            validEntries.addAll(StorageManagers.list());
            return StorageManagers.contains(proposedValue);
          }
 else {
            try {
              StorageControllerConfiguration scConfig=Entities.uniqueResult((StorageControllerConfiguration)config);
              for (              String entry : Splitter.on(",").split(scConfig.getAvailableBackends())) {
                validEntries.add(entry);
              }
              return validEntries.contains(proposedValue);
            }
 catch (            Exception e) {
              return false;
            }
          }
        }
      }
)) {
        throw new ConfigurablePropertyException("Cannot modify " + t.getQualifiedName() + "."+ t.getFieldName()+ " new value is not a valid value.  "+ "Legal values are: "+ Joiner.on(",").join(Sets.filter(validEntries,StorageManagers.SUPPORTED_PROVIDER_PREDICATE)));
      }
    }
  finally {
      tx.rollback();
    }
  }
}
