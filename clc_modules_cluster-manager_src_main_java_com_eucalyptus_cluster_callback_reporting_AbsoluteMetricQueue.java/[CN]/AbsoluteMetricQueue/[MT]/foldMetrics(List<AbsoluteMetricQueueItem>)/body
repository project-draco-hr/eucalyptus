{
  final List<AbsoluteMetricQueueItem> foldedMetrics=Lists.newArrayList();
  if (dataBatch != null) {
    for (    AbsoluteMetricQueueItem queueItem : dataBatch) {
      if (queueItem != null && queueItem.getNamespace() != null && "AWS/EC2".equals(queueItem.getNamespace())) {
        MetricDatum metricDatum=queueItem.getMetricDatum();
        if (metricDatum != null && metricDatum.getDimensions() != null && metricDatum.getDimensions().getMember() != null) {
          Set<Dimension> dimensionSet=Sets.newLinkedHashSet(metricDatum.getDimensions().getMember());
          for (          Set<Dimension> permutation : Sets.powerSet(dimensionSet)) {
            if (permutation.size() > 1)             continue;
            MetricDatum newMetricDatum=new MetricDatum();
            newMetricDatum.setValue(metricDatum.getValue());
            newMetricDatum.setUnit(metricDatum.getUnit());
            newMetricDatum.setStatisticValues(metricDatum.getStatisticValues());
            newMetricDatum.setTimestamp(metricDatum.getTimestamp());
            newMetricDatum.setMetricName(metricDatum.getMetricName());
            ArrayList<Dimension> newDimensionsList=Lists.newArrayList(permutation);
            Dimensions newDimensions=new Dimensions();
            newDimensions.setMember(newDimensionsList);
            newMetricDatum.setDimensions(newDimensions);
            AbsoluteMetricQueueItem newQueueItem=new AbsoluteMetricQueueItem();
            newQueueItem.setAccountId(queueItem.getAccountId());
            newQueueItem.setNamespace(queueItem.getNamespace());
            newQueueItem.setMetricDatum(newMetricDatum);
            foldedMetrics.add(newQueueItem);
          }
        }
 else {
          foldedMetrics.add(queueItem);
        }
      }
 else {
        foldedMetrics.add(queueItem);
      }
    }
  }
  return foldedMetrics;
}
