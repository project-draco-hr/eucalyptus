{
  List<AbsoluteMetricQueueItem> dataToInsert=new ArrayList<AbsoluteMetricQueueItem>();
  Multimap<String,AbsoluteMetricQueueItem> instanceMetricMap=LinkedListMultimap.create();
  Multimap<String,AbsoluteMetricQueueItem> volumeMetricMap=LinkedListMultimap.create();
  for (  final AbsoluteMetricQueueItem item : dataBatch) {
    String nameSpace=item.getNamespace();
    MetricDatum datum=item.getMetricDatum();
    if ("AWS/EBS".equals(nameSpace)) {
      String volumeId=null;
      if ((datum.getDimensions() != null) && (datum.getDimensions().getMember() != null)) {
        for (        Dimension dimension : datum.getDimensions().getMember()) {
          if ("VolumeId".equals(dimension.getName())) {
            volumeId=dimension.getValue();
          }
        }
      }
      if (volumeId == null) {
        continue;
      }
 else {
        volumeMetricMap.put(volumeId,item);
      }
    }
 else     if ("AWS/EC2".equals(nameSpace)) {
      String instanceId=null;
      if ((datum.getDimensions() != null) && (datum.getDimensions().getMember() != null)) {
        for (        Dimension dimension : datum.getDimensions().getMember()) {
          if ("InstanceId".equals(dimension.getName())) {
            instanceId=dimension.getValue();
          }
        }
      }
      if (instanceId == null) {
        continue;
      }
 else {
        instanceMetricMap.put(instanceId,item);
      }
    }
 else {
      dataToInsert.add(item);
    }
  }
  for (  List<String> partialVolumeKeySet : Iterables.partition(volumeMetricMap.keySet(),ABSOLUTE_METRIC_NUM_DB_OPERATIONS_PER_TRANSACTION)) {
    EntityTransaction db=Entities.get(AbsoluteMetricHistory.class);
    try {
      int numVolumes=0;
      for (      String volumeId : partialVolumeKeySet) {
        AbsoluteMetricCache cache=new AbsoluteMetricCache(db);
        cache.load("AWS/EBS","VolumeId",volumeId);
        for (        AbsoluteMetricQueueItem item : volumeMetricMap.get(volumeId)) {
          String accountId=item.getAccountId();
          String nameSpace=item.getNamespace();
          MetricDatum datum=item.getMetricDatum();
          if (EBS_ABSOLUTE_METRICS.containsKey(datum.getMetricName())) {
            if (!adjustAbsoluteVolumeStatisticSet(cache,datum,datum.getMetricName(),EBS_ABSOLUTE_METRICS.get(datum.getMetricName()),volumeId))             continue;
          }
          if ("VolumeReadOps".equals(datum.getMetricName())) {
            dataToInsert.add(createVolumeThroughputMetric(accountId,nameSpace,datum));
          }
          if ("VolumeTotalReadWriteTime".equals(datum.getMetricName())) {
            convertVolumeTotalReadWriteTimeToVolumeIdleTime(datum);
          }
          if ("VolumeQueueLength".equals(datum.getMetricName())) {
            if (!adjustAbsoluteVolumeQueueLengthStatisticSet(cache,datum,volumeId))             continue;
          }
          dataToInsert.add(item);
        }
        numVolumes++;
        if (numVolumes % ABSOLUTE_METRIC_NUM_DB_OPERATIONS_UNTIL_SESSION_FLUSH == 0) {
          Entities.flushSession(AbsoluteMetricHistory.class);
          Entities.clearSession(AbsoluteMetricHistory.class);
        }
      }
      db.commit();
    }
 catch (    RuntimeException ex) {
      Logs.extreme().error(ex,ex);
      throw ex;
    }
 finally {
      if (db.isActive())       db.rollback();
    }
  }
  for (  List<String> partialInstanceKeySet : Iterables.partition(instanceMetricMap.keySet(),ABSOLUTE_METRIC_NUM_DB_OPERATIONS_PER_TRANSACTION)) {
    EntityTransaction db=Entities.get(AbsoluteMetricHistory.class);
    try {
      int numInstances=0;
      for (      String instanceId : partialInstanceKeySet) {
        AbsoluteMetricCache cache=new AbsoluteMetricCache(db);
        cache.load("AWS/EC2","InstanceId",instanceId);
        for (        AbsoluteMetricQueueItem item : instanceMetricMap.get(instanceId)) {
          String accountId=item.getAccountId();
          String nameSpace=item.getNamespace();
          MetricDatum datum=item.getMetricDatum();
          if (EC2_ABSOLUTE_METRICS.containsKey(datum.getMetricName())) {
            if (!adjustAbsoluteInstanceStatisticSet(cache,datum,datum.getMetricName(),EC2_ABSOLUTE_METRICS.get(datum.getMetricName()),instanceId))             continue;
          }
 else           if ("CPUUtilizationMSAbsolute".equals(datum.getMetricName())) {
            if (!adjustAbsoluteInstanceCPUStatisticSet(cache,datum,"CPUUtilizationMSAbsolute","CPUUtilization",instanceId))             continue;
          }
          dataToInsert.add(item);
        }
        numInstances++;
        if (numInstances % ABSOLUTE_METRIC_NUM_DB_OPERATIONS_UNTIL_SESSION_FLUSH == 0) {
          Entities.flushSession(AbsoluteMetricHistory.class);
          Entities.clearSession(AbsoluteMetricHistory.class);
        }
      }
      db.commit();
    }
 catch (    RuntimeException ex) {
      Logs.extreme().error(ex,ex);
      throw ex;
    }
 finally {
      if (db.isActive())       db.rollback();
    }
  }
  return dataToInsert;
}
