{
  final DeleteSnapshotResponseType reply=(DeleteSnapshotResponseType)request.getReply();
  final Context ctx=Contexts.lookup();
  boolean result=false;
  try {
    result=Transactions.delete(Snapshot.named(ctx.getUserFullName().asAccountFullName(),request.getSnapshotId()),new Predicate<Snapshot>(){
      @Override public boolean apply(      Snapshot snap){
        if (!State.EXTANT.equals(snap.getState())) {
          return false;
        }
 else         if (!RestrictedTypes.filterPrivileged().apply(snap)) {
          throw Exceptions.toUndeclared("Not authorized to delete snapshot " + request.getSnapshotId() + " by "+ ctx.getUser().getName(),new EucalyptusCloudException());
        }
 else {
          ServiceConfiguration sc=Topology.lookup(Storage.class,Partitions.lookupByName(snap.getPartition()));
          try {
            DeleteStorageSnapshotResponseType scReply=AsyncRequests.sendSync(sc,new DeleteStorageSnapshotType(snap.getDisplayName()));
            if (scReply.get_return()) {
              Snapshots.fireDeleteEvent(snap);
              final DeleteStorageSnapshotType deleteMsg=new DeleteStorageSnapshotType(snap.getDisplayName());
              Iterables.all(Topology.enabledServices(Storage.class),new Predicate<ServiceConfiguration>(){
                @Override public boolean apply(                ServiceConfiguration arg0){
                  try {
                    AsyncRequests.sendSync(arg0,deleteMsg);
                  }
 catch (                  Exception ex) {
                    LOG.error(ex);
                    Logs.extreme().error(ex,ex);
                  }
                  return true;
                }
              }
);
            }
 else {
              throw Exceptions.toUndeclared("Unable to delete snapshot: " + snap,new EucalyptusCloudException());
            }
          }
 catch (          Exception ex1) {
            throw Exceptions.toUndeclared(ex1.getMessage(),ex1);
          }
          return true;
        }
      }
    }
);
  }
 catch (  ExecutionException ex1) {
    throw new EucalyptusCloudException(ex1.getCause());
  }
  reply.set_return(result);
  return reply;
}
