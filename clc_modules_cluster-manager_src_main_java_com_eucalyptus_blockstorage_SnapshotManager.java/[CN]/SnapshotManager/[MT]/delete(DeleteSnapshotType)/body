{
  DeleteSnapshotResponseType reply=(DeleteSnapshotResponseType)request.getReply();
  reply.set_return(false);
  Context ctx=Contexts.lookup();
  EntityWrapper<Snapshot> db=EntityWrapper.get(Snapshot.class);
  try {
    Snapshot snap=db.getUnique(Snapshot.named(ctx.getUserFullName(),request.getSnapshotId()));
    if (!State.EXTANT.equals(snap.getState())) {
      db.rollback();
      reply.set_return(false);
      return reply;
    }
    if (!Lookups.checkPrivilege(request,PolicySpec.EC2_RESOURCE_SNAPSHOT,request.getSnapshotId(),snap.getOwner())) {
      throw new EucalyptusCloudException("Not authorized to delete snapshot " + request.getSnapshotId() + " by "+ ctx.getUser().getName());
    }
    db.delete(snap);
    DeleteStorageSnapshotResponseType scReply=StorageUtil.send(snap.getCluster(),new DeleteStorageSnapshotType(snap.getDisplayName()));
    if (scReply.get_return()) {
      StorageUtil.dispatchAll(new DeleteStorageSnapshotType(snap.getDisplayName()));
      db.commit();
      EventRecord.here(SnapshotManager.class,EventClass.SNAPSHOT,EventType.SNAPSHOT_DELETE,"user=" + snap.getOwner(),"snapshot=" + snap.getDisplayName()).info();
    }
 else {
      db.rollback();
      throw new EucalyptusCloudException("Unable to delete snapshot.");
    }
  }
 catch (  EucalyptusCloudException e) {
    LOG.debug(e,e);
    db.rollback();
    throw new EucalyptusCloudException("Error deleting storage volume:" + e.getMessage(),e);
  }
  reply.set_return(true);
  return reply;
}
