{
  final Context ctx=Contexts.lookup();
  final String volumeId=normalizeVolumeIdentifier(request.getVolumeId());
  final Volume vol;
  try {
    vol=Transactions.find(Volume.named(ctx.getUserFullName().asAccountFullName(),volumeId));
  }
 catch (  NoSuchElementException e) {
    throw new ClientComputeException("InvalidVolume.NotFound","Volume not found '" + request.getVolumeId() + "'");
  }
  final ServiceConfiguration sc=Topology.lookup(Storage.class,Partitions.lookupByName(vol.getPartition()));
  final Volume volReady=Volumes.checkVolumeReady(vol);
  Supplier<Snapshot> allocator=new Supplier<Snapshot>(){
    @Override public Snapshot get(){
      try {
        return initializeSnapshot(ctx.getUserFullName(),volReady,sc,request.getDescription());
      }
 catch (      EucalyptusCloudException ex) {
        throw new RuntimeException(ex);
      }
    }
  }
;
  Snapshot snap=RestrictedTypes.allocateUnitlessResource(allocator);
  try {
    snap=startCreateSnapshot(volReady,snap);
  }
 catch (  Exception e) {
    final EntityTransaction db=Entities.get(Snapshot.class);
    try {
      Snapshot entity=Entities.uniqueResult(snap);
      Entities.delete(entity);
      db.commit();
    }
 catch (    Exception ex) {
      Logs.extreme().error(ex,ex);
    }
 finally {
      if (db.isActive())       db.rollback();
    }
    final SnapshotTooLargeException snapshotTooLargeException=Exceptions.findCause(e,SnapshotTooLargeException.class);
    if (snapshotTooLargeException != null) {
      throw new ClientComputeException("SnapshotLimitExceeded",snapshotTooLargeException.getMessage());
    }
    if (!(e.getCause() instanceof ExecutionException)) {
      throw handleException(e);
    }
 else {
      throw e;
    }
  }
  try {
    fireUsageEvent(snap,SnapShotEvent.forSnapShotCreate(snap.getVolumeSize(),volReady.getNaturalId(),snap.getDisplayName()));
  }
 catch (  Throwable reportEx) {
    LOG.error("Unable to fire snap shot creation reporting event",reportEx);
  }
  CreateSnapshotResponseType reply=(CreateSnapshotResponseType)request.getReply();
  com.eucalyptus.compute.common.Snapshot snapMsg=snap.morph(new com.eucalyptus.compute.common.Snapshot());
  snapMsg.setProgress("0%");
  snapMsg.setOwnerId(snap.getOwnerAccountNumber());
  snapMsg.setVolumeSize(volReady.getSize().toString());
  reply.setSnapshot(snapMsg);
  return reply;
}
