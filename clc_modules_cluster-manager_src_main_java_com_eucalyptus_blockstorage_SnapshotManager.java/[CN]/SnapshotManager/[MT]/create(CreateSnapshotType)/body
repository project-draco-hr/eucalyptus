{
  Context ctx=Contexts.lookup();
  String action=PolicySpec.requestToAction(request);
  if (!ctx.hasAdministrativePrivileges()) {
    if (!Permissions.isAuthorized(PolicySpec.VENDOR_EC2,PolicySpec.EC2_RESOURCE_SNAPSHOT,"",ctx.getAccount(),action,ctx.getUser())) {
      throw new EucalyptusCloudException("Not authorized to create snapshot by " + ctx.getUser().getName());
    }
    if (!Permissions.canAllocate(PolicySpec.VENDOR_EC2,PolicySpec.EC2_RESOURCE_SNAPSHOT,"",action,ctx.getUser(),1L)) {
      throw new EucalyptusCloudException("Quota exceeded in creating snapshot by " + ctx.getUser().getName());
    }
  }
  EntityWrapper<Snapshot> db=EntityWrapper.get(Snapshot.class);
  Volume vol=db.recast(Volume.class).getUnique(Volume.named(ctx.getUserFullName(),request.getVolumeId()));
  Service sc=null;
  try {
    sc=StorageUtil.getActiveSc(vol.getCluster());
  }
 catch (  NoSuchElementException e) {
    throw new EucalyptusCloudException("Failed to find the storage controller information for volume: " + vol.getDisplayName() + " at "+ vol.getCluster(),e);
  }
  if (!vol.isReady()) {
    DescribeStorageVolumesType descVols=new DescribeStorageVolumesType(Lists.newArrayList(vol.getDisplayName()));
    try {
      DescribeStorageVolumesResponseType volState=ServiceDispatcher.lookup(sc.getServiceConfiguration()).send(descVols);
      if (!volState.getVolumeSet().isEmpty()) {
        vol.setMappedState(volState.getVolumeSet().get(0).getStatus());
      }
 else {
        throw new EucalyptusCloudException("Failed to update the volume state " + request.getVolumeId() + " not yet ready");
      }
    }
 catch (    Exception e1) {
      LOG.debug(e1,e1);
      db.rollback();
      throw new EucalyptusCloudException("Failed to update the volume state " + request.getVolumeId() + " not yet ready");
    }
    if (!vol.isReady()) {
      db.rollback();
      throw new EucalyptusCloudException("Volume " + request.getVolumeId() + " not yet ready");
    }
  }
  String newId=null;
  Snapshot snap=null;
  while (true) {
    newId=Crypto.generateId(ctx.getUserFullName().getUniqueId(),ID_PREFIX);
    try {
      db.getUnique(Snapshot.named(newId));
    }
 catch (    EucalyptusCloudException e) {
      snap=new Snapshot(ctx.getUserFullName(),newId,vol.getDisplayName());
      snap.setVolumeSize(vol.getSize());
      db.add(snap);
      break;
    }
  }
  CreateStorageSnapshotType scRequest=new CreateStorageSnapshotType(vol.getDisplayName(),newId);
  CreateStorageSnapshotResponseType scReply=null;
  try {
    scReply=sc.getDispatcher().send(scRequest);
    snap.setCluster(sc.getServiceConfiguration().getName());
    snap.setPartition(sc.getServiceConfiguration().getPartition());
    snap.setMappedState(scReply.getStatus());
  }
 catch (  EucalyptusCloudException e) {
    LOG.debug(e,e);
    db.rollback();
    throw new EucalyptusCloudException("Error calling CreateStorageSnapshot:" + e.getMessage(),e);
  }
  db.commit();
  try {
    ListenerRegistry.getInstance().fireEvent(new StorageEvent(StorageEvent.EventType.EbsSnapshot,true,snap.getVolumeSize(),snap.getOwnerUserId(),snap.getOwnerAccountId(),snap.getVolumeCluster(),snap.getVolumePartition()));
  }
 catch (  EventFailedException ex) {
    LOG.error(ex,ex);
  }
  CreateSnapshotResponseType reply=(CreateSnapshotResponseType)request.getReply();
  edu.ucsb.eucalyptus.msgs.Snapshot snapMsg=snap.morph(new edu.ucsb.eucalyptus.msgs.Snapshot());
  snapMsg.setProgress("0%");
  snapMsg.setOwnerId(snap.getOwnerAccountId());
  snapMsg.setVolumeSize(vol.getSize().toString());
  reply.setSnapshot(snapMsg);
  return reply;
}
