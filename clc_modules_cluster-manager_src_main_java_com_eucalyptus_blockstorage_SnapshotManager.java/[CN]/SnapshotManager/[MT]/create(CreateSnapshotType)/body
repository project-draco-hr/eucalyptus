{
  EntityWrapper<Snapshot> db=SnapshotManager.getEntityWrapper();
  Volume vol=db.recast(Volume.class).getUnique(Volume.named(request.getUserErn(),request.getVolumeId()));
  String partition=vol.getCluster();
  Service sc=null;
  try {
    sc=StorageUtil.getActiveSc(vol.getCluster());
  }
 catch (  NoSuchElementException e) {
    throw new EucalyptusCloudException("Failed to find the storage controller information for volume: " + vol.getDisplayName() + " at "+ vol.getCluster(),e);
  }
  if (!vol.isReady()) {
    DescribeStorageVolumesType descVols=new DescribeStorageVolumesType(Lists.newArrayList(vol.getDisplayName()));
    try {
      DescribeStorageVolumesResponseType volState=ServiceDispatcher.lookup(Components.lookup("storage"),sc.getServiceConfiguration().getHostName()).send(descVols);
      if (!volState.getVolumeSet().isEmpty()) {
        vol.setMappedState(volState.getVolumeSet().get(0).getStatus());
      }
 else {
        throw new EucalyptusCloudException("Failed to update the volume state " + request.getVolumeId() + " not yet ready");
      }
    }
 catch (    Exception e1) {
      LOG.debug(e1,e1);
      db.rollback();
      throw new EucalyptusCloudException("Failed to update the volume state " + request.getVolumeId() + " not yet ready");
    }
    if (!vol.isReady()) {
      db.rollback();
      throw new EucalyptusCloudException("Volume " + request.getVolumeId() + " not yet ready");
    }
  }
  String newId=null;
  Snapshot snap=null;
  while (true) {
    newId=Crypto.generateId(request.getUserErn().getUniqueId(),ID_PREFIX);
    try {
      db.getUnique(Snapshot.named(newId));
    }
 catch (    EucalyptusCloudException e) {
      snap=new Snapshot(request.getUserErn(),newId,vol.getDisplayName());
      db.add(snap);
      break;
    }
  }
  CreateStorageSnapshotType scRequest=new CreateStorageSnapshotType(vol.getDisplayName(),newId);
  CreateStorageSnapshotResponseType scReply=null;
  try {
    scReply=StorageUtil.send(sc.getName(),scRequest);
    snap.setCluster(sc.getName());
    snap.setMappedState(scReply.getStatus());
  }
 catch (  EucalyptusCloudException e) {
    LOG.debug(e,e);
    db.rollback();
    throw new EucalyptusCloudException("Error calling CreateStorageSnapshot:" + e.getMessage());
  }
  db.commit();
  EventRecord.here(SnapshotManager.class,EventClass.SNAPSHOT,EventType.SNAPSHOT_CREATE,"user=" + snap.getOwner(),"snapshot=" + snap.getDisplayName(),"volume=" + snap.getParentVolume()).info();
  CreateSnapshotResponseType reply=(CreateSnapshotResponseType)request.getReply();
  edu.ucsb.eucalyptus.msgs.Snapshot snapMsg=snap.morph(new edu.ucsb.eucalyptus.msgs.Snapshot());
  snapMsg.setProgress("0%");
  snapMsg.setOwnerId(snap.getOwnerAccountId());
  snapMsg.setVolumeSize(vol.getSize().toString());
  reply.setSnapshot(snapMsg);
  return reply;
}
