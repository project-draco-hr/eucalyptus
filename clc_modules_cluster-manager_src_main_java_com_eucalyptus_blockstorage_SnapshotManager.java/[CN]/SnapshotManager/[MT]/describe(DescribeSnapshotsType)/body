{
  DescribeSnapshotsResponseType reply=(DescribeSnapshotsResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  EntityWrapper<Snapshot> db=EntityWrapper.get(Snapshot.class);
  try {
    List<Snapshot> snapshots=db.query(Snapshots.named(ctx.getUserFullName(),null));
    for (    Snapshot snap : snapshots) {
      if (!TypeClerk.checkPrivilege(request,PolicySpec.VENDOR_EC2,PolicySpec.EC2_RESOURCE_SNAPSHOT,snap.getDisplayName(),snap.getOwner())) {
        LOG.debug("Skip snapshot " + snap.getDisplayName() + " due to access right");
        continue;
      }
      DescribeStorageSnapshotsType scRequest=new DescribeStorageSnapshotsType(Lists.newArrayList(snap.getDisplayName()));
      if (request.getSnapshotSet().isEmpty() || request.getSnapshotSet().contains(snap.getDisplayName())) {
        try {
          ServiceConfiguration sc=Partitions.lookupService(Storage.class,snap.getPartition());
          DescribeStorageSnapshotsResponseType snapshotInfo=ServiceDispatcher.lookup(sc).send(scRequest);
          for (          StorageSnapshot storageSnapshot : snapshotInfo.getSnapshotSet()) {
            snap.setMappedState(storageSnapshot.getStatus());
            edu.ucsb.eucalyptus.msgs.Snapshot snapReply=snap.morph(new edu.ucsb.eucalyptus.msgs.Snapshot());
            if (storageSnapshot.getProgress() != null)             snapReply.setProgress(storageSnapshot.getProgress());
            snapReply.setVolumeId(storageSnapshot.getVolumeId());
            snapReply.setOwnerId(snap.getOwnerAccountNumber());
            reply.getSnapshotSet().add(snapReply);
          }
        }
 catch (        NoSuchElementException e) {
          LOG.warn("Error getting snapshot information from the Storage Controller: " + e);
          LOG.debug(e,e);
        }
catch (        EucalyptusCloudException e) {
          LOG.warn("Error getting snapshot information from the Storage Controller: " + e);
          LOG.debug(e,e);
        }
      }
    }
    db.commit();
  }
 catch (  Throwable e) {
    db.rollback();
  }
  return reply;
}
