{
  final DescribeSnapshotsResponseType reply=(DescribeSnapshotsResponseType)request.getReply();
  final Context ctx=Contexts.lookup();
  final boolean showAll=request.getSnapshotSet().remove("verbose");
  final AccountFullName ownerFullName=(ctx.hasAdministrativePrivileges() && showAll) ? null : AccountFullName.getInstance(ctx.getAccount());
  final Filter filter=Filters.generate(request.getFilterSet(),Snapshot.class);
  final EntityTransaction db=Entities.get(Snapshot.class);
  try {
    final List<Snapshot> snapshots=Entities.query(Snapshot.named(ownerFullName,null),true,filter.asCriterion(),filter.getAliases());
    final Predicate<? super Snapshot> requestedAndAccessible=CloudMetadatas.filteringFor(Snapshot.class).byId(request.getSnapshotSet()).byPredicate(filter.asPredicate()).byPrivileges().buildPredicate();
    for (    final Snapshot snap : Iterables.filter(snapshots,requestedAndAccessible)) {
      try {
        final edu.ucsb.eucalyptus.msgs.Snapshot snapReply=snap.morph(new edu.ucsb.eucalyptus.msgs.Snapshot());
        snapReply.setVolumeId(snap.getParentVolume());
        snapReply.setOwnerId(snap.getOwnerAccountNumber());
        reply.getSnapshotSet().add(snapReply);
      }
 catch (      NoSuchElementException e) {
        LOG.warn("Error getting snapshot information from the Storage Controller: " + e);
        LOG.debug(e,e);
      }
    }
  }
  finally {
    db.rollback();
  }
  return reply;
}
