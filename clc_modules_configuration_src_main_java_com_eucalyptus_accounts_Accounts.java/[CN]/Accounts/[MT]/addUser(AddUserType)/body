{
  AddUserResponseType reply=request.getReply();
  reply.set_return(false);
  String userName=request.getUserName();
  String email=request.getEmail();
  String certCode=CryptoProviders.generateSessionToken(userName);
  String confirmCode=CryptoProviders.generateSessionToken(userName);
  String oneTimePass=CryptoProviders.generateSessionToken(userName);
  boolean admin=request.getAdmin();
  try {
    User u=null;
    if (email == null) {
      u=CredentialProvider.addUser(userName,admin,true);
    }
 else {
      u=CredentialProvider.addUser(userName,admin,false);
    }
    EntityWrapper<UserInfo> db=new EntityWrapper<UserInfo>();
    try {
      UserInfo newUser=null;
      if (email == null) {
        newUser=new UserInfo(userName,admin,confirmCode,certCode,oneTimePass);
      }
 else {
        newUser=new UserInfo(userName,email,admin,confirmCode,certCode,oneTimePass);
        u.setIsEnabled(Boolean.FALSE);
      }
      db.add(newUser);
      db.commit();
      reply.set_return(true);
    }
 catch (    Throwable t) {
      db.rollback();
      try {
        CredentialProvider.deleteUser(userName);
      }
 catch (      NoSuchUserException e) {
      }
      throw new EucalyptusCloudException("Error creating user: " + userName + ": "+ t.getMessage());
    }
  }
 catch (  UserExistsException e1) {
    throw new EucalyptusCloudException("User already exists: " + userName);
  }
  return reply;
}
