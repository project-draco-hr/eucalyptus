{
  if (info.getPhysicalResourceId() == null)   return;
  ServiceConfiguration configuration=Topology.lookup(Euare.class);
  if (properties.getRoles() != null && properties.getRoles().size() > 0) {
    List<String> realRolesToRemovePolicyFrom=Lists.newArrayList();
    Set<String> passedInRoles=properties.getRoles() == null ? new HashSet<String>() : Sets.newHashSet(properties.getRoles());
    boolean seenAllRoles=false;
    String roleMarker=null;
    while (!seenAllRoles) {
      ListRolesType listRolesType=new ListRolesType();
      listRolesType.setEffectiveUserId(info.getEffectiveUserId());
      if (roleMarker != null) {
        listRolesType.setMarker(roleMarker);
      }
      ListRolesResponseType listRolesResponseType=AsyncRequests.<ListRolesType,ListRolesResponseType>sendSync(configuration,listRolesType);
      if (listRolesResponseType.getListRolesResult().getIsTruncated() == Boolean.TRUE) {
        roleMarker=listRolesResponseType.getListRolesResult().getMarker();
      }
 else {
        seenAllRoles=true;
      }
      if (listRolesResponseType.getListRolesResult().getRoles() != null && listRolesResponseType.getListRolesResult().getRoles().getMember() != null) {
        for (        RoleType roleType : listRolesResponseType.getListRolesResult().getRoles().getMember()) {
          if (passedInRoles.contains(roleType.getRoleName())) {
            realRolesToRemovePolicyFrom.add(roleType.getRoleName());
          }
        }
      }
    }
    for (    String role : realRolesToRemovePolicyFrom) {
      DeleteRolePolicyType deleteRolePolicyType=new DeleteRolePolicyType();
      deleteRolePolicyType.setRoleName(role);
      deleteRolePolicyType.setPolicyName(properties.getPolicyName());
      deleteRolePolicyType.setEffectiveUserId(info.getEffectiveUserId());
      AsyncRequests.<DeleteRolePolicyType,DeleteRolePolicyResponseType>sendSync(configuration,deleteRolePolicyType);
    }
  }
  if (properties.getUsers() != null && properties.getUsers().size() > 0) {
    List<String> realUsersToRemovePolicyFrom=Lists.newArrayList();
    Set<String> passedInUsers=properties.getUsers() == null ? new HashSet<String>() : Sets.newHashSet(properties.getUsers());
    boolean seenAllUsers=false;
    String userMarker=null;
    while (!seenAllUsers) {
      ListUsersType listUsersType=new ListUsersType();
      listUsersType.setEffectiveUserId(info.getEffectiveUserId());
      if (userMarker != null) {
        listUsersType.setMarker(userMarker);
      }
      ListUsersResponseType listUsersResponseType=AsyncRequests.<ListUsersType,ListUsersResponseType>sendSync(configuration,listUsersType);
      if (listUsersResponseType.getListUsersResult().getIsTruncated() == Boolean.TRUE) {
        userMarker=listUsersResponseType.getListUsersResult().getMarker();
      }
 else {
        seenAllUsers=true;
      }
      if (listUsersResponseType.getListUsersResult().getUsers() != null && listUsersResponseType.getListUsersResult().getUsers().getMemberList() != null) {
        for (        UserType userType : listUsersResponseType.getListUsersResult().getUsers().getMemberList()) {
          if (passedInUsers.contains(userType.getUserName())) {
            realUsersToRemovePolicyFrom.add(userType.getUserName());
          }
        }
      }
    }
    for (    String user : realUsersToRemovePolicyFrom) {
      DeleteUserPolicyType deleteUserPolicyType=new DeleteUserPolicyType();
      deleteUserPolicyType.setUserName(user);
      deleteUserPolicyType.setPolicyName(properties.getPolicyName());
      deleteUserPolicyType.setEffectiveUserId(info.getEffectiveUserId());
      AsyncRequests.<DeleteUserPolicyType,DeleteUserPolicyResponseType>sendSync(configuration,deleteUserPolicyType);
    }
  }
  if (properties.getGroups() != null && properties.getGroups().size() > 0) {
    List<String> realGroupsToRemovePolicyFrom=Lists.newArrayList();
    Set<String> passedInGroups=properties.getGroups() == null ? new HashSet<String>() : Sets.newHashSet(properties.getGroups());
    boolean seenAllGroups=false;
    String groupMarker=null;
    while (!seenAllGroups) {
      ListGroupsType listGroupsType=new ListGroupsType();
      listGroupsType.setEffectiveUserId(info.getEffectiveUserId());
      if (groupMarker != null) {
        listGroupsType.setMarker(groupMarker);
      }
      ListGroupsResponseType listGroupsResponseType=AsyncRequests.<ListGroupsType,ListGroupsResponseType>sendSync(configuration,listGroupsType);
      if (listGroupsResponseType.getListGroupsResult().getIsTruncated() == Boolean.TRUE) {
        groupMarker=listGroupsResponseType.getListGroupsResult().getMarker();
      }
 else {
        seenAllGroups=true;
      }
      if (listGroupsResponseType.getListGroupsResult().getGroups() != null && listGroupsResponseType.getListGroupsResult().getGroups().getMemberList() != null) {
        for (        GroupType groupType : listGroupsResponseType.getListGroupsResult().getGroups().getMemberList()) {
          if (passedInGroups.contains(groupType.getGroupName())) {
            realGroupsToRemovePolicyFrom.add(groupType.getGroupName());
          }
        }
      }
    }
    for (    String group : realGroupsToRemovePolicyFrom) {
      DeleteGroupPolicyType deleteGroupPolicyType=new DeleteGroupPolicyType();
      deleteGroupPolicyType.setGroupName(group);
      deleteGroupPolicyType.setPolicyName(properties.getPolicyName());
      deleteGroupPolicyType.setEffectiveUserId(info.getEffectiveUserId());
      AsyncRequests.<DeleteGroupPolicyType,DeleteGroupPolicyResponseType>sendSync(configuration,deleteGroupPolicyType);
    }
  }
}
