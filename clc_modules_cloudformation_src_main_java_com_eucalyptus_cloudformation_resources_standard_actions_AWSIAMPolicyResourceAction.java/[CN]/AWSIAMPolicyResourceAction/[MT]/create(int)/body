{
  ServiceConfiguration configuration=Topology.lookup(Euare.class);
switch (stepNum) {
case 0:
    info.setPhysicalResourceId(getDefaultPhysicalResourceId());
  info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(info.getPhysicalResourceId())));
break;
case 1:
if (properties.getGroups() != null) {
for (String groupName : properties.getGroups()) {
  PutGroupPolicyType putGroupPolicyType=new PutGroupPolicyType();
  putGroupPolicyType.setGroupName(groupName);
  putGroupPolicyType.setPolicyName(properties.getPolicyName());
  putGroupPolicyType.setPolicyDocument(properties.getPolicyDocument().toString());
  putGroupPolicyType.setEffectiveUserId(info.getEffectiveUserId());
  AsyncRequests.<PutGroupPolicyType,PutGroupPolicyResponseType>sendSync(configuration,putGroupPolicyType);
}
}
break;
case 2:
if (properties.getUsers() != null) {
for (String userName : properties.getUsers()) {
PutUserPolicyType putUserPolicyType=new PutUserPolicyType();
putUserPolicyType.setUserName(userName);
putUserPolicyType.setPolicyName(properties.getPolicyName());
putUserPolicyType.setPolicyDocument(properties.getPolicyDocument().toString());
putUserPolicyType.setEffectiveUserId(info.getEffectiveUserId());
AsyncRequests.<PutUserPolicyType,PutUserPolicyResponseType>sendSync(configuration,putUserPolicyType);
}
}
break;
case 3:
if (properties.getRoles() != null) {
for (String roleName : properties.getRoles()) {
PutRolePolicyType putRolePolicyType=new PutRolePolicyType();
putRolePolicyType.setRoleName(roleName);
putRolePolicyType.setPolicyName(properties.getPolicyName());
putRolePolicyType.setPolicyDocument(properties.getPolicyDocument().toString());
putRolePolicyType.setEffectiveUserId(info.getEffectiveUserId());
AsyncRequests.<PutRolePolicyType,PutRolePolicyResponseType>sendSync(configuration,putRolePolicyType);
}
}
break;
default :
throw new IllegalStateException("Invalid step " + stepNum);
}
}
