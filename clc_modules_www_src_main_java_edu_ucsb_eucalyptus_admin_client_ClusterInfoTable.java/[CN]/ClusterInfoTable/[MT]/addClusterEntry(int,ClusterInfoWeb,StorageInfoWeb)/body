{
  Grid g=new Grid(15,2);
  g.setStyleName("euca-table");
  g.setCellPadding(4);
  int i=0;
  g.setWidget(i,0,new HTML("<b>Name:</b>"));
  g.getCellFormatter().setHorizontalAlignment(i,0,HasHorizontalAlignment.ALIGN_RIGHT);
  final HorizontalPanel namePanel=new HorizontalPanel();
  namePanel.setSpacing(0);
  if (clusterInfo.isCommitted()) {
    namePanel.add(new Label(clusterInfo.getName()));
  }
 else {
    final TextBox nb=new TextBox();
    nb.addChangeListener(new ChangeCallback(this,row));
    nb.setVisibleLength(12);
    nb.setText(clusterInfo.getName());
    nb.addFocusListener(new FocusHandler(this.hint,this.warningMessage));
    namePanel.add(nb);
  }
  namePanel.add(new Button("Deregister Cluster",new DeleteCallback(this,row)));
  g.setWidget(i,1,namePanel);
  i++;
  g.setWidget(i,1,new Label("Cluster Controller"));
  i++;
  g.setWidget(i,0,new Label("Host:"));
  g.getCellFormatter().setHorizontalAlignment(i,0,HasHorizontalAlignment.ALIGN_RIGHT);
  final TextBox hb=new TextBox();
  hb.addChangeListener(new ChangeCallback(this,row));
  hb.setVisibleLength(20);
  hb.setText(clusterInfo.getHost());
  hb.addFocusListener(new FocusHandler(this.hint,this.warningMessage));
  g.setWidget(i,1,hb);
  i++;
  g.setWidget(i,0,new Label("Port:"));
  g.getCellFormatter().setHorizontalAlignment(i,0,HasHorizontalAlignment.ALIGN_RIGHT);
  final TextBox pb=new TextBox();
  pb.addChangeListener(new ChangeCallback(this,row));
  pb.setVisibleLength(5);
  pb.setText("" + clusterInfo.getPort());
  pb.addFocusListener(new FocusHandler(this.hint,this.warningMessage));
  g.setWidget(i,1,pb);
  i++;
  g.setWidget(i,1,new Label("Storage Controller"));
  i++;
  g.setWidget(i,0,new Label("Host:"));
  g.getCellFormatter().setHorizontalAlignment(i,0,HasHorizontalAlignment.ALIGN_RIGHT);
  final TextBox sb=new TextBox();
  sb.addChangeListener(new ChangeCallback(this,row));
  sb.setVisibleLength(20);
  sb.setText(storageInfo.getHost());
  sb.addFocusListener(new FocusHandler(this.hint,this.warningMessage));
  g.setWidget(i,1,sb);
  i++;
  g.setWidget(i,0,new Label("Interface:"));
  g.getCellFormatter().setHorizontalAlignment(i,0,HasHorizontalAlignment.ALIGN_RIGHT);
  final TextBox sib=new TextBox();
  sib.addChangeListener(new ChangeCallback(this,row));
  sib.setVisibleLength(5);
  sib.setText("" + storageInfo.getStorageInterface());
  sib.addFocusListener(new FocusHandler(this.hint,this.warningMessage));
  g.setWidget(i,1,sib);
  i++;
  g.setWidget(i,0,new Label("Volumes path:"));
  g.getCellFormatter().setHorizontalAlignment(i,0,HasHorizontalAlignment.ALIGN_RIGHT);
  final TextBox volumesPathBox=new TextBox();
  volumesPathBox.addChangeListener(new ChangeCallback(this,row));
  volumesPathBox.setVisibleLength(30);
  volumesPathBox.setText(storageInfo.getVolumesPath());
  volumesPathBox.addFocusListener(new FocusHandler(this.hint,this.warningMessage));
  g.setWidget(i,1,volumesPathBox);
  i++;
  g.setWidget(i,0,new Label("Max volume size:"));
  g.getCellFormatter().setHorizontalAlignment(i,0,HasHorizontalAlignment.ALIGN_RIGHT);
  final TextBox volumeMaxBox=new TextBox();
  volumeMaxBox.addChangeListener(new ChangeCallback(this,row));
  volumeMaxBox.setVisibleLength(5);
  volumeMaxBox.setText("" + storageInfo.getMaxVolumeSizeInGB());
  volumeMaxBox.addFocusListener(new FocusHandler(this.hint,this.warningMessage));
  final HorizontalPanel volumesMaxPanel=new HorizontalPanel();
  volumesMaxPanel.setSpacing(4);
  volumesMaxPanel.add(volumeMaxBox);
  volumesMaxPanel.add(new Label("GB"));
  g.setWidget(i,1,volumesMaxPanel);
  i++;
  g.setWidget(i,0,new Label("Disk space reserved for volumes:"));
  g.getCellFormatter().setHorizontalAlignment(i,0,HasHorizontalAlignment.ALIGN_RIGHT);
  final TextBox volumesTotalBox=new TextBox();
  volumesTotalBox.addChangeListener(new ChangeCallback(this,row));
  volumesTotalBox.setVisibleLength(5);
  volumesTotalBox.setText("" + storageInfo.getTotalVolumesSizeInGB());
  volumesTotalBox.addFocusListener(new FocusHandler(this.hint,this.warningMessage));
  final HorizontalPanel volumesTotalPanel=new HorizontalPanel();
  volumesTotalPanel.setSpacing(4);
  volumesTotalPanel.add(volumesTotalBox);
  volumesTotalPanel.add(new Label("GB"));
  g.setWidget(i,1,volumesTotalPanel);
  i++;
  final CheckBox zeroFillVolumesCheckbox=new CheckBox();
  g.getCellFormatter().setHorizontalAlignment(i,0,HasHorizontalAlignment.ALIGN_RIGHT);
  g.setWidget(i,0,zeroFillVolumesCheckbox);
  if (storageInfo.getZeroFillVolumes()) {
    zeroFillVolumesCheckbox.setChecked(true);
  }
 else {
    zeroFillVolumesCheckbox.setChecked(false);
  }
  zeroFillVolumesCheckbox.addClickListener(new ClickListener(){
    public void onClick(    Widget sender){
      if (((CheckBox)sender).isChecked()) {
        storageInfo.setZeroFillVolumes(true);
      }
 else {
        storageInfo.setZeroFillVolumes(false);
      }
    }
  }
);
  g.setWidget(i,1,new Label("Zero-fill volumes"));
  final TextBox reservedAddressesBox=new TextBox();
  i++;
  final CheckBox dynamicAddressesCheckbox=new CheckBox();
  g.getCellFormatter().setHorizontalAlignment(i,0,HasHorizontalAlignment.ALIGN_RIGHT);
  g.setWidget(i,0,dynamicAddressesCheckbox);
  if (systemConfig.isDoDynamicPublicAddresses()) {
    dynamicAddressesCheckbox.setChecked(true);
    reservedAddressesBox.setEnabled(false);
  }
 else {
    dynamicAddressesCheckbox.setChecked(false);
    reservedAddressesBox.setEnabled(true);
  }
  dynamicAddressesCheckbox.addClickListener(new ClickListener(){
    public void onClick(    Widget sender){
      if (((CheckBox)sender).isChecked()) {
        reservedAddressesBox.setEnabled(false);
        systemConfig.setDoDynamicPublicAddresses(true);
      }
 else {
        reservedAddressesBox.setEnabled(true);
        systemConfig.setDoDynamicPublicAddresses(false);
      }
    }
  }
);
  g.setWidget(i,1,new Label("Dynamic public IP address assignment"));
  i++;
  g.setWidget(i,0,new Label("Reserve for assignment"));
  g.getCellFormatter().setHorizontalAlignment(i,0,HasHorizontalAlignment.ALIGN_RIGHT);
  reservedAddressesBox.addChangeListener(new ChangeCallback(this,row));
  reservedAddressesBox.setVisibleLength(5);
  reservedAddressesBox.setText("" + systemConfig.getSystemReservedPublicAddresses());
  final HorizontalPanel reservedAddressesPanel=new HorizontalPanel();
  reservedAddressesPanel.setSpacing(4);
  reservedAddressesPanel.add(reservedAddressesBox);
  reservedAddressesPanel.add(new HTML("public IP addresses"));
  reservedAddressesBox.setText("" + systemConfig.getSystemReservedPublicAddresses());
  g.setWidget(i,1,reservedAddressesPanel);
  i++;
  g.setWidget(i,0,new Label("Maximum of"));
  g.getCellFormatter().setHorizontalAlignment(i,0,HasHorizontalAlignment.ALIGN_RIGHT);
  final TextBox publicAddressesBox=new TextBox();
  publicAddressesBox.addChangeListener(new ChangeCallback(this,row));
  publicAddressesBox.setVisibleLength(5);
  publicAddressesBox.setText("" + systemConfig.getMaxUserPublicAddresses());
  final HorizontalPanel publicAddressesPanel=new HorizontalPanel();
  publicAddressesPanel.setSpacing(4);
  publicAddressesPanel.add(publicAddressesBox);
  publicAddressesPanel.add(new HTML("public IP addresses per user"));
  g.setWidget(i,1,publicAddressesPanel);
  i++;
  g.setWidget(i,0,new Label("Use VLAN tags"));
  g.getCellFormatter().setHorizontalAlignment(i,0,HasHorizontalAlignment.ALIGN_RIGHT);
  final TextBox minVlanBox=new TextBox();
  minVlanBox.addChangeListener(new ChangeCallback(this,row));
  minVlanBox.setVisibleLength(4);
  minVlanBox.setText(String.valueOf(clusterInfo.getMinVlans()));
  final TextBox maxVlanBox=new TextBox();
  maxVlanBox.addChangeListener(new ChangeCallback(this,row));
  maxVlanBox.setVisibleLength(4);
  maxVlanBox.setText(String.valueOf(clusterInfo.getMaxVlans()));
  final HorizontalPanel vlanPanel=new HorizontalPanel();
  vlanPanel.setSpacing(4);
  vlanPanel.add(minVlanBox);
  vlanPanel.add(new HTML("through"));
  vlanPanel.add(maxVlanBox);
  g.setWidget(i,1,vlanPanel);
  return g;
}
