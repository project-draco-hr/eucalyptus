{
  final ArrayList<String> storageParams=storageInfo.getStorageParams();
  numStorageParams=storageParams.size() / 4;
  Grid g=new Grid(8 + numStorageParams,2);
  g.setStyleName("euca-table");
  if (row > 0) {
    g.setStyleName("euca-nonfirst-cluster-entry");
  }
  g.setCellPadding(4);
  int i=0;
  g.setWidget(i,0,new HTML("<b>Name:</b>"));
  g.getCellFormatter().setHorizontalAlignment(i,0,HasHorizontalAlignment.ALIGN_RIGHT);
  final HorizontalPanel namePanel=new HorizontalPanel();
  namePanel.setSpacing(0);
  if (clusterInfo.isCommitted()) {
    namePanel.add(new Label(clusterInfo.getName()));
  }
 else {
    final TextBox nb=new TextBox();
    nb.addChangeListener(new ChangeCallback(this,row));
    nb.setVisibleLength(12);
    nb.setText(clusterInfo.getName());
    nb.addFocusListener(new FocusHandler(this.hint,this.warningMessage));
    namePanel.add(nb);
  }
  namePanel.add(new Button("Deregister Cluster",new DeleteCallback(this,row)));
  g.setWidget(i,1,namePanel);
  i++;
  g.setWidget(i,1,new Label("Cluster Controller"));
  i++;
  g.setWidget(i,0,new Label("Host:"));
  g.getCellFormatter().setHorizontalAlignment(i,0,HasHorizontalAlignment.ALIGN_RIGHT);
  final TextBox hb=new TextBox();
  hb.addChangeListener(new ChangeCallback(this,row));
  hb.setVisibleLength(20);
  hb.setText(clusterInfo.getHost());
  hb.addFocusListener(new FocusHandler(this.hint,this.warningMessage));
  g.setWidget(i,1,hb);
  i++;
  final TextBox reservedAddressesBox=new TextBox();
  final CheckBox dynamicAddressesCheckbox=new CheckBox();
  g.getCellFormatter().setHorizontalAlignment(i,0,HasHorizontalAlignment.ALIGN_RIGHT);
  g.setWidget(i,0,dynamicAddressesCheckbox);
  if (systemConfig.isDoDynamicPublicAddresses()) {
    dynamicAddressesCheckbox.setChecked(true);
    reservedAddressesBox.setEnabled(false);
  }
 else {
    dynamicAddressesCheckbox.setChecked(false);
    reservedAddressesBox.setEnabled(true);
  }
  dynamicAddressesCheckbox.addClickListener(new ClickListener(){
    public void onClick(    Widget sender){
      if (((CheckBox)sender).isChecked()) {
        reservedAddressesBox.setEnabled(false);
        systemConfig.setDoDynamicPublicAddresses(true);
      }
 else {
        reservedAddressesBox.setEnabled(true);
        systemConfig.setDoDynamicPublicAddresses(false);
      }
    }
  }
);
  g.setWidget(i,1,new Label("Dynamic public IP address assignment"));
  i++;
  g.setWidget(i,0,new Label("Reserve for assignment"));
  g.getCellFormatter().setHorizontalAlignment(i,0,HasHorizontalAlignment.ALIGN_RIGHT);
  reservedAddressesBox.addChangeListener(new ChangeCallback(this,row));
  reservedAddressesBox.setVisibleLength(5);
  reservedAddressesBox.setText("" + systemConfig.getSystemReservedPublicAddresses());
  final HorizontalPanel reservedAddressesPanel=new HorizontalPanel();
  reservedAddressesPanel.setSpacing(4);
  reservedAddressesPanel.add(reservedAddressesBox);
  reservedAddressesPanel.add(new HTML("public IP addresses"));
  reservedAddressesBox.setText("" + systemConfig.getSystemReservedPublicAddresses());
  g.setWidget(i,1,reservedAddressesPanel);
  i++;
  g.setWidget(i,0,new Label("Maximum of"));
  g.getCellFormatter().setHorizontalAlignment(i,0,HasHorizontalAlignment.ALIGN_RIGHT);
  final TextBox publicAddressesBox=new TextBox();
  publicAddressesBox.addChangeListener(new ChangeCallback(this,row));
  publicAddressesBox.setVisibleLength(5);
  publicAddressesBox.setText("" + systemConfig.getMaxUserPublicAddresses());
  final HorizontalPanel publicAddressesPanel=new HorizontalPanel();
  publicAddressesPanel.setSpacing(4);
  publicAddressesPanel.add(publicAddressesBox);
  publicAddressesPanel.add(new HTML("public IP addresses per user"));
  g.setWidget(i,1,publicAddressesPanel);
  i++;
  g.setWidget(i,0,new Label("Use VLAN tags"));
  g.getCellFormatter().setHorizontalAlignment(i,0,HasHorizontalAlignment.ALIGN_RIGHT);
  final TextBox minVlanBox=new TextBox();
  minVlanBox.addChangeListener(new ChangeCallback(this,row));
  minVlanBox.setVisibleLength(4);
  minVlanBox.setText(String.valueOf(clusterInfo.getMinVlans()));
  final TextBox maxVlanBox=new TextBox();
  maxVlanBox.addChangeListener(new ChangeCallback(this,row));
  maxVlanBox.setVisibleLength(4);
  maxVlanBox.setText(String.valueOf(clusterInfo.getMaxVlans()));
  final HorizontalPanel vlanPanel=new HorizontalPanel();
  vlanPanel.setSpacing(4);
  vlanPanel.add(minVlanBox);
  vlanPanel.add(new HTML("through"));
  vlanPanel.add(maxVlanBox);
  g.setWidget(i,1,vlanPanel);
  i++;
  g.setWidget(i,1,new Label("Storage Controller"));
  for (int paramidx=0; paramidx < numStorageParams; ++paramidx) {
    i++;
    if ("KEYVALUE".equals(storageParams.get(4 * paramidx))) {
      g.setWidget(i,0,new Label(storageParams.get(4 * paramidx + 1) + ": "));
      g.getCellFormatter().setHorizontalAlignment(i,0,HasHorizontalAlignment.ALIGN_RIGHT);
      final TextBox propTextBox=new TextBox();
      propTextBox.addChangeListener(new ChangeCallback(this,row));
      propTextBox.setVisibleLength(30);
      propTextBox.setText(storageParams.get(4 * paramidx + 2));
      propTextBox.addFocusListener(new FocusHandler(this.hint,this.warningMessage));
      g.setWidget(i,1,propTextBox);
    }
 else     if ("PASSWORD".equals(storageParams.get(4 * paramidx))) {
      g.setWidget(i,0,new Label(storageParams.get(4 * paramidx + 1) + ": "));
      g.getCellFormatter().setHorizontalAlignment(i,0,HasHorizontalAlignment.ALIGN_RIGHT);
      final TextBox propTextBox=new PasswordTextBox();
      propTextBox.addChangeListener(new ChangeCallback(this,row));
      propTextBox.setVisibleLength(30);
      propTextBox.setText(storageParams.get(4 * paramidx + 2));
      propTextBox.addFocusListener(new FocusHandler(this.hint,this.warningMessage));
      g.setWidget(i,1,propTextBox);
    }
 else     if ("BOOLEAN".equals(storageParams.get(4 * paramidx))) {
      final int index=paramidx;
      final CheckBox propCheckbox=new CheckBox();
      g.getCellFormatter().setHorizontalAlignment(i,0,HasHorizontalAlignment.ALIGN_RIGHT);
      g.setWidget(i,0,propCheckbox);
      if (Boolean.parseBoolean(storageParams.get(4 * index + 2))) {
        propCheckbox.setChecked(true);
      }
 else {
        propCheckbox.setChecked(false);
      }
      propCheckbox.addClickListener(new ClickListener(){
        public void onClick(        Widget sender){
          if (((CheckBox)sender).isChecked()) {
            storageParams.set(4 * index + 2,String.valueOf(true));
          }
 else {
            storageParams.set(4 * index + 2,String.valueOf(false));
          }
        }
      }
);
      g.setWidget(i,1,new Label(storageParams.get(paramidx * 4 + 1)));
    }
  }
  return g;
}
