{
  HashMap<String,Integer> aclMap=new HashMap<String,Integer>();
  String canonicalId=null;
  if (srcList == null) {
    return aclMap;
  }
  Grantee grantee;
  CanonicalUser canonicalUser;
  Group group;
  String email;
  try {
    for (    Grant g : srcList.getGrants()) {
      grantee=g.getGrantee();
      if (grantee == null) {
        continue;
      }
 else {
        canonicalUser=grantee.getCanonicalUser();
        group=grantee.getGroup();
        email=grantee.getEmailAddress();
      }
      if (canonicalUser != null && !Strings.isNullOrEmpty(canonicalUser.getID())) {
        try {
          canonicalId=Accounts.lookupAccountByCanonicalId(canonicalUser.getID()).getCanonicalId();
        }
 catch (        AuthException e) {
          canonicalId=Accounts.lookupAccountById(canonicalUser.getID()).getCanonicalId();
        }
      }
 else       if (!Strings.isNullOrEmpty(email)) {
        canonicalId=Accounts.lookupUserByEmailAddress(email).getAccount().getCanonicalId();
      }
 else       if (group != null && !Strings.isNullOrEmpty(group.getUri())) {
        ObjectStorageProperties.S3_GROUP foundGroup=AclUtils.getGroupFromUri(group.getUri());
        if (foundGroup == null) {
          throw new NoSuchElementException("URI: " + group.getUri() + " not found in group map");
        }
        canonicalId=group.getUri();
      }
      if (canonicalId == null) {
        throw new NoSuchElementException("No canonicalId found for grant: " + g.toString());
      }
 else {
        int oldGrant=(aclMap.containsKey(canonicalId) ? aclMap.get(canonicalId) : 0);
        int newGrant=BitmapGrant.add(ObjectStorageProperties.Permission.valueOf(g.getPermission().toUpperCase()),oldGrant);
        if (newGrant != 0) {
          aclMap.put(canonicalId,newGrant);
        }
 else {
        }
      }
    }
  }
 catch (  Exception e) {
    LOG.warn("Error turning AccessControlList into kv map",e);
    throw new RuntimeException(e);
  }
  return aclMap;
}
