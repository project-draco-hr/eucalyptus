{
  final UpdateAutoScalingGroupResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  try {
    final AccountFullName accountFullName=ctx.getUserFullName().asAccountFullName();
    final Callback<AutoScalingGroup> groupCallback=new Callback<AutoScalingGroup>(){
      @Override public void fire(      final AutoScalingGroup autoScalingGroup){
        if (RestrictedTypes.filterPrivileged().apply(autoScalingGroup)) {
          if (request.getDefaultCooldown() != null)           autoScalingGroup.setDefaultCooldown(Numbers.intValue(request.getDefaultCooldown()));
          if (request.getHealthCheckGracePeriod() != null)           autoScalingGroup.setHealthCheckGracePeriod(Numbers.intValue(request.getHealthCheckGracePeriod()));
          if (request.getHealthCheckType() != null)           autoScalingGroup.setHealthCheckType(Enums.valueOfFunction(HealthCheckType.class).apply(request.getHealthCheckType()));
          if (request.getLaunchConfigurationName() != null)           try {
            autoScalingGroup.setLaunchConfiguration(verifyOwnership(accountFullName,launchConfigurations.lookup(accountFullName,request.getLaunchConfigurationName(),Functions.<LaunchConfiguration>identity())));
          }
 catch (          AutoScalingMetadataNotFoundException e) {
            throw Exceptions.toUndeclared(new ValidationErrorException("Launch configuration not found: " + request.getLaunchConfigurationName()));
          }
catch (          AutoScalingMetadataException e) {
            throw Exceptions.toUndeclared(e);
          }
          if (request.getMaxSize() != null)           autoScalingGroup.setMaxSize(Numbers.intValue(request.getMaxSize()));
          if (request.getMinSize() != null)           autoScalingGroup.setMinSize(Numbers.intValue(request.getMinSize()));
          if (request.terminationPolicies() != null && !request.terminationPolicies().isEmpty())           autoScalingGroup.setTerminationPolicies(Lists.newArrayList(Sets.newLinkedHashSet(Iterables.filter(Iterables.transform(request.terminationPolicies(),Enums.valueOfFunction(TerminationPolicyType.class)),Predicates.not(Predicates.isNull())))));
          if (request.getDesiredCapacity() != null) {
            Integer updatedDesiredCapacity=Numbers.intValue(request.getDesiredCapacity());
            autoScalingGroup.updateDesiredCapacity(updatedDesiredCapacity,String.format("a user request update of AutoScalingGroup constraints to min: %1$d, max: %2$d, desired: %4$d changing the desired capacity from %3$d to %4$d",autoScalingGroup.getMinSize(),autoScalingGroup.getMaxSize(),autoScalingGroup.getDesiredCapacity(),updatedDesiredCapacity));
          }
          if (autoScalingGroup.getDesiredCapacity() < autoScalingGroup.getMinSize()) {
            throw Exceptions.toUndeclared(new ValidationErrorException("DesiredCapacity must not be less than MinSize"));
          }
          if (autoScalingGroup.getDesiredCapacity() > autoScalingGroup.getMaxSize()) {
            throw Exceptions.toUndeclared(new ValidationErrorException("DesiredCapacity must not be greater than MaxSize"));
          }
          final Iterable<String> subnetIds=Splitter.on(',').trimResults().omitEmptyStrings().split(nullToEmpty(request.getVpcZoneIdentifier()));
          final AtomicReference<Map<String,String>> subnetsByZone=new AtomicReference<>();
          final List<String> referenceErrors=activityManager.validateReferences(autoScalingGroup.getOwner(),Consumers.atomic(subnetsByZone),request.availabilityZones(),Collections.<String>emptyList(),subnetIds);
          verifyUnsupportedReferences(referenceErrors,request.getPlacementGroup());
          if (!referenceErrors.isEmpty()) {
            throw Exceptions.toUndeclared(new ValidationErrorException("Invalid parameters " + referenceErrors));
          }
          if (request.getVpcZoneIdentifier() != null) {
            autoScalingGroup.setSubnetIdByZone(subnetsByZone.get());
            autoScalingGroup.updateAvailabilityZones(Lists.newArrayList(Sets.newLinkedHashSet(request.availabilityZones() != null && !request.availabilityZones().isEmpty() ? request.availabilityZones() : subnetsByZone.get().keySet())));
          }
 else           if (request.availabilityZones() != null && !request.availabilityZones().isEmpty()) {
            autoScalingGroup.updateAvailabilityZones(Lists.newArrayList(Sets.newLinkedHashSet(request.availabilityZones())));
          }
        }
      }
    }
;
    autoScalingGroups.update(accountFullName,request.getAutoScalingGroupName(),groupCallback);
  }
 catch (  AutoScalingMetadataNotFoundException e) {
    throw new ValidationErrorException("Auto scaling group not found: " + request.getAutoScalingGroupName());
  }
catch (  Exception e) {
    handleException(e);
  }
  return reply;
}
