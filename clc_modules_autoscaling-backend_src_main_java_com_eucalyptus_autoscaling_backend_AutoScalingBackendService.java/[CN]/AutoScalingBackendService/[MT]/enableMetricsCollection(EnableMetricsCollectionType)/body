{
  final EnableMetricsCollectionResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  try {
    final AccountFullName accountFullName=ctx.getUserFullName().asAccountFullName();
    final Callback<AutoScalingGroup> groupCallback=new Callback<AutoScalingGroup>(){
      @Override public void fire(      final AutoScalingGroup autoScalingGroup){
        if (RestrictedTypes.filterPrivileged().apply(autoScalingGroup)) {
          final Set<MetricCollectionType> metricsToEnable=EnumSet.allOf(MetricCollectionType.class);
          if (request.getMetrics() != null && !request.getMetrics().getMember().isEmpty()) {
            metricsToEnable.clear();
            Iterables.addAll(metricsToEnable,Iterables.transform(request.getMetrics().getMember(),FUtils.valueOfFunction(MetricCollectionType.class)));
          }
          autoScalingGroup.getEnabledMetrics().addAll(metricsToEnable);
        }
      }
    }
;
    autoScalingGroups.update(accountFullName,request.getAutoScalingGroupName(),groupCallback);
  }
 catch (  AutoScalingMetadataNotFoundException e) {
    throw new ValidationErrorException("Auto scaling group not found: " + request.getAutoScalingGroupName());
  }
catch (  Exception e) {
    handleException(e);
  }
  return reply;
}
