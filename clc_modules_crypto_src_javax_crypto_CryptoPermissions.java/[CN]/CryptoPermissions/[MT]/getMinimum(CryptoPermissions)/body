{
  if (other == null) {
    return null;
  }
  if (this.perms.containsKey(CryptoAllPermission.ALG_NAME)) {
    return other;
  }
  if (other.perms.containsKey(CryptoAllPermission.ALG_NAME)) {
    return this;
  }
  CryptoPermissions ret=new CryptoPermissions();
  PermissionCollection thatWildcard=(PermissionCollection)other.perms.get(CryptoPermission.ALG_NAME_WILDCARD);
  int maxKeySize=0;
  if (thatWildcard != null) {
    maxKeySize=((CryptoPermission)thatWildcard.elements().nextElement()).getMaxKeySize();
  }
  Enumeration thisKeys=this.perms.keys();
  while (thisKeys.hasMoreElements()) {
    String alg=(String)thisKeys.nextElement();
    PermissionCollection thisPc=(PermissionCollection)this.perms.get(alg);
    PermissionCollection thatPc=(PermissionCollection)other.perms.get(alg);
    CryptoPermission[] partialResult;
    if (thatPc == null) {
      if (thatWildcard == null) {
        continue;
      }
      partialResult=getMinimum(maxKeySize,thisPc);
    }
 else {
      partialResult=getMinimum(thisPc,thatPc);
    }
    for (int i=0; i < partialResult.length; i++) {
      ret.add(partialResult[i]);
    }
  }
  PermissionCollection thisWildcard=(PermissionCollection)this.perms.get(CryptoPermission.ALG_NAME_WILDCARD);
  if (thisWildcard == null) {
    return ret;
  }
  maxKeySize=((CryptoPermission)thisWildcard.elements().nextElement()).getMaxKeySize();
  Enumeration thatKeys=other.perms.keys();
  while (thatKeys.hasMoreElements()) {
    String alg=(String)thatKeys.nextElement();
    if (this.perms.containsKey(alg)) {
      continue;
    }
    PermissionCollection thatPc=(PermissionCollection)other.perms.get(alg);
    CryptoPermission[] partialResult;
    partialResult=getMinimum(maxKeySize,thatPc);
    for (int i=0; i < partialResult.length; i++) {
      ret.add(partialResult[i]);
    }
  }
  return ret;
}
