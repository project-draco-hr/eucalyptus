{
  AssociateAddressResponseType reply=(AssociateAddressResponseType)request.getReply();
  reply.set_return(false);
  Addresses.updateAddressingMode();
  final Address address=Addresses.restrictedLookup(request.getUserId(),request.isAdministrator(),request.getPublicIp());
  final VmInstance vm=VmInstances.restrictedLookup(request.getUserId(),request.isAdministrator(),request.getInstanceId());
  LOG.info(EventRecord.here(AddressManager.class,Events.ASSOCIATE,address.toString(),vm.toString()));
  final VmInstance oldVm=findCurrentAssignedVm(address);
  final Address oldAddr=findVmExistingAddress(vm);
  final boolean system=oldAddr != null ? oldAddr.isSystemOwned() : false;
  reply.set_return(false);
  final SuccessCallback assignTarget=new SuccessCallback(){
    public void apply(    Object t){
      if (system) {
        LOG.info(EventRecord.here(AddressManager.class,Events.RELEASE,oldAddr.toString()));
        Addresses.getAddressManager().releaseSystemAddress(oldAddr);
      }
      LOG.info(EventRecord.here(AddressManager.class,Events.ASSOCIATE,address.toString(),vm.toString()));
      AddressCategory.assign(address,vm).dispatch(address.getCluster());
      if (oldVm != null) {
        Addresses.system(oldVm);
      }
    }
  }
;
  final SuccessCallback unassignBystander=new SuccessCallback(){
    public void apply(    Object t){
      if (oldAddr != null) {
        LOG.info(EventRecord.here(AddressManager.class,Events.DISASSOCIATE,oldAddr.toString()));
        AddressCategory.unassign(oldAddr).onSuccess(assignTarget).dispatch(oldAddr.getCluster());
      }
 else {
        assignTarget.apply(t);
      }
    }
  }
;
  if (address.isAssigned()) {
    address.unassign().getCallback().onSuccess(unassignBystander).dispatch(oldAddr.getCluster());
  }
 else {
    unassignBystander.apply(null);
  }
  return reply;
}
