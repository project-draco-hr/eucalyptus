{
  AddressUtil.updateAddressingMode();
  AssociateAddressResponseType reply=(AssociateAddressResponseType)request.getReply();
  reply.set_return(false);
  LOG.debug("Associate: " + request.getPublicIp() + " => "+ request.getInstanceId());
  Address address=null;
  try {
    address=Addresses.getInstance().lookup(request.getPublicIp());
  }
 catch (  NoSuchElementException e) {
    return reply;
  }
  LOG.debug("Found address: " + address);
  VmInstance vm=null;
  try {
    vm=VmInstances.getInstance().lookup(request.getInstanceId());
  }
 catch (  NoSuchElementException e) {
    return reply;
  }
  LOG.debug("Found vm: " + vm);
  if (!request.isAdministrator() && !(request.getUserId().equals(address.getUserId()) && request.getUserId().equals(vm.getOwnerId())))   return reply;
  reply.set_return(true);
  if (!vm.getNetworkConfig().getIpAddress().equals(vm.getNetworkConfig().getIgnoredPublicIp()) && !VmInstance.DEFAULT_IP.equals(vm.getNetworkConfig().getIgnoredPublicIp())) {
    String currentPublicIp=vm.getNetworkConfig().getIgnoredPublicIp();
    try {
      Address currentAddr=Addresses.getInstance().lookup(currentPublicIp);
      LOG.debug("Dispatching unassign message for: " + address);
      if (currentAddr.isAssigned()) {
        AddressUtil.unassignAddressFromVm(currentAddr,vm);
      }
 else {
        AddressUtil.dispatchUnassignAddress(currentAddr,vm);
      }
    }
 catch (    NoSuchElementException e) {
    }
  }
  if (address.isAssigned() && address.getUserId().equals(request.getUserId()) && !address.isPending()) {
    LOG.debug("Dispatching unassign message for: " + address);
    try {
      VmInstance oldVm=VmInstances.getInstance().lookup(address.getInstanceId());
      if (address.isAssigned()) {
        AddressUtil.unassignAddressFromVm(address,oldVm);
      }
 else {
        AddressUtil.dispatchUnassignAddress(address,oldVm);
      }
      AddressUtil.tryAssignSystemAddress(oldVm);
    }
 catch (    NoSuchElementException e) {
      LOG.error(e,e);
    }
  }
  AddressUtil.assignAddressToVm(address,vm);
  return reply;
}
