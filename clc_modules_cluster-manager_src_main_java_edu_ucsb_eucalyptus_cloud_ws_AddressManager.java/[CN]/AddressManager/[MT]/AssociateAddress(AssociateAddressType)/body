{
  AssociateAddressResponseType reply=(AssociateAddressResponseType)request.getReply();
  reply.set_return(false);
  Addresses.updateAddressingMode();
  Address address=Addresses.restrictedLookup(request.getUserId(),request.isAdministrator(),request.getPublicIp());
  VmInstance vm=VmInstances.restrictedLookup(request.getUserId(),request.isAdministrator(),request.getInstanceId());
  LOG.info(EventRecord.here(AddressManager.class,Events.ASSOCIATE,address.toString(),vm.toString()));
  NetworkConfigType netConfig=vm.getNetworkConfig();
  reply.set_return(true);
  if (vm.hasPublicAddress()) {
    try {
      Address currentAddr=Addresses.getInstance().lookup(vm.getNetworkConfig().getIgnoredPublicIp());
      LOG.info(EventRecord.here(AddressManager.class,Events.UNASSIGNFROMVM,currentAddr.toString(),vm.toString()));
      if (currentAddr.isAssigned()) {
        Addresses.unassign(address);
      }
    }
 catch (    Exception e) {
      LOG.debug(e,e);
    }
  }
  if (address.isAssigned() && address.getUserId().equals(request.getUserId()) && !address.isPending()) {
    try {
      VmInstance oldVm=VmInstances.getInstance().lookup(address.getInstanceId());
      LOG.info(EventRecord.here(AddressManager.class,Events.UNASSIGNFROMVM,address.toString(),oldVm.toString()));
      Addresses.unassign(address);
    }
 catch (    Exception e) {
      LOG.error(e,e);
    }
  }
  LOG.info(EventRecord.here(AddressManager.class,Events.ASSOCIATE,address.toString(),vm.toString()));
  Addresses.assign(address,vm);
  return reply;
}
