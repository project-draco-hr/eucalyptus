{
  AbstractKeyStore keyStore=null;
  try {
    keyStore=ServiceKeyStore.getInstance();
  }
 catch (  Exception ex) {
    LOG.warn(ex,ex);
  }
  String date=new Date().toString();
  String httpVerb=verb;
  String addrPath=null;
  try {
    java.net.URI addrUri=new URL(addr).toURI();
    addrPath=addrUri.getPath().toString() + "?" + addrUri.getQuery().toString();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    return null;
  }
  String data=httpVerb + "\n" + date+ "\n"+ addrPath+ "\n";
  HttpMethodBase method=null;
  if (httpVerb.equals("PUT")) {
    method=new PutMethodWithProgress(addr);
  }
 else   if (httpVerb.equals("GET")) {
    method=new GetMethod(addr);
  }
 else   if (httpVerb.equals("DELETE")) {
    method=new DeleteMethod(addr);
  }
  method.setRequestHeader("Authorization","Euca");
  method.setRequestHeader("Date",date);
  method.setRequestHeader("Expect","100-continue");
  method.setRequestHeader(StorageProperties.EUCALYPTUS_OPERATION,eucaOperation);
  if (eucaHeader != null) {
    method.setRequestHeader(StorageProperties.EUCALYPTUS_HEADER,eucaHeader);
  }
  try {
    PrivateKey ccPrivateKey=(PrivateKey)keyStore.getKey(EucalyptusProperties.NAME,EucalyptusProperties.NAME);
    X509Certificate cert=keyStore.getCertificate(EucalyptusProperties.NAME);
    if (cert == null)     return null;
    byte[] pemCertBytes=Hashes.getPemBytes(cert);
    Signature sign=Signature.getInstance("SHA1withRSA");
    sign.initSign(ccPrivateKey);
    sign.update(data.getBytes());
    byte[] sig=sign.sign();
    method.setRequestHeader("EucaCert",new String(Base64.encode(pemCertBytes)));
    method.setRequestHeader("EucaSignature",new String(Base64.encode(sig)));
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  return method;
}
