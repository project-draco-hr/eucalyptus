{
  long size=0;
  File volumeFile=new File(volumeFileName);
  File snapshotFile=new File(snapshotFileName);
  assert(snapshotFile.exists() && volumeFile.exists());
  size+=shouldTransferVolume ? snapshotFile.length() + volumeFile.length() : snapshotFile.length();
  SnapshotProgressCallback callback=new SnapshotProgressCallback(snapshotId,size,StorageProperties.TRANSFER_CHUNK_SIZE);
  Map<String,String> httpParamaters=new HashMap<String,String>();
  HttpWriter httpWriter;
  if (shouldTransferVolume) {
    try {
      List<String> returnValues=blockManager.getSnapshotValues(volumeId);
      if (returnValues.size() > 0) {
        httpParamaters.put("SnapshotVgName",returnValues.get(0));
        httpParamaters.put("SnapshotLvName",returnValues.get(1));
      }
    }
 catch (    Exception ex) {
      LOG.warn(ex,ex);
    }
    httpWriter=new HttpWriter("PUT",volumeFile,callback,volumeBucket,volumeId,"StoreSnapshot",null,httpParamaters);
    try {
      httpWriter.run();
      EntityWrapper<VolumeInfo> db=new EntityWrapper<VolumeInfo>();
      VolumeInfo volumeInfo=new VolumeInfo(volumeId);
      List<VolumeInfo> volumeInfos=db.query(volumeInfo);
      if (volumeInfos.size() > 0) {
        VolumeInfo volInfo=volumeInfos.get(0);
        volInfo.setTransferred(true);
      }
      db.commit();
    }
 catch (    Exception ex) {
      LOG.warn(ex,ex);
      return;
    }
  }
  try {
    List<String> returnValues=blockManager.getSnapshotValues(snapshotId);
    if (returnValues.size() > 0) {
      httpParamaters.put("SnapshotVgName",returnValues.get(0));
      httpParamaters.put("SnapshotLvName",returnValues.get(1));
    }
  }
 catch (  Exception ex) {
    LOG.warn(ex,ex);
  }
  httpWriter=new HttpWriter("PUT",snapshotFile,callback,volumeBucket,snapshotId,"StoreSnapshot",null,httpParamaters,true);
  try {
    httpWriter.run();
  }
 catch (  Exception ex) {
    LOG.warn(ex,ex);
  }
}
