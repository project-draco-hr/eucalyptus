{
  boolean success=true;
  if (snapshotId != null) {
    EntityWrapper<SnapshotInfo> db=new EntityWrapper<SnapshotInfo>();
    try {
      SnapshotInfo snapshotInfo=new SnapshotInfo(snapshotId);
      List<SnapshotInfo> foundSnapshotInfos=db.query(snapshotInfo);
      if (foundSnapshotInfos.size() == 0) {
        String volumePath=getVolume(volumeId,snapshotSetName,snapshotId);
        size=blockManager.createVolume(volumeId,volumePath);
        db.commit();
      }
 else {
        SnapshotInfo foundSnapshotInfo=foundSnapshotInfos.get(0);
        if (!foundSnapshotInfo.getStatus().equals(StorageProperties.Status.available.toString())) {
          success=false;
          db.rollback();
          LOG.warn("snapshot " + foundSnapshotInfo.getSnapshotId() + " not available.");
        }
 else {
          size=blockManager.createVolume(volumeId,snapshotId,size);
          db.commit();
        }
      }
    }
 catch (    Exception ex) {
      success=false;
      db.rollback();
      LOG.warn(ex,ex);
    }
  }
 else {
    try {
      assert(size > 0);
      blockManager.createVolume(volumeId,size);
    }
 catch (    Exception ex) {
      success=false;
      LOG.warn(ex,ex);
    }
  }
  EntityWrapper<VolumeInfo> db=new EntityWrapper<VolumeInfo>();
  VolumeInfo volumeInfo=new VolumeInfo(volumeId);
  try {
    VolumeInfo foundVolumeInfo=db.getUnique(volumeInfo);
    if (foundVolumeInfo != null) {
      if (success) {
        if (shouldEnforceUsageLimits) {
          EntityWrapper<VolumeInfo> dbVol=new EntityWrapper<VolumeInfo>();
          VolumeInfo volInfo=new VolumeInfo();
          List<VolumeInfo> volInfos=db.query(volInfo);
          int totalVolumeSize=0;
          for (          VolumeInfo vinfo : volInfos) {
            totalVolumeSize+=vinfo.getSize();
          }
          if ((totalVolumeSize + size) > StorageProperties.MAX_TOTAL_VOLUME_SIZE || (size > StorageProperties.MAX_VOLUME_SIZE)) {
            LOG.warn("Volume size limit exceeeded");
            foundVolumeInfo.setStatus(StorageProperties.Status.failed.toString());
            db.commit();
            return;
          }
        }
        foundVolumeInfo.setStatus(StorageProperties.Status.available.toString());
      }
 else {
        foundVolumeInfo.setStatus(StorageProperties.Status.failed.toString());
      }
      if (snapshotId != null) {
        foundVolumeInfo.setSize(size);
      }
    }
 else {
      db.rollback();
      throw new EucalyptusCloudException();
    }
    db.commit();
  }
 catch (  EucalyptusCloudException ex) {
    LOG.warn(ex,ex);
  }
}
