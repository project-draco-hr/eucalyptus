{
  DeleteStorageVolumeResponseType reply=(DeleteStorageVolumeResponseType)request.getReply();
  if (!enableStorage) {
    LOG.warn("Storage has been disabled. Please check your setup");
    return reply;
  }
  String volumeId=request.getVolumeId();
  EntityWrapper<VolumeInfo> db=new EntityWrapper<VolumeInfo>();
  VolumeInfo volumeInfo=new VolumeInfo();
  volumeInfo.setVolumeId(volumeId);
  List<VolumeInfo> volumeList=db.query(volumeInfo);
  reply.set_return(Boolean.FALSE);
  if (volumeList.size() > 0) {
    VolumeInfo foundVolume=volumeList.get(0);
    String status=foundVolume.getStatus();
    if (status.equals(StorageProperties.Status.available.toString()) || status.equals(StorageProperties.Status.failed.toString())) {
      try {
        blockManager.deleteVolume(volumeId);
        volumeStorageManager.deleteObject("",volumeId);
        db.delete(foundVolume);
        db.commit();
      }
 catch (      IOException ex) {
        LOG.warn(ex,ex);
      }
    }
 else {
      db.rollback();
      throw new VolumeInUseException(volumeId);
    }
  }
 else {
    db.rollback();
    throw new NoSuchVolumeException(volumeId);
  }
  SnapshotInfo snapInfo=new SnapshotInfo();
  snapInfo.setVolumeId(volumeId);
  EntityWrapper<SnapshotInfo> dbSnap=new EntityWrapper<SnapshotInfo>();
  List<SnapshotInfo> snapInfos=dbSnap.query(snapInfo);
  for (  SnapshotInfo snapshotInfo : snapInfos) {
    String snapshotId=snapInfo.getSnapshotId();
    String status=snapshotInfo.getStatus();
    if (status.equals(StorageProperties.Status.available.toString()) || status.equals(StorageProperties.Status.failed.toString())) {
      try {
        blockManager.deleteSnapshot(snapshotId);
        snapshotStorageManager.deleteObject("",snapshotId);
        dbSnap.delete(snapshotInfo);
      }
 catch (      IOException ex) {
        LOG.warn("Could not delete snapshot " + snapshotId);
      }
    }
  }
  dbSnap.commit();
  return reply;
}
