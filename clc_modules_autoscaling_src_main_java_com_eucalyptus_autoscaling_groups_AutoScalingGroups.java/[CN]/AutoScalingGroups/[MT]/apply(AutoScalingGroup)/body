{
  final AutoScalingGroupType type=new AutoScalingGroupType();
  type.setAutoScalingGroupARN(group.getArn());
  type.setAutoScalingGroupName(group.getAutoScalingGroupName());
  type.setAvailabilityZones(new AvailabilityZones(group.getAvailabilityZones()));
  type.setCreatedTime(group.getCreationTimestamp());
  type.setDefaultCooldown(group.getDefaultCooldown());
  type.setDesiredCapacity(group.getDesiredCapacity());
  type.setEnabledMetrics(new EnabledMetrics(group.getEnabledMetrics() == null ? null : Ordering.natural().sortedCopy(Iterables.transform(group.getEnabledMetrics(),Strings.toStringFunction()))));
  type.setHealthCheckGracePeriod(group.getHealthCheckGracePeriod());
  type.setHealthCheckType(Strings.toString(group.getHealthCheckType()));
  type.setLaunchConfigurationName(AutoScalingMetadatas.toDisplayName().apply(group.getLaunchConfiguration()));
  type.setLoadBalancerNames(new LoadBalancerNames(group.getLoadBalancerNames()));
  type.setMaxSize(group.getMaxSize());
  type.setMinSize(group.getMinSize());
  final Collection<SuspendedProcess> suspendedProcesses=group.getSuspendedProcesses();
  if (suspendedProcesses != null && !suspendedProcesses.isEmpty()) {
    type.setSuspendedProcesses(new SuspendedProcesses());
    Iterables.addAll(type.getSuspendedProcesses().getMember(),Iterables.transform(suspendedProcesses,TypeMappers.lookup(SuspendedProcess.class,SuspendedProcessType.class)));
  }
  type.setTerminationPolicies(new TerminationPolicies(group.getTerminationPolicies() == null ? null : Collections2.transform(group.getTerminationPolicies(),Strings.toStringFunction())));
  return type;
}
