{
  Grid g=new Grid(10,2);
  g.setStyleName("euca-table");
  g.setCellPadding(4);
  g.setWidget(0,0,new Label("Name: "));
  g.getCellFormatter().setHorizontalAlignment(0,0,HasHorizontalAlignment.ALIGN_RIGHT);
  final HorizontalPanel namePanel=new HorizontalPanel();
  namePanel.setSpacing(6);
  if (clusterInfo.isCommitted()) {
    namePanel.add(new Label(clusterInfo.getName()));
  }
 else {
    final TextBox nb=new TextBox();
    nb.addChangeListener(new ChangeCallback(this,row));
    nb.setVisibleLength(12);
    nb.setText(clusterInfo.getName());
    nb.addFocusListener(new FocusHandler(this.hint,this.warningMessage));
    namePanel.add(nb);
  }
  namePanel.add(new Button("Delete Cluster",new DeleteCallback(this,row)));
  g.setWidget(0,1,namePanel);
  g.setWidget(1,0,new Label("Host: "));
  g.getCellFormatter().setHorizontalAlignment(1,0,HasHorizontalAlignment.ALIGN_RIGHT);
  final TextBox hb=new TextBox();
  hb.addChangeListener(new ChangeCallback(this,row));
  hb.setVisibleLength(20);
  hb.setText(clusterInfo.getHost());
  hb.addFocusListener(new FocusHandler(this.hint,this.warningMessage));
  g.setWidget(1,1,hb);
  g.setWidget(2,0,new Label("Port: "));
  g.getCellFormatter().setHorizontalAlignment(2,0,HasHorizontalAlignment.ALIGN_RIGHT);
  final TextBox pb=new TextBox();
  pb.addChangeListener(new ChangeCallback(this,row));
  pb.setVisibleLength(5);
  pb.setText("" + clusterInfo.getPort());
  pb.addFocusListener(new FocusHandler(this.hint,this.warningMessage));
  g.setWidget(2,1,pb);
  g.setWidget(3,0,new Label("Storage Interface: "));
  g.getCellFormatter().setHorizontalAlignment(3,0,HasHorizontalAlignment.ALIGN_RIGHT);
  final TextBox sib=new TextBox();
  sib.addChangeListener(new ChangeCallback(this,row));
  sib.setVisibleLength(10);
  sib.setText("" + systemConfig.getStorageInterface());
  sib.addFocusListener(new FocusHandler(this.hint,this.warningMessage));
  g.setWidget(3,1,sib);
  g.setWidget(4,0,new Label("Volumes Path:"));
  g.getCellFormatter().setHorizontalAlignment(4,0,HasHorizontalAlignment.ALIGN_RIGHT);
  final TextBox volumesPathBox=new TextBox();
  volumesPathBox.addChangeListener(new ChangeCallback(this,row));
  volumesPathBox.setVisibleLength(40);
  volumesPathBox.setText(systemConfig.getStorageVolumesPath());
  volumesPathBox.addFocusListener(new FocusHandler(this.hint,this.warningMessage));
  g.setWidget(4,1,volumesPathBox);
  g.setWidget(5,0,new Label("Max volume size:"));
  g.getCellFormatter().setHorizontalAlignment(5,0,HasHorizontalAlignment.ALIGN_RIGHT);
  final TextBox volumeMaxBox=new TextBox();
  volumeMaxBox.addChangeListener(new ChangeCallback(this,row));
  volumeMaxBox.setVisibleLength(10);
  volumeMaxBox.setText("" + systemConfig.getStorageMaxVolumeSizeInGB());
  volumeMaxBox.addFocusListener(new FocusHandler(this.hint,this.warningMessage));
  final HorizontalPanel volumesMaxPanel=new HorizontalPanel();
  volumesMaxPanel.add(volumeMaxBox);
  volumesMaxPanel.add(new HTML("&nbsp; GB"));
  g.setWidget(5,1,volumesMaxPanel);
  g.setWidget(6,0,new Label("Disk space reserved for volumes:"));
  g.getCellFormatter().setHorizontalAlignment(6,0,HasHorizontalAlignment.ALIGN_RIGHT);
  final TextBox volumesTotalBox=new TextBox();
  volumesTotalBox.addChangeListener(new ChangeCallback(this,row));
  volumesTotalBox.setVisibleLength(10);
  volumesTotalBox.setText("" + systemConfig.getStorageVolumesTotalInGB());
  volumesTotalBox.addFocusListener(new FocusHandler(this.hint,this.warningMessage));
  final HorizontalPanel volumesTotalPanel=new HorizontalPanel();
  volumesTotalPanel.add(volumesTotalBox);
  volumesTotalPanel.add(new HTML("&nbsp; GB"));
  g.setWidget(6,1,volumesTotalPanel);
  g.setWidget(9,0,new Label("Maximum of"));
  g.getCellFormatter().setHorizontalAlignment(9,0,HasHorizontalAlignment.ALIGN_RIGHT);
  final TextBox publicAddressesBox=new TextBox();
  publicAddressesBox.addChangeListener(new ChangeCallback(this,row));
  publicAddressesBox.setVisibleLength(10);
  publicAddressesBox.setText("" + systemConfig.getMaxUserPublicAddresses());
  final HorizontalPanel publicAddressesPanel=new HorizontalPanel();
  publicAddressesPanel.add(publicAddressesBox);
  publicAddressesPanel.add(new HTML("&nbsp; public IP addresses per user"));
  g.setWidget(9,1,publicAddressesPanel);
  g.setWidget(8,0,new Label("Total of"));
  g.getCellFormatter().setHorizontalAlignment(8,0,HasHorizontalAlignment.ALIGN_RIGHT);
  final TextBox reservedAddressesBox=new TextBox();
  reservedAddressesBox.addChangeListener(new ChangeCallback(this,row));
  reservedAddressesBox.setVisibleLength(10);
  reservedAddressesBox.setText("" + systemConfig.getSystemReservedPublicAddresses());
  final HorizontalPanel reservedAddressesPanel=new HorizontalPanel();
  reservedAddressesPanel.add(reservedAddressesBox);
  reservedAddressesPanel.add(new HTML("&nbsp; public IP addresses reserved for instances"));
  reservedAddressesBox.setText("" + systemConfig.getSystemReservedPublicAddresses());
  g.setWidget(8,1,reservedAddressesPanel);
  final HorizontalPanel dynamicAddressesingPanel=new HorizontalPanel();
  final CheckBox dynamicAddressesCheckbox=new CheckBox("Enable dynamic public IP address assignment");
  dynamicAddressesingPanel.add(dynamicAddressesCheckbox);
  if (systemConfig.isDoDynamicPublicAddresses()) {
    dynamicAddressesCheckbox.setChecked(true);
    reservedAddressesBox.setEnabled(false);
  }
 else {
    dynamicAddressesCheckbox.setChecked(false);
    reservedAddressesBox.setEnabled(true);
  }
  dynamicAddressesCheckbox.addClickListener(new ClickListener(){
    public void onClick(    Widget sender){
      if (((CheckBox)sender).isChecked()) {
        reservedAddressesBox.setEnabled(false);
        systemConfig.setDoDynamicPublicAddresses(true);
      }
 else {
        reservedAddressesBox.setEnabled(true);
        systemConfig.setDoDynamicPublicAddresses(false);
      }
    }
  }
);
  g.setWidget(7,1,dynamicAddressesingPanel);
  return g;
}
