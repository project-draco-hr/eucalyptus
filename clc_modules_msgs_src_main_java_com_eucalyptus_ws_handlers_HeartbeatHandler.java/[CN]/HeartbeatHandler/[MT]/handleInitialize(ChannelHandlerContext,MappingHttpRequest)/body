{
  HeartbeatType msg=(HeartbeatType)request.getMessage();
  LOG.info(LogUtil.header("Got heartbeat event: " + LogUtil.dumpObject(msg)));
  InetSocketAddress addr=(InetSocketAddress)ctx.getChannel().getRemoteAddress();
  InetSocketAddress localAddr=(InetSocketAddress)ctx.getChannel().getLocalAddress();
  LOG.info(LogUtil.subheader("Using " + addr.getHostName() + " as the database address."));
  try {
    this.prepareComponent("db",addr.getHostName());
    this.prepareComponent("dns",addr.getHostName());
    this.prepareComponent("eucalyptus",addr.getHostName());
  }
 catch (  ServiceRegistrationException ex1) {
    LOG.error(ex1,ex1);
    System.exit(123);
  }
  for (  HeartbeatComponentType component : msg.getComponents()) {
    LOG.info(LogUtil.subheader("Registering local component: " + LogUtil.dumpObject(component)));
    try {
      final Component comp=safeLookupComponent(component.getComponent());
      URI uri=comp.getUri(localAddr.getHostName(),8773);
      ServiceConfiguration config=comp.getBuilder().lookupByName(comp.getName());
      System.setProperty("euca." + component.getComponent() + ".name",component.getName());
      comp.loadService(config);
      initializedComponents.add(component.getComponent());
    }
 catch (    Exception ex) {
      LOG.warn(LogUtil.header("Failed registering local component " + LogUtil.dumpObject(component) + ":  Are the required packages installed?\n The cause of the error: "+ ex.getMessage()));
      LOG.error(ex,ex);
    }
  }
  try {
    if (!initializedComponents.contains(ComponentIds.lookup(Walrus.class).name())) {
      this.prepareComponent("walrus",addr.getHostName());
    }
    for (    Bootstrap.Stage stage : Bootstrap.Stage.values()) {
      stage.updateBootstrapDependencies();
    }
    try {
      GroovyUtil.evaluateScript("after_database.groovy");
    }
 catch (    ScriptExecutionFailedException e1) {
      LOG.debug(e1,e1);
      System.exit(123);
    }
    boolean foundDb=false;
    try {
      foundDb=Internets.testReachability(addr.getHostName());
      LOG.debug("Initializing SSL just in case: " + SslSetup.class);
      foundDb=true;
    }
 catch (    Throwable e) {
      foundDb=false;
    }
    if (foundDb) {
      HttpResponse response=new DefaultHttpResponse(request.getProtocolVersion(),HttpResponseStatus.OK);
      ChannelFuture writeFuture=ctx.getChannel().write(response);
      writeFuture.addListener(ChannelFutureListener.CLOSE);
      initialized.set(true);
      if (this.channel != null) {
        this.channel.close();
      }
    }
 else {
      HttpResponse response=new DefaultHttpResponse(request.getProtocolVersion(),HttpResponseStatus.NOT_ACCEPTABLE);
      ChannelFuture writeFuture=ctx.getChannel().write(response);
      writeFuture.addListener(ChannelFutureListener.CLOSE);
    }
  }
 catch (  ServiceRegistrationException e) {
    LOG.error(e,e);
    System.exit(123);
  }
catch (  NoSuchElementException e) {
    LOG.error(e,e);
    System.exit(123);
  }
}
