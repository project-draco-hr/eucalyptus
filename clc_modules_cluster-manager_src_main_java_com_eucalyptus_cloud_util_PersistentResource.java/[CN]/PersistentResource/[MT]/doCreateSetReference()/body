{
  SetReference<T,R> ref=new SetReference<T,R>(){
    private volatile boolean finished=false;
    @Override public T set(    R referer) throws ResourceAllocationException {
      this.checkFinished();
      T ret=PersistentResource.this.doSetReferer(referer,Resource.State.PENDING,Resource.State.EXTANT);
      this.finished=true;
      return ret;
    }
    @Override public T abort() throws ResourceAllocationException {
      this.checkFinished();
      T ret=PersistentResource.this.doSetReferer(null,null,Resource.State.FREE);
      this.finished=true;
      return ret;
    }
    private void checkFinished() throws ResourceAllocationException {
      if (this.finished) {
        throw new ResourceAllocationException("Failed to set referer since this reference has already been set: " + PersistentResource.this.getDisplayName() + " to "+ PersistentResource.this.getReferer()+ " and is currently in state "+ PersistentResource.this.getState());
      }
    }
    @Override public T get(){
      EntityWrapper<T> db=Entities.get((Class<T>)PersistentResource.this.getClass());
      try {
        T ret=db.getUnique((T)PersistentResource.this);
        db.commit();
        return ret;
      }
 catch (      Exception ex) {
        Logs.extreme().error(ex,ex);
        db.rollback();
        throw new RuntimeException(ex.getMessage(),ex);
      }
    }
    @Override public int compareTo(    T o){
      return PersistentResource.this.compareTo(o);
    }
  }
;
  return ref;
}
