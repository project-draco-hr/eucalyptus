{
  Class targetType=obj.getClass();
  if (targetType.isAnonymousClass()) {
    targetType=(targetType.getSuperclass() != null ? targetType.getSuperclass() : targetType.getInterfaces()[0]);
  }
  String exportString="jmx.export{ bean( " + " target: obj, " + " name: obj.class.package.name:\"type=${obj.class.simpleName}\","+ " desc: \"${obj.toString()}\""+ " ) }";
  for (  Class c : Classes.ancestry(targetType)) {
    File jmxConfig=SubDirectory.MANAGEMENT.getChildFile(c.getCanonicalName());
    if (jmxConfig.exists()) {
      LOG.debug("Trying to read jmx config file: " + jmxConfig.getAbsolutePath());
      try {
        exportString=Files.toString(jmxConfig,Charset.defaultCharset());
        LOG.debug("Succeeded reading jmx config file: " + jmxConfig.getAbsolutePath());
        break;
      }
 catch (      IOException ex) {
        LOG.error(ex,ex);
      }
    }
  }
  try {
    LOG.debug("Exporting MBean: " + obj);
    LOG.debug("Exporting MBean: " + exportString);
    List<GroovyMBean> mbeans=(List<GroovyMBean>)GroovyUtil.eval(exportString,new HashMap(){
{
        put("jmx",jmxBuilder);
        put("obj",obj);
      }
    }
);
    for (    GroovyMBean mbean : mbeans) {
      LOG.info("MBean server: default=" + mbean.server().getDefaultDomain() + " all="+ Arrays.asList(mbean.server().getDomains()));
      LOG.info("Exported MBean: " + mbean);
    }
  }
 catch (  ScriptExecutionFailedException ex) {
    LOG.error("Exporting MBean failed: " + ex.getMessage(),ex);
  }
catch (  IOException ex) {
    LOG.error("Error after export MBean: " + ex.getMessage(),ex);
  }
}
