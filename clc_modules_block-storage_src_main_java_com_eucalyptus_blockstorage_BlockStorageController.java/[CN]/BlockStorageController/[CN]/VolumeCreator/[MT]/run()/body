{
  boolean success=true;
  if (snapshotId != null) {
    try {
      SnapshotInfo snapshotInfo=new SnapshotInfo(snapshotId);
      List<SnapshotInfo> foundSnapshotInfos=Transactions.findAll(snapshotInfo);
      if (foundSnapshotInfos.size() == 0) {
        EucaSemaphore semaphore=EucaSemaphoreDirectory.getSolitarySemaphore(snapshotId);
        try {
          semaphore.acquire();
          foundSnapshotInfos=Transactions.findAll(snapshotInfo);
          if (foundSnapshotInfos.size() == 0) {
            SnapshotInfo firstSnap=null;
            snapshotInfo.setScName(null);
            try (TransactionResource tr=Entities.transactionFor(SnapshotInfo.class)){
              Criteria snapCriteria=Entities.createCriteria(SnapshotInfo.class).setReadOnly(true).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).setCacheable(true).add(Example.create(snapshotInfo).enableLike(MatchMode.EXACT)).addOrder(Order.asc("creationTimestamp"));
              foundSnapshotInfos=(List<SnapshotInfo>)snapCriteria.list();
              tr.commit();
            }
             if (foundSnapshotInfos != null && foundSnapshotInfos.size() > 0) {
              firstSnap=foundSnapshotInfos.get(0);
            }
 else {
              throw new EucalyptusCloudException("No record of snapshot " + snapshotId + " on any SC");
            }
            if (firstSnap.getSizeGb() == null || firstSnap.getSizeGb() <= 0) {
              throw new EucalyptusCloudException("Snapshot size for " + snapshotId + " is unknown. Cannot prep snapshot holder on the storage backend");
            }
            if (!blockManager.getFromBackend(snapshotId,firstSnap.getSizeGb())) {
              LOG.debug(snapshotId + " not found on storage backend. Will attempt to download from objectstorage gateway");
              String bucket=null;
              String key=null;
              if (StringUtils.isBlank(firstSnap.getSnapshotLocation())) {
                throw new EucalyptusCloudException("Snapshot location (bucket, key) for " + snapshotId + " is unknown. Cannot download snapshot from objectstorage.");
              }
              String[] names=SnapshotInfo.getSnapshotBucketKeyNames(firstSnap.getSnapshotLocation());
              bucket=names[0];
              key=names[1];
              if (StringUtils.isBlank(bucket) || StringUtils.isBlank(key)) {
                throw new EucalyptusCloudException("Failed to parse bucket and key information for downloading " + snapshotId + ". Cannot download snapshot from objectstorage.");
              }
              SnapshotTransfer snapshotTransfer=new S3SnapshotTransfer(snapshotId,bucket,key);
              Long actualSizeInBytes=null;
              try {
                actualSizeInBytes=snapshotTransfer.getSizeInBytes();
              }
 catch (              Exception e) {
                LOG.debug("Snapshot size not found",e);
              }
              if (actualSizeInBytes == null) {
                String tmpSnapshotFileName=null;
                try {
                  tmpSnapshotFileName=downloadSnapshotToTempFile(snapshotTransfer);
                  File snapFile=new File(tmpSnapshotFileName);
                  if (!snapFile.exists()) {
                    throw new EucalyptusCloudException("Unable to find snapshot " + snapshotId + "on SC");
                  }
                  long actualSnapSizeInMB=(long)Math.ceil((double)snapFile.length() / StorageProperties.MB);
                  try {
                    String snapDestination=blockManager.prepareSnapshot(snapshotId,firstSnap.getSizeGb(),actualSnapSizeInMB);
                    if (snapDestination != null) {
                      if (snapDestination.startsWith("/dev/")) {
                        CommandOutput output=SystemUtil.runWithRawOutput(new String[]{StorageProperties.EUCA_ROOT_WRAPPER,"dd","if=" + tmpSnapshotFileName,"of=" + snapDestination,"bs=" + StorageProperties.blockSize});
                        LOG.debug("Output of dd command: " + output.error);
                        if (output.returnValue != 0) {
                          throw new EucalyptusCloudException("Failed to copy the snapshot to the right location due to: " + output.error);
                        }
                        cleanupFile(tmpSnapshotFileName);
                      }
 else {
                        if (!snapFile.renameTo(new File(snapDestination))) {
                          throw new EucalyptusCloudException("Failed to rename the snapshot");
                        }
                      }
                      blockManager.finishVolume(snapshotId);
                    }
 else {
                      LOG.warn("Block Manager replied that " + snapshotId + " not on backend, but snapshot preparation indicated that the snapshot is already present");
                    }
                  }
 catch (                  Exception ex) {
                    LOG.error("Failed to prepare the snapshot " + snapshotId + " on storage backend. Cleaning up the snapshot on backend",ex);
                    cleanFailedSnapshot(snapshotId);
                    throw ex;
                  }
                }
 catch (                Exception ex) {
                  LOG.error("Failed to prepare the snapshot " + snapshotId + " on the storage backend. Cleaning up the snapshot on SC",ex);
                  cleanupFile(tmpSnapshotFileName);
                  throw ex;
                }
              }
 else {
                long actualSnapSizeInMB=(long)Math.ceil((double)actualSizeInBytes / StorageProperties.MB);
                try {
                  String snapDestination=blockManager.prepareSnapshot(snapshotId,firstSnap.getSizeGb(),actualSnapSizeInMB);
                  if (snapDestination != null) {
                    snapshotTransfer.download(snapDestination);
                    blockManager.finishVolume(snapshotId);
                  }
 else {
                    LOG.warn("Block Manager replied that " + snapshotId + " not on backend, but snapshot preparation indicated that the snapshot is already present");
                  }
                }
 catch (                Exception ex) {
                  LOG.error("Failed to prepare the snapshot " + snapshotId + " on storage backend. Cleaning up the snapshot on backend",ex);
                  cleanFailedSnapshot(snapshotId);
                  throw ex;
                }
              }
            }
 else {
              LOG.debug(snapshotId + " found on storage backend");
            }
            try (TransactionResource tr=Entities.transactionFor(SnapshotInfo.class)){
              snapshotInfo=copySnapshotInfo(firstSnap);
              snapshotInfo.setProgress("100");
              snapshotInfo.setStartTime(new Date());
              snapshotInfo.setStatus(StorageProperties.Status.available.toString());
              Entities.persist(snapshotInfo);
              tr.commit();
            }
           }
 else {
            SnapshotInfo foundSnapshotInfo=foundSnapshotInfos.get(0);
            if (!StorageProperties.Status.available.toString().equals(foundSnapshotInfo.getStatus())) {
              success=false;
              LOG.warn("snapshot " + foundSnapshotInfo.getSnapshotId() + " not available.");
            }
 else {
            }
          }
        }
 catch (        InterruptedException ex) {
          throw new EucalyptusCloudException("semaphore could not be acquired");
        }
 finally {
          try {
            semaphore.release();
          }
  finally {
            EucaSemaphoreDirectory.removeSemaphore(snapshotId);
          }
        }
        if (success) {
          size=blockManager.createVolume(volumeId,snapshotId,size);
        }
      }
 else {
        SnapshotInfo foundSnapshotInfo=foundSnapshotInfos.get(0);
        if (!StorageProperties.Status.available.toString().equals(foundSnapshotInfo.getStatus())) {
          success=false;
          LOG.warn("snapshot " + foundSnapshotInfo.getSnapshotId() + " not available.");
        }
 else {
          size=blockManager.createVolume(volumeId,snapshotId,size);
        }
      }
    }
 catch (    Exception ex) {
      success=false;
      LOG.error("Failed to create volume " + volumeId,ex);
    }
  }
 else {
    try {
      if (parentVolumeId != null) {
        blockManager.cloneVolume(volumeId,parentVolumeId);
      }
 else {
        blockManager.createVolume(volumeId,size);
      }
    }
 catch (    Exception ex) {
      success=false;
      LOG.error("Failed to create volume " + volumeId,ex);
    }
  }
  VolumeInfo volumeInfo=new VolumeInfo(volumeId);
  try (TransactionResource tr=Entities.transactionFor(VolumeInfo.class)){
    VolumeInfo foundVolumeInfo=Entities.uniqueResult(volumeInfo);
    if (foundVolumeInfo != null) {
      if (success) {
        foundVolumeInfo.setStatus(StorageProperties.Status.available.toString());
      }
 else {
        foundVolumeInfo.setStatus(StorageProperties.Status.failed.toString());
      }
      if (snapshotId != null) {
        foundVolumeInfo.setSize(size);
      }
    }
 else {
      LOG.error("VolumeInfo entity for volume id " + volumeId + " was not found in the database");
    }
    tr.commit();
  }
 catch (  Exception e) {
    LOG.error("Failed to update VolumeInfo entity for volume id " + volumeId + " in the database",e);
  }
}
