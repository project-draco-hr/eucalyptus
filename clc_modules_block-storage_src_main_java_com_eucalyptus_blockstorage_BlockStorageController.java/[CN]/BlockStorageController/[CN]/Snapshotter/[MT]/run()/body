{
  EucaSemaphore semaphore=EucaSemaphoreDirectory.getSolitarySemaphore(volumeId);
  try {
    try {
      semaphore.acquire();
    }
 catch (    InterruptedException ex) {
      throw new EucalyptusCloudException("semaphore could not be acquired");
    }
    Boolean shouldTransferSnapshots=true;
    List<String> returnValues=null;
    String snapshotLocation=null;
    try {
      if (!isSnapshotMarkedFailed(snapshotId)) {
        shouldTransferSnapshots=StorageInfo.getStorageInfo().getShouldTransferSnapshots();
        returnValues=blockManager.createSnapshot(this.volumeId,this.snapshotId,this.snapPointId,shouldTransferSnapshots);
      }
 else {
        throw new EucalyptusCloudException("Snapshot " + this.snapshotId + " marked as failed by another thread");
      }
    }
  finally {
      semaphore.release();
    }
    if (shouldTransferSnapshots) {
      if (returnValues.size() < 2) {
        throw new EucalyptusCloudException("Snapshot file unknown. Cannot transfer snapshot");
      }
      snapshotFileName=returnValues.get(0);
      String snapshotSize=returnValues.get(1);
      int retry=StorageInfo.getStorageInfo().getMaxSnapTransferRetries();
      boolean transferSuccess=false;
      String bucket=createAndReturnBucketName();
      verifySnapshotFileIsReadable();
      int backoffTime=1;
      while (!transferSuccess) {
        if (!isSnapshotMarkedFailed(snapshotId)) {
          try {
            transferSnapshot(bucket,snapshotId,snapshotSize);
            transferSuccess=true;
          }
 catch (          Exception e) {
            LOG.warn("Failed to upload snapshot " + snapshotId + " to OSG. May retry later",e);
            if (retry > 0) {
              retry--;
              Thread.sleep(backoffTime * 1000);
              backoffTime=backoffTime * 2;
              LOG.debug("Retrying upload of snapshot " + snapshotId + " to OSG");
            }
 else {
              throw new EucalyptusCloudException("Failed to upload snapshot " + snapshotId + " to OSG",e);
            }
          }
        }
 else {
          throw new EucalyptusCloudException("Snapshot " + this.snapshotId + " marked as failed by another thread");
        }
      }
      snapshotLocation=SnapshotInfo.generateSnapshotLocationURI(SnapshotTransferConfiguration.OSG,bucket,snapshotId);
      try {
        LOG.debug("Finalizing snapshot " + snapshotId + " post upload");
        blockManager.finishVolume(snapshotId);
      }
 catch (      EucalyptusCloudException ex) {
        LOG.error("Failed to finalize snapshot " + snapshotId,ex);
      }
    }
    SnapshotInfo snapInfo=new SnapshotInfo(snapshotId);
    SnapshotInfo snapshotInfo=null;
    EntityWrapper<SnapshotInfo> db=StorageProperties.getEntityWrapper();
    try {
      snapshotInfo=db.getUnique(snapInfo);
      snapshotInfo.setStatus(StorageProperties.Status.available.toString());
      snapshotInfo.setProgress("100");
      snapshotInfo.setSnapPointId(null);
      snapshotInfo.setSnapshotLocation(snapshotLocation);
    }
 catch (    EucalyptusCloudException e) {
      LOG.error(e);
    }
 finally {
      db.commit();
    }
    if (snapshotInfo != null) {
      try {
        final int snapshotSize=snapshotInfo.getSizeGb();
        final String volumeUuid=Transactions.find(Volume.named(null,volumeId)).getNaturalId();
        ListenerRegistry.getInstance().fireEvent(SnapShotEvent.with(SnapShotEvent.forSnapShotCreate(snapshotSize,volumeUuid,volumeId),snapshotInfo.getNaturalId(),snapshotInfo.getSnapshotId(),snapshotInfo.getUserName()));
      }
 catch (      final Throwable e) {
        LOG.error("Failed to fire snapshot creation event for " + snapshotId,e);
      }
    }
  }
 catch (  Exception ex) {
    LOG.error("Failed to create snapshot " + snapshotId,ex);
    try {
      LOG.debug("Disconnecting snapshot " + snapshotId + " on failed snapshot attempt");
      blockManager.finishVolume(snapshotId);
    }
 catch (    EucalyptusCloudException e1) {
      LOG.debug("Deleting snapshot " + snapshotId + " on failed snapshot attempt",e1);
      blockManager.cleanSnapshot(snapshotId);
    }
    SnapshotInfo snapInfo=new SnapshotInfo(snapshotId);
    EntityWrapper<SnapshotInfo> db=StorageProperties.getEntityWrapper();
    try {
      SnapshotInfo snapshotInfo=db.getUnique(snapInfo);
      snapshotInfo.setStatus(StorageProperties.Status.failed.toString());
    }
 catch (    EucalyptusCloudException e) {
      LOG.error(e);
    }
 finally {
      db.commit();
    }
  }
}
