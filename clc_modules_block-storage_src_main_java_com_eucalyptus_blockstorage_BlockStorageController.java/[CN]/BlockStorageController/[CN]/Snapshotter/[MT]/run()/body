{
  EucaSemaphore semaphore=EucaSemaphoreDirectory.getSolitarySemaphore(volumeId);
  try {
    Boolean shouldTransferSnapshots=true;
    List<String> returnValues=null;
    SnapshotTransfer snapshotTransfer=null;
    String bucket=null;
    shouldTransferSnapshots=StorageInfo.getStorageInfo().getShouldTransferSnapshots();
    if (shouldTransferSnapshots) {
      snapshotTransfer=new S3SnapshotTransfer(snapshotId,snapshotId);
      bucket=snapshotTransfer.prepareForUpload();
      if (snapshotTransfer == null || StringUtils.isBlank(bucket)) {
        throw new EucalyptusCloudException("Failed to initialize snapshot transfer mechanism for uploading " + snapshotId);
      }
    }
    try {
      try {
        semaphore.acquire();
      }
 catch (      InterruptedException ex) {
        throw new EucalyptusCloudException("Failed to create snapshot " + snapshotId + " as the semaphore could not be acquired");
      }
      if (!isSnapshotMarkedFailed(snapshotId)) {
        returnValues=blockManager.createSnapshot(this.volumeId,this.snapshotId,this.snapPointId,shouldTransferSnapshots);
      }
 else {
        throw new EucalyptusCloudException("Snapshot " + this.snapshotId + " marked as failed by another thread");
      }
    }
  finally {
      semaphore.release();
    }
    if (shouldTransferSnapshots) {
      if (returnValues.size() < 2) {
        throw new EucalyptusCloudException("Snapshot file unknown. Cannot transfer snapshot");
      }
      snapshotFileName=returnValues.get(0);
      String snapshotSize=returnValues.get(1);
      verifySnapshotFileIsReadable();
      String snapshotLocation=SnapshotInfo.generateSnapshotLocationURI(SnapshotTransferConfiguration.OSG,bucket,snapshotId);
      SnapshotInfo snapInfo=new SnapshotInfo(snapshotId);
      SnapshotInfo snapshotInfo=null;
      try (TransactionResource tran=Entities.transactionFor(SnapshotInfo.class)){
        snapshotInfo=Entities.uniqueResult(snapInfo);
        snapshotInfo.setSnapshotLocation(snapshotLocation);
        tran.commit();
      }
 catch (      TransactionException|NoSuchElementException e) {
        LOG.debug("Failed to update upload location for snapshot " + snapshotId,e);
      }
      if (!isSnapshotMarkedFailed(snapshotId)) {
        try {
          snapshotTransfer.upload(snapshotFileName);
        }
 catch (        Exception e) {
          throw new EucalyptusCloudException("Failed to upload snapshot " + snapshotId + " to objectstorage",e);
        }
      }
 else {
        throw new EucalyptusCloudException("Snapshot " + this.snapshotId + " marked as failed by another thread");
      }
      try {
        LOG.debug("Finalizing snapshot " + snapshotId + " post upload");
        blockManager.finishVolume(snapshotId);
      }
 catch (      EucalyptusCloudException ex) {
        LOG.error("Failed to finalize snapshot " + snapshotId,ex);
      }
    }
 else {
      Function<String,SnapshotInfo> updateFunction=new Function<String,SnapshotInfo>(){
        @Override public SnapshotInfo apply(        String arg0){
          SnapshotInfo snap;
          try {
            snap=Entities.uniqueResult(new SnapshotInfo(arg0));
            snap.setStatus(StorageProperties.Status.available.toString());
            snap.setProgress("100");
            snap.setSnapPointId(null);
            return snap;
          }
 catch (          TransactionException|NoSuchElementException e) {
            LOG.error("Failed to retrieve snapshot entity from DB for " + arg0,e);
          }
          return null;
        }
      }
;
      Entities.asTransaction(SnapshotInfo.class,updateFunction).apply(snapshotId);
    }
  }
 catch (  Exception ex) {
    LOG.error("Failed to create snapshot " + snapshotId,ex);
    try {
      LOG.debug("Disconnecting snapshot " + snapshotId + " on failed snapshot attempt");
      blockManager.finishVolume(snapshotId);
    }
 catch (    EucalyptusCloudException e1) {
      LOG.debug("Deleting snapshot " + snapshotId + " on failed snapshot attempt",e1);
      blockManager.cleanSnapshot(snapshotId);
    }
    Function<String,SnapshotInfo> updateFunction=new Function<String,SnapshotInfo>(){
      @Override public SnapshotInfo apply(      String arg0){
        SnapshotInfo snap;
        try {
          snap=Entities.uniqueResult(new SnapshotInfo(arg0));
          snap.setStatus(StorageProperties.Status.failed.toString());
          snap.setProgress("0");
          return snap;
        }
 catch (        TransactionException|NoSuchElementException e) {
          LOG.error("Failed to retrieve snapshot entity from DB for " + arg0,e);
        }
        return null;
      }
    }
;
    Entities.asTransaction(SnapshotInfo.class,updateFunction).apply(snapshotId);
  }
}
