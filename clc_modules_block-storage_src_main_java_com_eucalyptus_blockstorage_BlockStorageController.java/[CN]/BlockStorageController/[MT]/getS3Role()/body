{
  ServiceConfiguration euare=Topology.lookup(Euare.class);
  if (euare == null) {
    throw new EucalyptusCloudException("Unable to get active Euare service.");
  }
  try {
    ListAccountPoliciesType listAccountPoliciesType=new ListAccountPoliciesType();
    listAccountPoliciesType.setAccountName(StorageProperties.BLOCKSTORAGE_ACCOUNT);
    ListAccountPoliciesResponseType listAccountPoliciesResponseType=AsyncRequests.sendSync(euare,listAccountPoliciesType);
  }
 catch (  Exception ex) {
    LOG.debug("Block Storage admin does not exist. Adding it now.");
    try {
      CreateAccountType createAccountType=new CreateAccountType();
      createAccountType.setAccountName(StorageProperties.BLOCKSTORAGE_ACCOUNT);
      CreateAccountResponseType createAccountResponseType=AsyncRequests.sendSync(euare,createAccountType);
    }
 catch (    Exception e) {
      LOG.error("Unable to create blockstorage account. Aborting.");
      throw new EucalyptusCloudException(e);
    }
  }
  String roleArn=null;
  try {
    GetRoleType getRoleType=new GetRoleType();
    getRoleType.setRoleName(StorageProperties.EBS_ROLE_NAME);
    getRoleType.setDelegateAccount(StorageProperties.BLOCKSTORAGE_ACCOUNT);
    GetRoleResponseType getRoleResponseType=AsyncRequests.sendSync(euare,getRoleType);
    roleArn=getRoleResponseType.getGetRoleResult().getRole().getArn();
  }
 catch (  Exception ex) {
    try {
      CreateRoleType createRoleType=new CreateRoleType();
      createRoleType.setDelegateAccount(StorageProperties.BLOCKSTORAGE_ACCOUNT);
      createRoleType.setAssumeRolePolicyDocument(StorageProperties.DEFAULT_ASSUME_ROLE_POLICY);
      createRoleType.setPath("/blockstorage");
      createRoleType.setRoleName(StorageProperties.EBS_ROLE_NAME);
      CreateRoleResponseType createRoleResponseType=AsyncRequests.sendSync(euare,createRoleType);
      roleArn=createRoleResponseType.getCreateRoleResult().getRole().getArn();
    }
 catch (    Exception e) {
      throw new EucalyptusCloudException("Unable to create role for block storage s3 access.");
    }
    PutRolePolicyType putRolePolicyType=new PutRolePolicyType();
    putRolePolicyType.setDelegateAccount(StorageProperties.BLOCKSTORAGE_ACCOUNT);
    putRolePolicyType.setPolicyDocument(StorageProperties.S3_SNAPSHOT_BUCKET_ACCESS_POLICY);
    putRolePolicyType.setRoleName(StorageProperties.EBS_ROLE_NAME);
    putRolePolicyType.setPolicyName(StorageProperties.S3_BUCKET_ACCESS_POLICY_NAME);
    PutRolePolicyResponseType putRolePolicyResponseType=AsyncRequests.sendSync(euare,putRolePolicyType);
    putRolePolicyType.setDelegateAccount(StorageProperties.BLOCKSTORAGE_ACCOUNT);
    putRolePolicyType.setPolicyDocument(StorageProperties.S3_SNAPSHOT_OBJECT_ACCESS_POLICY);
    putRolePolicyType.setRoleName(StorageProperties.EBS_ROLE_NAME);
    putRolePolicyType.setPolicyName(StorageProperties.S3_OBJECT_ACCESS_POLICY_NAME);
    putRolePolicyResponseType=AsyncRequests.sendSync(euare,putRolePolicyType);
  }
  ServiceConfiguration tokens=Topology.lookup(Tokens.class);
  if (tokens == null) {
    throw new EucalyptusCloudException("Unable to get active Tokens service.");
  }
  AssumeRoleType assumeRoleType=new AssumeRoleType();
  assumeRoleType.setDurationSeconds((int)TimeUnit.HOURS.toSeconds(1));
  assumeRoleType.setRoleSessionName("S3Session");
  assumeRoleType.setRoleArn(roleArn);
  AssumeRoleResponseType assumeRoleResponseType=AsyncRequests.sendSync(tokens,assumeRoleType);
  CredentialsType credentials=assumeRoleResponseType.getAssumeRoleResult().getCredentials();
  return credentials;
}
