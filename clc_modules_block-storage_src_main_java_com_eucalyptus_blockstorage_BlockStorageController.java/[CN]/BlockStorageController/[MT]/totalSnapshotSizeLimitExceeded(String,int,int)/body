{
  int totalSnapshotSize=0;
  EntityTransaction dbTrans=Entities.get(SnapshotInfo.class);
  try {
    Criteria query=Entities.createCriteria(SnapshotInfo.class);
    query.setReadOnly(true);
    ImmutableSet<String> excludedStates=ImmutableSet.of(StorageProperties.Status.failed.toString(),StorageProperties.Status.error.toString(),StorageProperties.Status.deleted.toString());
    query.add(Restrictions.not(Restrictions.in("status",excludedStates)));
    HashSet<String> idSet=new HashSet<String>();
    List<SnapshotInfo> snapshots=(List<SnapshotInfo>)query.list();
    for (    SnapshotInfo snap : snapshots) {
      totalSnapshotSize+=(snap.getSizeGb() != null && idSet.add(snap.getSnapshotId()) ? snap.getSizeGb() : 0);
    }
    LOG.debug("Snapshot " + snapshotId + " checking snapshot total size of  "+ totalSnapshotSize+ " against limit of "+ sizeLimitGB);
    return (totalSnapshotSize + volSize) > sizeLimitGB;
  }
 catch (  final Throwable e) {
    LOG.error("Error finding total snapshot used size " + e.getMessage());
    throw new EucalyptusCloudException("Failed to check snapshot total size limit",e);
  }
 finally {
    if (dbTrans.isActive()) {
      dbTrans.rollback();
    }
  }
}
