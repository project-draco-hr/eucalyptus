{
  CreateStorageSnapshotResponseType reply=(CreateStorageSnapshotResponseType)request.getReply();
  StorageProperties.updateWalrusUrl();
  if (!StorageProperties.enableSnapshots) {
    LOG.error("Snapshots have been disabled. Please check connection to ObjectStorage.");
    return reply;
  }
  String volumeId=request.getVolumeId();
  LOG.info("Processing CreateStorageSnapshot request for volume " + volumeId);
  String snapshotId=request.getSnapshotId();
  VolumeInfo sourceVolumeInfo=null;
  try (TransactionResource tran=Entities.transactionFor(VolumeInfo.class)){
    VolumeInfo volumeInfo=new VolumeInfo(volumeId);
    sourceVolumeInfo=Entities.uniqueResult(volumeInfo);
    tran.commit();
  }
 catch (  NoSuchElementException e) {
    LOG.debug("Volume " + volumeId + " not found in db");
    throw new NoSuchVolumeException(volumeId);
  }
catch (  final Throwable e) {
    LOG.warn("Volume " + volumeId + " error getting info from db. May not exist. "+ e.getMessage());
    throw new EucalyptusCloudException("Could not get volume information for volume " + volumeId,e);
  }
  if (sourceVolumeInfo == null) {
    throw new NoSuchVolumeException(volumeId);
  }
 else {
    if (!sourceVolumeInfo.getStatus().equals(StorageProperties.Status.available.toString())) {
      throw new VolumeNotReadyException(volumeId);
    }
 else {
      if (StorageProperties.shouldEnforceUsageLimits) {
        int maxSize=-1;
        try {
          maxSize=BlockStorageGlobalConfiguration.getInstance().getGlobal_total_snapshot_size_limit_gb();
        }
 catch (        Exception e) {
          LOG.error("Could not determine max global snapshot limit. Aborting snapshot creation",e);
          throw new EucalyptusCloudException("Total size limit not found.",e);
        }
        if (maxSize <= 0) {
          LOG.warn("Total global snapshot size limit is less than or equal to 0");
          throw new EucalyptusCloudException("Total snapshot size limit is less than or equal to 0");
        }
        if (totalSnapshotSizeLimitExceeded(snapshotId,sourceVolumeInfo.getSize(),maxSize)) {
          LOG.info("Snapshot " + snapshotId + " exceeds global total snapshot size limit of "+ maxSize+ "GB (see storage.global_total_snapshot_size_limit_gb configurable property)");
          throw new SnapshotTooLargeException(maxSize);
        }
      }
      SnapshotCreator snapshotter=null;
      SnapshotInfo snapshotInfo=new SnapshotInfo(snapshotId);
      Date startTime=new Date();
      try (TransactionResource tran=Entities.transactionFor(SnapshotInfo.class)){
        snapshotInfo.setUserName(sourceVolumeInfo.getUserName());
        snapshotInfo.setVolumeId(volumeId);
        snapshotInfo.setStartTime(startTime);
        snapshotInfo.setProgress("0");
        snapshotInfo.setSizeGb(sourceVolumeInfo.getSize());
        snapshotInfo.setStatus(StorageProperties.Status.creating.toString());
        String snapPointId=null;
        try {
          snapPointId=blockManager.createSnapshotPoint(volumeId,snapshotId);
          if (snapPointId == null) {
            LOG.debug("Synchronous snap point not supported for this backend. Cleanly skipped.");
          }
 else {
            snapshotInfo.setSnapPointId(snapPointId);
          }
          snapshotInfo.setStatus(StorageProperties.Status.creating.toString());
          Context ctx=null;
          try {
            ctx=Contexts.lookup(request.getCorrelationId());
            if (!ctx.getChannel().isOpen()) {
              throw new NoSuchContextException("Channel is closed");
            }
          }
 catch (          NoSuchContextException e) {
            if (snapPointId != null) {
              throw new EucalyptusCloudException("Channel closed, aborting snapshot.");
            }
          }
        }
 catch (        EucalyptusCloudException e) {
          try {
            blockManager.deleteSnapshotPoint(volumeId,snapshotId,snapPointId);
          }
 catch (          Exception ex) {
            LOG.error("Snapshot " + snapshotId + " exception on snap point cleanup after failure: "+ e.getMessage());
          }
          LOG.error("Snapshot " + snapshotId + " failed to create snap point successfully: "+ e.getMessage());
          throw e;
        }
 finally {
          Entities.persist(snapshotInfo);
          tran.commit();
        }
        snapshotter=new SnapshotCreator(volumeId,snapshotId,snapPointId,blockManager);
        reply.setSnapshotId(snapshotId);
        reply.setVolumeId(volumeId);
        reply.setStartTime(DateUtils.format(startTime.getTime(),DateUtils.ISO8601_DATETIME_PATTERN) + ".000Z");
        reply.setProgress(snapshotInfo.getProgress());
      }
 catch (      EucalyptusCloudException cloudEx) {
        snapshotInfo.setStatus(StorageProperties.Status.failed.toString());
        LOG.error("Snapshot " + snapshotId + " creation failed with exception ",cloudEx);
        throw cloudEx;
      }
catch (      final Throwable e) {
        snapshotInfo.setStatus(StorageProperties.Status.failed.toString());
        LOG.error("Snapshot " + snapshotId + " Error committing state update to failed",e);
        throw new EucalyptusCloudException("Snapshot " + snapshotId + " unexpected throwable exception caught",e);
      }
      reply.setStatus(snapshotInfo.getStatus());
      if (snapshotter != null) {
        try {
          SnapshotThreadPool.add(snapshotter);
        }
 catch (        Exception e) {
          LOG.warn("Failed to add creation task for " + snapshotId + " to asynchronous thread pool",e);
          try {
            Function<String,SnapshotInfo> updateFunction=new Function<String,SnapshotInfo>(){
              @Override public SnapshotInfo apply(              String arg0){
                SnapshotInfo snap;
                try {
                  snap=Entities.uniqueResult(new SnapshotInfo(arg0));
                  snap.setStatus(StorageProperties.Status.failed.toString());
                  snap.setProgress("0");
                  return snap;
                }
 catch (                TransactionException|NoSuchElementException e) {
                  LOG.warn("Failed to retrieve DB entity for " + arg0,e);
                }
                return null;
              }
            }
;
            Entities.asTransaction(SnapshotInfo.class,updateFunction).apply(snapshotId);
          }
 catch (          Exception e1) {
            LOG.warn("Unable to update status for " + snapshotId + " after failure to add creation task to asynchronous thread pool",e);
          }
          throw new EucalyptusCloudException("Failed to add creation task for " + snapshotId + " to asynchronous thread pool",e);
        }
      }
    }
  }
  return reply;
}
