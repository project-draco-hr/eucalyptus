{
  Account blockStorageAccount=null;
  Role role=null;
  try {
    blockStorageAccount=Accounts.lookupAccountByName(StorageProperties.BLOCKSTORAGE_ACCOUNT);
  }
 catch (  Exception e) {
    LOG.debug("Account for " + StorageProperties.BLOCKSTORAGE_ACCOUNT + " may not exist. Creating a new account");
    try {
      blockStorageAccount=Accounts.addAccount(StorageProperties.BLOCKSTORAGE_ACCOUNT);
    }
 catch (    Exception e1) {
      LOG.debug("Failed to create a new account for " + StorageProperties.BLOCKSTORAGE_ACCOUNT + ". Checking if the account exists");
      try {
        blockStorageAccount=Accounts.lookupAccountByName(StorageProperties.BLOCKSTORAGE_ACCOUNT);
      }
 catch (      Exception e2) {
        LOG.warn("Could not look up the account for " + StorageProperties.BLOCKSTORAGE_ACCOUNT + " and failed to create a new one",e2);
        throw new EucalyptusCloudException("Could not look up the account for " + StorageProperties.BLOCKSTORAGE_ACCOUNT + " and failed to create a new one");
      }
    }
  }
  try {
    blockStorageAccount.lookupAdmin();
  }
 catch (  Exception e) {
    LOG.debug("Cannot to find " + User.ACCOUNT_ADMIN + " user in "+ StorageProperties.BLOCKSTORAGE_ACCOUNT+ " account. The user may not exist, trying to add user to the account");
    try {
      blockStorageAccount.addUser(User.ACCOUNT_ADMIN,"/",true,null);
    }
 catch (    Exception e1) {
      LOG.debug("Failed to add " + User.ACCOUNT_ADMIN + " user. Checking if the user exists in the account");
      try {
        blockStorageAccount.lookupUserByName(User.ACCOUNT_ADMIN);
      }
 catch (      Exception e2) {
        LOG.warn("Could not find " + User.ACCOUNT_ADMIN + " user in "+ StorageProperties.BLOCKSTORAGE_ACCOUNT+ " account and failed to add the user to the account",e2);
        throw new EucalyptusCloudException("Could not find " + User.ACCOUNT_ADMIN + " user in "+ StorageProperties.BLOCKSTORAGE_ACCOUNT+ " account and failed to add the user to the account");
      }
    }
  }
  try {
    role=blockStorageAccount.lookupRoleByName(StorageProperties.EBS_ROLE_NAME);
  }
 catch (  Exception e) {
    LOG.debug("Cannot to find " + StorageProperties.EBS_ROLE_NAME + " role for "+ StorageProperties.BLOCKSTORAGE_ACCOUNT+ " account. The role may not exist, trying to add role to the account");
    try {
      role=blockStorageAccount.addRole(StorageProperties.EBS_ROLE_NAME,"/blockstorage",StorageProperties.DEFAULT_ASSUME_ROLE_POLICY);
    }
 catch (    Exception e1) {
      LOG.debug("Failed to add " + StorageProperties.EBS_ROLE_NAME + " role. Checking if the role is assigned to the account");
      try {
        role=blockStorageAccount.lookupRoleByName(StorageProperties.EBS_ROLE_NAME);
      }
 catch (      Exception e2) {
        LOG.warn("Could not find " + StorageProperties.EBS_ROLE_NAME + " role for "+ StorageProperties.BLOCKSTORAGE_ACCOUNT+ " account and failed to assign the role to the account",e2);
        throw new EucalyptusCloudException("Could not find " + StorageProperties.EBS_ROLE_NAME + " role for "+ StorageProperties.BLOCKSTORAGE_ACCOUNT+ " account and failed to assign the role to the account");
      }
    }
  }
  try {
    boolean foundBucketPolicy=false;
    boolean foundObjectPolicy=false;
    List<Policy> policies=role.getPolicies();
    for (    Policy policy : policies) {
      if (policy.getName().equals(StorageProperties.S3_BUCKET_ACCESS_POLICY_NAME)) {
        foundBucketPolicy=true;
      }
      if (policy.getName().equals(StorageProperties.S3_OBJECT_ACCESS_POLICY_NAME)) {
        foundObjectPolicy=true;
      }
      if (foundBucketPolicy && foundObjectPolicy) {
        break;
      }
    }
    if (!foundBucketPolicy) {
      try {
        role.putPolicy(StorageProperties.S3_BUCKET_ACCESS_POLICY_NAME,StorageProperties.S3_SNAPSHOT_BUCKET_ACCESS_POLICY);
      }
 catch (      Exception e) {
        LOG.debug("Failed to assign " + StorageProperties.S3_BUCKET_ACCESS_POLICY_NAME + " policy to "+ StorageProperties.EBS_ROLE_NAME+ " role. Checking if the policy is assigned to the role");
        foundBucketPolicy=false;
        policies=role.getPolicies();
        for (        Policy policy : policies) {
          if (policy.getName().equals(StorageProperties.S3_BUCKET_ACCESS_POLICY_NAME)) {
            foundBucketPolicy=true;
            break;
          }
        }
        if (!foundBucketPolicy) {
          LOG.warn("Could not find " + StorageProperties.S3_BUCKET_ACCESS_POLICY_NAME + " policy assigned to "+ StorageProperties.EBS_ROLE_NAME+ " role and failed to assign the policy to the role",e);
          throw new EucalyptusCloudException("Could not find " + StorageProperties.S3_BUCKET_ACCESS_POLICY_NAME + " policy assigned to "+ StorageProperties.EBS_ROLE_NAME+ " role and failed to assign the policy to the role");
        }
      }
    }
    if (!foundObjectPolicy) {
      try {
        role.putPolicy(StorageProperties.S3_OBJECT_ACCESS_POLICY_NAME,StorageProperties.S3_SNAPSHOT_OBJECT_ACCESS_POLICY);
      }
 catch (      Exception e) {
        LOG.debug("Failed to assign " + StorageProperties.S3_OBJECT_ACCESS_POLICY_NAME + " policy to "+ StorageProperties.EBS_ROLE_NAME+ " role. Checking if the policy is assigned to the role");
        foundObjectPolicy=false;
        policies=role.getPolicies();
        for (        Policy policy : policies) {
          if (policy.getName().equals(StorageProperties.S3_OBJECT_ACCESS_POLICY_NAME)) {
            foundObjectPolicy=true;
            break;
          }
        }
        if (!foundObjectPolicy) {
          LOG.warn("Could not find " + StorageProperties.S3_OBJECT_ACCESS_POLICY_NAME + " policy assigned to "+ StorageProperties.EBS_ROLE_NAME+ " role and failed to assign the policy to the role",e);
          throw new EucalyptusCloudException("Could not find " + StorageProperties.S3_OBJECT_ACCESS_POLICY_NAME + " policy assigned to "+ StorageProperties.EBS_ROLE_NAME+ " role and failed to assign the policy to the role");
        }
      }
    }
    return role;
  }
 catch (  EucalyptusCloudException e) {
    throw e;
  }
catch (  Exception e) {
    LOG.warn("Could not fetch the policies for " + StorageProperties.EBS_ROLE_NAME + " role assigned to "+ StorageProperties.BLOCKSTORAGE_ACCOUNT+ " account",e);
    throw new EucalyptusCloudException("Could not fetch the policies for " + StorageProperties.EBS_ROLE_NAME + " role assigned to "+ StorageProperties.BLOCKSTORAGE_ACCOUNT+ " account");
  }
}
