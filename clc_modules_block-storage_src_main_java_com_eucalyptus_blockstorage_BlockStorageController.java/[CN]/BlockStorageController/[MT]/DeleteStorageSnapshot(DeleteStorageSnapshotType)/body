{
  final long startTime=System.currentTimeMillis();
  DeleteStorageSnapshotResponseType reply=(DeleteStorageSnapshotResponseType)request.getReply();
  StorageProperties.updateWalrusUrl();
  if (!StorageProperties.enableSnapshots) {
    LOG.error("Snapshots have been disabled. Please check connection to ObjectStorage.");
    return reply;
  }
  String snapshotId=request.getSnapshotId();
  LOG.info("Processing DeleteStorageSnapshot request for snapshot " + snapshotId);
  try (TransactionResource tran=Entities.transactionFor(SnapshotInfo.class)){
    SnapshotInfo snapshotInfo=Entities.uniqueResult(new SnapshotInfo(snapshotId));
    String status=snapshotInfo.getStatus();
    if (status.equals(StorageProperties.Status.available.toString())) {
      snapshotInfo.setStatus(StorageProperties.Status.deleting.toString());
      ThruputMetrics.startOperation(MonitoredAction.DELETE_SNAPSHOT,snapshotId,startTime);
    }
 else     if (status.equals(StorageProperties.Status.deleting.toString()) || status.equals(StorageProperties.Status.deleted.toString()) || status.equals(StorageProperties.Status.failed.toString())) {
      LOG.debug("Snapshot " + snapshotId + " already in deleting/deleted/failed. No-op for delete request.");
    }
 else {
      throw new SnapshotInUseException("Cannot delete snapshot in state: " + status + ". Please retry later");
    }
    reply.set_return(Boolean.TRUE);
    tran.commit();
  }
 catch (  NoSuchElementException e) {
    LOG.warn("Got delete request, but unable to find snapshot in SC database: " + snapshotId);
    reply.set_return(Boolean.TRUE);
  }
catch (  TransactionException e) {
    LOG.error("Exception looking up snapshot: " + snapshotId,e);
    throw new EucalyptusCloudException(e);
  }
  return reply;
}
