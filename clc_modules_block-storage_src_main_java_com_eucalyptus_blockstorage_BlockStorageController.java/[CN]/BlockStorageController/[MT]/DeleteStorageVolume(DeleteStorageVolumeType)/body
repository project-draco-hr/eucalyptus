{
  DeleteStorageVolumeResponseType reply=(DeleteStorageVolumeResponseType)request.getReply();
  if (!StorageProperties.enableStorage) {
    LOG.error("BlockStorage has been disabled. Please check your setup");
    return reply;
  }
  String volumeId=request.getVolumeId();
  LOG.info("Processing DeleteStorageVolume request for volume " + volumeId);
  VolumeInfo volumeInfo=new VolumeInfo();
  volumeInfo.setVolumeId(volumeId);
  try (TransactionResource tran=Entities.transactionFor(VolumeInfo.class)){
    VolumeInfo foundVolume=Entities.uniqueResult(volumeInfo);
    String status=foundVolume.getStatus();
    if (status == null) {
      throw new EucalyptusCloudException("Invalid volume status: null");
    }
 else     if (status.equals(StorageProperties.Status.available.toString())) {
      LOG.trace("Marking volume " + volumeId + " for deletion");
      foundVolume.setStatus(StorageProperties.Status.deleting.toString());
    }
 else     if (status.equals(StorageProperties.Status.deleting.toString()) || status.equals(StorageProperties.Status.deleted.toString()) || status.equals(StorageProperties.Status.failed.toString())) {
      LOG.debug("Volume " + volumeId + " already in deleting/deleted/failed. No-op for delete request.");
    }
 else {
      throw new EucalyptusCloudException("Cannot delete volume in state: " + status + ". Please retry later");
    }
    reply.set_return(Boolean.TRUE);
    tran.commit();
  }
 catch (  NoSuchElementException e) {
    LOG.warn("Got delete request, but unable to find volume in SC database: " + volumeId);
    reply.set_return(Boolean.TRUE);
  }
catch (  EucalyptusCloudException e) {
    LOG.error("Error marking volume " + volumeId + " for deletion: "+ e.getMessage());
    throw e;
  }
catch (  final Throwable e) {
    LOG.error("Exception looking up volume: " + volumeId,e);
    throw new EucalyptusCloudException(e);
  }
  return reply;
}
