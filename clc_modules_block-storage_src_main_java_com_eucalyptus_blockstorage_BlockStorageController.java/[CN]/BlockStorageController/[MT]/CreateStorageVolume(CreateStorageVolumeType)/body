{
  CreateStorageVolumeResponseType reply=(CreateStorageVolumeResponseType)request.getReply();
  if (!StorageProperties.enableStorage) {
    LOG.error("BlockStorage has been disabled. Please check your setup");
    return reply;
  }
  String snapshotId=request.getSnapshotId();
  String parentVolumeId=request.getParentVolumeId();
  String userId=request.getUserId();
  String volumeId=request.getVolumeId();
  LOG.info("Processing CreateStorageVolume request for volume " + volumeId);
  String size=request.getSize();
  int sizeAsInt=(size != null) ? Integer.parseInt(size) : 0;
  if (size != null && sizeAsInt <= 0) {
    throw new InvalidParameterValueException("The parameter size (" + sizeAsInt + ") must be greater than zero.");
  }
  if (StorageProperties.shouldEnforceUsageLimits) {
    if (size != null) {
      int totalVolumeSize=0;
      VolumeInfo volInfo=new VolumeInfo();
      try (TransactionResource tran=Entities.transactionFor(VolumeInfo.class)){
        List<VolumeInfo> volInfos=Entities.query(volInfo);
        for (        VolumeInfo vInfo : volInfos) {
          if (!vInfo.getStatus().equals(StorageProperties.Status.failed.toString()) && !vInfo.getStatus().equals(StorageProperties.Status.error.toString()) && !vInfo.getStatus().equals(StorageProperties.Status.deleted.toString())) {
            totalVolumeSize+=vInfo.getSize();
          }
        }
        tran.commit();
      }
       if (((totalVolumeSize + sizeAsInt) > StorageInfo.getStorageInfo().getMaxTotalVolumeSizeInGb())) {
        throw new VolumeSizeExceededException(volumeId,"Total Volume Size Limit Exceeded");
      }
      if (sizeAsInt > StorageInfo.getStorageInfo().getMaxVolumeSizeInGB()) {
        throw new VolumeSizeExceededException(volumeId,"Max Volume Size Limit Exceeded");
      }
    }
  }
  try (TransactionResource tran=Entities.transactionFor(VolumeInfo.class)){
    VolumeInfo volumeInfo=new VolumeInfo(volumeId);
    List<VolumeInfo> volumeInfos=Entities.query(volumeInfo);
    if (volumeInfos.size() > 0) {
      throw new VolumeAlreadyExistsException(volumeId);
    }
    if (snapshotId != null) {
      SnapshotInfo snapInfo=new SnapshotInfo(snapshotId);
      snapInfo.setScName(null);
      snapInfo.setStatus(StorageProperties.Status.available.toString());
      List<SnapshotInfo> snapInfos=Entities.query(snapInfo);
      if (snapInfos.size() == 0) {
        throw new SnapshotNotFoundException("Snapshot " + snapshotId + " does not exist or is unavailable");
      }
      volumeInfo.setSnapshotId(snapshotId);
      reply.setSnapshotId(snapshotId);
    }
    volumeInfo.setUserName(userId);
    volumeInfo.setSize(sizeAsInt);
    volumeInfo.setStatus(StorageProperties.Status.creating.toString());
    Date creationDate=new Date();
    volumeInfo.setCreateTime(creationDate);
    Entities.persist(volumeInfo);
    reply.setVolumeId(volumeId);
    reply.setCreateTime(DateUtils.format(creationDate.getTime(),DateUtils.ISO8601_DATETIME_PATTERN) + ".000Z");
    reply.setSize(size);
    reply.setStatus(volumeInfo.getStatus());
    tran.commit();
  }
   VolumeCreator volumeCreator=new VolumeCreator(volumeId,"snapset",snapshotId,parentVolumeId,sizeAsInt);
  volumeService.add(volumeCreator);
  return reply;
}
