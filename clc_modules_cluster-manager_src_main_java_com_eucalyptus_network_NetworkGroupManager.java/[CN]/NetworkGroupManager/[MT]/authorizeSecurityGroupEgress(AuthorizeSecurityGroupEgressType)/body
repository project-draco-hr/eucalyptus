{
  final AuthorizeSecurityGroupEgressResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final Predicate<Void> updateFunction=new Predicate<Void>(){
    @Override public boolean apply(    @Nullable final Void aVoid){
      try {
        final NetworkGroup ruleGroup=lookupGroup(request.getGroupId(),null);
        if (!RestrictedTypes.filterPrivileged().apply(ruleGroup)) {
          throw new ClientUnauthorizedComputeException("Not authorized to authorize network group " + ruleGroup.getDisplayName() + " for "+ ctx.getUser().getName());
        }
        if (ruleGroup.getVpcId() == null) {
          throw new ClientComputeException("InvalidGroup.NotFound","VPC security group (" + request.getGroupId() + ") not found");
        }
        final List<NetworkRule> ruleList=Lists.newArrayList();
        final List<IpPermissionType> ipPermissions=request.getIpPermissions();
        try {
          NetworkGroups.resolvePermissions(ipPermissions,ctx.getUser().getAccountNumber(),ruleGroup.getVpcId(),false);
        }
 catch (        final NoSuchMetadataException e) {
          throw new ClientComputeException("InvalidGroup.NotFound",e.getMessage());
        }
        for (        final IpPermissionType ipPerm : ipPermissions) {
          if (ipPerm.getCidrIpRanges().isEmpty() && ipPerm.getGroups().isEmpty()) {
            continue;
          }
          if ((ipPerm.getIpProtocol().equals("icmp") || (ipPerm.getIpProtocol().equals("1"))) && (MoreObjects.firstNonNull(ipPerm.getFromPort(),0) > 255 || MoreObjects.firstNonNull(ipPerm.getToPort(),0) > 255)) {
            throw new ClientComputeException("InvalidParameterValue","ICMP code (" + ((MoreObjects.firstNonNull(ipPerm.getFromPort(),0) > 255) ? ipPerm.getFromPort() : ipPerm.getToPort()) + ") "+ "out of range. Supported range for ICMP code and type is 0 to 255");
          }
          if (ipPerm.getIpProtocol() == null || !NetworkRule.PROTOCOL_PATTERN.matcher(ipPerm.getIpProtocol()).matches()) {
            throw new ClientComputeException("InvalidPermission.Malformed","Invalid protocol (" + ipPerm.getIpProtocol() + ")");
          }
          try {
            final List<NetworkRule> rules=NetworkGroups.ipPermissionAsNetworkRules(ipPerm,ruleGroup.getVpcId() != null,false);
            for (            final NetworkRule rule : rules)             rule.setEgress(true);
            ruleList.addAll(rules);
          }
 catch (          final IllegalArgumentException ex) {
            throw new ClientComputeException("InvalidPermission.Malformed",ex.getMessage());
          }
        }
        if (Iterables.any(ruleGroup.getNetworkRules(),new Predicate<NetworkRule>(){
          @Override public boolean apply(          final NetworkRule rule){
            return Iterables.any(ruleList,Predicates.equalTo(rule));
          }
        }
)) {
          return false;
        }
 else {
          ruleGroup.addNetworkRules(ruleList);
          if (ruleGroup.getVpcId() != null && ruleGroup.getNetworkRules().size() > VpcConfiguration.getRulesPerSecurityGroup()) {
            throw new ClientComputeException("RulesPerSecurityGroupLimitExceeded","Rules limit exceeded for " + request.getGroupId());
          }
        }
      }
 catch (      final Exception e) {
        throw Exceptions.toUndeclared(e);
      }
      return true;
    }
  }
;
  try {
    reply.set_return(Entities.asDistinctTransaction(NetworkGroup.class,updateFunction).apply(null));
    NetworkGroups.flushRules();
  }
 catch (  Exception ex) {
    Exceptions.findAndRethrow(ex,EucalyptusCloudException.class,EucalyptusWebServiceException.class);
    Logs.exhaust().error(ex,ex);
    throw ex;
  }
  return reply;
}
