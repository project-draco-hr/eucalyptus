{
  final Context ctx=Contexts.lookup();
  final RevokeSecurityGroupIngressResponseType reply=request.getReply();
  reply.markFailed();
  final List<IpPermissionType> ipPermissions=request.getIpPermissions();
  final EntityTransaction db=Entities.get(NetworkGroup.class);
  try {
    final NetworkGroup ruleGroup=lookupGroup(request.getGroupId(),request.getGroupName());
    if (RestrictedTypes.filterPrivileged().apply(ruleGroup)) {
      NetworkGroups.resolvePermissions(ipPermissions);
      final List<NetworkRule> revokedRuleList=NetworkGroups.ipPermissionsAsNetworkRules(ipPermissions);
      for (final Iterator<NetworkRule> it=ruleGroup.getNetworkRules().iterator(); it.hasNext(); ) {
        if (revokedRuleList.contains(it.next())) {
          it.remove();
        }
      }
    }
 else {
      throw new EucalyptusCloudException("Not authorized to revoke" + "network group " + request.getGroupName() + " for "+ ctx.getUser());
    }
    reply.set_return(true);
    db.commit();
  }
 catch (  Exception ex) {
    Logs.exhaust().error(ex,ex);
    throw new EucalyptusCloudException("RevokeSecurityGroupIngress failed because: " + ex.getMessage(),ex);
  }
 finally {
    if (db.isActive())     db.rollback();
  }
  return reply;
}
