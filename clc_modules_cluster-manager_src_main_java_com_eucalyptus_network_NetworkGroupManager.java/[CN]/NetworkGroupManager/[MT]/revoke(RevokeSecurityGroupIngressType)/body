{
  final Context ctx=Contexts.lookup();
  final RevokeSecurityGroupIngressResponseType reply=request.getReply();
  reply.markFailed();
  final List<IpPermissionType> ipPermissions=request.getIpPermissions();
  final List<NetworkRule> revokedRuleList=NetworkGroups.ipPermissionsAsNetworkRules(ipPermissions);
  EntityTransaction db=Entities.get(NetworkGroup.class);
  try {
    final List<NetworkGroup> networkGroupList=NetworkGroups.lookupAll(ctx.getUserFullName().asAccountFullName(),request.getGroupName());
    for (    NetworkGroup networkGroup : networkGroupList) {
      if (RestrictedTypes.filterPrivileged().apply(networkGroup)) {
        for (Iterator<NetworkRule> it=networkGroup.getNetworkRules().iterator(); it.hasNext(); ) {
          NetworkRule rule=it.next();
          if (revokedRuleList.contains(rule)) {
            it.remove();
          }
        }
      }
 else {
        throw new EucalyptusCloudException("Not authorized to revoke" + "network group " + request.getGroupName() + " for "+ ctx.getUser());
      }
    }
    reply.set_return(true);
    db.commit();
  }
 catch (  Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
    throw new EucalyptusCloudException("RevokeSecurityGroupIngress failed because: " + ex.getMessage(),ex);
  }
  return reply;
}
