{
  final Context ctx=Contexts.lookup();
  final RevokeSecurityGroupIngressResponseType reply=(RevokeSecurityGroupIngressResponseType)request.getReply();
  reply.markFailed();
  final List<IpPermissionType> ipPermissions=request.getIpPermissions();
  final List<NetworkRule> ruleList=NetworkGroups.ipPermissionsAsNetworkRules(ipPermissions);
  final Predicate<NetworkRule> filterContainsRule=new Predicate<NetworkRule>(){
    @Override public boolean apply(    final NetworkRule rule){
      for (      final NetworkRule r : ruleList) {
        if (r.equals(rule) && r.getNetworkPeers().equals(rule.getNetworkPeers()) && r.getIpRanges().equals(rule.getIpRanges())) {
          return true;
        }
      }
      return false;
    }
  }
;
  EntityTransaction db=Entities.get(NetworkGroup.class);
  try {
    final NetworkGroup ruleGroup=NetworkGroups.lookup(ctx.getUserFullName().asAccountFullName(),request.getGroupName());
    Predicate<NetworkRule> removeFailedPredicate=new Predicate<NetworkRule>(){
      @Override public boolean apply(      NetworkRule rule){
        return !ruleGroup.getNetworkRules().remove(rule);
      }
    }
;
    if (!RestrictedTypes.filterPrivileged().apply(ruleGroup)) {
      throw new EucalyptusCloudException("Not authorized to revoke network group " + request.getGroupName() + " for "+ ctx.getUser());
    }
    final List<NetworkRule> filtered=Lists.newArrayList(Iterables.filter(ruleGroup.getNetworkRules(),filterContainsRule));
    if (filtered.size() == ruleList.size()) {
      reply.set_return(!Iterables.all(filtered,removeFailedPredicate));
    }
 else     if ((ipPermissions.size() == 1) && (ipPermissions.get(0).getIpProtocol() == null)) {
      reply.set_return(!Iterables.all(ruleList,removeFailedPredicate));
    }
    db.commit();
  }
 catch (  Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
    throw new EucalyptusCloudException("RevokeSecurityGroupIngress failed because: " + ex.getMessage(),ex);
  }
  return reply;
}
