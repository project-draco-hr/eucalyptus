{
  Context ctx=Contexts.lookup();
  NetworkGroupUtil.makeDefault(ctx.getUserFullName());
  RevokeSecurityGroupIngressResponseType reply=(RevokeSecurityGroupIngressResponseType)request.getReply();
  NetworkRulesGroup ruleGroup=NetworkGroupUtil.getUserNetworkRulesGroup(ctx.getUserFullName(),request.getGroupName());
  if (!ctx.hasAdministrativePrivileges() && !Permissions.isAuthorized(PolicySpec.EC2_RESOURCE_SECURITYGROUP,request.getGroupName(),ctx.getAccount(),PolicySpec.requestToAction(request),ctx.getUser())) {
    throw new EucalyptusCloudException("Not authorized to revoke network group " + request.getGroupName() + " for "+ ctx.getUser());
  }
  final List<NetworkRule> ruleList=Lists.newArrayList();
  for (  IpPermissionType ipPerm : request.getIpPermissions()) {
    ruleList.addAll(NetworkGroupUtil.getNetworkRules(ipPerm));
  }
  List<NetworkRule> filtered=Lists.newArrayList(Iterables.filter(ruleGroup.getNetworkRules(),new Predicate<NetworkRule>(){
    @Override public boolean apply(    NetworkRule rule){
      for (      NetworkRule r : ruleList) {
        if (r.equals(rule) && r.getNetworkPeers().equals(rule.getNetworkPeers()) && r.getIpRanges().equals(rule.getIpRanges())) {
          return true;
        }
      }
      return false;
    }
  }
));
  if (filtered.size() == ruleList.size()) {
    try {
      for (      NetworkRule r : filtered) {
        ruleGroup.getNetworkRules().remove(r);
      }
      ruleGroup=NetworkGroupUtil.getEntityWrapper().mergeAndCommit(ruleGroup);
    }
 catch (    RecoverablePersistenceException ex) {
      LOG.error(ex,ex);
      throw new EucalyptusCloudException("RevokeSecurityGroupIngress failed because: " + ex.getMessage(),ex);
    }
    return reply;
  }
 else   if (request.getIpPermissions().size() == 1 && request.getIpPermissions().get(0).getIpProtocol() == null) {
    for (    NetworkRule rule : ruleList) {
      if (ruleGroup.getNetworkRules().remove(rule)) {
        reply.set_return(true);
      }
    }
    if (reply.get_return()) {
      try {
        ruleGroup=NetworkGroupUtil.getEntityWrapper().mergeAndCommit(ruleGroup);
      }
 catch (      RecoverablePersistenceException ex) {
        LOG.error(ex,ex);
        throw new EucalyptusCloudException("RevokeSecurityGroupIngress failed because: " + ex.getMessage(),ex);
      }
    }
    return reply;
  }
 else {
    return reply.markFailed();
  }
}
