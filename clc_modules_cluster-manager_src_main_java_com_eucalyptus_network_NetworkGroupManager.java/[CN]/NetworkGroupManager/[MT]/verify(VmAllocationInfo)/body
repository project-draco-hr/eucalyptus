{
  NetworkGroupUtil.makeDefault(vmAllocInfo.getRequest().getUserId());
  ArrayList<String> networkNames=new ArrayList<String>(vmAllocInfo.getRequest().getGroupSet());
  if (networkNames.size() < 1) {
    networkNames.add("default");
  }
  Map<String,NetworkRulesGroup> networkRuleGroups=new HashMap<String,NetworkRulesGroup>();
  try {
    final String accountId=Users.lookupUserById(vmAllocInfo.getRequest().getUserId()).getAccount().getAccountId();
    for (    String groupName : networkNames) {
      NetworkRulesGroup group=null;
      group=Authorizations.lookupPrivileged(NetworkRulesGroup.class,groupName,new NetworkGroupOwnerLookup(),new ResourceLookup<NetworkRulesGroup>(){
        @Override public NetworkRulesGroup resolve(        String name) throws ResourceLookupException {
          try {
            return NetworkGroupUtil.getUserNetworkRulesGroup(accountId,name);
          }
 catch (          EucalyptusCloudException e) {
            throw new ResourceLookupException("Failed to find network group " + name,e);
          }
        }
      }
);
      networkRuleGroups.put(groupName,group);
      vmAllocInfo.getNetworks().add(group.getVmNetwork());
    }
  }
 catch (  ResourceLookupException e) {
    throw new EucalyptusCloudException(e);
  }
catch (  AuthException e) {
    throw new EucalyptusCloudException("Access to network groups " + networkNames + " is denied.",e);
  }
  ArrayList<String> userNetworks=new ArrayList<String>(networkRuleGroups.keySet());
  if (!userNetworks.containsAll(networkNames)) {
    networkNames.removeAll(userNetworks);
    throw new EucalyptusCloudException("Failed to find " + networkNames);
  }
  return vmAllocInfo;
}
