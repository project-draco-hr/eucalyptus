{
  NetworkGroupUtil.makeDefault(request.getUserErn());
  AuthorizeSecurityGroupIngressResponseType reply=(AuthorizeSecurityGroupIngressResponseType)request.getReply();
  EntityWrapper<NetworkRulesGroup> db=NetworkGroupUtil.getEntityWrapper();
  NetworkRulesGroup ruleGroup=NetworkGroupUtil.getUserNetworkRulesGroup(request.getUserErn(),request.getGroupName());
  final List<NetworkRule> ruleList=Lists.newArrayList();
  for (  IpPermissionType ipPerm : request.getIpPermissions()) {
    try {
      ruleList.addAll(NetworkGroupUtil.getNetworkRules(ipPerm));
    }
 catch (    IllegalArgumentException ex) {
      LOG.error(ex.getMessage());
      reply.set_return(false);
      db.rollback();
      return reply;
    }
  }
  if (Iterables.any(ruleGroup.getNetworkRules(),new Predicate<NetworkRule>(){
    @Override public boolean apply(    NetworkRule rule){
      for (      NetworkRule r : ruleList) {
        if (r.equals(rule) && r.getNetworkPeers().equals(rule.getNetworkPeers()) && r.getIpRanges().equals(rule.getIpRanges())) {
          return true || !r.isValid();
        }
      }
      return false;
    }
  }
)) {
    reply.set_return(false);
    db.rollback();
    return reply;
  }
  ruleGroup.getNetworkRules().addAll(ruleList);
  db.merge(ruleGroup);
  db.commit();
  reply.set_return(true);
  return reply;
}
