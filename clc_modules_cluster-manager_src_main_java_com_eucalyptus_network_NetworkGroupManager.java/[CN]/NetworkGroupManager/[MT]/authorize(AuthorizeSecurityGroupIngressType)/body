{
  final Context ctx=Contexts.lookup();
  final AuthorizeSecurityGroupIngressResponseType reply=request.getReply();
  EntityTransaction db=Entities.get(NetworkGroup.class);
  try {
    final NetworkGroup ruleGroup=NetworkGroups.lookup(ctx.getUserFullName().asAccountFullName(),request.getGroupName());
    if (!RestrictedTypes.filterPrivileged().apply(ruleGroup)) {
      throw new EucalyptusCloudException("Not authorized to authorize network group " + request.getGroupName() + " for "+ ctx.getUser());
    }
    final List<NetworkRule> ruleList=Lists.newArrayList();
    for (    final IpPermissionType ipPerm : request.getIpPermissions()) {
      try {
        ruleList.addAll(NetworkGroups.IpPermissionTypeAsNetworkRule.INSTANCE.apply(ipPerm));
      }
 catch (      final IllegalArgumentException ex) {
        LOG.error(ex.getMessage());
        reply.set_return(false);
        db.rollback();
        return reply;
      }
    }
    if (Iterables.any(ruleGroup.getNetworkRules(),new Predicate<NetworkRule>(){
      @Override public boolean apply(      final NetworkRule rule){
        return Iterables.any(ruleList,Predicates.equalTo(rule));
      }
    }
)) {
      reply.set_return(false);
      db.rollback();
      return reply;
    }
 else {
      ruleGroup.getNetworkRules().addAll(ruleList);
      EntityWrapper.get(ruleGroup).mergeAndCommit(ruleGroup);
      reply.set_return(true);
    }
    db.commit();
    return reply;
  }
 catch (  Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
    throw ex;
  }
}
