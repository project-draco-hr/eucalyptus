{
  Context ctx=Contexts.lookup();
  NetworkGroupUtil.makeDefault(ctx.getUserFullName());
  DeleteSecurityGroupResponseType reply=(DeleteSecurityGroupResponseType)request.getReply();
  if (Contexts.lookup().hasAdministrativePrivileges() && request.getGroupName().indexOf("::") != -1) {
    String[] nameParts=request.getGroupName().split("::");
    if (nameParts.length != 2) {
      throw new EucalyptusCloudException("Request to delete group named: " + request.getGroupName() + " is malformed.");
    }
 else {
      String accountId=nameParts[0];
      String groupName=nameParts[1];
      try {
        Account account=Accounts.lookupAccountById(accountId);
        for (        User user : account.getUsers()) {
          UserFullName userFullName=UserFullName.getInstance(user);
          try {
            NetworkGroupUtil.getUserNetworkRulesGroup(userFullName,groupName);
            NetworkGroupUtil.deleteUserNetworkRulesGroup(userFullName,groupName);
          }
 catch (          EucalyptusCloudException ex) {
          }
        }
      }
 catch (      AuthException ex) {
        LOG.error(ex.getMessage());
        throw new EucalyptusCloudException("Deleting security failed because of: " + ex.getMessage() + " for request "+ request.toSimpleString());
      }
    }
  }
 else {
    if (!Permissions.isAuthorized(PolicySpec.VENDOR_EC2,PolicySpec.EC2_RESOURCE_SECURITYGROUP,request.getGroupName(),ctx.getAccount(),PolicySpec.requestToAction(request),ctx.getUser())) {
      throw new EucalyptusCloudException("Not authorized to delete network group " + request.getGroupName() + " for "+ ctx.getUser());
    }
    NetworkGroupUtil.deleteUserNetworkRulesGroup(ctx.getUserFullName(),request.getGroupName());
  }
  reply.set_return(true);
  return reply;
}
