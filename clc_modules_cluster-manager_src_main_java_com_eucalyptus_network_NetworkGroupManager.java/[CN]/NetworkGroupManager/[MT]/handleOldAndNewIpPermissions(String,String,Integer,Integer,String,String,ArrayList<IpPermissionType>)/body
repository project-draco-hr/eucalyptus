{
  HashMap<String,Object> condition1Params=Maps.newHashMap();
  condition1Params.put("cidrIp",cidrIp);
  condition1Params.put("ipProtocol",ipProtocol);
  condition1Params.put("ipProtocol",ipProtocol);
  condition1Params.put("fromPort",fromPort);
  condition1Params.put("toPort",toPort);
  HashMap<String,Object> condition2Params=Maps.newHashMap();
  condition2Params.put("sourceSecurityGroupName",sourceSecurityGroupName);
  condition2Params.put("sourceSecurityGroupOwnerId",sourceSecurityGroupOwnerId);
  if (ipPermissions != null && ipPermissions.size() > 0) {
    for (    String key : condition1Params.keySet()) {
      Object value=condition1Params.get(key);
      if (value != null) {
        throw new MetadataException("InvalidParameterCombination: " + key + " and ipPermissions must not both be set");
      }
    }
    for (    String key : condition2Params.keySet()) {
      Object value=condition2Params.get(key);
      if (value != null) {
        throw new MetadataException("InvalidParameterCombination: " + key + " and ipPermissions must not both be set");
      }
    }
    return ipPermissions;
  }
  String unsetCondition2Key=null;
  String setCondition2Key=null;
  for (  String key : condition2Params.keySet()) {
    Object value=condition2Params.get(key);
    if (value == null && unsetCondition2Key == null) {
      unsetCondition2Key=key;
    }
 else     if (value != null && setCondition2Key == null) {
      setCondition2Key=key;
    }
  }
  if (setCondition2Key != null) {
    if (unsetCondition2Key != null) {
      throw new MetadataException("MissingParameter: " + unsetCondition2Key + " must be set if "+ setCondition2Key+ " is set.");
    }
 else {
      for (      String key : condition1Params.keySet()) {
        Object value=condition1Params.get(key);
        if (value != null) {
          throw new MetadataException("InvalidParameterCombination: " + key + " and "+ setCondition2Key+ " must not both be set");
        }
      }
      IpPermissionType tcpPermission=new IpPermissionType("tcp",1,65535);
      tcpPermission.setGroups(Lists.newArrayList(new UserIdGroupPairType(sourceSecurityGroupOwnerId,sourceSecurityGroupName,null)));
      IpPermissionType udpPermission=new IpPermissionType("udp",1,65535);
      udpPermission.setGroups(Lists.newArrayList(new UserIdGroupPairType(sourceSecurityGroupOwnerId,sourceSecurityGroupName,null)));
      IpPermissionType icmpPermission=new IpPermissionType("icmp",-1,-1);
      icmpPermission.setGroups(Lists.newArrayList(new UserIdGroupPairType(sourceSecurityGroupOwnerId,sourceSecurityGroupName,null)));
      return Lists.newArrayList(tcpPermission,udpPermission,icmpPermission);
    }
  }
  String unsetCondition1Key=null;
  String setCondition1Key=null;
  for (  String key : condition1Params.keySet()) {
    Object value=condition1Params.get(key);
    if (value == null && unsetCondition1Key == null) {
      unsetCondition1Key=key;
    }
 else     if (value != null && setCondition1Key == null) {
      setCondition1Key=key;
    }
  }
  if (setCondition1Key != null) {
    if (unsetCondition1Key != null) {
      throw new MetadataException("MissingParameter: " + unsetCondition1Key + " must be set if "+ setCondition1Key+ " is set.");
    }
 else {
      IpPermissionType permission=new IpPermissionType(ipProtocol,fromPort,toPort);
      permission.setCidrIpRanges(Lists.newArrayList(cidrIp));
      return Lists.newArrayList(permission);
    }
  }
  throw new MetadataException("Missing source specification: include source security group or CIDR information");
}
