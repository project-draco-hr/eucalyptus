{
  final RevokeSecurityGroupIngressResponseType reply=request.getReply().markFailed();
  final Context ctx=Contexts.lookup();
  final Predicate<Void> updateFunction=new Predicate<Void>(){
    @Override public boolean apply(    @Nullable final Void aVoid){
      try {
        final NetworkGroup ruleGroup=lookupGroup(request.getGroupId(),request.getGroupName());
        final List<IpPermissionType> ipPermissions=handleOldAndNewIpPermissions(ruleGroup.getVpcId() != null,request.getCidrIp(),request.getIpProtocol(),request.getFromPort(),request.getToPort(),request.getSourceSecurityGroupName(),request.getSourceSecurityGroupOwnerId(),request.getIpPermissions());
        if (RestrictedTypes.filterPrivileged().apply(ruleGroup)) {
          try {
            NetworkGroups.resolvePermissions(ipPermissions,ctx.getUser().getAccountNumber(),ruleGroup.getVpcId(),true);
            Iterators.removeAll(ruleGroup.getNetworkRules().iterator(),NetworkGroups.ipPermissionsAsNetworkRules(ipPermissions,ruleGroup.getVpcId() != null));
          }
 catch (          IllegalArgumentException e) {
            throw new ClientComputeException("InvalidPermission.Malformed",e.getMessage());
          }
catch (          NoSuchMetadataException e) {
            throw new ClientComputeException("InvalidGroup.NotFound",e.getMessage());
          }
        }
 else {
          throw new ClientUnauthorizedComputeException("Not authorized to revoke network group " + request.getGroupName() + " for "+ ctx.getUser().getName());
        }
      }
 catch (      final Exception e) {
        throw Exceptions.toUndeclared(e);
      }
      return true;
    }
  }
;
  try {
    reply.set_return(Entities.asDistinctTransaction(NetworkGroup.class,updateFunction).apply(null));
    NetworkGroups.flushRules();
  }
 catch (  Exception ex) {
    Exceptions.findAndRethrow(ex,EucalyptusCloudException.class,EucalyptusWebServiceException.class);
    Logs.exhaust().error(ex,ex);
    throw new EucalyptusCloudException("RevokeSecurityGroupIngress failed because: " + ex.getMessage(),ex);
  }
  return reply;
}
