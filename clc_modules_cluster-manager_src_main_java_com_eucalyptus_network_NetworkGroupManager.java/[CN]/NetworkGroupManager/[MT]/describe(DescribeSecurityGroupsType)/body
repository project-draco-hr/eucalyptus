{
  final DescribeSecurityGroupsResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final Set<String> nameOrIdSet=Sets.newHashSet();
  nameOrIdSet.addAll(request.getSecurityGroupSet());
  nameOrIdSet.addAll(request.getSecurityGroupIdSet());
  boolean showAll=nameOrIdSet.remove("verbose");
  NetworkGroups.createDefault(ctx.getUserFullName());
  final Filter filter=Filters.generate(request.getFilterSet(),NetworkGroup.class);
  final Predicate<? super NetworkGroup> requestedAndAccessible=CloudMetadatas.filteringFor(NetworkGroup.class).byPredicate(Predicates.or(CloudMetadatas.filterById(nameOrIdSet),CloudMetadatas.filterByProperty(nameOrIdSet,NetworkGroups.groupId()))).byPredicate(filter.asPredicate()).byPredicate(Contexts.lookup().hasAdministrativePrivileges() ? Predicates.<NetworkGroup>alwaysTrue() : RestrictedTypes.<NetworkGroup>filterPrivileged()).buildPredicate();
  final OwnerFullName ownerFn=Contexts.lookup().hasAdministrativePrivileges() && showAll ? null : AccountFullName.getInstance(ctx.getAccount());
  final Iterable<SecurityGroupItemType> securityGroupItems=Transactions.filteredTransform(NetworkGroup.withOwner(ownerFn),filter.asCriterion(),filter.getAliases(),requestedAndAccessible,TypeMappers.lookup(NetworkGroup.class,SecurityGroupItemType.class));
  Iterables.addAll(reply.getSecurityGroupInfo(),securityGroupItems);
  return reply;
}
