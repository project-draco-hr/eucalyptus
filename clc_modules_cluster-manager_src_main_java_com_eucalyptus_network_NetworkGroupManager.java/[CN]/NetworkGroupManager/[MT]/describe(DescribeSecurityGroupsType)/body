{
  final DescribeSecurityGroupsResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final boolean showAll=request.getSecurityGroupSet().remove("verbose") || request.getSecurityGroupIdSet().remove("verbose");
  NetworkGroups.createDefault(ctx.getUserFullName());
  final FiltersBuilder builder=Filters.generateFor(request.getFilterSet(),NetworkGroup.class);
  if ((request.getSecurityGroupSet().isEmpty() && !request.getSecurityGroupIdSet().isEmpty()) || (!request.getSecurityGroupSet().isEmpty() && request.getSecurityGroupIdSet().isEmpty())) {
    builder.withOptionalInternalFilter("group-name",request.getSecurityGroupSet());
    builder.withOptionalInternalFilter("group-id",normalizeGroupIdentifiers(request.getSecurityGroupIdSet()));
  }
  final Filter filter=builder.generate();
  final Predicate<? super NetworkGroup> requestedAndAccessible=CloudMetadatas.filteringFor(NetworkGroup.class).byPredicate(Predicates.or(request.getSecurityGroupSet().isEmpty() && request.getSecurityGroupIdSet().isEmpty() ? Predicates.<NetworkGroup>alwaysTrue() : Predicates.<NetworkGroup>alwaysFalse(),request.getSecurityGroupSet().isEmpty() ? Predicates.<NetworkGroup>alwaysFalse() : CloudMetadatas.<NetworkGroup>filterById(request.getSecurityGroupSet()),request.getSecurityGroupIdSet().isEmpty() ? Predicates.<NetworkGroup>alwaysFalse() : CloudMetadatas.filterByProperty(normalizeGroupIdentifiers(request.getSecurityGroupIdSet()),NetworkGroups.groupId()))).byPredicate(filter.asPredicate()).byPrivileges().buildPredicate();
  final OwnerFullName ownerFn=Contexts.lookup().isAdministrator() && showAll ? null : AccountFullName.getInstance(ctx.getAccount());
  final Iterable<SecurityGroupItemType> securityGroupItems=Entities.asDistinctTransaction(NetworkGroup.class,new Function<Void,Iterable<SecurityGroupItemType>>(){
    @Nullable @Override public Iterable<SecurityGroupItemType> apply(    @Nullable final Void aVoid){
      try {
        return Transactions.filteredTransform(NetworkGroup.withOwner(ownerFn),filter.asCriterion(),filter.getAliases(),requestedAndAccessible,TypeMappers.lookup(NetworkGroup.class,SecurityGroupItemType.class));
      }
 catch (      TransactionException e) {
        if (Exceptions.isCausedBy(e,EntityNotFoundException.class)) {
          throw new Entities.RetryTransactionException(e,NetworkGroup.class);
        }
        throw Exceptions.toUndeclared(e);
      }
    }
  }
).apply(null);
  final Map<String,List<Tag>> tagsMap=TagSupport.forResourceClass(NetworkGroup.class).getResourceTagMap(AccountFullName.getInstance(ctx.getAccount()),Iterables.transform(securityGroupItems,SecurityGroupItemToGroupId.INSTANCE));
  for (  final SecurityGroupItemType securityGroupItem : securityGroupItems) {
    Tags.addFromTags(securityGroupItem.getTagSet(),ResourceTag.class,tagsMap.get(securityGroupItem.getGroupId()));
  }
  Iterables.addAll(reply.getSecurityGroupInfo(),securityGroupItems);
  return reply;
}
