{
  final DescribeSecurityGroupsResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  NetworkGroups.createDefault(ctx.getUserFullName());
  final List<String> groupNames=request.getSecurityGroupSet();
  final Predicate<NetworkGroup> argListFilter=new Predicate<NetworkGroup>(){
    @Override public boolean apply(    final NetworkGroup arg0){
      return groupNames.isEmpty() || groupNames.contains(arg0.getName());
    }
  }
;
  Predicate<NetworkGroup> netFilter=Predicates.and(argListFilter,userAuthFilter());
  OwnerFullName ownerFn=AccountFullName.getInstance(ctx.getAccount());
  if (Contexts.lookup().hasAdministrativePrivileges()) {
    ownerFn=null;
    netFilter=argListFilter;
  }
  final EntityTransaction db=Entities.get(NetworkGroup.class);
  try {
    final Iterable<NetworkGroup> matches=Iterables.filter(Entities.query(NetworkGroup.named(ownerFn,null)),netFilter);
    final Iterable<SecurityGroupItemType> transformed=Iterables.transform(matches,TypeMappers.lookup(NetworkGroup.class,SecurityGroupItemType.class));
    Iterables.addAll(reply.getSecurityGroupInfo(),transformed);
  }
 catch (  final Exception e) {
    LOG.debug(e,e);
  }
  return reply;
}
