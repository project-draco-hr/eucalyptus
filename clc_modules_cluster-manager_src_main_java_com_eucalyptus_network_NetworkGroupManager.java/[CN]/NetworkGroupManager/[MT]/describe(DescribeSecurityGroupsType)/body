{
  final DescribeSecurityGroupsResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  boolean showAll=request.getSecurityGroupSet().remove("verbose");
  NetworkGroups.createDefault(ctx.getUserFullName());
  final Filter filter=Filters.generate(request.getFilterSet(),NetworkGroup.class);
  final CloudMetadatas.FilterBuilder<NetworkGroup> filterBuilder=CloudMetadatas.filteringFor(NetworkGroup.class).byId(request.getSecurityGroupSet()).byPredicate(filter.asPredicate());
  OwnerFullName ownerFn=AccountFullName.getInstance(ctx.getAccount());
  if (Contexts.lookup().hasAdministrativePrivileges()) {
    if (showAll) {
      ownerFn=null;
    }
  }
 else {
    filterBuilder.byPrivileges();
  }
  final Predicate<? super NetworkGroup> netFilter=filterBuilder.buildPredicate();
  final EntityTransaction db=Entities.get(NetworkGroup.class);
  try {
    final List<NetworkGroup> networks=Entities.query(NetworkGroup.named(ownerFn,null),true,filter.asCriterion(),filter.getAliases());
    final Iterable<NetworkGroup> matches=Iterables.filter(networks,netFilter);
    final Iterable<SecurityGroupItemType> transformed=Iterables.transform(matches,TypeMappers.lookup(NetworkGroup.class,SecurityGroupItemType.class));
    Iterables.addAll(reply.getSecurityGroupInfo(),transformed);
  }
 catch (  final Exception ex) {
    LOG.error(ex,ex);
  }
 finally {
    db.rollback();
  }
  return reply;
}
