{
  final RevokeSecurityGroupEgressResponseType reply=request.getReply().markFailed();
  final Context ctx=Contexts.lookup();
  final Predicate<Void> updateFunction=new Predicate<Void>(){
    @Override public boolean apply(    @Nullable final Void aVoid){
      try {
        final NetworkGroup ruleGroup=lookupGroup(request.getGroupId(),null);
        final List<IpPermissionType> ipPermissions=request.getIpPermissions();
        if (RestrictedTypes.filterPrivileged().apply(ruleGroup)) {
          if (ruleGroup.getVpcId() == null) {
            throw new ClientComputeException("InvalidGroup.NotFound","VPC security group (" + request.getGroupId() + ") not found");
          }
          try {
            final List<NetworkRule> rules=NetworkGroups.ipPermissionsAsNetworkRules(ipPermissions,true,true);
            for (            final NetworkRule rule : rules)             rule.setEgress(true);
            NetworkGroups.resolvePermissions(ipPermissions,ctx.getUser().getAccountNumber(),ruleGroup.getVpcId(),true);
            if (Iterators.removeAll(ruleGroup.getNetworkRules().iterator(),rules)) {
              ruleGroup.updateTimeStamps();
            }
          }
 catch (          IllegalArgumentException e) {
            throw new ClientComputeException("InvalidPermission.Malformed",e.getMessage());
          }
catch (          NoSuchMetadataException e) {
            throw new ClientComputeException("InvalidGroup.NotFound",e.getMessage());
          }
        }
 else {
          throw new ClientUnauthorizedComputeException("Not authorized to revoke network group " + request.getGroupId() + " for "+ ctx.getUser().getName());
        }
      }
 catch (      final EntityNotFoundException e) {
        throw new Entities.RetryTransactionException(e);
      }
catch (      final Exception e) {
        throw Exceptions.toUndeclared(e);
      }
      return true;
    }
  }
;
  try {
    reply.set_return(Entities.asDistinctTransaction(NetworkGroup.class,updateFunction).apply(null));
    NetworkGroups.flushRules();
  }
 catch (  Exception ex) {
    Exceptions.findAndRethrow(ex,EucalyptusCloudException.class,EucalyptusWebServiceException.class);
    Logs.exhaust().error(ex,ex);
    throw new EucalyptusCloudException("RevokeSecurityGroupEgress failed because: " + ex.getMessage(),ex);
  }
  return reply;
}
