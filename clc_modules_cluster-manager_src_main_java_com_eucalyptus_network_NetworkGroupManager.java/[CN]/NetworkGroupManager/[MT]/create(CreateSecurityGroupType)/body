{
  final Context ctx=Contexts.lookup();
  final String groupName=request.getGroupName();
  if (Strings.startsWith("sg-").apply(groupName)) {
    throw new ClientComputeException("InvalidParameterValue","Value (" + groupName + ") for parameter GroupName is invalid. Group names may not be in the format sg-*");
  }
  if (!CharMatcher.ASCII.matchesAllOf(groupName)) {
    throw new ClientComputeException("InvalidParameterValue","Value (" + groupName + ") for parameter GroupName is invalid. Character sets beyond ASCII are not supported.");
  }
  final UserFullName userFullName=ctx.getUserFullName();
  final CreateSecurityGroupResponseType reply=request.getReply();
  try {
    Supplier<NetworkGroup> allocator=new Supplier<NetworkGroup>(){
      @Override public NetworkGroup get(){
        try (final TransactionResource tx=Entities.transactionFor(NetworkGroup.class)){
          final Vpc vpc=request.getVpcId() == null ? null : Entities.uniqueResult(Vpc.exampleWithName(userFullName.asAccountFullName(),ResourceIdentifiers.tryNormalize().apply(request.getVpcId())));
          final NetworkGroup group=NetworkGroups.create(ctx.getUserFullName(),vpc,groupName,request.getGroupDescription());
          tx.commit();
          return group;
        }
 catch (        NoSuchElementException e) {
          throw Exceptions.toUndeclared(new ClientComputeException("InvalidVpcID.NotFound","The vpc ID '" + request.getVpcId() + "' does not exist"));
        }
catch (        TransactionException|MetadataException ex) {
          throw new RuntimeException(ex);
        }
      }
    }
;
    final NetworkGroup group=RestrictedTypes.allocateUnitlessResource(allocator);
    reply.setGroupId(group.getGroupId());
    return reply;
  }
 catch (  final Exception ex) {
    Exceptions.findAndRethrow(ex,ComputeException.class);
    String cause=Exceptions.causeString(ex);
    if (cause.contains("DuplicateMetadataException"))     throw new ClientComputeException("InvalidGroup.Duplicate","The security group '" + groupName + "' alread exists");
 else     throw new EucalyptusCloudException("CreateSecurityGroup failed because: " + cause,ex);
  }
}
