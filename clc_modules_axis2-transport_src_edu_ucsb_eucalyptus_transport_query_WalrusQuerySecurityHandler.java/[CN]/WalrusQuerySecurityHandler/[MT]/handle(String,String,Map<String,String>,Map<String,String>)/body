{
  CaseInsensitiveMap hdrs=new CaseInsensitiveMap(headers);
  if (hdrs.containsKey(StorageQuerySecurityHandler.StorageSecurityParameters.EucaSignature)) {
    String date=(String)hdrs.remove(SecurityParameter.Date);
    String eucaCert=(String)hdrs.remove(StorageQuerySecurityHandler.StorageSecurityParameters.EucaCert);
    String signature=(String)hdrs.remove(StorageQuerySecurityHandler.StorageSecurityParameters.EucaSignature);
    String data=verb + "\n" + date+ "\n"+ addr+ "\n";
    Signature sig;
    boolean valid=false;
    try {
      byte[] bytes=Base64.decode(eucaCert);
      String certString=new String(bytes);
      PEMReader pemReader=new PEMReader(new StringReader(certString));
      X509Certificate cert=(X509Certificate)pemReader.readObject();
      AbstractKeyStore keyStore=ServiceKeyStore.getInstance();
      if (keyStore.getCertificateAlias(cert) != null) {
        PublicKey publicKey=cert.getPublicKey();
        sig=Signature.getInstance("SHA1withRSA");
        sig.initVerify(publicKey);
        sig.update(data.getBytes());
        valid=sig.verify(Base64.decode(signature));
      }
 else {
        LOG.warn("WalrusQuerySecurityHandler(): certificate not found in keystore");
      }
    }
 catch (    Exception ex) {
      LOG.warn("Authentication exception: " + ex.getMessage());
      ex.printStackTrace();
    }
    if (!valid) {
      throw new QuerySecurityException("User authentication failed.");
    }
    UserInfo admin=new UserInfo(EucalyptusProperties.NAME);
    admin.setIsAdministrator(Boolean.TRUE);
    return admin;
  }
 else   if (hdrs.containsKey(WalrusProperties.FormField.FormUploadPolicyData)) {
    String data=(String)hdrs.remove(WalrusProperties.FormField.FormUploadPolicyData);
    String auth_part=(String)hdrs.remove(SecurityParameter.Authorization);
    if (auth_part != null) {
      String sigString[]=getSigInfo(auth_part);
      String signature=sigString[1];
      return getUserInfo(sigString[0],signature,data);
    }
    throw new QuerySecurityException("User authentication failed.");
  }
 else {
    String date=(String)hdrs.remove(SecurityParameter.Date);
    date=date == null ? "" : date;
    String content_md5=(String)hdrs.remove("Content-MD5");
    content_md5=content_md5 == null ? "" : content_md5;
    String content_type=(String)hdrs.remove("Content-Type");
    content_type=content_type == null ? "" : content_type;
    String[] addrStrings=addr.split("\\?");
    String addrString=addrStrings[0];
    if (addrStrings.length > 1) {
      for (      SubResource subResource : SubResource.values()) {
        if (addr.contains(subResource.toString())) {
          addrString+="?" + subResource.toString();
          break;
        }
      }
    }
    String data=verb + "\n" + content_md5+ "\n"+ content_type+ "\n"+ date+ "\n"+ getCanonicalizedAmzHeaders(hdrs)+ addrString;
    String auth_part=(String)hdrs.remove(SecurityParameter.Authorization);
    if (auth_part != null) {
      String sigString[]=getSigInfo(auth_part);
      String signature=sigString[1];
      return getUserInfo(sigString[0],signature,data);
    }
 else     if (parameters.containsKey(SecurityParameter.AWSAccessKeyId.toString())) {
      String accesskeyid=parameters.get(SecurityParameter.AWSAccessKeyId.toString());
      String signature=parameters.get(SecurityParameter.Signature.toString());
      if (signature == null) {
        throw new QuerySecurityException("User authentication failed. Null signature.");
      }
      String expires=parameters.get(SecurityParameter.Expires.toString());
      if (expires == null) {
        throw new QuerySecurityException("Authentication failed. Expires must be specified.");
      }
      if (checkExpires(expires)) {
        return getUserInfo(accesskeyid,signature,data);
      }
 else {
        throw new QuerySecurityException("Cannot process request. Expired.");
      }
    }
 else {
      return null;
    }
  }
}
