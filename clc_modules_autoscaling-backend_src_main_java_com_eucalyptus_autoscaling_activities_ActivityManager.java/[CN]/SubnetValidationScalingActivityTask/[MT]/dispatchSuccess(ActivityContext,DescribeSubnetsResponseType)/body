{
  if (response.getSubnetSet() == null || response.getSubnetSet().getItem() == null) {
    setValidationError("Invalid subnet(s): " + subnetIds);
  }
 else   if (response.getSubnetSet().getItem().size() != subnetIds.size()) {
    final Set<String> validSubnetIds=Sets.newHashSet();
    for (    final SubnetType subnetType : response.getSubnetSet().getItem()) {
      validSubnetIds.add(subnetType.getSubnetId());
    }
    final Set<String> invalidSubnets=Sets.newTreeSet(subnetIds);
    invalidSubnets.removeAll(validSubnetIds);
    setValidationError("Invalid subnet(s): " + invalidSubnets);
  }
 else {
    final Set<String> subnetZones=Sets.newHashSet();
    for (    final SubnetType subnetType : response.getSubnetSet().getItem()) {
      subnetZones.add(subnetType.getAvailabilityZone());
    }
    if (subnetZones.size() != subnetIds.size()) {
      setValidationError("Found multiple subnets for availability zone(s) ");
    }
    if (!availabilityZones.isEmpty() && !subnetZones.equals(Sets.newHashSet(availabilityZones))) {
      setValidationError("Specified subnet(s) not consistent with specified availability zone(s)");
    }
    final Map<String,String> zonesToSubnetIds=Maps.newHashMap();
    for (    final SubnetType subnetType : response.getSubnetSet().getItem()) {
      zonesToSubnetIds.put(subnetType.getAvailabilityZone(),subnetType.getSubnetId());
    }
    availabilityZoneToSubnetMapConsumer.accept(ImmutableMap.copyOf(zonesToSubnetIds));
  }
  setActivityFinalStatus(ActivityStatusCode.Successful);
}
