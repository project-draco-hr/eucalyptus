{
  final int opMaxRetry=3;
  try {
    Long timeout=DirectStorageInfo.getStorageInfo().getTimeoutInMillis();
    LOG.debug("Unexport target: tid=" + tid + ",lun="+ lun+ " for "+ volumeId);
    if (TGTWrapper.targetExists(volumeId,tid,path,timeout)) {
      LOG.info("Attempting to unexport target: " + tid);
    }
 else {
      LOG.info("Volume: " + volumeId + " Target: "+ tid+ " not found, cannot unexport it.");
      return;
    }
    LOG.debug("Unbinding target " + tid + " for "+ volumeId);
    TGTWrapper.unbindTarget(volumeId,tid,timeout);
    int retryCount=0;
    do {
      try {
        LOG.debug("Deleting lun " + lun + " on target "+ tid+ " for "+ volumeId);
        TGTWrapper.deleteLun(volumeId,tid,lun,timeout);
        break;
      }
 catch (      ResourceNotFoundException e) {
        LOG.warn("Resource not found when deleting lun for " + volumeId + ". Continuing unexport",e);
        break;
      }
catch (      EucalyptusCloudException e) {
        LOG.warn("Volume " + volumeId + " Unable to delete lun for target: "+ tid);
        Thread.sleep(1000);
        continue;
      }
    }
 while (retryCount++ < opMaxRetry);
    if (retryCount >= opMaxRetry) {
      LOG.error("Volume: " + volumeId + " Gave up deleting the lun for: "+ tid);
    }
    retryCount=0;
    do {
      try {
        LOG.debug("Deleting target " + tid + " for "+ volumeId);
        TGTWrapper.deleteTarget(volumeId,tid,timeout,false);
      }
 catch (      ResourceNotFoundException e) {
        LOG.warn("Resource not found when deleting target for volume " + volumeId + " Continuing.",e);
      }
catch (      EucalyptusCloudException e) {
        LOG.warn("Volume: " + volumeId + " Unable to delete target: "+ tid,e);
        Thread.sleep(1000);
        continue;
      }
      if (TGTWrapper.targetExists(volumeId,tid,null,timeout)) {
        LOG.warn("Volume: " + volumeId + " Target: "+ tid+ " still exists...");
        Thread.sleep(1000);
      }
 else {
        break;
      }
    }
 while (retryCount++ < opMaxRetry);
    if (retryCount >= opMaxRetry && !TGTWrapper.targetHasLun(volumeId,tid,lun,timeout)) {
      LOG.info("Forcibly deleting volume " + volumeId + " iscsi target "+ tid);
      TGTWrapper.deleteTarget(volumeId,tid,timeout,true);
      if (TGTWrapper.targetExists(volumeId,tid,null,timeout)) {
        LOG.error("Volume: " + volumeId + " Target: "+ tid+ " still exists after forcible deletion");
        throw new Exception("Failed to delete iscsi target " + tid + " for volume "+ volumeId);
      }
    }
  }
 catch (  Exception t) {
    LOG.error("Unexpected error encountered during unexport process for volume " + volumeId,t);
  }
}
