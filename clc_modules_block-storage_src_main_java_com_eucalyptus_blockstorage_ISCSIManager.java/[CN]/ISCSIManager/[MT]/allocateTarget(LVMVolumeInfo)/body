{
  if (volumeInfo instanceof ISCSIVolumeInfo) {
    ISCSIVolumeInfo iscsiVolumeInfo=(ISCSIVolumeInfo)volumeInfo;
    LOG.debug("Allocate target: " + iscsiVolumeInfo);
    if (iscsiVolumeInfo.getTid() > -1) {
      LOG.info("Volume already associated with a tid: " + iscsiVolumeInfo.getTid());
      return;
    }
    int tid=-1, storeNumber=-1;
    List<ISCSIMetaInfo> metaInfoList;
    try (TransactionResource tran=Entities.transactionFor(ISCSIMetaInfo.class)){
      metaInfoList=Entities.query(new ISCSIMetaInfo(StorageProperties.NAME));
      if (metaInfoList.size() > 0) {
        ISCSIMetaInfo foundMetaInfo=metaInfoList.get(0);
        storeNumber=foundMetaInfo.getStoreNumber();
        tid=foundMetaInfo.getTid();
      }
      tran.commit();
    }
     int i=tid;
    Long timeout=DirectStorageInfo.getStorageInfo().getTimeoutInMillis();
    do {
      if (!tgtService.targetExists(volumeInfo.getVolumeId(),i,null,timeout)) {
        tid=i;
        break;
      }
      i=(i + 1) % Integer.MAX_VALUE;
    }
 while (i != tid);
    LOG.debug("Volume " + iscsiVolumeInfo.getVolumeId() + " Target allocation found tid: "+ tid);
    if (tid > 0) {
      try (TransactionResource tran=Entities.transactionFor(ISCSIMetaInfo.class)){
        metaInfoList=Entities.query(new ISCSIMetaInfo(StorageProperties.NAME));
        if (metaInfoList.size() > 0) {
          ISCSIMetaInfo foundMetaInfo=metaInfoList.get(0);
          foundMetaInfo.setStoreNumber(++storeNumber);
          foundMetaInfo.setTid(tid + 1);
          iscsiVolumeInfo.setStoreName(foundMetaInfo.getStorePrefix() + StorageProperties.NAME + ":store"+ storeNumber);
          iscsiVolumeInfo.setStoreUser(foundMetaInfo.getStoreUser());
          iscsiVolumeInfo.setTid(tid);
          iscsiVolumeInfo.setLun(1);
        }
        tran.commit();
      }
     }
 else {
      iscsiVolumeInfo.setTid(-1);
      LOG.fatal("Unable to allocate ISCSI target id for volume " + iscsiVolumeInfo.getVolumeId());
    }
  }
}
