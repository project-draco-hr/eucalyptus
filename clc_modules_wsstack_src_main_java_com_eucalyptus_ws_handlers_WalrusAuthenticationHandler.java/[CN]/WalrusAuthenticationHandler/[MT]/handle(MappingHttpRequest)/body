{
  Map<String,String> parameters=httpRequest.getParameters();
  String verb=httpRequest.getMethod().getName();
  String addr=httpRequest.getUri();
  if (httpRequest.containsHeader(StorageProperties.StorageParameters.EucaSignature.toString())) {
    String date=httpRequest.getAndRemoveHeader(SecurityParameter.Date.toString());
    String signature=httpRequest.getAndRemoveHeader(StorageProperties.StorageParameters.EucaSignature.toString());
    String certString=null;
    if (httpRequest.containsHeader(StorageProperties.StorageParameters.EucaCert.toString())) {
      certString=httpRequest.getAndRemoveHeader(StorageProperties.StorageParameters.EucaCert.toString());
    }
    String data=verb + "\n" + date+ "\n"+ addr+ "\n";
    Signature sig;
    boolean valid=false;
    try {
      try {
        PublicKey publicKey=SystemCredentialProvider.getCredentialProvider(Component.storage).getCertificate().getPublicKey();
        sig=Signature.getInstance("SHA1withRSA");
        sig.initVerify(publicKey);
        sig.update(data.getBytes());
        valid=sig.verify(Base64.decode(signature));
      }
 catch (      Exception e) {
        LOG.warn("Authentication: certificate not found in keystore");
      }
 finally {
        if (!valid && certString != null) {
          try {
            X509Certificate nodeCert=Hashes.getPemCert(Base64.decode(certString));
            String alias=CredentialProvider.getCertificateAlias(nodeCert);
            PublicKey publicKey=nodeCert.getPublicKey();
            sig=Signature.getInstance("SHA1withRSA");
            sig.initVerify(publicKey);
            sig.update(data.getBytes());
            valid=sig.verify(Base64.decode(signature));
          }
 catch (          Exception e2) {
            LOG.warn("Authentication exception: " + e2.getMessage());
          }
        }
      }
    }
 catch (    Exception ex) {
      LOG.warn("Authentication exception: " + ex.getMessage());
      ex.printStackTrace();
    }
    if (!valid) {
      throw new AuthenticationException("User authentication failed.");
    }
    try {
      User user=CredentialProvider.getUser("admin");
      user.setIsAdministrator(true);
      httpRequest.setUser(user);
    }
 catch (    NoSuchUserException e) {
      throw new AuthenticationException("User authentication failed.");
    }
  }
 else {
    String content_md5=httpRequest.getAndRemoveHeader("Content-MD5");
    content_md5=content_md5 == null ? "" : content_md5;
    String content_type=httpRequest.getHeader(WalrusProperties.CONTENT_TYPE);
    content_type=content_type == null ? "" : content_type;
    String targetHost=httpRequest.getHeader(HttpHeaders.Names.HOST);
    if (targetHost.contains(".walrus")) {
      String bucket=targetHost.substring(0,targetHost.indexOf(".walrus"));
      addr="/" + bucket + addr;
    }
    String[] addrStrings=addr.split("\\?");
    String addrString=addrStrings[0];
    if (addrStrings.length > 1) {
      for (      WalrusProperties.SubResource subResource : WalrusProperties.SubResource.values()) {
        if (addr.endsWith(subResource.toString().toLowerCase())) {
          addrString+="?" + subResource.toString().toLowerCase();
          break;
        }
      }
    }
    if (httpRequest.containsHeader(SecurityParameter.Authorization.toString())) {
      String date;
      String verifyDate;
      if (httpRequest.containsHeader("x-amz-date")) {
        date="";
        verifyDate=httpRequest.getHeader("x-amz-date");
      }
 else {
        date=httpRequest.getAndRemoveHeader(SecurityParameter.Date.toString());
        verifyDate=date;
        if (date == null || date.length() <= 0)         throw new AuthenticationException("User authentication failed. Date must be specified.");
      }
      try {
        Date dateToVerify=DateUtil.parseDate(verifyDate);
        Date currentDate=new Date();
        if (Math.abs(currentDate.getTime() - dateToVerify.getTime()) > EXPIRATION_LIMIT)         throw new AuthenticationException("Message expired. Sorry.");
      }
 catch (      Exception ex) {
        throw new AuthenticationException("Unable to parse date.");
      }
      String data=verb + "\n" + content_md5+ "\n"+ content_type+ "\n"+ date+ "\n"+ getCanonicalizedAmzHeaders(httpRequest)+ addrString;
      String auth_part=httpRequest.getAndRemoveHeader(SecurityParameter.Authorization.toString());
      String sigString[]=getSigInfo(auth_part);
      String signature=sigString[1];
      authenticate(httpRequest,sigString[0],signature,data);
    }
 else     if (parameters.containsKey(SecurityParameter.AWSAccessKeyId.toString())) {
      String accesskeyid=parameters.remove(SecurityParameter.AWSAccessKeyId.toString());
      try {
        String signature=URLDecoder.decode(parameters.remove(SecurityParameter.Signature.toString()),"UTF-8");
        signature=signature.replaceAll(" ","+");
        if (signature == null) {
          throw new AuthenticationException("User authentication failed. Null signature.");
        }
        String expires=parameters.remove(SecurityParameter.Expires.toString());
        if (expires == null) {
          throw new AuthenticationException("Authentication failed. Expires must be specified.");
        }
        if (checkExpires(expires)) {
          String stringToSign=verb + "\n" + content_md5+ "\n"+ content_type+ "\n"+ Long.parseLong(expires)+ "\n"+ getCanonicalizedAmzHeaders(httpRequest)+ addrString;
          authenticate(httpRequest,accesskeyid,signature,stringToSign);
        }
 else {
          throw new AuthenticationException("Cannot process request. Expired.");
        }
      }
 catch (      Exception ex) {
        throw new AuthenticationException("Could not verify request " + ex.getMessage());
      }
    }
 else {
    }
  }
}
