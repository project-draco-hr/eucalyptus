{
  Map<String,String> parameters=httpRequest.getParameters();
  String verb=httpRequest.getMethod().getName();
  String addr=httpRequest.getUri();
  if (httpRequest.containsHeader(StorageProperties.StorageParameters.EucaSignature.toString())) {
    String date=httpRequest.getAndRemoveHeader(SecurityParameter.Date.toString());
    String signature=httpRequest.getAndRemoveHeader(StorageProperties.StorageParameters.EucaSignature.toString());
    String certString=null;
    if (httpRequest.containsHeader(StorageProperties.StorageParameters.EucaCert.toString())) {
      certString=httpRequest.getAndRemoveHeader(StorageProperties.StorageParameters.EucaCert.toString());
    }
    String data=verb + "\n" + date+ "\n"+ addr+ "\n";
    String effectiveUserID=httpRequest.getAndRemoveHeader(StorageProperties.StorageParameters.EucaEffectiveUserId.toString());
    try {
      SecurityContext.getLoginContext(new WalrusWrappedComponentCredentials(httpRequest.getCorrelationId(),data,effectiveUserID,signature,certString)).login();
    }
 catch (    Exception ex) {
      LOG.error(ex);
      throw new AuthenticationException(ex);
    }
  }
 else {
    String content_md5=httpRequest.getHeader("Content-MD5");
    content_md5=content_md5 == null ? "" : content_md5;
    String content_type=httpRequest.getHeader(WalrusProperties.CONTENT_TYPE);
    content_type=content_type == null ? "" : content_type;
    String targetHost=httpRequest.getHeader(HttpHeaders.Names.HOST);
    if (targetHost.contains(".walrus")) {
      String bucket=targetHost.substring(0,targetHost.indexOf(".walrus"));
      addr="/" + bucket + addr;
    }
    String[] addrStrings=addr.split("\\?");
    String addrString=addrStrings[0];
    if (addrStrings.length > 1) {
      String[] params=addrStrings[1].split("&");
      Arrays.sort(params);
      String[] pair=null;
      boolean first=true;
      try {
        for (        String qparam : params) {
          pair=qparam.split("=");
          for (          WalrusProperties.SubResource subResource : WalrusProperties.SubResource.values()) {
            if (pair[0].equals(subResource.toString())) {
              if (first) {
                addrString+="?";
                first=false;
              }
 else {
                addrString+="&";
              }
              addrString+=subResource.toString() + (pair.length > 1 ? "=" + WalrusUtil.URLdecode(pair[1]) : "");
            }
          }
        }
      }
 catch (      UnsupportedEncodingException e) {
        throw new AuthenticationException("Could not verify request. Failed url decoding query parameters: " + e.getMessage());
      }
    }
    if (httpRequest.containsHeader(SecurityParameter.Authorization.toString())) {
      String date;
      String verifyDate;
      if (httpRequest.containsHeader("x-amz-date")) {
        date="";
        verifyDate=httpRequest.getHeader("x-amz-date");
      }
 else {
        date=httpRequest.getAndRemoveHeader(SecurityParameter.Date.toString());
        verifyDate=date;
        if (date == null || date.length() <= 0)         throw new AuthenticationException("User authentication failed. Date must be specified.");
      }
      try {
        Date dateToVerify=DateUtil.parseDate(verifyDate);
        Date currentDate=new Date();
        if (Math.abs(currentDate.getTime() - dateToVerify.getTime()) > WalrusProperties.EXPIRATION_LIMIT)         throw new AuthenticationException("Message expired. Sorry.");
      }
 catch (      Exception ex) {
        throw new AuthenticationException("Unable to parse date.");
      }
      String data=verb + "\n" + content_md5+ "\n"+ content_type+ "\n"+ date+ "\n"+ getCanonicalizedAmzHeaders(httpRequest)+ addrString;
      String authPart=httpRequest.getAndRemoveHeader(SecurityParameter.Authorization.toString());
      String sigString[]=getSigInfo(authPart);
      if (sigString.length < 2) {
        throw new AuthenticationException("Invalid authentication header");
      }
      String accessKeyId=sigString[0];
      String signature=sigString[1];
      String securityToken=httpRequest.getHeader(WalrusProperties.X_AMZ_SECURITY_TOKEN);
      try {
        SecurityContext.getLoginContext(new WalrusWrappedCredentials(httpRequest.getCorrelationId(),data,accessKeyId,signature,securityToken)).login();
      }
 catch (      Exception ex) {
        LOG.error(ex);
        throw new AuthenticationException(ex);
      }
    }
 else     if (parameters.containsKey(SecurityParameter.AWSAccessKeyId.toString())) {
      String accesskeyid=parameters.remove(SecurityParameter.AWSAccessKeyId.toString());
      try {
        String signature=parameters.remove(SecurityParameter.Signature.toString());
        if (signature == null) {
          throw new AuthenticationException("User authentication failed. Null signature.");
        }
        String expires=parameters.remove(SecurityParameter.Expires.toString());
        if (expires == null) {
          throw new AuthenticationException("Authentication failed. Expires must be specified.");
        }
        if (checkExpires(expires)) {
          String stringToSign=verb + "\n" + content_md5+ "\n"+ content_type+ "\n"+ Long.parseLong(expires)+ "\n"+ getCanonicalizedAmzHeaders(httpRequest)+ addrString;
          String securityToken=parameters.get(SecurityParameter.SecurityToken.toString());
          try {
            SecurityContext.getLoginContext(new WalrusWrappedCredentials(httpRequest.getCorrelationId(),stringToSign,accesskeyid,signature,securityToken)).login();
          }
 catch (          Exception ex) {
            LOG.error(ex);
            throw new AuthenticationException(ex);
          }
        }
 else {
          throw new AuthenticationException("Cannot process request. Expired.");
        }
      }
 catch (      Exception ex) {
        throw new AuthenticationException("Could not verify request " + ex.getMessage());
      }
    }
 else {
      try {
        Context ctx=Contexts.lookup(httpRequest.getCorrelationId());
        ctx.setUser(Principals.nobodyUser());
      }
 catch (      NoSuchContextException e) {
        LOG.error(e,e);
        throw new AuthenticationException(e);
      }
    }
  }
}
