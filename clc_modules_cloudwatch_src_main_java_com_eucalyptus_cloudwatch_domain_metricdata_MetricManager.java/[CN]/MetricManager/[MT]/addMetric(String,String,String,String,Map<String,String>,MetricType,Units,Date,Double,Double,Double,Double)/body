{
  if (dimensionMap == null) {
    dimensionMap=new HashMap<String,String>();
  }
 else   if (dimensionMap.size() > ListMetric.MAX_DIM_NUM) {
    throw new IllegalArgumentException("Too many dimensions for metric, " + dimensionMap.size());
  }
  timestamp=stripSeconds(timestamp);
  TreeSet<DimensionEntity> dimensions=new TreeSet<DimensionEntity>();
  for (  Map.Entry<String,String> entry : dimensionMap.entrySet()) {
    DimensionEntity d=new DimensionEntity();
    d.setName(entry.getKey());
    d.setValue(entry.getValue());
    dimensions.add(d);
  }
  Set<Set<DimensionEntity>> permutations=null;
  if (metricType == MetricType.System) {
    permutations=Sets.powerSet(dimensions);
  }
 else {
    permutations=Sets.newHashSet();
    permutations.add(dimensions);
  }
  Multimap<Class,MetricEntity> metricMap=ArrayListMultimap.<Class,MetricEntity>create();
  for (  Set<DimensionEntity> dimensionsPermutation : permutations) {
    String dimensionHash=hash(dimensionsPermutation);
    MetricEntity metric=MetricEntityFactory.getNewMetricEntity(metricType,dimensionHash);
    metric.setAccountId(accountId);
    metric.setUserId(userId);
    metric.setMetricName(metricName);
    metric.setNamespace(namespace);
    metric.setDimensions(dimensions);
    metric.setDimensionHash(dimensionHash);
    metric.setMetricType(metricType);
    metric.setUnits(units);
    metric.setTimestamp(timestamp);
    metric.setSampleMax(sampleMax);
    metric.setSampleMin(sampleMin);
    metric.setSampleSum(sampleSum);
    metric.setSampleSize(sampleSize);
    metricMap.put(MetricEntityFactory.getClassForEntitiesGet(metricType,dimensionHash),metric);
  }
  for (  Class c : metricMap.keySet()) {
    EntityTransaction db=Entities.get(c);
    try {
      for (      MetricEntity me : metricMap.get(c)) {
        Entities.persist(me);
      }
      db.commit();
    }
 catch (    RuntimeException ex) {
      Logs.extreme().error(ex,ex);
      throw ex;
    }
 finally {
      if (db.isActive())       db.rollback();
    }
  }
}
