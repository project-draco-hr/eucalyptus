{
  for (  Bootstrapper bootstrap : BootstrapperDiscovery.getBootstrappers()) {
    Class<ComponentId> compType;
    String bc=bootstrap.getClass().getCanonicalName();
    Bootstrap.Stage stage=bootstrap.getBootstrapStage();
    compType=bootstrap.getProvides();
    if (Bootstrap.checkDepends(bootstrap)) {
      if (ComponentId.class.equals(compType)) {
        for (        Component c : Components.list()) {
          EventRecord.here(Bootstrap.class,EventType.BOOTSTRAPPER_ADDED,stage.name(),bc,"component=" + c.getName()).info();
          c.getBootstrapper().addBootstrapper(bootstrap);
        }
      }
 else       if (Empyrean.class.equals(compType)) {
        EventRecord.here(Bootstrap.class,EventType.BOOTSTRAPPER_ADDED,stage.name(),bc,"component=" + compType.getSimpleName()).info();
        stage.addBootstrapper(bootstrap);
      }
    }
 else     if (ComponentId.class.isAssignableFrom(compType)) {
      ComponentId comp;
      try {
        comp=compType.newInstance();
        Components.lookup(comp).getBootstrapper().addBootstrapper(bootstrap);
      }
 catch (      InstantiationException ex) {
        LOG.error(ex,ex);
      }
catch (      IllegalAccessException ex) {
        LOG.error(ex,ex);
      }
    }
 else {
      Exceptions.error(new ClassCastException("Fatal error attempting to register bootstrapper " + bootstrap.getClass().getCanonicalName() + ":  @Provides specifies a class which does not conform to ComponentId."));
    }
  }
}
