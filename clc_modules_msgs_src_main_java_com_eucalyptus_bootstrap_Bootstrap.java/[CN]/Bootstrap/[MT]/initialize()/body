{
  LOG.info(LogUtil.header("Initializing discoverable bootstrap resources."));
  Bootstrap.doDiscovery();
  LOG.info(LogUtil.header("Initializing component identifiers:"));
  for (  ComponentId compId : ComponentIds.whichCanLoad()) {
    LOG.info("-> Registering ComponentId of type: " + compId.getClass().getCanonicalName());
    Components.create(compId);
  }
  LOG.info(LogUtil.header("Building core local services: child=" + Bootstrap.childHost + " merge="+ Bootstrap.mergeDatabase+ " cloudLocal="+ Bootstrap.isCloudController()));
  List<Component> components=Components.list();
  Iterables.all(components,new Callback.Success<Component>(){
    @Override public void fire(    Component comp){
      try {
        comp.initService();
      }
 catch (      ServiceRegistrationException ex) {
        LOG.info(ex.getMessage());
      }
catch (      Throwable ex) {
        LOG.error(ex,ex);
      }
    }
  }
);
  LOG.info(LogUtil.header("Initializing component resources:"));
  for (  Component c : Components.whichCanLoad()) {
    Bootstrap.applyTransition(c,Component.Transition.INITIALIZING);
  }
  LOG.info(LogUtil.header("Initializing bootstrappers."));
  Bootstrap.initBootstrappers();
  LOG.info(LogUtil.header("System ready: starting bootstrap."));
  for (  Component c : Components.list()) {
    LOG.info(c.toString());
  }
}
