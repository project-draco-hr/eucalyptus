{
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
switch (stepNum) {
case 0:
    validateProperties();
  CreateDhcpOptionsType createDhcpOptionsType=new CreateDhcpOptionsType();
createDhcpOptionsType.setEffectiveUserId(info.getEffectiveUserId());
DhcpConfigurationItemSetType dhcpConfigurationSet=new DhcpConfigurationItemSetType();
dhcpConfigurationSet.setItem(Lists.<DhcpConfigurationItemType>newArrayList());
ArrayList<DhcpConfigurationItemType> item=Lists.newArrayList();
if (!Strings.isNullOrEmpty(properties.getDomainName())) {
dhcpConfigurationSet.getItem().add(createDhcpConfigurationItemType("domain-name",createValueSet(properties.getDomainName())));
}
if (properties.getDomainNameServers() != null && !properties.getDomainNameServers().isEmpty()) {
dhcpConfigurationSet.getItem().add(createDhcpConfigurationItemType("domain-name-servers",createValueSet(properties.getDomainNameServers())));
}
if (properties.getNtpServers() != null && !properties.getNtpServers().isEmpty()) {
dhcpConfigurationSet.getItem().add(createDhcpConfigurationItemType("ntp-servers",createValueSet(properties.getNtpServers())));
}
if (properties.getNetbiosNameServers() != null && !properties.getNetbiosNameServers().isEmpty()) {
dhcpConfigurationSet.getItem().add(createDhcpConfigurationItemType("netbios-name-servers",createValueSet(properties.getNetbiosNameServers())));
}
if (properties.getNetbiosNodeType() != null) {
dhcpConfigurationSet.getItem().add(createDhcpConfigurationItemType("netbios-node-type",createValueSet(String.valueOf(properties.getNetbiosNodeType()))));
}
createDhcpOptionsType.setDhcpConfigurationSet(dhcpConfigurationSet);
CreateDhcpOptionsResponseType createDhcpOptionsResponseType=AsyncRequests.<CreateDhcpOptionsType,CreateDhcpOptionsResponseType>sendSync(configuration,createDhcpOptionsType);
info.setPhysicalResourceId(createDhcpOptionsResponseType.getDhcpOptions().getDhcpOptionsId());
info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(info.getPhysicalResourceId())));
break;
case 1:
if (properties.getTags() != null && !properties.getTags().isEmpty()) {
CreateTagsType createTagsType=new CreateTagsType();
createTagsType.setEffectiveUserId(info.getEffectiveUserId());
createTagsType.setResourcesSet(Lists.newArrayList(info.getPhysicalResourceId()));
createTagsType.setTagSet(EC2Helper.createTagSet(properties.getTags()));
AsyncRequests.<CreateTagsType,CreateTagsResponseType>sendSync(configuration,createTagsType);
}
break;
default :
throw new IllegalStateException("Invalid step " + stepNum);
}
}
