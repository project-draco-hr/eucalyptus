{
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
switch (stepNum) {
case 0:
    CreateSubnetType createSubnetType=new CreateSubnetType();
  createSubnetType.setEffectiveUserId(info.getEffectiveUserId());
createSubnetType.setVpcId(properties.getVpcId());
if (properties.getAvailabilityZone() != null) {
createSubnetType.setAvailabilityZone(properties.getAvailabilityZone());
}
createSubnetType.setCidrBlock(properties.getCidrBlock());
CreateSubnetResponseType createSubnetResponseType=AsyncRequests.<CreateSubnetType,CreateSubnetResponseType>sendSync(configuration,createSubnetType);
info.setPhysicalResourceId(createSubnetResponseType.getSubnet().getSubnetId());
info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(info.getPhysicalResourceId())));
info.setAvailabilityZone(JsonHelper.getStringFromJsonNode(new TextNode(createSubnetResponseType.getSubnet().getAvailabilityZone())));
break;
case 1:
List<EC2Tag> tags=TagHelper.getEC2StackTags(info,getStackEntity());
if (properties.getTags() != null && !properties.getTags().isEmpty()) {
TagHelper.checkReservedEC2TemplateTags(properties.getTags());
tags.addAll(properties.getTags());
}
CreateTagsType createTagsType=new CreateTagsType();
createTagsType.setUserId(info.getEffectiveUserId());
createTagsType.markPrivileged();
createTagsType.setResourcesSet(Lists.newArrayList(info.getPhysicalResourceId()));
createTagsType.setTagSet(EC2Helper.createTagSet(tags));
AsyncRequests.<CreateTagsType,CreateTagsResponseType>sendSync(configuration,createTagsType);
break;
default :
throw new IllegalStateException("Invalid step " + stepNum);
}
}
