{
  final String emi=LoadBalancerASGroupCreator.IMAGE;
  List<ImageDetails> images;
  try {
    images=EucalyptusActivityTasks.getInstance().describeImages(Lists.newArrayList(emi));
    if (images == null || images.size() <= 0 || !images.get(0).getImageId().toLowerCase().equals(emi.toLowerCase()))     throw new EventHandlerException("No loadbalancer EMI is found");
  }
 catch (  final EventHandlerException ex) {
    throw ex;
  }
catch (  final Exception ex) {
    throw new EventHandlerException("failed to validate the loadbalancer EMI",ex);
  }
  final List<String> requestedZones=Lists.newArrayList(evt.getZones());
  List<ClusterInfoType> clusters;
  try {
    clusters=EucalyptusActivityTasks.getInstance().describeAvailabilityZones(true);
    for (    final ClusterInfoType cc : clusters) {
      requestedZones.remove(cc.getZoneName());
    }
  }
 catch (  final Exception ex) {
    throw new EventHandlerException("failed to validate the requested zones",ex);
  }
  if (requestedZones.size() > 0) {
    throw new EventHandlerException("unknown zone is requested");
  }
  final String instanceType=LoadBalancerASGroupCreator.INSTANCE_TYPE;
  int numVm=1;
  try {
    numVm=Integer.parseInt(EventHandlerChainNew.VM_PER_ZONE);
  }
 catch (  final NumberFormatException ex) {
    LOG.warn("unable to parse loadbalancer_num_vm");
  }
  for (  final String zone : evt.getZones()) {
    final int capacity=findAvailableResources(clusters,zone,instanceType);
    if (numVm > capacity) {
      throw new EventHandlerException(String.format("Not enough resources in %s",zone));
    }
  }
  final String keyName=LoadBalancerASGroupCreator.KEYNAME;
  if (keyName != null && keyName.length() > 0) {
    try {
      final List<DescribeKeyPairsResponseItemType> keypairs=EucalyptusActivityTasks.getInstance().describeKeyPairs(Lists.newArrayList(keyName));
      if (keypairs == null || keypairs.size() <= 0 || !keypairs.get(0).getKeyName().equals(keyName))       throw new Exception();
    }
 catch (    Exception ex) {
      throw new EventHandlerException(String.format("The configured keyname is not found"));
    }
  }
}
