{
  if (!(Permissions.isAuthorized(VENDOR_IAM,IAM_RESOURCE_USER,Accounts.getUserFullName(user),account,IAM_UPLOADSIGNINGCERTIFICATE,requestUser) && accountAdminActionPermittedIfAuthorized(requestUser,user))) {
    throw new AuthException(AuthException.ACCESS_DENIED);
  }
  if (countUnrevokedCertificates(user.getCertificates()) >= AuthenticationLimitProvider.Values.getSigningCertificateLimit()) {
    throw new AuthException(AuthException.QUOTA_EXCEEDED);
  }
  if (Strings.isNullOrEmpty(certBody)) {
    throw new AuthException(AuthException.EMPTY_CERT);
  }
  final String encodedPem=B64.url.encString(certBody);
  final X509Certificate x509=X509CertHelper.toCertificate(encodedPem);
  if (x509 == null) {
    throw new AuthException(AuthException.INVALID_CERT);
  }
  String certificateId;
  try {
    certificateId=Identifiers.generateCertificateIdentifier(x509);
  }
 catch (  CertificateEncodingException e) {
    throw new AuthException("Invalid X509 Certificate",e);
  }
  Accounts.reserveGlobalName(GlobalNamespace.Signing_Certificate_Id,certificateId);
  for (  Certificate c : user.getCertificates()) {
    if (c.getPem().equals(encodedPem)) {
      if (!c.isRevoked()) {
        throw new AuthException(AuthException.CONFLICT);
      }
 else       if (certificateId.equals(c.getCertificateId())) {
        c.setRevoked(false);
        return c;
      }
 else {
        user.removeCertificate(c.getCertificateId());
      }
    }
  }
  return user.addCertificate(certificateId,x509);
}
