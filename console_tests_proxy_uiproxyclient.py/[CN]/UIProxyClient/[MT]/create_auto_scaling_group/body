def create_auto_scaling_group(self, name, launch_config, zones=None, load_balancers=None, default_cooldown=None, hc_type=None, hc_period=None, desired_capacity=None, min_size=0, max_size=0, tags=None, termination_policies=None):
    params = {'AutoScalingGroupName': name, 'LaunchConfigurationName': launch_config, 'MinSize': min_size, 'MaxSize': max_size, }
    if (zones != None):
        self.__build_list_params__(params, zones, 'AvailabilityZones.member.%d')
    if (load_balancers != None):
        self.__build_list_params__(params, load_balancers, 'LoadBalancerNames.member.%d')
    if (default_cooldown != None):
        params['DefaultCooldown'] = default_cooldown
    if (hc_type != None):
        params['HealthCheckType'] = hc_type
    if (hc_period != None):
        params['HealthCheckGracePeriod'] = hc_period
    if (desired_capacity != None):
        params['DesiredCapacity'] = desired_capacity
    if (hc_period != None):
        params['HealthCheckGracePeriod'] = hc_period
    if (tags != None):
        self.__build_list_params__(params, tags, 'Tags.member.%d')
    if (termination_policies != None):
        self.__build_list_params__(params, termination_policies, 'TerminationPolicies.member.%d')
    return self.__make_scale_request__('CreateAutoScalingGroup', params)
