{
  if (event.getMessage() instanceof MappingHttpResponse) {
    MappingHttpResponse httpResponse=(MappingHttpResponse)event.getMessage();
    EucalyptusMessage msg=(EucalyptusMessage)httpResponse.getMessage();
    if (msg instanceof PutObjectResponseType) {
      PutObjectResponseType putObjectResponse=(PutObjectResponseType)msg;
      httpResponse.addHeader(HttpHeaders.Names.ETAG,'\"' + putObjectResponse.getEtag() + '\"');
      httpResponse.addHeader(HttpHeaders.Names.LAST_MODIFIED,putObjectResponse.getLastModified());
    }
 else     if (msg instanceof PostObjectResponseType) {
      PostObjectResponseType postObjectResponse=(PostObjectResponseType)msg;
    }
 else     if (msg instanceof EucalyptusErrorMessageType) {
      EucalyptusErrorMessageType errorMessage=(EucalyptusErrorMessageType)msg;
      EucalyptusMessage errMsg;
      Throwable ex=errorMessage.getException();
      if (ex instanceof NoSuchBucketException) {
        errMsg=new WalrusBucketErrorMessageType(((NoSuchBucketException)ex).getBucketName(),"NoSuchBucket","The specified bucket was not found",HttpResponseStatus.NOT_FOUND,msg.getCorrelationId(),ipAddress);
        errMsg.setCorrelationId(msg.getCorrelationId());
      }
 else       if (ex instanceof AccessDeniedException) {
        errMsg=new WalrusBucketErrorMessageType(((AccessDeniedException)ex).getBucketName(),"AccessDenied","No U",HttpResponseStatus.FORBIDDEN,msg.getCorrelationId(),ipAddress);
        errMsg.setCorrelationId(msg.getCorrelationId());
      }
 else       if (ex instanceof NotAuthorizedException) {
        errMsg=new WalrusBucketErrorMessageType(((NotAuthorizedException)ex).getValue(),"Unauthorized","No U",HttpResponseStatus.UNUATHORIZED,msg.getCorrelationId(),ipAddress);
        errMsg.setCorrelationId(msg.getCorrelationId());
      }
 else       if (ex instanceof BucketAlreadyOwnedByYouException) {
        errMsg=new WalrusBucketErrorMessageType(((BucketAlreadyOwnedByYouException)ex).getBucketName(),"BucketAlreadyOwnedByYou","Your previous request to create the named bucket succeeded and you already own it.",HttpResponseStatus.CONFLICT,msg.getCorrelationId(),ipAddress);
        errMsg.setCorrelationId(msg.getCorrelationId());
      }
 else       if (ex instanceof BucketAlreadyExistsException) {
        errMsg=new WalrusBucketErrorMessageType(((BucketAlreadyExistsException)ex).getBucketName(),"BucketAlreadyExists","The requested bucket name is not available. The bucket namespace is shared by all users of the system. Please select a different name and try again.",HttpResponseStatus.CONFLICT,msg.getCorrelationId(),ipAddress);
        errMsg.setCorrelationId(msg.getCorrelationId());
      }
 else       if (ex instanceof BucketNotEmptyException) {
        errMsg=new WalrusBucketErrorMessageType(((BucketNotEmptyException)ex).getBucketName(),"BucketNotEmpty","The bucket you tried to delete is not empty.",HttpResponseStatus.CONFLICT,msg.getCorrelationId(),ipAddress);
        errMsg.setCorrelationId(msg.getCorrelationId());
      }
 else       if (ex instanceof PreconditionFailedException) {
        errMsg=new WalrusBucketErrorMessageType(((PreconditionFailedException)ex).getPrecondition(),"PreconditionFailed","At least one of the pre-conditions you specified did not hold.",HttpResponseStatus.PRECONDITION_FAILED,msg.getCorrelationId(),ipAddress);
        errMsg.setCorrelationId(msg.getCorrelationId());
      }
 else       if (ex instanceof NotModifiedException) {
        errMsg=new WalrusBucketErrorMessageType(((NotModifiedException)ex).getPrecondition(),"NotModified","Object Not Modified",HttpResponseStatus.NOT_MODIFIED,msg.getCorrelationId(),ipAddress);
        errMsg.setCorrelationId(msg.getCorrelationId());
      }
 else       if (ex instanceof TooManyBucketsException) {
        errMsg=new WalrusBucketErrorMessageType(((TooManyBucketsException)ex).getBucketName(),"TooManyBuckets","You have attempted to create more buckets than allowed.",HttpResponseStatus.BAD_REQUEST,msg.getCorrelationId(),ipAddress);
        errMsg.setCorrelationId(msg.getCorrelationId());
      }
 else       if (ex instanceof EntityTooLargeException) {
        errMsg=new WalrusBucketErrorMessageType(((EntityTooLargeException)ex).getEntityName(),"EntityTooLarge","Your proposed upload exceeds the maximum allowed object size.",HttpResponseStatus.BAD_REQUEST,msg.getCorrelationId(),ipAddress);
        errMsg.setCorrelationId(msg.getCorrelationId());
      }
 else       if (ex instanceof NoSuchEntityException) {
        errMsg=new WalrusBucketErrorMessageType(((NoSuchEntityException)ex).getBucketName(),"NoSuchEntity","The specified entity was not found",HttpResponseStatus.NOT_FOUND,msg.getCorrelationId(),ipAddress);
        errMsg.setCorrelationId(msg.getCorrelationId());
      }
 else       if (ex instanceof DecryptionFailedException) {
        errMsg=new WalrusBucketErrorMessageType(((DecryptionFailedException)ex).getValue(),"Decryption Failed","Fail",HttpResponseStatus.EXPECTATION_FAILED,msg.getCorrelationId(),ipAddress);
        errMsg.setCorrelationId(msg.getCorrelationId());
      }
 else       if (ex instanceof ImageAlreadyExistsException) {
        errMsg=new WalrusBucketErrorMessageType(((ImageAlreadyExistsException)ex).getValue(),"Image Already Exists","Fail",HttpResponseStatus.CONFLICT,msg.getCorrelationId(),ipAddress);
        errMsg.setCorrelationId(msg.getCorrelationId());
      }
 else       if (ex instanceof NotImplementedException) {
        errMsg=new WalrusBucketErrorMessageType(((NotImplementedException)ex).getValue(),"Not Implemented","NA",HttpResponseStatus.NOT_IMPLEMENTED,msg.getCorrelationId(),ipAddress);
        errMsg.setCorrelationId(msg.getCorrelationId());
      }
 else {
        errMsg=errorMessage;
      }
      if (errMsg instanceof WalrusBucketErrorMessageType) {
        WalrusBucketErrorMessageType walrusErrorMsg=(WalrusBucketErrorMessageType)errMsg;
        httpResponse.setStatus(walrusErrorMsg.getStatus());
      }
      httpResponse.setMessage(errMsg);
    }
 else     if (msg instanceof WalrusDeleteResponseType) {
      httpResponse.setStatus(HttpResponseStatus.NO_CONTENT);
    }
  }
}
