{
synchronized (getLock()) {
    try {
      USER_NAME_CHECKER.check(roleName);
    }
 catch (    InvalidValueException e) {
      Debugging.logError(LOG,e,"Invalid role name " + roleName);
      throw new AuthException(AuthException.INVALID_NAME,e);
    }
    try {
      PATH_CHECKER.check(path);
    }
 catch (    InvalidValueException e) {
      Debugging.logError(LOG,e,"Invalid path " + path);
      throw new AuthException(AuthException.INVALID_PATH,e);
    }
    if (DatabaseAuthUtils.checkRoleExists(roleName,this.delegate.getName())) {
      throw new AuthException(AuthException.ROLE_ALREADY_EXISTS);
    }
    final PolicyPolicy policyPolicy=PolicyParser.getResourceInstance().parse(assumeRolePolicy);
    final PolicyEntity parsedPolicy=PolicyEntity.create(null,policyPolicy.getPolicyVersion(),assumeRolePolicy);
    try (final TransactionResource db=Entities.transactionFor(AccountEntity.class)){
      final AccountEntity account=DatabaseAuthUtils.getUnique(AccountEntity.class,AccountEntity_.name,this.delegate.getName());
      final RoleEntity newRole=new RoleEntity(roleName);
      newRole.setRoleId(Identifiers.generateIdentifier("ARO"));
      newRole.setPath(path);
      newRole.setAccount(account);
      newRole.setAssumeRolePolicy(parsedPolicy);
      parsedPolicy.setName("assume-role-policy-for-" + newRole.getRoleId());
      final RoleEntity persistedRole=Entities.persist(newRole);
      db.commit();
      return new DatabaseRoleProxy(persistedRole);
    }
 catch (    Exception e) {
      Debugging.logError(LOG,e,"Failed to add role: " + roleName + " in "+ this.delegate.getName());
      throw new AuthException(AuthException.ROLE_CREATE_FAILURE,e);
    }
  }
}
