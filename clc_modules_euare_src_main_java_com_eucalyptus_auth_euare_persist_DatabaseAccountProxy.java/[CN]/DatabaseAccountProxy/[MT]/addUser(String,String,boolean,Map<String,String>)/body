{
synchronized (getLock()) {
    try {
      USER_NAME_CHECKER.check(userName);
    }
 catch (    InvalidValueException e) {
      Debugging.logError(LOG,e,"Invalid user name " + userName);
      throw new AuthException(AuthException.INVALID_NAME,e);
    }
    try {
      PATH_CHECKER.check(path);
    }
 catch (    InvalidValueException e) {
      Debugging.logError(LOG,e,"Invalid path " + path);
      throw new AuthException(AuthException.INVALID_PATH,e);
    }
    if (DatabaseAuthUtils.checkUserExists(userName,this.delegate.getName())) {
      throw new AuthException(AuthException.USER_ALREADY_EXISTS);
    }
    UserEntity newUser=new UserEntity(this.getAccountNumber(),userName);
    newUser.setPath(path);
    newUser.setEnabled(enabled);
    newUser.setPasswordExpires(System.currentTimeMillis() + AuthenticationLimitProvider.Values.getDefaultPasswordExpiry());
    if (info != null) {
      newUser.getInfo().putAll(info);
    }
    newUser.setToken(Crypto.generateSessionToken());
    GroupEntity newGroup=new GroupEntity(this.getAccountNumber(),DatabaseAuthUtils.getUserGroupName(userName));
    newGroup.setUserGroup(true);
    try (final TransactionResource db=Entities.transactionFor(AccountEntity.class)){
      AccountEntity account=DatabaseAuthUtils.getUnique(AccountEntity.class,"name",this.delegate.getName());
      newGroup=Entities.mergeDirect(newGroup);
      newUser=Entities.mergeDirect(newUser);
      newGroup.setAccount(account);
      newGroup.getUsers().add(newUser);
      newUser.getGroups().add(newGroup);
      db.commit();
      return new DatabaseUserProxy(newUser);
    }
 catch (    Exception e) {
      Debugging.logError(LOG,e,"Failed to add user: " + userName + " in "+ this.delegate.getName());
      throw new AuthException(AuthException.USER_CREATE_FAILURE,e);
    }
  }
}
