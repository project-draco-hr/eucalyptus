{
  boolean allTestsPassed=true;
  System.out.println(" ----> TESTING FALSE DATA");
  InstanceUsageLog usageLog=InstanceUsageLog.getInstanceUsageLog();
  Map<String,InstanceUsageSummary> summary=usageLog.scanSummarize(new Period(START_TIME,MAX_MS),GroupByCriterion.USER);
  for (  String key : summary.keySet()) {
    System.out.println(key + summary.get(key));
  }
  final Random rand=new Random();
  for (int i=0; i < NUM_TESTS; i++) {
    final long lowerBound=rand.nextInt((int)(RANGE - DISTANCE)) + START_TIME;
    final long upperBound=rand.nextInt((int)(MAX_MS - (lowerBound + DISTANCE))) + lowerBound + DISTANCE;
    final double fraction=((double)upperBound - (double)lowerBound) / ((double)MAX_MS - (double)START_TIME);
    final double adjustedCorrectDisk=(double)CORRECT_DISK_USAGE * fraction;
    final double adjustedCorrectNet=(double)CORRECT_NET_USAGE * fraction;
    final double adjustedCorrectTime=(double)CORRECT_INSTANCE_USAGE * fraction;
    final double adjustedError=ERROR_FACTOR * (1.0 + (1.0 - fraction));
    final double adjustedInstanceError=INSTANCE_ERROR_FACTOR * (1.0 + (1.0 - fraction));
    System.out.printf("#:%3d correct:(%d,%d,%d) fraction:%3.3f adjusted:(%3.3f , %3.3f , %3.3f)" + " adjustedError:(%3.3f , %3.3f)\n",i,CORRECT_DISK_USAGE,CORRECT_NET_USAGE,CORRECT_INSTANCE_USAGE,fraction,adjustedCorrectDisk,adjustedCorrectNet,adjustedCorrectTime,adjustedError,adjustedInstanceError);
    summary=usageLog.scanSummarize(new Period(lowerBound,upperBound),GroupByCriterion.USER);
    for (    String userId : summary.keySet()) {
      InstanceUsageSummary ius=summary.get(userId);
      long totalUsageSecs=ius.getM1SmallTimeSecs() + ius.getC1MediumTimeSecs() + ius.getM1LargeTimeSecs()+ ius.getM1XLargeTimeSecs()+ ius.getC1XLargeTimeSecs();
      final double diskError=(double)ius.getDiskIoMegs() / adjustedCorrectDisk;
      final double netError=(double)ius.getNetworkIoMegs() / adjustedCorrectNet;
      ;
      final double usageError=((double)totalUsageSecs / adjustedCorrectTime);
      final boolean diskWithin=isWithinError(ius.getDiskIoMegs(),adjustedCorrectDisk,adjustedError);
      final boolean netWithin=isWithinError(ius.getNetworkIoMegs(),adjustedCorrectNet,adjustedError);
      final boolean usageWithin=isWithinError(totalUsageSecs,adjustedCorrectTime,adjustedInstanceError);
      System.out.printf(" %8s:(%d/%3.3f , %d/%3.3f , %d/%3.3f) " + "error:(%3.3f,%3.3f,%3.3f) isWithin:(%s,%s,%s)\n",userId,ius.getDiskIoMegs(),adjustedCorrectDisk,ius.getNetworkIoMegs(),adjustedCorrectNet,totalUsageSecs,adjustedCorrectTime,diskError,netError,usageError,diskWithin,netWithin,usageWithin);
      if (!diskWithin || !netWithin || !usageWithin) {
        System.out.println("Incorrect result for user:" + userId);
        allTestsPassed=false;
      }
    }
  }
  Map<String,TestResult> testResults=new HashMap<String,TestResult>();
  long sliceMs=(MAX_MS - START_TIME) / 10;
  for (long l=START_TIME; l < MAX_MS; l+=sliceMs) {
    System.out.printf(" Period:%d-%d\n",l,l + sliceMs - 1);
    summary=usageLog.scanSummarize(new Period(l,l + sliceMs - 1),GroupByCriterion.USER);
    for (    String key : summary.keySet()) {
      InstanceUsageSummary ius=summary.get(key);
      System.out.println("  " + key + ius);
      if (!testResults.containsKey(key)) {
        testResults.put(key,new TestResult());
      }
      TestResult testResult=testResults.get(key);
      testResult.totalDiskUsage+=ius.getDiskIoMegs();
      testResult.totalNetUsage+=ius.getNetworkIoMegs();
      testResult.m1SmallTimeSecs+=ius.getM1SmallTimeSecs();
      testResult.c1MediumTimeSecs+=ius.getC1MediumTimeSecs();
      testResult.m1LargeTimeSecs+=ius.getM1LargeTimeSecs();
      testResult.m1XLargeTimeSecs+=ius.getM1XLargeTimeSecs();
      testResult.c1XLargeTimeSecs+=ius.getC1XLargeTimeSecs();
    }
  }
  System.out.println("Totals:");
  for (  String key : testResults.keySet()) {
    TestResult testResult=testResults.get(key);
    long totalUsageSecs=testResult.m1SmallTimeSecs + testResult.c1MediumTimeSecs + testResult.m1LargeTimeSecs+ testResult.m1XLargeTimeSecs+ testResult.c1XLargeTimeSecs;
    double diskError=((double)testResult.totalDiskUsage / (double)CORRECT_DISK_USAGE);
    double netError=((double)testResult.totalNetUsage / (double)CORRECT_NET_USAGE);
    boolean diskWithin=isWithinError(testResult.totalDiskUsage,CORRECT_DISK_USAGE,ERROR_FACTOR);
    boolean netWithin=isWithinError(testResult.totalNetUsage,CORRECT_NET_USAGE,ERROR_FACTOR);
    double totalError=((double)totalUsageSecs / (double)CORRECT_INSTANCE_USAGE);
    boolean totalWithin=isWithinError(totalUsageSecs,CORRECT_INSTANCE_USAGE,INSTANCE_ERROR_FACTOR);
    System.out.printf(" %8s:(disk:%d,net:%d) error:(disk:%5.3f,net:%5.3f) isWithin:(disk:%s,net:%s)" + " instance:(m1s:%d,c1m:%d,m1l:%d,m1xl:%d,c1xl:%d) totalError:%5.3f isWithin:%s\n",key,testResult.totalDiskUsage,testResult.totalNetUsage,diskError,netError,diskWithin,netWithin,testResult.m1SmallTimeSecs,testResult.c1MediumTimeSecs,testResult.m1LargeTimeSecs,testResult.m1XLargeTimeSecs,testResult.c1XLargeTimeSecs,totalError,totalWithin);
    if (!diskWithin || !netWithin || !totalWithin) {
      System.out.println("Incorrect result for user:" + key);
    }
  }
  return allTestsPassed ? 0 : 1;
}
