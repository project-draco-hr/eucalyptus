{
  System.out.println(" ----> TESTING FALSE DATA");
  InstanceUsageLog usageLog=InstanceUsageLog.getInstanceUsageLog();
  Map<String,InstanceUsageSummary> summary=usageLog.scanSummarize(new Period(START_TIME,MAX_MS),GroupByCriterion.USER);
  for (  String key : summary.keySet()) {
    System.out.println(key + summary.get(key));
  }
  Map<String,TestResult> testResults=new HashMap<String,TestResult>();
  long sliceMs=(MAX_MS - START_TIME) / 10;
  for (long l=START_TIME; l < MAX_MS; l+=sliceMs) {
    System.out.printf(" Period:%d-%d\n",l,l + sliceMs - 1);
    summary=usageLog.scanSummarize(new Period(l,l + sliceMs - 1),GroupByCriterion.USER);
    for (    String key : summary.keySet()) {
      InstanceUsageSummary ius=summary.get(key);
      System.out.println("  " + key + ius);
      if (!testResults.containsKey(key)) {
        testResults.put(key,new TestResult());
      }
      TestResult testResult=testResults.get(key);
      testResult.totalDiskUsage+=ius.getDiskIoMegs();
      testResult.totalNetUsage+=ius.getNetworkIoMegs();
    }
  }
  System.out.println("Totals:");
  for (  String key : testResults.keySet()) {
    TestResult testResult=testResults.get(key);
    System.out.printf(" %s:(disk:%d,net:%d) error:(disk:%5.3f,net:%5.3f) isWithin:(disk:%s,net:%s)\n",key,testResult.totalDiskUsage,testResult.totalNetUsage,((double)testResult.totalDiskUsage / (double)CORRECT_DISK_USAGE),((double)testResult.totalNetUsage / (double)CORRECT_NET_USAGE),isWithinError(testResult.totalDiskUsage,CORRECT_DISK_USAGE,ERROR_FACTOR),isWithinError(testResult.totalNetUsage,CORRECT_NET_USAGE,ERROR_FACTOR));
    if (!isWithinError(testResult.totalDiskUsage,CORRECT_DISK_USAGE,ERROR_FACTOR) || !isWithinError(testResult.totalNetUsage,CORRECT_NET_USAGE,ERROR_FACTOR)) {
      throw new RuntimeException("Incorrect result for user:" + key);
    }
  }
  System.out.println("Test passed");
}
