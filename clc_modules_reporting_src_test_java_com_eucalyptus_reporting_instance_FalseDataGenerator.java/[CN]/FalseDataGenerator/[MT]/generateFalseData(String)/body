{
  boolean isLocal=(remote != null && remote.equalsIgnoreCase("local"));
  QueueSender queueSender=null;
  TestEventListener listener=new TestEventListener();
  listener.setCurrentTimeMillis(START_TIME);
  if (isLocal) {
    queueSender=listener;
  }
 else {
    reportingBootstrapper=new ReportingBootstrapper();
    reportingBootstrapper.setOverriddenInstanceEventListener(listener);
    reportingBootstrapper.start();
    queueSender=QueueFactory.getInstance().getSender(QueueIdentifier.INSTANCE);
  }
  System.out.println(" ----> GENERATING FALSE DATA " + (isLocal ? "(local)" : "(remote)"));
  List<InstanceAttributes> fakeInstances=new ArrayList<InstanceAttributes>();
  for (int i=0; i < NUM_INSTANCE; i++) {
    String uuid=new Long(i).toString();
    String instanceId=String.format("instance-%d",(i % NUM_INSTANCE));
    String userId=String.format("user-%d",(i % NUM_USER));
    String accountId=String.format("account-%d",(i % NUM_ACCOUNT));
    String clusterName=String.format("cluster-%d",(i % NUM_CLUSTER));
    String availZone=String.format("zone-%d",(i % NUM_AVAIL_ZONE));
    FalseInstanceType[] vals=FalseInstanceType.values();
    String instanceType=vals[i % vals.length].toString();
    InstanceAttributes insAttrs=new InstanceAttributes(uuid,instanceId,instanceType,userId,accountId,clusterName,availZone);
    fakeInstances.add(insAttrs);
  }
  for (int i=0; i < NUM_USAGE; i++) {
    listener.setCurrentTimeMillis(START_TIME + (i * TIME_USAGE_APART));
    for (    InstanceAttributes insAttrs : fakeInstances) {
      long instanceNum=Long.parseLong(insAttrs.getUuid());
      long netIoMegs=(instanceNum + i) * 1024;
      long diskIoMegs=(instanceNum + i * 2) * 1024;
      InstanceEvent event=new InstanceEvent(insAttrs.getUuid(),insAttrs.getInstanceId(),insAttrs.getInstanceType(),insAttrs.getUserId(),insAttrs.getAccountId(),insAttrs.getClusterName(),insAttrs.getAvailabilityZone(),new Long(netIoMegs),new Long(diskIoMegs));
      System.out.println("Generating:" + i);
      queueSender.send(event);
    }
  }
}
