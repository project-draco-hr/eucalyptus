{
  final int mods=field.getModifiers();
  final String name=field.getName();
  final String type=field.getType().getSimpleName();
  if (Modifier.isFinal(mods)) {
    LOG.debug("Ignoring field with bad type: " + field.getDeclaringClass().getCanonicalName() + "."+ name+ " of type "+ type+ " due to: final modifier");
  }
 else   if (Modifier.isStatic(mods)) {
    LOG.debug("Ignoring field with bad type: " + field.getDeclaringClass().getCanonicalName() + "."+ name+ " of type "+ type+ " due to: static modifier");
  }
  boolean ret=Iterables.any(badClasses,new Predicate<String>(){
    @Override public boolean apply(    String arg0){
      if (type.matches(arg0)) {
        LOG.debug("Ignoring field with bad type: " + field.getDeclaringClass().getCanonicalName() + "."+ name+ " of type "+ type+ " due to: "+ arg0);
        return true;
      }
 else {
        return false;
      }
    }
  }
);
  ret|=Iterables.any(badFields,new Predicate<String>(){
    @Override public boolean apply(    String arg0){
      if (name.matches(arg0)) {
        LOG.debug("Ignoring field with bad name: " + field.getDeclaringClass().getCanonicalName() + "."+ name+ " of type "+ type+ " due to: "+ arg0);
        return true;
      }
 else {
        return false;
      }
    }
  }
);
  return ret;
}
