{
  Class itsType=field.getType();
  if (this.isIgnored(field)) {
    return new NoopTypeBinding(field);
  }
 else   if (List.class.isAssignableFrom(itsType)) {
    Class listType=getTypeArgument(field);
    if (listType == null) {
      System.err.printf("IGNORE: %-70s [type=%s] NO GENERIC TYPE FOR LIST\n",field.getDeclaringClass().getCanonicalName() + "." + field.getName(),listType);
      return new NoopTypeBinding(field);
    }
 else     if (this.typeBindings.containsKey(listType.getCanonicalName())) {
      return new CollectionTypeBinding(field.getName(),this.typeBindings.get(listType.getCanonicalName()));
    }
 else     if (BindingGenerator.DATA_TYPE.isAssignableFrom(listType)) {
      return new CollectionTypeBinding(field.getName(),new ObjectTypeBinding(field.getName(),listType));
    }
 else {
      System.err.printf("IGNORE: %-70s [type=%s] LIST'S GENERIC TYPE DOES NOT CONFORM TO EucalyptusData\n",field.getDeclaringClass().getCanonicalName() + "." + field.getName(),listType.getCanonicalName());
      return new NoopTypeBinding(field);
    }
  }
 else   if (this.typeBindings.containsKey(itsType.getCanonicalName())) {
    TypeBinding t=this.typeBindings.get(itsType.getCanonicalName());
    try {
      t=this.typeBindings.get(itsType.getCanonicalName()).getClass().newInstance();
    }
 catch (    Exception e) {
    }
    return t.value(field.getName());
  }
 else   if (BindingGenerator.DATA_TYPE.isAssignableFrom(field.getType())) {
    return new ObjectTypeBinding(field);
  }
 else {
    System.err.printf("IGNORE: %-70s [type=%s] TYPE DOES NOT CONFORM TO EucalyptusData\n",field.getDeclaringClass().getCanonicalName() + "." + field.getName(),field.getType().getCanonicalName());
    return new NoopTypeBinding(field);
  }
}
