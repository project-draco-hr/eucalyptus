{
  this.startState=startState;
  String tempName=null;
  if (parent instanceof HasFullName) {
    try {
      tempName=((HasFullName)parent).getFullName().toString();
    }
 catch (    Exception ex) {
    }
  }
  this.name=(tempName != null ? tempName : String.format("%s-%s",parent.getClass().getSimpleName(),parent.getName()));
  this.parent=parent;
  final S[] states=State.asEnum.getEnumConstants(startState);
  this.stateTransitions=new HashMap<S,Map<S,TransitionHandler<P,S,T>>>(){
{
      for (      S s : states) {
        this.put(s,new HashMap<S,TransitionHandler<P,S,T>>());
      }
    }
  }
;
  this.immutableStates=ImmutableList.of(states);
  this.state=new AtomicMarkableReference<S>(this.startState,false);
  this.immutableTransitions=ImmutableList.copyOf(transitions);
  for (  TransitionHandler<P,S,T> t : transitions) {
    this.transitions.put(t.getName(),t);
    this.stateTransitions.get(t.getRule().getFromState()).put(t.getRule().getToState(),t);
  }
  this.inStateListeners.putAll(inStateListeners);
  this.outStateListeners.putAll(outStateListeners);
}
