{
  Preconditions.checkNotNull(event,"Event is required");
  final long timestamp=getCurrentTimeMillis();
  getReportingAccountCrud().createOrUpdateAccount(event.getAccountId(),event.getAccountName());
  getReportingUserCrud().createOrUpdateUser(event.getUserId(),event.getAccountId(),event.getUserName());
  final ReportingElasticIpEventStore eventStore=getReportingElasticIpEventStore();
switch (event.getActionInfo().getAction()) {
case ALLOCATE:
    eventStore.insertCreateEvent(timestamp,event.getUserId(),event.getAddress());
  break;
case RELEASE:
eventStore.insertDeleteEvent(event.getAddress(),timestamp);
break;
case ASSOCIATE:
eventStore.insertAttachEvent(event.getAddress(),((InstanceEventActionInfo)event.getActionInfo()).getInstanceUuid(),timestamp);
break;
case DISASSOCIATE:
eventStore.insertDetachEvent(event.getAddress(),((InstanceEventActionInfo)event.getActionInfo()).getInstanceUuid(),timestamp);
break;
}
}
