{
  final DisassociateAddressResponseType reply=request.getReply();
  reply.set_return(false);
  final Context ctx=Contexts.lookup();
  final Address address=RestrictedTypes.doPrivileged(request.getPublicIp(),Address.class);
  reply.set_return(true);
  final String vmId=address.getInstanceId();
  if (address.isSystemOwned() && !ctx.isAdministrator()) {
    throw new EucalyptusCloudException("Only administrators can unassign system owned addresses: " + address.toString());
  }
 else {
    try {
      final VmInstance vm=VmInstances.lookup(vmId);
      final UnconditionalCallback<BaseMessage> systemAddressAssignmentCallback=new UnconditionalCallback<BaseMessage>(){
        @Override public void fire(){
          try {
            Addresses.system(VmInstances.lookup(vmId));
          }
 catch (          NoSuchElementException e) {
            LOG.debug(e,e);
          }
catch (          Exception e) {
            LOG.error("Error assigning system address for instance " + vm.getInstanceId(),e);
          }
        }
      }
;
      AsyncRequests.dispatchSafely(AsyncRequests.newRequest(address.unassign().getCallback()).then(systemAddressAssignmentCallback),vm.getPartition());
    }
 catch (    Exception e) {
      LOG.debug(e);
      Logs.extreme().debug(e,e);
      address.unassign().clearPending();
    }
  }
  return reply;
}
