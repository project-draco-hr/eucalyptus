{
  DescribeAddressesResponseType reply=(DescribeAddressesResponseType)request.getReply();
  Context ctx=Contexts.lookup();
  boolean isAdmin=ctx.hasAdministrativePrivileges();
  User requestUser=ctx.getUser();
  String action=PolicySpec.requestToAction(request);
  final Predicate<? super Address> filter=CloudMetadatas.filteringFor(Address.class).byId(request.getPublicIpsSet()).byPredicate(Filters.generate(request.getFilterSet(),Address.class).asPredicate()).buildPredicate();
  for (  Address address : Iterables.filter(Addresses.getInstance().listValues(),filter)) {
    Account addrAccount=null;
    String addrAccountNumber=address.getOwnerAccountNumber();
    if (!Principals.nobodyAccount().getAccountNumber().equals(addrAccountNumber) && !Principals.systemAccount().getAccountNumber().equals(addrAccountNumber)) {
      try {
        addrAccount=Accounts.lookupAccountById(addrAccountNumber);
      }
 catch (      AuthException e) {
      }
    }
    if (addrAccount != null && (isAdmin || RestrictedTypes.filterPrivileged().apply(address))) {
      reply.getAddressesSet().add(isAdmin ? address.getAdminDescription() : address.getDescription());
    }
 else     if (isAdmin) {
      reply.getAddressesSet().add(isAdmin ? address.getAdminDescription() : address.getDescription());
    }
  }
  if (isAdmin) {
    for (    Address address : Iterables.filter(Addresses.getInstance().listDisabledValues(),filter)) {
      reply.getAddressesSet().add(new AddressInfoType(address.getName(),Principals.nobodyFullName().getUserName()));
    }
  }
  return reply;
}
