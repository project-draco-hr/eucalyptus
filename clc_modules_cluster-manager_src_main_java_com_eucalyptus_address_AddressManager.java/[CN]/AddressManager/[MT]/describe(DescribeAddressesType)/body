{
  final DescribeAddressesResponseType reply=(DescribeAddressesResponseType)request.getReply();
  final Context ctx=Contexts.lookup();
  final boolean isAdmin=ctx.isAdministrator();
  final boolean verbose=isAdmin && request.getPublicIpsSet().remove("verbose");
  final Predicate<? super Address> filter=CloudMetadatas.filteringFor(Address.class).byId(request.getPublicIpsSet()).byPredicate(Filters.generate(request.getFilterSet(),Address.class).asPredicate()).byOwningAccount(verbose ? Collections.<String>emptyList() : Collections.singleton(ctx.getAccount().getAccountNumber())).byPrivileges().buildPredicate();
  for (  Address address : Iterables.filter(Addresses.getInstance().listValues(),filter)) {
    reply.getAddressesSet().add(verbose ? address.getAdminDescription() : address.getDescription());
  }
  if (verbose) {
    for (    Address address : Iterables.filter(Addresses.getInstance().listDisabledValues(),filter)) {
      reply.getAddressesSet().add(new AddressInfoType(address.getName(),Principals.nobodyFullName().getUserName()));
    }
  }
  return reply;
}
