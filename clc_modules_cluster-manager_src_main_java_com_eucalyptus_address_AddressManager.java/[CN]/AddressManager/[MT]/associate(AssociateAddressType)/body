{
  AssociateAddressResponseType reply=(AssociateAddressResponseType)request.getReply();
  reply.set_return(false);
  final Address address=RestrictedTypes.doPrivileged(request.getPublicIp(),Address.class);
  final VmInstance vm=RestrictedTypes.doPrivileged(request.getInstanceId(),VmInstance.class);
  final VmInstance oldVm=findCurrentAssignedVm(address);
  final Address oldAddr=findVmExistingAddress(vm);
  final boolean oldAddrSystem=oldAddr != null ? oldAddr.isSystemOwned() : false;
  reply.set_return(true);
  final UnconditionalCallback assignTarget=new UnconditionalCallback(){
    public void fire(){
      AsyncRequests.newRequest(address.assign(vm).getCallback()).then(new Callback.Success<BaseMessage>(){
        public void fire(        BaseMessage response){
          vm.updatePublicAddress(address.getName());
        }
      }
).dispatch(vm.getPartition());
      if (oldVm != null) {
        Addresses.system(oldVm);
      }
    }
  }
;
  final UnconditionalCallback unassignBystander=new UnconditionalCallback(){
    public void fire(){
      if (oldAddr != null) {
        AsyncRequests.newRequest(oldAddr.unassign().getCallback()).then(assignTarget).dispatch(vm.getPartition());
      }
 else {
        assignTarget.fire();
      }
    }
  }
;
  if (address.isAssigned()) {
    AsyncRequests.newRequest(address.unassign().getCallback()).then(unassignBystander).dispatch(oldVm.getPartition());
  }
 else {
    unassignBystander.fire();
  }
  return reply;
}
