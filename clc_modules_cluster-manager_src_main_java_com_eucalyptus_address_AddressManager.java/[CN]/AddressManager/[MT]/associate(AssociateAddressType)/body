{
  AssociateAddressResponseType reply=(AssociateAddressResponseType)request.getReply();
  reply.set_return(false);
  final Address address=RestrictedTypes.doPrivileged(request.getPublicIp(),Address.class);
  if (!address.isAllocated()) {
    throw new EucalyptusCloudException("Cannot associate an address which is not allocated: " + request.getPublicIp());
  }
 else   if (!Contexts.lookup().hasAdministrativePrivileges() && !Contexts.lookup().getUserFullName().asAccountFullName().getAccountNumber().equals(address.getOwner().getAccountNumber())) {
    throw new EucalyptusCloudException("Cannot associate an address which is not allocated to your account: " + request.getPublicIp());
  }
  final VmInstance vm=RestrictedTypes.doPrivileged(request.getInstanceId(),VmInstance.class);
  final VmInstance oldVm=findCurrentAssignedVm(address);
  final Address oldAddr=findVmExistingAddress(vm);
  final boolean oldAddrSystem=oldAddr != null ? oldAddr.isSystemOwned() : false;
  reply.set_return(true);
  if (oldAddr != null && address.equals(oldAddr)) {
    return reply;
  }
  final UnconditionalCallback assignTarget=new UnconditionalCallback(){
    public void fire(){
      AsyncRequests.dispatchSafely(AsyncRequests.newRequest(address.assign(vm).getCallback()).then(new Callback.Success<BaseMessage>(){
        @Override public void fire(        BaseMessage response){
          Addresses.updatePublicIpByInstanceId(vm.getInstanceId(),address.getName());
        }
      }
),vm.getPartition());
      if (oldVm != null) {
        Addresses.system(oldVm);
      }
    }
  }
;
  final UnconditionalCallback unassignBystander=new UnconditionalCallback(){
    public void fire(){
      if (oldAddr != null) {
        AsyncRequests.dispatchSafely(AsyncRequests.newRequest(oldAddr.unassign().getCallback()).then(assignTarget),vm.getPartition());
      }
 else {
        assignTarget.fire();
      }
    }
  }
;
  if (address.isAssigned()) {
    AsyncRequests.dispatchSafely(AsyncRequests.newRequest(address.unassign().getCallback()).then(unassignBystander),oldVm.getPartition());
  }
 else {
    unassignBystander.fire();
  }
  return reply;
}
