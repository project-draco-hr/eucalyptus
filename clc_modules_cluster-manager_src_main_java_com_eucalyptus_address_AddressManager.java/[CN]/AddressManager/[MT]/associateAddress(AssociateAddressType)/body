{
  final AssociateAddressResponseType reply=request.getReply().markFailed();
  final String instanceId=request.getInstanceId() == null ? null : normalizeInstanceIdentifier(request.getInstanceId());
  final String networkInterfaceId=request.getNetworkInterfaceId() == null ? null : normalizeNetworkInterfaceIdentifier(request.getNetworkInterfaceId());
  final Address address=RestrictedTypes.doPrivileged(Objects.firstNonNull(request.getPublicIp(),ResourceIdentifiers.tryNormalize().apply(request.getAllocationId())),Address.class);
  if (!address.isAllocated() && !Contexts.lookup().isAdministrator()) {
    throw new EucalyptusCloudException("Cannot associate an address which is not allocated: " + request.getPublicIp());
  }
 else   if (!Contexts.lookup().isAdministrator() && !Contexts.lookup().getUserFullName().asAccountFullName().getAccountNumber().equals(address.getOwner().getAccountNumber())) {
    throw new EucalyptusCloudException("Cannot associate an address which is not allocated to your account: " + request.getPublicIp());
  }
  final VmInstance vm=instanceId == null ? null : RestrictedTypes.doPrivileged(instanceId,VmInstance.class);
  try (final Addresses.AddressingBatch batch=addresses.batch()){
    if (address.getDomain() != AddressDomain.vpc) {
      if (vm == null) {
        throw new ClientComputeException("InvalidParameterCombination","InstanceId must be specified when using PublicIp");
      }
      if (VmStateSet.NOT_RUNNING.apply(vm)) {
        throw new ClientComputeException("InvalidInstanceID","The instance '" + vm.getDisplayName() + "' is not in a valid state for this operation.");
      }
      final VmInstance oldVm=findCurrentAssignedVm(address);
      final Address oldAddr=findVmExistingAddress(addresses,vm);
      reply.set_return(true);
      if (oldAddr != null && address.equals(oldAddr)) {
        return reply;
      }
      if (address.isAssigned()) {
        if (oldVm != null) {
          PublicAddresses.markDirty(address.getDisplayName(),oldVm.getPartition());
        }
        addresses.unassign(address);
        if (oldVm != null) {
          addresses.system(oldVm);
        }
      }
      if (oldAddr != null) {
        PublicAddresses.markDirty(oldAddr.getDisplayName(),vm.getPartition());
        addresses.unassign(oldAddr);
      }
      if (addresses.assign(address,vm)) {
        Addresses.updatePublicIpByInstanceId(vm.getInstanceId(),address.getName());
      }
    }
 else {
      final NetworkInterface networkInterface;
      try (final TransactionResource tx=Entities.transactionFor(VmInstance.class)){
        if (vm != null) {
          if (VmStateSet.EXPECTING_TEARDOWN.apply(vm) || VmStateSet.DONE.apply(vm)) {
            throw new ClientComputeException("InvalidInstanceID","The instance '" + vm.getDisplayName() + "' is not in a valid state for this operation.");
          }
          networkInterface=Iterables.getOnlyElement(Entities.merge(vm).getNetworkInterfaces());
        }
 else {
          if (networkInterfaceId == null) {
            throw new ClientComputeException("MissingParameter","Either instance ID or network interface id must be specified");
          }
          networkInterface=RestrictedTypes.doPrivileged(networkInterfaceId,NetworkInterface.class);
          if (networkInterface.isAttached()) {
            final VmInstance attachedVm=networkInterface.getAttachment().getInstance();
            if (VmStateSet.EXPECTING_TEARDOWN.apply(attachedVm)) {
              throw new ClientComputeException("IncorrectInstanceState","The instance to which '" + networkInterfaceId + "' is attached is not in a valid state for this operation");
            }
          }
        }
      }
       reply.set_return(true);
      if (!address.isAssigned() || !networkInterface.getDisplayName().equals(address.getNetworkInterfaceId())) {
        if (address.isAssigned() && !request.getAllowReassociation()) {
          throw new ClientComputeException("Resource.AlreadyAssociated","Address already associated");
        }
        if (address.isAssigned()) {
          final NetworkInterface oldNetworkInterface=RestrictedTypes.doPrivileged(address.getNetworkInterfaceId(),NetworkInterface.class);
          try (final TransactionResource tx=Entities.transactionFor(NetworkInterface.class)){
            final NetworkInterface eni=Entities.merge(oldNetworkInterface);
            if (eni.isAssociated()) {
              PublicAddresses.markDirty(eni.getAssociation().getPublicIp(),eni.getPartition());
            }
            addresses.unassign(address,null);
            eni.disassociate();
            if (eni.isAttached() && eni.getAttachment().getDeviceIndex() == 0) {
              VmInstances.updatePublicAddress(eni.getAttachment().getInstance(),VmNetworkConfig.DEFAULT_IP);
            }
            tx.commit();
          }
         }
        try (final TransactionResource tx=Entities.transactionFor(NetworkInterface.class)){
          final NetworkInterface eni=Entities.merge(networkInterface);
          internetGateways.lookupByVpc(null,eni.getVpc().getDisplayName(),CloudMetadatas.toDisplayName());
          if (eni.isAssociated()) {
            PublicAddresses.markDirty(eni.getAssociation().getPublicIp(),eni.getPartition());
            NetworkInterfaceHelper.releasePublic(eni);
            eni.disassociate();
            if (eni.isAttached() && eni.getAttachment().getDeviceIndex() == 0) {
              final VmInstance instance=eni.getAttachment().getInstance();
              VmInstances.updatePublicAddress(instance,VmNetworkConfig.DEFAULT_IP);
            }
          }
          NetworkInterfaceHelper.associate(address,eni);
          tx.commit();
        }
 catch (        final VpcMetadataNotFoundException e) {
          throw new ClientComputeException("Gateway.NotAttached","Internet gateway not found for VPC");
        }
      }
      reply.setAssociationId(address.getAssociationId());
    }
  }
   return reply;
}
