{
  final VmTypeInfo vmInfo=this.allocInfo.getVmTypeInfo(this.allocInfo.getPartition(),token.getAllocationInfo().getReservationId());
  try {
    final VmTypeInfo childVmInfo=this.makeVmTypeInfo(vmInfo,token);
    final VmRunCallback callback=this.makeRunCallback(token,childVmInfo);
    final Request<VmRunType,VmRunResponseType> req=AsyncRequests.newRequest(callback);
    try {
      final BaseMessage parentReq=MessageContexts.lookup(req.getRequest().getInstanceId(),edu.ucsb.eucalyptus.msgs.RunInstancesType.class);
      if (parentReq != null)       req.getRequest().regardingRequest(parentReq);
    }
 catch (    final Exception ex) {
      LOG.warn("Failed to set correlation id to VmRunType",ex);
    }
    this.messages.addRequest(State.CREATE_VMS,req);
    this.messages.addCleanup(new Runnable(){
      @Override public void run(){
        if (token.isPending())         try {
          token.release();
        }
 catch (        final ResourceState.NoSuchTokenException e) {
          Logs.extreme().error(e,e);
        }
      }
    }
);
    LOG.debug("Queued RunInstances: " + token);
  }
 catch (  final Exception ex) {
    Logs.extreme().error(ex,ex);
    throw ex;
  }
}
