{
  VmTypeInfo childVmInfo=vmInfo.child();
  if (this.allocInfo.getBootSet().getMachine() instanceof BlockStorageImageInfo) {
    String instanceId=token.getInstanceId();
    VirtualBootRecord rootVbr=childVmInfo.lookupRoot();
    Volume rootVolume=token.getRootVolume();
    String volumeId=rootVolume.getDisplayName();
    String volumeToken=null;
    LOG.debug("Wait for root ebs volume " + rootVolume.getDisplayName() + " to become available");
    final ServiceConfiguration scConfig=waitForVolume(rootVolume);
    try {
      LOG.debug("About to get attachment token for volume " + rootVolume.getDisplayName() + " to instance "+ instanceId);
      GetVolumeTokenResponseType scGetTokenResponse;
      try {
        GetVolumeTokenType req=new GetVolumeTokenType(volumeId);
        scGetTokenResponse=AsyncRequests.sendSync(scConfig,req);
      }
 catch (      Exception e) {
        LOG.debug(e,e);
        throw new EucalyptusCloudException(e.getMessage(),e);
      }
      LOG.debug("Got volume token response from SC for volume " + rootVolume.getDisplayName() + " and instance "+ instanceId+ "\n"+ scGetTokenResponse);
      volumeToken=scGetTokenResponse.getToken();
      if (volumeToken == null) {
        throw new EucalyptusCloudException("Failed to get remote device string for " + volumeId + " while running instance "+ token.getInstanceId());
      }
 else {
        volumeToken=VOLUME_TOKEN_PREFIX + volumeId + ","+ volumeToken;
        rootVbr.setResourceLocation(volumeToken);
        rootVbr.setSize(rootVolume.getSize() * BYTES_PER_GB);
      }
    }
 catch (    final Exception ex) {
      LOG.error(ex);
      Logs.extreme().error(ex,ex);
      throw ex;
    }
    for (    Entry<String,Volume> mapping : token.getEbsVolumes().entrySet()) {
      Volume volume=mapping.getValue();
      if (volume.getSize() <= 0) {
        volume=Volumes.lookup(this.allocInfo.getOwnerFullName(),mapping.getValue().getDisplayName());
      }
      volumeId=volume.getDisplayName();
      LOG.debug("Wait for volume " + volumeId + " to become available");
      final ServiceConfiguration scConfigLocal=waitForVolume(volume);
      try {
        LOG.debug("About to get attachment token for volume " + volume.getDisplayName() + " to instance "+ instanceId);
        GetVolumeTokenResponseType scGetTokenResponse;
        try {
          GetVolumeTokenType req=new GetVolumeTokenType(volumeId);
          scGetTokenResponse=AsyncRequests.sendSync(scConfigLocal,req);
        }
 catch (        Exception e) {
          LOG.debug(e,e);
          throw new EucalyptusCloudException(e.getMessage(),e);
        }
        LOG.debug("Got volume token response from SC for volume " + volume.getDisplayName() + " and instance "+ instanceId+ "\n"+ scGetTokenResponse);
        volumeToken=scGetTokenResponse.getToken();
        if (volumeToken == null) {
          throw new EucalyptusCloudException("Failed to get remote device string for " + volumeId + " while running instance "+ token.getInstanceId());
        }
 else {
          volumeToken=VOLUME_TOKEN_PREFIX + volumeId + ","+ volumeToken;
          VirtualBootRecord vbr=new VirtualBootRecord(volumeId,volumeToken,"ebs",mapping.getKey(),(volume.getSize() * BYTES_PER_GB),"none");
          childVmInfo.getVirtualBootRecord().add(vbr);
        }
      }
 catch (      final Exception ex) {
        LOG.error(ex);
        Logs.extreme().error(ex,ex);
        throw ex;
      }
    }
    for (    String deviceName : token.getEphemeralDisks().keySet()) {
      childVmInfo.setEphemeral(0,deviceName,(this.allocInfo.getVmType().getDisk() * BYTES_PER_GB),"none");
    }
    LOG.debug("Instance information: " + childVmInfo.dump());
  }
  return childVmInfo;
}
