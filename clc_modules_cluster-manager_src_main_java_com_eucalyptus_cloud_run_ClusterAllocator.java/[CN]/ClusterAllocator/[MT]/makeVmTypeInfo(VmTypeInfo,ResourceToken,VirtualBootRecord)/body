{
  VmTypeInfo childVmInfo=vmInfo;
  if (root.isBlockStorage()) {
    childVmInfo=vmInfo.child();
    final Volume vol=token.getRootVolume();
    final ServiceConfiguration scConfig=waitForVolume(vol);
    VirtualBootRecord vbrRootDevice=childVmInfo.lookupRoot();
    String volumeId=vol.getDisplayName();
    String remoteDeviceString=null;
    Exception lastError=null;
    String finalIqn=null;
    for (    final String nodeTag : this.cluster.getNodeTags()) {
      NodeInfo nodeInfo=this.cluster.getNode(nodeTag);
      if (nodeInfo != null && nodeInfo.getIqn() != null) {
        try {
          String nodeIqn=nodeInfo.getIqn();
          remoteDeviceString=requestAttachStorageVolume(scConfig,volumeId,nodeIqn);
          if (remoteDeviceString != null) {
            finalIqn=nodeIqn;
            Logs.extreme().debug("Updating remote device for " + token + " using iqn "+ finalIqn+ " with "+ remoteDeviceString);
            break;
          }
        }
 catch (        Exception ex) {
          lastError=ex;
        }
      }
    }
    if (remoteDeviceString == null || finalIqn == null) {
      if (lastError == null) {
        lastError=new NullPointerException("Failed to find a node w/ reported iqn: " + this.cluster.getNodeMap());
      }
      LOG.error("Failed to start instance " + token + " while preparing attachment of volume "+ volumeId+ " failed because: "+ lastError,lastError);
      throw lastError;
    }
 else {
      token.setInitialIqn(finalIqn);
      vbrRootDevice.setResourceLocation(remoteDeviceString);
      final String updateRemoteDevString=remoteDeviceString;
      final Function<String,VmInstance> updateInstance=new Function<String,VmInstance>(){
        public VmInstance apply(        final String input){
          VmVolumeAttachment attachment=VmInstances.lookupVolumeAttachment(input);
          attachment.setRemoteDevice(updateRemoteDevString);
          return attachment.getVmInstance();
        }
      }
;
      try {
        Entities.asTransaction(VmInstance.class,updateInstance).apply(volumeId);
      }
 catch (      Exception ex) {
        LOG.error(ex);
        Logs.extreme().error(ex,ex);
      }
    }
  }
  return childVmInfo;
}
