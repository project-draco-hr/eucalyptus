{
  try {
    final User owner=Accounts.lookupUserById(this.allocInfo.getOwnerFullName().getUserId());
    if (!owner.isSystemAdmin())     return;
  }
 catch (  final AuthException ex) {
    return;
  }
  if (allocInfo.getUserData() == null || allocInfo.getUserData().length < VmInstances.VmSpecialUserData.EUCAKEY_CRED_SETUP.toString().length())   return;
  String userData=new String(allocInfo.getUserData(),0,VmInstances.VmSpecialUserData.EUCAKEY_CRED_SETUP.toString().length());
  if (!userData.startsWith(VmInstances.VmSpecialUserData.EUCAKEY_CRED_SETUP.toString()))   return;
  userData=new String(allocInfo.getUserData());
  String payload=null;
  if (userData.length() > VmInstances.VmSpecialUserData.EUCAKEY_CRED_SETUP.toString().length()) {
    payload=userData.substring(VmInstances.VmSpecialUserData.EUCAKEY_CRED_SETUP.toString().length()).trim();
  }
  this.allocInfo.setUserDataAsString(payload);
  try {
    final KeyPair kp=Certs.generateKeyPair();
    final X509Certificate kpCert=Certs.generateCertificate(kp,String.format("Certificate-for-%s/%s",this.allocInfo.getOwnerFullName().getAccountName(),this.allocInfo.getOwnerFullName().getUserName()));
    final String b64PubKey=B64.standard.encString(PEMFiles.getBytes(kpCert));
    final ServiceConfiguration euare=Topology.lookup(Euare.class);
    final SignCertificateType req=new SignCertificateType();
    req.setCertificate(b64PubKey);
    final SignCertificateResponseType resp=AsyncRequests.sendSync(euare,req);
    final String token=resp.getSignCertificateResult().getSignature();
    final MessageDigest digest=Digest.SHA256.get();
    final byte[] salt=new byte[32];
    Crypto.getSecureRandomSupplier().get().nextBytes(salt);
    digest.update(salt);
    final SecretKey symmKey=new SecretKeySpec(digest.digest(),"AES");
    Cipher cipher=Ciphers.AES_GCM.get();
    final byte[] iv=new byte[12];
    Crypto.getSecureRandomSupplier().get().nextBytes(iv);
    cipher.init(Cipher.ENCRYPT_MODE,symmKey,new IvParameterSpec(iv),Crypto.getSecureRandomSupplier().get());
    final byte[] cipherText=cipher.doFinal(Base64.encode(PEMFiles.getBytes(kp.getPrivate())));
    final String encPrivKey=new String(Base64.encode(Arrays.concatenate(iv,cipherText)));
    cipher=Ciphers.AES_GCM.get();
    cipher.init(Cipher.ENCRYPT_MODE,symmKey,new IvParameterSpec(iv),Crypto.getSecureRandomSupplier().get());
    final byte[] byteToken=cipher.doFinal(token.getBytes());
    final String encToken=new String(Base64.encode(Arrays.concatenate(iv,byteToken)));
    X509Certificate nodeCert=this.allocInfo.getPartition().getNodeCertificate();
    cipher=Ciphers.RSA_PKCS1.get();
    cipher.init(Cipher.ENCRYPT_MODE,nodeCert.getPublicKey(),Crypto.getSecureRandomSupplier().get());
    byte[] symmkey=cipher.doFinal(symmKey.getEncoded());
    final String encSymmKey=new String(Base64.encode(symmkey));
    X509Certificate euareCert=SystemCredentials.lookup(Euare.class).getCertificate();
    final String b64EuarePubkey=B64.standard.encString(PEMFiles.getBytes(euareCert));
    X509Certificate eucalyptusCert=SystemCredentials.lookup(Eucalyptus.class).getCertificate();
    final String b64EucalyptusPubkey=B64.standard.encString(PEMFiles.getBytes(eucalyptusCert));
    final String credential=String.format("%s\n%s\n%s\n%s\n%s\n%s",b64EuarePubkey,b64PubKey,encToken,encSymmKey,encPrivKey,b64EucalyptusPubkey);
    this.allocInfo.setCredential(credential);
  }
 catch (  final Exception ex) {
    LOG.error("failed to setup instance credential",ex);
  }
}
