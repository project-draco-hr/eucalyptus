{
  try {
    final User owner=Accounts.lookupUserById(this.allocInfo.getOwnerFullName().getUserId());
    if (!owner.isSystemAdmin())     return;
  }
 catch (  final AuthException ex) {
    return;
  }
  if (allocInfo.getUserData() == null || allocInfo.getUserData().length <= 0)   return;
  final String userData=new String(allocInfo.getUserData());
  if (!VmInstances.VmSpecialUserData.apply(userData))   return;
  String payload=null;
  int expirationDays=180;
  try {
    final VmInstances.VmSpecialUserData specialData=new VmInstances.VmSpecialUserData(userData);
    if (!VmInstances.VmSpecialUserData.EUCAKEY_CRED_SETUP.equals(specialData.getKey()))     return;
    final String strExpDay=specialData.getExpirationDays();
    if (strExpDay != null)     expirationDays=Integer.parseInt(strExpDay);
    payload=specialData.getPayload();
  }
 catch (  final Exception ex) {
    LOG.error("Failed to parse VM user data",ex);
    return;
  }
  for (  String s : this.allocInfo.getInstanceIds()) {
    try (final TransactionResource db=Entities.transactionFor(VmInstance.class)){
      final VmInstance instance=VmInstances.lookup(s);
      instance.setUserDataAsString(payload);
    }
 catch (    NoSuchElementException e) {
      LOG.error("Can't find instance " + s + " to change its user data");
    }
  }
  try {
    final String endUserAccountNumber=Objects.firstNonNull(Strings.emptyToNull(Optional.of(payload).transform(regexReplace(SERVER_CERT_ACCOUNT_PATTERN,"$1","")).orNull()),allocInfo.getOwnerFullName().getAccountNumber());
    final KeyPair kp=Certs.generateKeyPair();
    final String principal=String.format("CN=%s, OU=Eucalyptus, O=Cloud, C=US",allocInfo.getInstanceId(0));
    final X509Certificate kpCert=Accounts.signCertificate(endUserAccountNumber,(RSAPublicKey)kp.getPublic(),principal,expirationDays);
    final String b64PubKey=B64.standard.encString(PEMFiles.getBytes(kpCert));
    final MessageDigest digest=Digest.SHA256.get();
    final byte[] salt=new byte[32];
    Crypto.getSecureRandomSupplier().get().nextBytes(salt);
    digest.update(salt);
    final SecretKey symmKey=new SecretKeySpec(digest.digest(),"AES");
    Cipher cipher=Ciphers.AES_GCM.get();
    final byte[] iv=new byte[12];
    Crypto.getSecureRandomSupplier().get().nextBytes(iv);
    cipher.init(Cipher.ENCRYPT_MODE,symmKey,new IvParameterSpec(iv),Crypto.getSecureRandomSupplier().get());
    final byte[] cipherText=cipher.doFinal(Base64.encode(PEMFiles.getBytes(kp.getPrivate())));
    final String encPrivKey=new String(Base64.encode(Arrays.concatenate(iv,cipherText)));
    final String token="NULL";
    cipher=Ciphers.AES_GCM.get();
    cipher.init(Cipher.ENCRYPT_MODE,symmKey,new IvParameterSpec(iv),Crypto.getSecureRandomSupplier().get());
    final byte[] byteToken=cipher.doFinal(token.getBytes());
    final String encToken=new String(Base64.encode(Arrays.concatenate(iv,byteToken)));
    X509Certificate nodeCert=this.allocInfo.getPartition().getNodeCertificate();
    cipher=Ciphers.RSA_PKCS1.get();
    cipher.init(Cipher.ENCRYPT_MODE,nodeCert.getPublicKey(),Crypto.getSecureRandomSupplier().get());
    byte[] symmkey=cipher.doFinal(symmKey.getEncoded());
    final String encSymmKey=new String(Base64.encode(symmkey));
    X509Certificate euareCert=Accounts.getEuareCertificate(endUserAccountNumber);
    final String b64EuarePubkey=B64.standard.encString(PEMFiles.getBytes(euareCert));
    X509Certificate eucalyptusCert=SystemCredentials.lookup(Eucalyptus.class).getCertificate();
    final String b64EucalyptusPubkey=B64.standard.encString(PEMFiles.getBytes(eucalyptusCert));
    final String credential=String.format("%s\n%s\n%s\n%s\n%s\n%s",b64EuarePubkey,b64PubKey,encToken,encSymmKey,encPrivKey,b64EucalyptusPubkey);
    this.allocInfo.setCredential(credential);
  }
 catch (  final Exception ex) {
    LOG.error("failed to setup instance credential",ex);
  }
}
