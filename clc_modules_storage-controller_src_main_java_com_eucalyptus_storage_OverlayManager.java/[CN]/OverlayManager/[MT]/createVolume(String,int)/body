{
  VolumeEntityWrapperManager volumeManager=new VolumeEntityWrapperManager();
  LVMVolumeInfo lvmVolumeInfo=null;
  if (exportManager instanceof AOEManager) {
    lvmVolumeInfo=new AOEVolumeInfo();
  }
 else {
    lvmVolumeInfo=new ISCSIVolumeInfo();
  }
  volumeManager.finish();
  String rawFileName=DirectStorageInfo.getStorageInfo().getVolumesDir() + "/" + volumeId;
  long absoluteSize=size * StorageProperties.GB + LVM_HEADER_LENGTH;
  try {
    String vgName="vg-" + Hashes.getRandom(4);
    String lvName="lv-" + Hashes.getRandom(4);
    String loDevName=createLoopback(rawFileName,absoluteSize);
    createLogicalVolume(loDevName,vgName,lvName);
    lvmVolumeInfo.setVgName(vgName);
    lvmVolumeInfo.setLvName(lvName);
    lvmVolumeInfo.setPvName(loDevName);
    lvmVolumeInfo.setVolumeId(volumeId);
    lvmVolumeInfo.setStatus(StorageProperties.Status.available.toString());
    lvmVolumeInfo.setSize(size);
    String absoluteLVName=lvmRootDirectory + PATH_SEPARATOR + vgName+ PATH_SEPARATOR+ lvName;
    disableLogicalVolume(absoluteLVName);
    removeLoopback(loDevName);
    volumeManager=new VolumeEntityWrapperManager();
    volumeManager.add(lvmVolumeInfo);
    volumeManager.finish();
  }
 catch (  EucalyptusCloudException ex) {
    String error="Unable to run command: " + ex.getMessage();
    volumeManager.abort();
    LOG.error(error);
    throw new EucalyptusCloudException(error);
  }
}
