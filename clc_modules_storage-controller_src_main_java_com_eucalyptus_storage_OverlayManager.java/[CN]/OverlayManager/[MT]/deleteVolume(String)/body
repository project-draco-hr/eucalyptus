{
  LVMVolumeInfo foundLVMVolumeInfo=null;
{
    final VolumeEntityWrapperManager volumeManager=new VolumeEntityWrapperManager();
    try {
      foundLVMVolumeInfo=volumeManager.getVolumeInfo(volumeId);
    }
  finally {
      volumeManager.finish();
    }
  }
  if (foundLVMVolumeInfo != null) {
    boolean isReadyForDelete=false;
    int retryCount=0;
    VolumeOpMonitor monitor=getMonitor(foundLVMVolumeInfo.getVolumeId());
    LOG.debug("Trying to lock volume " + volumeId);
synchronized (monitor) {
      VolumeEntityWrapperManager outerVolumeManager=null;
      do {
        final VolumeEntityWrapperManager volumeManager=new VolumeEntityWrapperManager();
        try {
          foundLVMVolumeInfo=volumeManager.getVolumeInfo(volumeId);
          if (foundLVMVolumeInfo.getCleanup()) {
            LOG.debug("Volume " + volumeId + " has been marked for cleanup. Will resume after cleanup is complete");
            monitor.wait(60000);
          }
 else {
            LOG.debug("Volume " + volumeId + " is not marked for cleanup. Checking loop back device status");
            if (exportManager.isExported(foundLVMVolumeInfo)) {
              foundLVMVolumeInfo.setCleanup(true);
              volumeManager.finish();
              LOG.debug("Loop back device for volume " + volumeId + " exists. Marking the volume for cleanup. Will resume after cleanup is complete");
              monitor.wait(60000);
            }
 else {
              LOG.debug("Volume " + volumeId + " is prepped for deletion");
              isReadyForDelete=true;
              break;
            }
          }
        }
 catch (        Exception e) {
          LOG.error("Error trying to check volume status",e);
        }
 finally {
          if (isReadyForDelete) {
            outerVolumeManager=volumeManager;
          }
 else {
            volumeManager.abort();
          }
        }
        LOG.debug("Lap: " + retryCount++);
      }
 while (!isReadyForDelete && retryCount < 10);
      if (isReadyForDelete) {
        try {
          LOG.debug("Deleting volume " + volumeId);
          File volFile=new File(DirectStorageInfo.getStorageInfo().getVolumesDir() + File.separator + volumeId);
          if (volFile.exists()) {
            if (!volFile.delete()) {
              LOG.error("Unable to delete: " + volFile.getAbsolutePath());
              throw new EucalyptusCloudException("Unable to delete volume file: " + volFile.getAbsolutePath());
            }
          }
          outerVolumeManager.remove(foundLVMVolumeInfo);
          try {
            outerVolumeManager.finish();
          }
 catch (          Exception e) {
            LOG.error("Error deleting volume " + volumeId + ", failed to commit DB transaction",e);
          }
        }
  finally {
          outerVolumeManager.abort();
        }
      }
 else {
        LOG.error("All attempts to cleanup volume " + volumeId + " failed");
        throw new EucalyptusCloudException("Unable to delete volume: " + volumeId + ". All attempts to cleanup the volume failed");
      }
    }
    removeMonitor(volumeId);
  }
 else {
    throw new EucalyptusCloudException("Unable to find volume: " + volumeId);
  }
}
