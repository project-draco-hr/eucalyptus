{
  VolumeEntityWrapperManager volumeManager=new VolumeEntityWrapperManager();
  LVMVolumeInfo lvmVolumeInfo=volumeManager.getVolumeInfo(volumeId);
  if (lvmVolumeInfo != null) {
    long absoluteSize=lvmVolumeInfo.getSize() * StorageProperties.GB + LVM_HEADER_LENGTH;
    String rawFileName=DirectStorageInfo.getStorageInfo().getVolumesDir() + "/" + volumeId;
    try {
      VolumeOpMonitor monitor=getMonitor(volumeId);
synchronized (monitor) {
        String loDevName=lvmVolumeInfo.getLoDevName();
        if (loDevName == null) {
          loDevName=createLoopback(rawFileName);
        }
        String vgName=lvmVolumeInfo.getVgName();
        String lvName=lvmVolumeInfo.getLvName();
        String absoluteLVName=lvmRootDirectory + PATH_SEPARATOR + vgName+ PATH_SEPARATOR+ lvName;
        lvmVolumeInfo.setLoDevName(loDevName);
        enableLogicalVolume(absoluteLVName);
        try {
          volumeManager.exportVolume(lvmVolumeInfo,vgName,lvName);
        }
 catch (        EucalyptusCloudException ex) {
          LOG.error(ex);
          throw ex;
        }
        lvmVolumeInfo.setCleanup(false);
        volumeManager.finish();
      }
    }
 catch (    EucalyptusCloudException ex) {
      String error="Unable to run command: " + ex.getMessage();
      volumeManager.abort();
      LOG.error(error);
      throw new EucalyptusCloudException(error);
    }
  }
  return getVolumeProperty(volumeId);
}
