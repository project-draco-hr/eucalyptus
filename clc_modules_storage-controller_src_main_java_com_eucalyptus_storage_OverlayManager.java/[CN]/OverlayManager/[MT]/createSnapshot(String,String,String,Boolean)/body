{
  if (snapshotPointId != null) {
    throw new EucalyptusCloudException("Synchronous snapshot points not supported in Overlay storage manager");
  }
  VolumeEntityWrapperManager volumeManager=new VolumeEntityWrapperManager();
  LVMVolumeInfo foundLVMVolumeInfo=volumeManager.getVolumeInfo(volumeId);
  ArrayList<String> returnValues=new ArrayList<String>();
  if (foundLVMVolumeInfo != null) {
    LVMVolumeInfo snapshotInfo=volumeManager.getVolumeInfo();
    snapshotInfo.setVolumeId(snapshotId);
    String vgName=foundLVMVolumeInfo.getVgName();
    String lvName="lv-snap-" + Hashes.getRandom(4);
    String absoluteLVName=lvmRootDirectory + PATH_SEPARATOR + vgName+ PATH_SEPARATOR+ foundLVMVolumeInfo.getLvName();
    int size=foundLVMVolumeInfo.getSize();
    long snapshotSize=(size * StorageProperties.GB) / 2;
    String rawFileName=DirectStorageInfo.getStorageInfo().getVolumesDir() + "/" + volumeId+ Hashes.getRandom(6);
    volumeManager.finish();
    try {
      VolumeOpMonitor monitor=getMonitor(volumeId);
      String absoluteVolLVName=lvmRootDirectory + PATH_SEPARATOR + foundLVMVolumeInfo.getVgName()+ PATH_SEPARATOR+ foundLVMVolumeInfo.getLvName();
      String volLoDevName=foundLVMVolumeInfo.getLoDevName();
      boolean tearDown=false;
synchronized (monitor) {
        if (!LVMWrapper.logicalVolumeExists(absoluteVolLVName)) {
          volLoDevName=createLoopback(DirectStorageInfo.getStorageInfo().getVolumesDir() + "/" + volumeId);
          LVMWrapper.enableLogicalVolume(absoluteVolLVName);
          tearDown=true;
        }
        snapshotInfo.setStatus(StorageProperties.Status.pending.toString());
        snapshotInfo.setSize(size);
        snapshotInfo.setSnapshotOf(volumeId);
        volumeManager=new VolumeEntityWrapperManager();
        volumeManager.add(snapshotInfo);
        volumeManager.finish();
        String loDevName=createLoopback(rawFileName,snapshotSize);
        createSnapshotLogicalVolume(loDevName,vgName,absoluteLVName,lvName);
        String snapRawFileName=DirectStorageInfo.getStorageInfo().getVolumesDir() + "/" + snapshotId;
        String absoluteSnapLVName=lvmRootDirectory + PATH_SEPARATOR + vgName+ PATH_SEPARATOR+ lvName;
        duplicateLogicalVolume(absoluteSnapLVName,snapRawFileName);
        String returnValue=LVMWrapper.removeLogicalVolume(absoluteSnapLVName);
        if (returnValue.length() == 0) {
          throw new EucalyptusCloudException("Unable to remove logical volume " + absoluteSnapLVName);
        }
        returnValue=LVMWrapper.reduceVolumeGroup(vgName,loDevName);
        if (returnValue.length() == 0) {
          throw new EucalyptusCloudException("Unable to reduce volume group " + vgName + " logical volume: "+ loDevName);
        }
        returnValue=LVMWrapper.removePhysicalVolume(loDevName);
        if (returnValue.length() == 0) {
          throw new EucalyptusCloudException("Unable to remove physical volume " + loDevName);
        }
        returnValue=removeLoopback(loDevName);
        if (!(new File(rawFileName)).delete()) {
          LOG.error("Unable to remove temporary snapshot file: " + rawFileName);
        }
        if (tearDown) {
          LOG.info("Snapshot complete. Detaching loop device" + volLoDevName);
          LVMWrapper.disableLogicalVolume(absoluteVolLVName);
          removeLoopback(volLoDevName);
        }
        returnValues.add(snapRawFileName);
        returnValues.add(String.valueOf(size * WalrusProperties.G));
        volumeManager=new VolumeEntityWrapperManager();
        LVMVolumeInfo foundSnapshotInfo=volumeManager.getVolumeInfo(snapshotId);
        foundSnapshotInfo.setLoFileName(snapRawFileName);
        foundSnapshotInfo.setStatus(StorageProperties.Status.available.toString());
        volumeManager.finish();
      }
    }
 catch (    EucalyptusCloudException ex) {
      if (volumeManager != null)       volumeManager.abort();
      String error="Unable to run command: " + ex.getMessage();
      LOG.error(error);
      throw new EucalyptusCloudException(error);
    }
  }
  return returnValues;
}
