{
  try {
    VolumeEntityWrapperManager volumeManager=new VolumeEntityWrapperManager();
    LVMVolumeInfo volume=volumeManager.getVolumeInfo(volumeId);
    VolumeOpMonitor monitor=getMonitor(volume.getVolumeId());
synchronized (monitor) {
      try {
        LOG.info("Cleaning up volume: " + volume.getVolumeId());
        try {
          String path=lvmRootDirectory + PATH_SEPARATOR + volume.getVgName()+ PATH_SEPARATOR+ volume.getLvName();
          if (LVMWrapper.logicalVolumeExists(path)) {
            exportManager.cleanup(volume);
          }
          volumeManager.finish();
          volumeManager=new VolumeEntityWrapperManager();
          volume=volumeManager.getVolumeInfo(volumeId);
        }
 catch (        EucalyptusCloudException ee) {
          LOG.error("Error cleaning up volume " + volumeId,ee);
          volumeManager.abort();
          return;
        }
        String loDevName=volume.getLoDevName();
        if (loDevName != null) {
          if (volume != null) {
            String vgName=volume.getVgName();
            String lvName=volume.getLvName();
            String absoluteLVName=lvmRootDirectory + PATH_SEPARATOR + vgName+ PATH_SEPARATOR+ lvName;
            if (!volumeManager.areSnapshotsPending(volumeId)) {
              try {
                LVMWrapper.disableLogicalVolume(absoluteLVName);
                LOG.info("Detaching loop device: " + loDevName);
                removeLoopback(loDevName);
                volume.setLoDevName(null);
                LOG.info("Done cleaning up: " + volumeId);
                volume.setCleanup(false);
              }
 catch (              EucalyptusCloudException e) {
                LOG.error(e,e);
              }
 finally {
                volumeManager.finish();
              }
            }
 else {
              LOG.info("Snapshot in progress. Not detaching loop device.");
              volumeManager.abort();
            }
          }
        }
 else {
          volumeManager.abort();
        }
      }
  finally {
        monitor.notifyAll();
      }
    }
  }
 catch (  Exception ex) {
    LOG.error("Error unexporting " + volumeId + " from all hosts",ex);
  }
}
