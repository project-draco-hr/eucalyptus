{
  if (exportManager instanceof AOEManager) {
    if (lvmVolumeInfo instanceof AOEVolumeInfo) {
      AOEVolumeInfo aoeVolumeInfo=(AOEVolumeInfo)lvmVolumeInfo;
      int pid=aoeVolumeInfo.getVbladePid();
      if (pid > 0) {
        String absoluteLVName=lvmRootDirectory + PATH_SEPARATOR + aoeVolumeInfo.getVgName()+ PATH_SEPARATOR+ aoeVolumeInfo.getLvName();
        try {
          enableLogicalVolume(absoluteLVName);
        }
 catch (        ExecutionException ex) {
          String error="Unable to run command: " + ex.getMessage();
          LOG.error(error);
          return;
        }
        String returnValue=aoeStatus(pid);
        if (returnValue.length() == 0) {
          int majorNumber=aoeVolumeInfo.getMajorNumber();
          int minorNumber=aoeVolumeInfo.getMinorNumber();
          pid=exportManager.exportVolume(DirectStorageInfo.getStorageInfo().getStorageInterface(),absoluteLVName,majorNumber,minorNumber);
          aoeVolumeInfo.setVbladePid(pid);
          File vbladePidFile=new File(eucaHome + EUCA_VAR_RUN_PATH + "/vblade-"+ majorNumber+ minorNumber+ ".pid");
          FileOutputStream fileOutStream=null;
          try {
            fileOutStream=new FileOutputStream(vbladePidFile);
            String pidString=String.valueOf(pid);
            fileOutStream.write(pidString.getBytes());
            fileOutStream.close();
          }
 catch (          Exception ex) {
            if (fileOutStream != null)             try {
              fileOutStream.close();
            }
 catch (            IOException e) {
              LOG.error(e);
            }
            LOG.error("Could not write pid file vblade-" + majorNumber + minorNumber+ ".pid");
          }
        }
      }
    }
 else {
      AOEVolumeInfo volumeInfo=new AOEVolumeInfo();
      convertVolumeInfo(lvmVolumeInfo,volumeInfo);
      try {
        unexportVolume(lvmVolumeInfo);
        exportVolume(volumeInfo,volumeInfo.getVgName(),volumeInfo.getLvName());
        add(volumeInfo);
        remove(lvmVolumeInfo);
      }
 catch (      EucalyptusCloudException ex) {
        LOG.error(ex);
      }
    }
  }
 else   if (exportManager instanceof ISCSIManager) {
    if (lvmVolumeInfo instanceof ISCSIVolumeInfo) {
      ISCSIVolumeInfo iscsiVolumeInfo=(ISCSIVolumeInfo)lvmVolumeInfo;
      String absoluteLVName=lvmRootDirectory + PATH_SEPARATOR + iscsiVolumeInfo.getVgName()+ PATH_SEPARATOR+ iscsiVolumeInfo.getLvName();
      ((ISCSIManager)exportManager).exportTarget(iscsiVolumeInfo.getTid(),iscsiVolumeInfo.getStoreName(),iscsiVolumeInfo.getLun(),absoluteLVName,iscsiVolumeInfo.getStoreUser());
    }
 else {
      ISCSIVolumeInfo volumeInfo=new ISCSIVolumeInfo();
      convertVolumeInfo(lvmVolumeInfo,volumeInfo);
      try {
        unexportVolume(lvmVolumeInfo);
        exportVolume(volumeInfo,volumeInfo.getVgName(),volumeInfo.getLvName());
        add(volumeInfo);
        remove(lvmVolumeInfo);
      }
 catch (      EucalyptusCloudException ex) {
        LOG.error(ex);
      }
    }
  }
}
