{
  StorageExportManager manager=exportManager;
  if (volumeInfo instanceof AOEVolumeInfo) {
    AOEVolumeInfo aoeVolumeInfo=(AOEVolumeInfo)volumeInfo;
    if (!(exportManager instanceof AOEManager)) {
      manager=new AOEManager();
    }
    int pid=aoeVolumeInfo.getVbladePid();
    if (pid > 0) {
      String returnValue=aoeStatus(pid);
      if (returnValue.length() > 0) {
        manager.unexportVolume(pid);
        int majorNumber=aoeVolumeInfo.getMajorNumber();
        int minorNumber=aoeVolumeInfo.getMinorNumber();
        File vbladePidFile=new File(EUCA_VAR_RUN_PATH + "/vblade-" + majorNumber+ minorNumber+ ".pid");
        if (vbladePidFile.exists()) {
          vbladePidFile.delete();
        }
        while (aoeStatus(pid).length() > 0) {
          LOG.info("Waiting for volume to be unexported...");
          try {
            Thread.sleep(300);
          }
 catch (          InterruptedException e) {
            LOG.error(e);
          }
        }
      }
    }
  }
 else   if (volumeInfo instanceof ISCSIVolumeInfo) {
    if (!(exportManager instanceof ISCSIManager)) {
      manager=new ISCSIManager();
    }
    ISCSIVolumeInfo iscsiVolumeInfo=(ISCSIVolumeInfo)volumeInfo;
    ((ISCSIManager)manager).unexportTarget(iscsiVolumeInfo.getTid(),iscsiVolumeInfo.getLun());
    iscsiVolumeInfo.setTid(-1);
  }
}
