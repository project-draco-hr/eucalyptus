{
  ListBucketResponseType reply=request.getReply();
  UserPrincipal requestUser=getRequestUser(request);
  OsgInternalS3Client internalS3Client=null;
  try {
    internalS3Client=getS3Client(requestUser);
    AmazonS3Client s3Client=internalS3Client.getS3Client();
    ListObjectsRequest listRequest=new ListObjectsRequest();
    listRequest.setBucketName(request.getBucket());
    listRequest.setDelimiter(Strings.isNullOrEmpty(request.getDelimiter()) ? null : request.getDelimiter());
    listRequest.setMarker(Strings.isNullOrEmpty(request.getMarker()) ? null : request.getMarker());
    listRequest.setMaxKeys((request.getMaxKeys() == null ? null : Integer.parseInt(request.getMaxKeys())));
    listRequest.setPrefix(Strings.isNullOrEmpty(request.getPrefix()) ? null : request.getPrefix());
    ObjectListing response=s3Client.listObjects(listRequest);
    reply.setName(request.getBucket());
    reply.setMaxKeys(response.getMaxKeys());
    reply.setMarker(response.getMarker() == null ? "" : response.getMarker());
    reply.setPrefix(response.getPrefix() == null ? "" : response.getPrefix());
    reply.setIsTruncated(response.isTruncated());
    reply.setNextMarker(response.getNextMarker());
    reply.setDelimiter(response.getDelimiter());
    if (reply.getContents() == null) {
      reply.setContents(new ArrayList<ListEntry>());
    }
    if (reply.getCommonPrefixesList() == null) {
      reply.setCommonPrefixesList(new ArrayList<CommonPrefixesEntry>());
    }
    for (    S3ObjectSummary obj : response.getObjectSummaries()) {
      reply.getContents().add(new ListEntry(obj.getKey(),DateFormatter.dateToHeaderFormattedString(obj.getLastModified()),obj.getETag(),obj.getSize(),getCanonicalUser(requestUser),obj.getStorageClass()));
    }
    if (response.getCommonPrefixes() != null && response.getCommonPrefixes().size() > 0) {
      reply.setCommonPrefixesList(new ArrayList<CommonPrefixesEntry>());
      for (      String s : response.getCommonPrefixes()) {
        reply.getCommonPrefixesList().add(new CommonPrefixesEntry(s));
      }
    }
    return reply;
  }
 catch (  AmazonServiceException e) {
    LOG.debug("Error from backend",e);
    throw S3ExceptionMapper.fromAWSJavaSDK(e);
  }
}
