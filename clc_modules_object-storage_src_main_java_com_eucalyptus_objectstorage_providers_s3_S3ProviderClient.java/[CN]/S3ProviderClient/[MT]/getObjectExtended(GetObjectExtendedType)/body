{
  User requestUser=getRequestUser(request);
  Boolean getMetaData=request.getGetMetaData();
  Boolean inlineData=request.getInlineData();
  Long byteRangeStart=request.getByteRangeStart();
  Long byteRangeEnd=request.getByteRangeEnd();
  Date ifModifiedSince=request.getIfModifiedSince();
  Date ifUnmodifiedSince=request.getIfUnmodifiedSince();
  String ifMatch=request.getIfMatch();
  String ifNoneMatch=request.getIfNoneMatch();
  GetObjectRequest getRequest=new GetObjectRequest(request.getBucket(),request.getKey());
  if (byteRangeStart == null) {
    byteRangeStart=0L;
  }
  if (byteRangeEnd != null) {
    getRequest.setRange(byteRangeStart,byteRangeEnd);
  }
  if (getMetaData != null) {
  }
  if (ifModifiedSince != null) {
    getRequest.setModifiedSinceConstraint(ifModifiedSince);
  }
  if (ifUnmodifiedSince != null) {
    getRequest.setUnmodifiedSinceConstraint(ifUnmodifiedSince);
  }
  if (ifMatch != null) {
    List matchList=new ArrayList();
    matchList.add(ifMatch);
    getRequest.setMatchingETagConstraints(matchList);
  }
  if (ifNoneMatch != null) {
    List nonMatchList=new ArrayList();
    nonMatchList.add(ifNoneMatch);
    getRequest.setNonmatchingETagConstraints(nonMatchList);
  }
  try {
    AmazonS3Client s3Client=this.getS3Client(requestUser,requestUser.getUserId());
    S3Object response=s3Client.getObject(getRequest);
    GetObjectExtendedResponseType reply=request.getReply();
    populateResponseMetadata(reply,response.getObjectMetadata());
    reply.setDataInputStream(response.getObjectContent());
    reply.setByteRangeStart(request.getByteRangeStart());
    reply.setByteRangeEnd(request.getByteRangeEnd());
    return reply;
  }
 catch (  AmazonServiceException e) {
    LOG.error("Error from backend",e);
    throw S3ExceptionMapper.fromAWSJavaSDK(e);
  }
}
