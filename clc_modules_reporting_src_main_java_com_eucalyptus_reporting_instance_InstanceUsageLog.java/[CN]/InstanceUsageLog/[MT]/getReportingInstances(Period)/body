{
  if (period == null)   throw new IllegalArgumentException("period must not be null");
  final List<ReportingInstance> results=new ArrayList<ReportingInstance>();
  log.debug(String.format("getPeriodInstanceUsages periodBeginMs:%d periodsEndMs:%d ",period.getBeginningMs(),period.getEndingMs()));
  EntityWrapper entityWrapper=EntityWrapper.get(InstanceAttributes.class);
  Session sess=null;
  try {
    sess=entityWrapper.getSession();
    Iterator iter=sess.createQuery("from InstanceAttributes, InstanceUsageSnapshot" + " where InstanceAttributes.uuid = InstanceUsageSnapshot.uuid" + " and InstanceUsageSnapshot.timestampMs > ?"+ " and InstanceUsageSnapshot.timestampMs < ?").setLong(0,period.getBeginningMs()).setLong(1,period.getEndingMs()).iterate();
    Map<String,ReportingInstanceImpl> reportingInstances=new HashMap<String,ReportingInstanceImpl>();
    while (iter.hasNext()) {
      Object[] row=(Object[])iter.next();
      InstanceAttributes insAtts=(InstanceAttributes)row[0];
      InstanceUsageSnapshot iu=(InstanceUsageSnapshot)row[1];
      UsageSnapshot uSnapshot=iu.getUsageSnapshot();
      String uuid=insAtts.getUuid();
      if (reportingInstances.containsKey(uuid)) {
        reportingInstances.get(uuid).addSnapshot(uSnapshot);
      }
 else {
        ReportingInstanceImpl repIns=new ReportingInstanceImpl(uuid,insAtts.getInstanceId(),insAtts.getInstanceType(),insAtts.getUserId(),insAtts.getClusterName(),insAtts.getAvailabilityZone());
        repIns.addSnapshot(uSnapshot);
        reportingInstances.put(uuid,repIns);
      }
    }
    results.addAll(reportingInstances.values());
    entityWrapper.commit();
  }
 catch (  Exception ex) {
    log.error(ex);
    entityWrapper.rollback();
  }
  return results.iterator();
}
