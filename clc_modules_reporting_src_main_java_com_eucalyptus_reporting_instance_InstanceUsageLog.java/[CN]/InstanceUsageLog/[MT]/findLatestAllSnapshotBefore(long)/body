{
  long foundTimestampMs=0l;
  EntityWrapper<InstanceUsageSnapshot> entityWrapper=null;
  try {
    for (double minsBefore=180; System.currentTimeMillis() - (long)(minsBefore * 60 * 1000) > 0; minsBefore=Math.pow(minsBefore,1.1)) {
      long queryStartMs=System.currentTimeMillis() - (long)(minsBefore * 60 * 1000);
      entityWrapper=EntityWrapper.get(InstanceUsageSnapshot.class);
      log.info("Searching for latest timestamp before beginning:" + queryStartMs);
      @SuppressWarnings("rawtypes") List iuses=entityWrapper.createQuery("from InstanceUsageSnapshot as ius" + " WHERE ius.timestampMs > ?" + " AND ius.timestampMs < ?").setLong(0,new Long(queryStartMs)).setLong(1,new Long(timestampMs)).list();
      for (      Object obj : iuses) {
        InstanceUsageSnapshot snapshot=(InstanceUsageSnapshot)obj;
        foundTimestampMs=snapshot.getTimestampMs();
      }
      entityWrapper.commit();
      if (foundTimestampMs != 0l)       break;
    }
    log.info("Found latest timestamp before beginning:" + foundTimestampMs);
  }
 catch (  Exception ex) {
    log.error(ex);
    if (entityWrapper != null)     entityWrapper.rollback();
    throw new RuntimeException(ex);
  }
  return foundTimestampMs;
}
