{
  long foundTimestampMs=0l;
  EntityWrapper<InstanceUsageSnapshot> entityWrapper=null;
  try {
    final long oneHourMs=60 * 60 * 1000;
    for (int i=2; (timestampMs - oneHourMs * (long)i) > 0; i=(int)Math.pow(i,2)) {
      entityWrapper=EntityWrapper.get(InstanceUsageSnapshot.class);
      long startingMs=timestampMs - (oneHourMs * i);
      log.info("Searching for latest timestamp before beginning:" + startingMs);
      @SuppressWarnings("rawtypes") Iterator iter=entityWrapper.createQuery("from InstanceUsageSnapshot as ius" + " WHERE ius.timestampMs > ?" + " AND ius.timestampMs < ?").setLong(0,new Long(startingMs)).setLong(1,new Long(timestampMs)).iterate();
      while (iter.hasNext()) {
        InstanceUsageSnapshot snapshot=(InstanceUsageSnapshot)iter.next();
        foundTimestampMs=snapshot.getTimestampMs();
      }
      entityWrapper.commit();
      if (foundTimestampMs != 0l)       break;
    }
    log.info("Found latest timestamp before beginning:" + foundTimestampMs);
  }
 catch (  Exception ex) {
    log.error(ex);
    if (entityWrapper != null)     entityWrapper.rollback();
    throw new RuntimeException(ex);
  }
  return foundTimestampMs;
}
