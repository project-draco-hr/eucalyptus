{
  log.info("GetUsageSummaryMap period:" + period);
  final Map<StorageSummaryKey,StorageUsageSummary> usageMap=new HashMap<StorageSummaryKey,StorageUsageSummary>();
  EntityWrapper<StorageUsageSnapshot> entityWrapper=EntityWrapper.get(StorageUsageSnapshot.class);
  try {
    Map<StorageSummaryKey,StorageDataAccumulator> dataAccumulatorMap=new HashMap<StorageSummaryKey,StorageDataAccumulator>();
    long latestSnapshotBeforeMs=findLatestAllSnapshotBefore(period.getBeginningMs());
    @SuppressWarnings("rawtypes") List list=entityWrapper.createQuery("from StorageUsageSnapshot as sus" + " WHERE sus.key.timestampMs > ?" + " AND sus.key.timestampMs < ?").setLong(0,new Long(latestSnapshotBeforeMs)).setLong(1,new Long(period.getEndingMs())).list();
    for (    Object obj : list) {
      StorageUsageSnapshot snapshot=(StorageUsageSnapshot)obj;
      StorageSnapshotKey snapshotKey=snapshot.getSnapshotKey();
      StorageSummaryKey summaryKey=new StorageSummaryKey(snapshotKey);
      if (snapshotKey.getTimestampMs() < period.getBeginningMs() || !dataAccumulatorMap.containsKey(summaryKey)) {
        StorageDataAccumulator accumulator=new StorageDataAccumulator(snapshotKey.getTimestampMs(),snapshot.getUsageData(),new StorageUsageSummary());
        dataAccumulatorMap.put(summaryKey,accumulator);
      }
 else {
        StorageDataAccumulator accumulator=dataAccumulatorMap.get(summaryKey);
        long beginningMs=Math.max(period.getBeginningMs(),accumulator.getLastTimestamp());
        long endingMs=snapshotKey.getTimestampMs() - 1;
        long durationSecs=(endingMs - beginningMs) / 1000;
        accumulator.accumulateUsage(durationSecs);
        accumulator.setLastTimestamp(snapshotKey.getTimestampMs());
        accumulator.setLastUsageData(snapshot.getUsageData());
        log.info(String.format("Accumulate usage, %d-%d, key:%s",beginningMs,endingMs,summaryKey));
      }
    }
    for (    StorageSummaryKey key : dataAccumulatorMap.keySet()) {
      StorageDataAccumulator accumulator=dataAccumulatorMap.get(key);
      long beginningMs=Math.max(period.getBeginningMs(),accumulator.getLastTimestamp());
      long endingMs=period.getEndingMs() - 1;
      long durationSecs=(endingMs - beginningMs) / 1000;
      accumulator.accumulateUsage(durationSecs);
      log.info(String.format("Accumulate endUsage, %d-%d, key:%s",beginningMs,endingMs,key));
      usageMap.put(key,accumulator.getCurrentSummary());
    }
    entityWrapper.commit();
  }
 catch (  Exception ex) {
    log.error(ex);
    entityWrapper.rollback();
    throw new RuntimeException(ex);
  }
  return usageMap;
}
