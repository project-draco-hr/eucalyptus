{
  log.info("LoadLastUsageData");
  final Map<StorageSummaryKey,StorageUsageData> usageMap=new HashMap<StorageSummaryKey,StorageUsageData>();
  EntityWrapper<StorageUsageSnapshot> entityWrapper=EntityWrapper.get(StorageUsageSnapshot.class);
  try {
    Long latestSnapshotBeforeMs=findLatestAllSnapshotBefore(System.currentTimeMillis());
    @SuppressWarnings("rawtypes") List list=entityWrapper.createQuery("from StorageUsageSnapshot as sus" + " WHERE sus.key.timestampMs > ?").setLong(0,(latestSnapshotBeforeMs != null ? latestSnapshotBeforeMs : 0l)).list();
    for (    Object obj : list) {
      StorageUsageSnapshot snapshot=(StorageUsageSnapshot)obj;
      StorageSnapshotKey snapshotKey=snapshot.getSnapshotKey();
      StorageSummaryKey summaryKey=new StorageSummaryKey(snapshotKey);
      usageMap.put(summaryKey,snapshot.getUsageData());
    }
    entityWrapper.commit();
  }
 catch (  Exception ex) {
    log.error(ex);
    entityWrapper.rollback();
    throw new RuntimeException(ex);
  }
  return usageMap;
}
