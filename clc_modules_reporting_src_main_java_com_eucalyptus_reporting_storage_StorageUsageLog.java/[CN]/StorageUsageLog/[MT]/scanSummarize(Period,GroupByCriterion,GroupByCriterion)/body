{
  final Map<String,Map<String,StorageUsageSummary>> results=new HashMap<String,Map<String,StorageUsageSummary>>();
  Iterator<StorageUsageSnapshot> iter=scanLog(period);
  while (iter.hasNext()) {
    StorageUsageSnapshot snapshot=iter.next();
    String outerCritVal=getAttributeValue(outerCriterion,snapshot.getSnapshotKey());
    Map<String,StorageUsageData> innerMap=null;
    if (results.containsKey(outerCritVal)) {
    }
 else {
      innerMap=new HashMap<String,StorageUsageData>();
    }
    String innerCritVal=getAttributeValue(innerCriterion,snapshot.getSnapshotKey());
    StorageUsageData data=null;
    if (innerMap.containsKey(innerCritVal)) {
      data=innerMap.get(innerCritVal);
    }
 else {
      data=new StorageUsageData();
      innerMap.put(innerCritVal,data);
    }
    data.sumFrom(snapshot.getUsageData());
  }
  return results;
}
