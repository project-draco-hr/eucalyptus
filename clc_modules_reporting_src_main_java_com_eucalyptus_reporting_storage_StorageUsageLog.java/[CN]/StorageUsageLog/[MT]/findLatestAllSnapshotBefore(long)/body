{
  Long foundTimestampMs=null;
  for (double minsBefore=180; System.currentTimeMillis() - (long)(minsBefore * 60 * 1000) > 0; minsBefore=Math.pow(minsBefore,1.1)) {
    long queryStartMs=System.currentTimeMillis() - (long)(minsBefore * 60 * 1000);
    EntityWrapper<StorageUsageSnapshot> entityWrapper=EntityWrapper.get(StorageUsageSnapshot.class);
    log.info("Searching for latest timestamp before beginning:" + queryStartMs);
    try {
      @SuppressWarnings("rawtypes") List list=entityWrapper.createQuery("from StorageUsageSnapshot as sus" + " WHERE sus.key.timestampMs > ?" + " AND sus.key.timestampMs < ?"+ " AND sus.allSnapshot = true").setLong(0,new Long(queryStartMs)).setLong(1,new Long(timestampMs)).list();
      for (      Object obj : list) {
        StorageUsageSnapshot snapshot=(StorageUsageSnapshot)obj;
        foundTimestampMs=snapshot.getSnapshotKey().getTimestampMs();
      }
      entityWrapper.commit();
    }
 catch (    Exception ex) {
      log.error(ex);
      entityWrapper.rollback();
      throw new RuntimeException(ex);
    }
    if (foundTimestampMs != null)     break;
  }
  log.info("Found latest timestamp before beginning:" + foundTimestampMs);
  return foundTimestampMs;
}
