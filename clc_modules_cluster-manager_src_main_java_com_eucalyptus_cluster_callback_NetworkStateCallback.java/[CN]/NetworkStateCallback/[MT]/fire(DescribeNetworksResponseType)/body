{
  for (  Network net : Networks.getInstance().listValues()) {
    net.trim(reply.getAddrsPerNet());
  }
  this.getSubject().getState().setAddressCapacity(reply.getAddrsPerNet());
  this.getSubject().getState().setMode(reply.getUseVlans());
  for (  NetworkInfoType netInfo : reply.getActiveNetworks()) {
    try {
      UserFullName userFn=UserFullName.getInstance(netInfo.getUserId());
      Network net=null;
      try {
        net=Networks.getInstance().lookup(netInfo.getUserId() + "-" + netInfo.getNetworkName());
        if (net.getVlan().equals(Integer.valueOf(0)) && net.initVlan(netInfo.getVlan())) {
          NetworkToken netToken=new NetworkToken(this.getSubject().getName(),userFn,netInfo.getNetworkName(),netInfo.getUuid(),netInfo.getVlan());
          netToken=net.addTokenIfAbsent(netToken);
        }
      }
 catch (      NoSuchElementException e1) {
        net=new Network(userFn,netInfo.getNetworkName(),netInfo.getUuid());
        if (net.getVlan().equals(Integer.valueOf(0)) && net.initVlan(netInfo.getVlan())) {
          NetworkToken netToken=new NetworkToken(this.getSubject().getName(),userFn,netInfo.getNetworkName(),netInfo.getUuid(),netInfo.getVlan());
          netToken=net.addTokenIfAbsent(netToken);
        }
      }
    }
 catch (    Exception ex) {
      LOG.error(ex,ex);
    }
  }
  for (  Network net : Networks.getInstance().listValues(Networks.State.ACTIVE)) {
    net.trim(reply.getAddrsPerNet());
  }
  List<Cluster> ccList=Clusters.getInstance().listValues();
  int ccNum=ccList.size();
  for (  Cluster c : ccList) {
    ccNum-=c.getState().getMode();
  }
}
