{
  String message=getMessageString(buffer);
  String[] parts=message.split(boundary + PART_LINE_DELIMITER);
  int currentOffset=0;
  int boundarySize=boundary.length() + PART_LINE_DELIMITER.length();
  for (  String part : parts) {
    if (part.length() == 0) {
      currentOffset+=part.length() + boundarySize;
      continue;
    }
    String[] partPieces=part.split(PART_HEADER_BOUNDARY);
    if (partPieces.length != 2) {
      throw new MalformedPOSTRequestException("Invalid form part: " + part);
    }
    String partHeader=partPieces[0];
    String partContent=partPieces[1];
    Map<String,String> keyMap=parseFormPartHeaders(partHeader);
    String key=keyMap.get("name");
    if (Strings.isNullOrEmpty(key)) {
      throw new MalformedPOSTRequestException("Invalid part name null: " + partHeader);
    }
 else     if (Strings.isNullOrEmpty(partContent)) {
      throw new MalformedPOSTRequestException("Empty part content");
    }
    if (ObjectStorageProperties.FormField.file.toString().equals(key)) {
      formFields.put(key,keyMap.get("filename"));
      String contentType=keyMap.get(HttpHeaders.Names.CONTENT_TYPE);
      formFields.put(HttpHeaders.Names.CONTENT_TYPE,contentType);
      getFirstChunk(formFields,ChannelBuffers.wrappedBuffer(part.getBytes("UTF-8")),currentOffset,fullContentLength,boundary);
    }
 else {
      formFields.put(key,partContent.trim());
    }
    currentOffset+=part.length() + boundarySize;
  }
}
