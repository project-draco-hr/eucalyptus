{
switch (type) {
case TEXT:
    return new HasValueWidget(){
      private TextBox input=new TextBox();
      @Override public Widget getWidget(){
        return input;
      }
      @Override public String getValue(){
        return this.input.getValue();
      }
    }
;
case TEXTAREA:
  return new HasValueWidget(){
    private TextArea input=getTextArea();
    protected final TextArea getTextArea(){
      TextArea w=new TextArea();
      w.setVisibleLines(TEXT_AREA_LINES);
      return w;
    }
    @Override public Widget getWidget(){
      return input;
    }
    @Override public String getValue(){
      return this.input.getValue();
    }
  }
;
case PASSWORD:
return new HasValueWidget(){
  private PasswordTextBox input=new PasswordTextBox();
  @Override public Widget getWidget(){
    return input;
  }
  @Override public String getValue(){
    return this.input.getValue();
  }
}
;
case NEWPASSWORD:
return new HasValueWidget(){
private PasswordTextBox input=getPasswordInput();
protected final PasswordTextBox getPasswordInput(){
  final PasswordTextBox box=new PasswordTextBox();
  box.addKeyPressHandler(new KeyPressHandler(){
    @Override public void onKeyPress(    KeyPressEvent arg0){
      String strength=ValueChecker.WEAK;
      try {
        strength=checker.check(box.getValue());
      }
 catch (      InvalidValueException e) {
      }
      LOG.log(Level.INFO,"Password strength: " + strength);
      box.setStyleName(getPasswordStrengthStyleName(strength));
    }
  }
);
  return box;
}
@Override public Widget getWidget(){
  return input;
}
@Override public String getValue(){
  return this.input.getValue();
}
}
;
default :
return null;
}
}
