{
  try {
    final Iterable<RegionInfo> regionInfos=regionConfigurationManager.getRegionInfos();
    final List<Either<AuthException,R>> regionResults=Lists.newArrayList();
    regionResults.add(invoker.apply(localProvider));
    if (!Iterables.isEmpty(regionInfos)) {
      withRegions:       for (      final RegionInfo regionInfo : regionInfos) {
        if (!RegionConfigurations.getRegionName().asSet().contains(regionInfo.getName())) {
          for (          final RegionInfo.RegionService service : regionInfo.getServices()) {
            if ("identity".equals(service.getType())) {
              final IdentityProvider remoteProvider=new RemoteIdentityProvider(service.getEndpoints());
              regionResults.add(invoker.apply(remoteProvider));
              continue withRegions;
            }
          }
        }
      }
    }
    final Iterable<R> successResults=Optional.presentInstances(Iterables.transform(regionResults,Either.<AuthException,R>rightOption()));
    if (Iterables.size(successResults) == 1) {
      return Iterables.getOnlyElement(successResults);
    }
    throw Iterables.get(Optional.presentInstances(Iterables.transform(regionResults,Either.<AuthException,R>leftOption())),0);
  }
 catch (  final RuntimeException e) {
    Exceptions.findAndRethrow(e,AuthException.class);
    throw e;
  }
}
