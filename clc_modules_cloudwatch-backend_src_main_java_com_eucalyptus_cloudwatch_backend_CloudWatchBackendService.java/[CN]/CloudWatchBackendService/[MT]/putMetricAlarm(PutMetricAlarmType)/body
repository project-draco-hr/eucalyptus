{
  PutMetricAlarmResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  try {
    checkActionPermission(CloudWatchPolicySpec.CLOUDWATCH_PUTMETRICALARM,ctx);
    if (CloudWatchConfigProperties.isDisabledCloudWatchService()) {
      faultDisableCloudWatchServiceIfNecessary();
      throw new ServiceDisabledException("Service Disabled");
    }
    final OwnerFullName ownerFullName=ctx.getUserFullName();
    final String accountId=ownerFullName.getAccountNumber();
    final Boolean actionsEnabled=CloudWatchBackendServiceFieldValidator.validateActionsEnabled(request.getActionsEnabled(),true);
    Set<String> seenDimensionNames=Sets.newHashSet();
    if (request.getDimensions() != null && request.getDimensions().getMember() != null) {
      for (      Dimension dimension : request.getDimensions().getMember()) {
        if (seenDimensionNames.contains(dimension.getName())) {
          throw new InvalidParameterValueException("Dimension names must be unique.");
        }
 else {
          seenDimensionNames.add(dimension.getName());
        }
      }
    }
    final Map<String,String> dimensionMap=TransformationFunctions.DimensionsToMap.INSTANCE.apply(CloudWatchBackendServiceFieldValidator.validateDimensions(request.getDimensions()));
    final Collection<String> alarmActions=CloudWatchBackendServiceFieldValidator.validateActions(request.getAlarmActions(),dimensionMap,"AlarmActions");
    final String alarmDescription=CloudWatchBackendServiceFieldValidator.validateAlarmDescription(request.getAlarmDescription());
    final String alarmName=CloudWatchBackendServiceFieldValidator.validateAlarmName(request.getAlarmName(),true);
    final ComparisonOperator comparisonOperator=CloudWatchBackendServiceFieldValidator.validateComparisonOperator(request.getComparisonOperator(),true);
    Integer evaluationPeriods=CloudWatchBackendServiceFieldValidator.validateEvaluationPeriods(request.getEvaluationPeriods(),true);
    final Integer period=CloudWatchBackendServiceFieldValidator.validatePeriod(request.getPeriod(),true);
    CloudWatchBackendServiceFieldValidator.validatePeriodAndEvaluationPeriodsNotAcrossDays(period,evaluationPeriods);
    final Collection<String> insufficientDataActions=CloudWatchBackendServiceFieldValidator.validateActions(request.getInsufficientDataActions(),dimensionMap,"InsufficientDataActions");
    final String metricName=CloudWatchBackendServiceFieldValidator.validateMetricName(request.getMetricName(),true);
    final String namespace=CloudWatchBackendServiceFieldValidator.validateNamespace(request.getNamespace(),true);
    final Collection<String> okActions=CloudWatchBackendServiceFieldValidator.validateActions(request.getOkActions(),dimensionMap,"OKActions");
    final Statistic statistic=CloudWatchBackendServiceFieldValidator.validateStatistic(request.getStatistic(),true);
    final Double threshold=CloudWatchBackendServiceFieldValidator.validateThreshold(request.getThreshold(),true);
    final Units unit=CloudWatchBackendServiceFieldValidator.validateUnits(request.getUnit(),true);
    if (AlarmManager.countMetricAlarms(accountId) >= 5000) {
      throw new LimitExceededException("The maximum limit of 5000 alarms would be exceeded.");
    }
    AlarmManager.putMetricAlarm(accountId,actionsEnabled,alarmActions,alarmDescription,alarmName,comparisonOperator,dimensionMap,evaluationPeriods,insufficientDataActions,metricName,CloudWatchBackendServiceFieldValidator.getMetricTypeFromNamespace(namespace),namespace,okActions,period,statistic,threshold,unit);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}
