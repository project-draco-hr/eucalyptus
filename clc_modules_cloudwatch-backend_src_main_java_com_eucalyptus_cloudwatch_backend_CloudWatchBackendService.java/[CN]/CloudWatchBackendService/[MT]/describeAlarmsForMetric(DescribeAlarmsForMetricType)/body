{
  final DescribeAlarmsForMetricResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  try {
    final OwnerFullName ownerFullName=ctx.getUserFullName();
    final String accountId=ownerFullName.getAccountNumber();
    final Map<String,String> dimensionMap=TransformationFunctions.DimensionsToMap.INSTANCE.apply(validateDimensions(request.getDimensions()));
    final String metricName=validateMetricName(request.getMetricName(),true);
    final String namespace=validateNamespace(request.getNamespace(),true);
    final Integer period=validatePeriod(request.getPeriod(),false);
    final Statistic statistic=validateStatistic(request.getStatistic(),false);
    final Units unit=validateUnits(request.getUnit(),true);
    final Collection<AlarmEntity> results=AlarmManager.describeAlarmsForMetric(accountId,dimensionMap,metricName,namespace,period,statistic,unit,RestrictedTypes.filteringFor(CloudWatchMetadata.AlarmMetadata.class).byPrivileges().buildPredicate());
    final MetricAlarms metricAlarms=new MetricAlarms();
    metricAlarms.setMember(Lists.newArrayList(Collections2.<AlarmEntity,MetricAlarm>transform(results,TransformationFunctions.AlarmEntityToMetricAlarm.INSTANCE)));
    reply.getDescribeAlarmsForMetricResult().setMetricAlarms(metricAlarms);
  }
 catch (  Exception ex) {
    handleException(ex);
  }
  return reply;
}
