{
  Preconditions.checkNotNull(accessKeyId,"Access key identifier is required");
  Preconditions.checkNotNull(token,"Token is required");
  final EncryptedSecurityToken encryptedToken;
  try {
    encryptedToken=EncryptedSecurityToken.decrypt(accessKeyId,getEncryptionKey(accessKeyId),token);
  }
 catch (  GeneralSecurityException e) {
    log.debug(e,e);
    throw new AuthException("Invalid security token");
  }
  final String originatingAccessKeyId=encryptedToken.getOriginatingAccessKeyId();
  final boolean active;
  final String secretKey;
  final User user;
  if (originatingAccessKeyId != null) {
    final AccessKey key=lookupAccessKeyById(originatingAccessKeyId);
    active=key.isActive();
    secretKey=encryptedToken.getSecretKey(key.getSecretKey());
    user=key.getUser();
  }
 else {
    user=lookupUserById(encryptedToken.getUserId());
    active=user.isEnabled();
    secretKey=encryptedToken.getSecretKey(Objects.firstNonNull(user.getToken(),""));
  }
  return new AccessKey(){
    @Override public Boolean isActive(){
      return active && encryptedToken.isValid();
    }
    @Override public String getAccessKey(){
      return encryptedToken.getAccessKeyId();
    }
    @Override public String getSecretKey(){
      return secretKey;
    }
    @Override public Date getCreateDate(){
      return new Date(encryptedToken.getCreated());
    }
    @Override public User getUser() throws AuthException {
      return user;
    }
    @Override public void setActive(    final Boolean active) throws AuthException {
    }
    @Override public void setCreateDate(    final Date createDate) throws AuthException {
    }
  }
;
}
