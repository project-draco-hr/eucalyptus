{
  Preconditions.checkNotNull(user,"User is required");
  final AccessKey key=accessKey != null ? accessKey : Iterables.find(Objects.firstNonNull(user.getKeys(),Collections.<AccessKey>emptyList()),AccessKeys.isActive(),null);
  if (key == null)   throw new AuthException("Key not found for user");
  final long restrictedDurationMillis=restrictDuration(36,durationTruncationSeconds,durationSeconds);
  if (!key.getUser().getUserId().equals(user.getUserId())) {
    throw new AuthException("Key not valid for user");
  }
  final EncryptedSecurityToken encryptedToken=new EncryptedSecurityToken(key.getAccessKey(),user.getUserId(),getCurrentTimeMillis(),restrictedDurationMillis);
  return new SecurityToken(encryptedToken.getAccessKeyId(),encryptedToken.getSecretKey(key.getSecretKey()),encryptedToken.encrypt(getEncryptionKey(encryptedToken.getAccessKeyId())),encryptedToken.getExpires());
}
