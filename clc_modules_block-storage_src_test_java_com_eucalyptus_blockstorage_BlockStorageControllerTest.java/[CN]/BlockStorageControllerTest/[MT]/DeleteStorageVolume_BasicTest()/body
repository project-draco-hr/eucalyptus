{
  VolumeInfo volOne=new VolumeInfo();
  volOne.setStatus(StorageProperties.Status.available.toString());
  volOne.setSize(new Integer(1));
  volOne.setUserName("unittestuser0");
  volOne.setVolumeId("vol-0000");
  volOne.setSnapshotId("snap-0000");
  volOne.setCreateTime(new Date());
  volOne.setZone("eucalyptus");
  try (TransactionResource tran=Entities.transactionFor(VolumeInfo.class)){
    Entities.persist(volOne);
    tran.commit();
  }
   final LogicalStorageManager storageManager=context.mock(LogicalStorageManager.class);
  context.checking(new Expectations(){
{
    }
  }
);
  StorageProperties.enableStorage=true;
  BlockStorageController bsc=new BlockStorageController(storageManager);
  DeleteStorageVolumeType request=new DeleteStorageVolumeType();
  request.setVolumeId("vol-0000");
  DeleteStorageVolumeResponseType response=bsc.DeleteStorageVolume(request);
  VolumeInfo retrieved;
  try (TransactionResource tran=Entities.transactionFor(VolumeInfo.class)){
    retrieved=Entities.uniqueResult(new VolumeInfo("vol-0000"));
    tran.commit();
  }
   assertTrue("expected to find volume after execution","vol-0000".equals(retrieved.getVolumeId()));
  assertTrue("expected retrieved volume to be 'deleting'",StorageProperties.Status.deleting.toString().equals(retrieved.getStatus()));
}
