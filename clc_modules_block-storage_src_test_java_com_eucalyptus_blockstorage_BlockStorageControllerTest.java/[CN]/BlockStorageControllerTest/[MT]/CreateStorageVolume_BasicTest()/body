{
  StorageProperties.enableStorage=true;
  StorageProperties.shouldEnforceUsageLimits=true;
  final LogicalStorageManager storageManager=context.mock(LogicalStorageManager.class);
  context.checking(new Expectations(){
{
    }
  }
);
  final List<BlockStorageController.VolumeTask> holder=Lists.newArrayList();
  BlockStorageController bsc=new BlockStorageController(storageManager);
  bsc.volumeService=new VolumeService(){
    @Override public void add(    BlockStorageController.VolumeTask creator){
      holder.add(creator);
    }
  }
;
  CreateStorageVolumeType request=new CreateStorageVolumeType();
  request.setVolumeId("vol-" + Hashes.getRandom(10));
  request.setSize("5");
  CreateStorageVolumeResponseType response=bsc.CreateStorageVolume(request);
  assertTrue("expected to get a volume id",response.getVolumeId() != null && !"".equals(response.getVolumeId()));
  assertTrue("expected size to match the request, but was - '" + response.getSize() + "'",response.getSize() != null && "5".equals(response.getSize()));
  assertTrue("expected status to be 'creating' but was - " + response.getStatus(),response.getStatus() != null && StorageProperties.Status.creating.toString().equals(response.getStatus()));
  assertTrue("expected the controller to submit the task ",holder.size() > 0 && holder.get(0) instanceof BlockStorageController.VolumeCreator);
}
