{
  final DescribeInstanceStatusResponseType reply=(DescribeInstanceStatusResponseType)msg.getReply();
  final Context ctx=Contexts.lookup();
  final boolean showAll=msg.getInstancesSet().remove("verbose");
  final boolean includeAllInstances=Objects.firstNonNull(msg.getIncludeAllInstances(),Boolean.FALSE);
  final Filter filter=Filters.generateFor(msg.getFilterSet(),VmInstance.class,"status").withOptionalInternalFilter("instance-id",msg.getInstancesSet()).generate();
  final Predicate<? super VmInstance> requestedAndAccessible=CloudMetadatas.filteringFor(VmInstance.class).byId(msg.getInstancesSet()).byPredicate(includeAllInstances ? Predicates.<VmInstance>alwaysTrue() : VmState.RUNNING).byPredicate(filter.asPredicate()).byPrivileges().buildPredicate();
  OwnerFullName ownerFullName=(ctx.hasAdministrativePrivileges() && showAll) ? null : ctx.getUserFullName().asAccountFullName();
  try {
    final List<VmInstance> instances=VmInstances.list(ownerFullName,filter.asCriterion(),filter.getAliases(),requestedAndAccessible);
    Iterables.addAll(reply.getInstanceStatusSet().getItem(),Iterables.transform(instances,TypeMappers.lookup(VmInstance.class,InstanceStatusItemType.class)));
  }
 catch (  final Exception e) {
    LOG.error(e);
    LOG.debug(e,e);
    throw new EucalyptusCloudException(e.getMessage());
  }
  return reply;
}
