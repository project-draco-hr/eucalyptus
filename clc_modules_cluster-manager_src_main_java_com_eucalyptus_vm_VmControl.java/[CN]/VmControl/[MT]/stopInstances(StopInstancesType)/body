{
  final StopInstancesResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    final List<TerminateInstancesItemType> results=reply.getInstancesSet();
    Predicate<String> stopPredicate=new Predicate<String>(){
      @Override public boolean apply(      final String instanceId){
        try {
          final VmInstance v=VmInstances.lookup(instanceId);
          if (RestrictedTypes.filterPrivileged().apply(v)) {
            if (!MigrationState.isMigrating(v) && v.getBootRecord().getMachine() instanceof BlockStorageImageInfo) {
              final int oldCode=v.getState().getCode(), newCode=VmState.STOPPING.getCode();
              final String oldState=v.getState().getName(), newState=VmState.STOPPING.getName();
              TerminateInstancesItemType termInfo=new TerminateInstancesItemType(v.getInstanceId(),oldCode,oldState,newCode,newState);
              if (!results.contains(termInfo)) {
                results.add(termInfo);
              }
              VmInstances.stopped(v);
            }
          }
          MessageContexts.remember(instanceId,request.getClass(),request);
          return true;
        }
 catch (        final NoSuchElementException e) {
          try {
            VmInstances.stopped(instanceId);
            return true;
          }
 catch (          final NoSuchElementException e1) {
            return true;
          }
catch (          TransactionException ex) {
            Logs.extreme().error(ex,ex);
            return true;
          }
        }
catch (        Exception ex) {
          LOG.error(ex);
          Logs.extreme().error(ex,ex);
          throw Exceptions.toUndeclared(ex);
        }
      }
    }
;
    final List<String> identifiers=normalizeIdentifiers(request.getInstancesSet());
    for (    final String instanceId : identifiers) {
      try {
        final VmInstance vm=VmInstances.lookup(instanceId);
        if (!vm.isBlockStorage())         throw new ClientComputeException("UnsupportedOperation",String.format("The instance '%s' does not have an 'ebs' root device type and cannot be stopped.",instanceId));
      }
 catch (      final TerminatedInstanceException ex) {
        throw new ClientComputeException("IncorrectInstanceState",String.format("This instance '%s' is not in a state from which it can be stopped.",instanceId));
      }
catch (      final NoSuchElementException ex) {
        throw new ClientComputeException("InvalidInstanceID.NotFound",String.format("The instance ID '%s' does not exist",instanceId));
      }
catch (      final EucalyptusCloudException ex) {
        throw ex;
      }
    }
    for (    final String instanceId : identifiers) {
      final VmInstance vm=VmInstances.lookup(instanceId);
      if (ImageMetadata.Platform.windows.name().equals(vm.getPlatform())) {
        try (final TransactionResource db=Entities.transactionFor(VmInstance.class)){
          try {
            final VmInstance updatedVm=Entities.uniqueResult(vm);
            updatedVm.updatePasswordData(null);
            Entities.persist(updatedVm);
            db.commit();
          }
 catch (          final Exception ex) {
            throw new EucalyptusCloudException("Failed to erase Windows password");
          }
        }
       }
    }
    Predicate<String> stopTx=Entities.asTransaction(VmInstance.class,stopPredicate);
    Iterables.all(identifiers,stopTx);
    reply.set_return(!reply.getInstancesSet().isEmpty());
    return reply;
  }
 catch (  final EucalyptusCloudException ex) {
    throw ex;
  }
catch (  final Throwable e) {
    LOG.error(e);
    LOG.debug(e,e);
    throw new EucalyptusCloudException(e.getMessage());
  }
}
