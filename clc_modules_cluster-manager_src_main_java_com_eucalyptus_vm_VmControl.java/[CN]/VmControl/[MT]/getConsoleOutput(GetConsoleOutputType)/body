{
  LOG.debug(request.toSimpleString());
  final String instanceId=normalizeIdentifier(request.getInstanceId());
  VmInstance v;
  try {
    v=VmInstances.lookup(instanceId);
  }
 catch (  final NoSuchElementException ex) {
    throw new ClientComputeException("InvalidInstanceID.NotFound","The instance ID '" + instanceId + "' does not exist");
  }
  if (!RestrictedTypes.filterPrivileged().apply(v)) {
    throw new EucalyptusCloudException("Permission denied for vm: " + instanceId);
  }
 else   if (!VmState.RUNNING.apply(v)) {
    throw new EucalyptusCloudException("Instance " + instanceId + " is not in a running state.");
  }
 else {
    Cluster cluster;
    try {
      ServiceConfiguration ccConfig=Topology.lookup(ClusterController.class,v.lookupPartition());
      cluster=Clusters.lookup(ccConfig);
    }
 catch (    final NoSuchElementException e1) {
      throw new EucalyptusCloudException("Failed to find cluster info for '" + v.getPartition() + "' related to vm: "+ instanceId);
    }
    try {
      final GetConsoleOutputResponseType response=AsyncRequests.sendSync(cluster.getConfiguration(),new GetConsoleOutputType(instanceId));
      GetConsoleOutputResponseType reply=request.getReply();
      reply.setInstanceId(instanceId);
      reply.setTimestamp(response.getTimestamp());
      reply.setOutput(response.getOutput());
      LOG.debug(reply.toSimpleString());
      return reply;
    }
 catch (    Exception e) {
      LOG.error(e,e);
      throw new ComputeException("InternalError","Error processing request: " + e.getMessage());
    }
  }
}
