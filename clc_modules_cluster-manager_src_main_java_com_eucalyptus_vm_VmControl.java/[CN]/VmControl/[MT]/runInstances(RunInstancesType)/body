{
  Allocation allocInfo=Allocations.begin(request);
  try {
    Predicates.and(VerifyMetadata.get(),AdmissionControl.get()).apply(allocInfo);
  }
 catch (  Exception ex1) {
    LOG.trace(ex1,ex1);
  }
  RunInstancesResponseType reply=allocInfo.getRequest().getReply();
  List<String> networkNames=Lists.transform(allocInfo.getNetworkGroups(),new Function<NetworkGroup,String>(){
    @Override public String apply(    NetworkGroup arg0){
      return arg0.getDisplayName();
    }
  }
);
  ReservationInfoType reservation=new ReservationInfoType(allocInfo.getReservationId(),allocInfo.getOwnerFullName().getAccountNumber(),Lists.newArrayList(networkNames));
  EntityTransaction db=Entities.get(VmInstance.class);
  try {
    allocInfo.commit();
    for (    ResourceToken allocToken : allocInfo.getAllocationTokens()) {
      VmInstance entity=Entities.merge(allocToken.getVmInstance());
      reservation.getInstancesSet().add(VmInstances.transform(entity));
    }
    db.commit();
  }
 catch (  Exception ex) {
    Logs.exhaust().error(ex,ex);
    db.rollback();
    allocInfo.abort();
    throw Exceptions.toUndeclared(ex);
  }
  ClusterAllocator.get().apply(allocInfo);
  reply.setRsvInfo(reservation);
  return reply;
}
