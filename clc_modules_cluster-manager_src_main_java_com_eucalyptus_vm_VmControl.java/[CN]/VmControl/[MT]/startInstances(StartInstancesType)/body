{
  Context ctx=Contexts.lookup();
  final StartInstancesResponseType reply=request.getReply();
  for (  String instanceId : request.getInstancesSet()) {
    EntityTransaction db=Entities.get(VmInstance.class);
    try {
      final VmInstance vm=RestrictedTypes.doPrivileged(instanceId,VmInstance.class);
      if (!VmState.STOPPED.apply(vm))       continue;
      try {
        RunInstancesType runRequest=new RunInstancesType(){
{
            this.setMinCount(1);
            this.setMaxCount(1);
            this.setImageId(vm.getImageId());
            this.setAvailabilityZone(vm.getPartition());
            this.getGroupSet().addAll(vm.getNetworkNames());
            this.setInstanceType(vm.getVmType().getName());
          }
        }
;
        Allocation allocInfo=VerifyMetadata.handle(runRequest);
        allocInfo=AdmissionControl.handle(allocInfo);
        final int oldCode=vm.getState().getCode(), newCode=VmState.PENDING.getCode();
        final String oldState=vm.getState().getName(), newState=VmState.PENDING.getName();
        reply.getInstancesSet().add(new TerminateInstancesItemType(vm.getInstanceId(),oldCode,oldState,newCode,newState));
      }
 catch (      MetadataException ex1) {
        LOG.error(ex1,ex1);
      }
      db.commit();
    }
 catch (    Exception ex) {
      Logs.exhaust().error(ex,ex);
      db.rollback();
    }
  }
  return reply;
}
