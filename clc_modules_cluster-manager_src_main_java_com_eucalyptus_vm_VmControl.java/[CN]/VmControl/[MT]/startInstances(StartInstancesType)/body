{
  final StartInstancesResponseType reply=request.getReply();
  for (  String instanceId : request.getInstancesSet()) {
    final EntityTransaction db=Entities.get(VmInstance.class);
    try {
      final VmInstance vm=RestrictedTypes.doPrivileged(instanceId,VmInstance.class);
      if (VmState.STOPPED.equals(vm.getState())) {
        Allocation allocInfo=Allocations.start(vm);
        RunHelpers.getRunHelper().prepareAllocation(vm,allocInfo);
        try {
          AdmissionControl.run().apply(allocInfo);
          for (          final ResourceToken resourceToken : allocInfo.getAllocationTokens()) {
            RunHelpers.getRunHelper().startVmInstance(resourceToken,vm);
          }
          final int oldCode=vm.getState().getCode();
          final int newCode=VmState.PENDING.getCode();
          final String oldState=vm.getState().getName();
          final String newState=VmState.PENDING.getName();
          vm.setState(VmState.PENDING);
          db.commit();
          ClusterAllocator.get().apply(allocInfo);
          reply.getInstancesSet().add(new TerminateInstancesItemType(vm.getInstanceId(),oldCode,oldState,newCode,newState));
        }
 catch (        Exception ex) {
          db.rollback();
          allocInfo.abort();
          throw ex;
        }
      }
    }
 catch (    Exception ex1) {
      LOG.trace(ex1,ex1);
      throw ex1;
    }
 finally {
      if (db.isActive())       db.rollback();
    }
  }
  return reply;
}
