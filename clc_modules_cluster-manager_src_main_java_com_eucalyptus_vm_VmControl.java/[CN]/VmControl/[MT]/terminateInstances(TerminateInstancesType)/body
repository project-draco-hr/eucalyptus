{
  final TerminateInstancesResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    final List<TerminateInstancesItemType> results=reply.getInstancesSet();
    Iterables.all(request.getInstancesSet(),new Predicate<String>(){
      @Override public boolean apply(      final String instanceId){
        EntityTransaction db=Entities.get(VmInstance.class);
        try {
          try {
            try {
              VmInstance vm=RestrictedTypes.doPrivileged(instanceId,VmInstance.Lookup.INSTANCE);
              if (VmStateSet.RUN.contains(vm.getRuntimeState())) {
                final int oldCode=vm.getRuntimeState().getCode(), newCode=VmState.SHUTTING_DOWN.getCode();
                final String oldState=vm.getRuntimeState().getName(), newState=VmState.SHUTTING_DOWN.getName();
                vm.setState(VmState.SHUTTING_DOWN,Reason.USER_TERMINATED);
                results.add(new TerminateInstancesItemType(vm.getInstanceId(),oldCode,oldState,newCode,newState));
              }
            }
 catch (            NoSuchElementException ex) {
              VmInstance vm=RestrictedTypes.doPrivileged(instanceId,VmInstance.Lookup.TERMINATED);
              final int oldCode=vm.getRuntimeState().getCode(), newCode=VmState.SHUTTING_DOWN.getCode();
              final String oldState=vm.getRuntimeState().getName(), newState=VmState.SHUTTING_DOWN.getName();
              VmInstance.Transitions.DEREGISTER.apply(vm);
              results.add(new TerminateInstancesItemType(vm.getInstanceId(),oldCode,oldState,newCode,newState));
            }
            db.commit();
            return true;
          }
 catch (          final NoSuchElementException e) {
            db.commit();
            return false;
          }
        }
 catch (        AuthException ex) {
          db.rollback();
          throw new AccessControlException("Not authorized to terminate instance: " + instanceId + " because of: "+ ex.getMessage());
        }
catch (        IllegalContextAccessException ex) {
          db.rollback();
          throw new RuntimeException("Failed to terminate instance: " + instanceId + " becuase of: "+ ex.getMessage(),ex);
        }
catch (        PersistenceException ex) {
          db.rollback();
          throw new RuntimeException("Failed to terminate instance: " + instanceId + " becuase of: "+ ex.getMessage(),ex);
        }
catch (        Exception ex) {
          Logs.exhaust().error(ex,ex);
          db.rollback();
          throw new RuntimeException("Failed to terminate instance: " + instanceId + " becuase of: "+ ex.getMessage(),ex);
        }
      }
    }
);
    reply.set_return(!reply.getInstancesSet().isEmpty());
    return reply;
  }
 catch (  final Throwable e) {
    LOG.error(e);
    LOG.debug(e,e);
    throw new EucalyptusCloudException(e.getMessage());
  }
}
