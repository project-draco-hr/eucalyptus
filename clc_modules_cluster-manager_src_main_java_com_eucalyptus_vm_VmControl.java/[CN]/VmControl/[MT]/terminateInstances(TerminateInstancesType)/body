{
  final TerminateInstancesResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    final List<TerminateInstancesItemType> results=reply.getInstancesSet();
    Function<String,TerminateInstancesItemType> terminateFunction=new Function<String,TerminateInstancesItemType>(){
      @Override public TerminateInstancesItemType apply(      final String instanceId){
        String oldState=null, newState=null;
        int oldCode=0, newCode=0;
        TerminateInstancesItemType result=null;
        try {
          VmInstance vm=RestrictedTypes.doPrivileged(instanceId,VmInstance.class);
          if (MigrationState.isMigrating(vm)) {
            throw Exceptions.toUndeclared("Cannot terminate an instance which is currently migrating: " + vm.getInstanceId() + " "+ vm.getMigrationTask());
          }
          oldCode=vm.getState().getCode();
          oldState=vm.getState().getName();
          if (VmState.STOPPED.apply(vm)) {
            newCode=VmState.TERMINATED.getCode();
            newState=VmState.TERMINATED.getName();
            VmInstances.terminated(vm);
          }
 else           if (VmStateSet.RUN.apply(vm)) {
            newCode=VmState.SHUTTING_DOWN.getCode();
            newState=VmState.SHUTTING_DOWN.getName();
            VmInstances.shutDown(vm);
          }
 else           if (VmState.SHUTTING_DOWN.apply(vm)) {
            newCode=VmState.SHUTTING_DOWN.getCode();
            newState=VmState.SHUTTING_DOWN.getName();
          }
 else           if (VmState.TERMINATED.apply(vm)) {
            oldCode=newCode=VmState.TERMINATED.getCode();
            oldState=newState=VmState.TERMINATED.getName();
            VmInstances.delete(vm);
          }
          result=new TerminateInstancesItemType(instanceId,oldCode,oldState,newCode,newState);
        }
 catch (        final TerminatedInstanceException e) {
          oldCode=newCode=VmState.TERMINATED.getCode();
          oldState=newState=VmState.TERMINATED.getName();
          VmInstances.delete(instanceId);
          result=new TerminateInstancesItemType(instanceId,oldCode,oldState,newCode,newState);
        }
catch (        final NoSuchElementException e) {
          LOG.debug("Ignoring terminate request for non-existant instance: " + instanceId);
        }
catch (        final Exception e) {
          throw Exceptions.toUndeclared(e);
        }
        return result;
      }
    }
;
    Function<String,TerminateInstancesItemType> terminateTx=Entities.asTransaction(VmInstance.class,terminateFunction,VmInstances.TX_RETRIES);
    for (    String instanceId : request.getInstancesSet()) {
      try {
        TerminateInstancesItemType termInstance=terminateTx.apply(instanceId);
        if (termInstance != null) {
          results.add(termInstance);
        }
      }
 catch (      Exception ex) {
        LOG.error(ex);
        Logs.extreme().error(ex,ex);
      }
    }
    reply.set_return(!reply.getInstancesSet().isEmpty());
    return reply;
  }
 catch (  final Throwable e) {
    LOG.error(e);
    LOG.debug(e,e);
    throw new EucalyptusCloudException(e.getMessage());
  }
}
