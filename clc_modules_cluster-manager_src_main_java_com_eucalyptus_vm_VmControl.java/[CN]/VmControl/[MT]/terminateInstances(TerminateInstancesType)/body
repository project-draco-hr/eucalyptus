{
  final TerminateInstancesResponseType reply=request.getReply();
  final List<String> failedVmList=new ArrayList<>();
  final List<VmInstance> vmList=new ArrayList<>();
  final Collection<String> identifiers=normalizeIdentifiers(request.getInstancesSet());
  for (  String requestedInstanceId : identifiers) {
    try {
      VmInstance vm=RestrictedTypes.doPrivileged(requestedInstanceId,VmInstance.class);
      vmList.add(vm);
    }
 catch (    final AuthException|NoSuchElementException e) {
      failedVmList.add(requestedInstanceId);
    }
catch (    final Exception e) {
      LOG.error("Error looking up instance for termination: " + requestedInstanceId,e);
      failedVmList.add(requestedInstanceId);
    }
  }
  if (!failedVmList.isEmpty()) {
    if (failedVmList.size() > 1)     throw new ClientComputeException("InvalidInstanceID.NotFound","The instance IDs '" + Joiner.on(", ").join(failedVmList) + "' do not exist");
 else     throw new ClientComputeException("InvalidInstanceID.NotFound","The instance ID '" + Joiner.on(", ").join(failedVmList) + "' does not exist");
  }
  try {
    final List<TerminateInstancesItemType> results=reply.getInstancesSet();
    Function<VmInstance,TerminateInstancesItemType> terminateFunction=new Function<VmInstance,TerminateInstancesItemType>(){
      @Override public TerminateInstancesItemType apply(      final VmInstance vm){
        String oldState, newState=null;
        int oldCode, newCode=0;
        TerminateInstancesItemType result=null;
        try {
          if (MigrationState.isMigrating(vm)) {
            throw Exceptions.toUndeclared("Cannot terminate an instance which is currently migrating: " + vm.getInstanceId() + " "+ vm.getRuntimeState().getMigrationTask());
          }
          oldCode=vm.getState().getCode();
          oldState=vm.getState().getName();
          if (VmState.STOPPED.apply(vm)) {
            newCode=VmState.TERMINATED.getCode();
            newState=VmState.TERMINATED.getName();
            VmInstances.terminated(vm);
          }
 else           if (VmStateSet.RUN.apply(vm)) {
            newCode=VmState.SHUTTING_DOWN.getCode();
            newState=VmState.SHUTTING_DOWN.getName();
            VmInstances.shutDown(vm);
          }
 else           if (VmState.SHUTTING_DOWN.apply(vm)) {
            newCode=VmState.SHUTTING_DOWN.getCode();
            newState=VmState.SHUTTING_DOWN.getName();
          }
 else           if (VmStateSet.DONE.apply(vm)) {
            oldCode=newCode=VmState.TERMINATED.getCode();
            oldState=newState=VmState.TERMINATED.getName();
            VmInstances.buried(vm);
          }
          MessageContexts.remember(vm.getInstanceId(),request.getClass(),request);
          result=new TerminateInstancesItemType(vm.getInstanceId(),oldCode,oldState,newCode,newState);
        }
 catch (        final TerminatedInstanceException e) {
          oldCode=newCode=VmState.TERMINATED.getCode();
          oldState=newState=VmState.TERMINATED.getName();
          try {
            VmInstances.buried(vm.getInstanceId());
          }
 catch (          TransactionException e1) {
            throw Exceptions.toUndeclared(e1);
          }
          result=new TerminateInstancesItemType(vm.getInstanceId(),oldCode,oldState,newCode,newState);
        }
catch (        final NoSuchElementException e) {
          LOG.debug("Ignoring terminate request for non-existent instance: " + vm.getInstanceId());
        }
catch (        final Exception e) {
          throw Exceptions.toUndeclared(e);
        }
        return result;
      }
    }
;
    Function<VmInstance,TerminateInstancesItemType> terminateTx=Entities.asTransaction(VmInstance.class,terminateFunction,VmInstances.TX_RETRIES);
    for (    VmInstance vm : vmList) {
      try {
        TerminateInstancesItemType termInstance=terminateTx.apply(vm);
        if (termInstance != null) {
          results.add(termInstance);
        }
      }
 catch (      Exception ex) {
        LOG.error(ex);
        Logs.extreme().error(ex,ex);
      }
    }
    reply.set_return(!reply.getInstancesSet().isEmpty());
    return reply;
  }
 catch (  final Throwable e) {
    LOG.error(e);
    LOG.debug(e,e);
    throw new EucalyptusCloudException(e.getMessage());
  }
}
