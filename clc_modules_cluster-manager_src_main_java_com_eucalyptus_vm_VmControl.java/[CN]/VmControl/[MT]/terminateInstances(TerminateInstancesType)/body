{
  final TerminateInstancesResponseType reply=request.getReply();
  try {
    final Context ctx=Contexts.lookup();
    final List<TerminateInstancesItemType> results=reply.getInstancesSet();
    Iterables.all(request.getInstancesSet(),new Predicate<String>(){
      @Override public boolean apply(      final String instanceId){
        EntityTransaction db=Entities.get(VmInstance.class);
        try {
          try {
            String oldState=null, newState=null;
            int oldCode=0, newCode=0;
            try {
              VmInstance vm=RestrictedTypes.doPrivileged(instanceId,VmInstance.class);
              oldCode=vm.getState().getCode();
              oldState=vm.getState().getName();
              if (VmState.STOPPED.apply(vm)) {
                newCode=VmState.STOPPED.getCode();
                newState=VmState.STOPPED.getName();
                VmInstances.stopped(vm);
              }
 else               if (VmStateSet.RUN.apply(vm)) {
                newCode=VmState.SHUTTING_DOWN.getCode();
                newState=VmState.SHUTTING_DOWN.getName();
                VmInstances.shutDown(vm);
              }
 else               if (VmState.SHUTTING_DOWN.apply(vm)) {
                newCode=VmState.SHUTTING_DOWN.getCode();
                newState=VmState.SHUTTING_DOWN.getName();
                VmInstances.shutDown(vm);
              }
 else               if (VmState.TERMINATED.apply(vm)) {
                oldCode=newCode=VmState.TERMINATED.getCode();
                oldState=newState=VmState.TERMINATED.getName();
                VmInstances.delete(vm);
              }
            }
 catch (            final NoSuchElementException e) {
              oldCode=newCode=VmState.TERMINATED.getCode();
              oldState=newState=VmState.TERMINATED.getName();
              VmInstances.delete(instanceId);
            }
            results.add(new TerminateInstancesItemType(instanceId,oldCode,oldState,newCode,newState));
            db.commit();
          }
 catch (          final TransactionException e) {
            db.rollback();
          }
catch (          final NoSuchElementException e) {
            db.rollback();
          }
        }
 catch (        Exception ex) {
          Logs.exhaust().error(ex,ex);
          db.rollback();
        }
        return true;
      }
    }
);
    reply.set_return(!reply.getInstancesSet().isEmpty());
    return reply;
  }
 catch (  final Throwable e) {
    LOG.error(e);
    LOG.debug(e,e);
    throw new EucalyptusCloudException(e.getMessage());
  }
}
