{
  final DescribeBundleTasksResponseType reply=request.getReply();
  final Filter filter=Filters.generate(request.getFilterSet(),VmBundleTask.class);
  final EntityTransaction db=Entities.get(VmInstance.class);
  try {
    final Predicate<? super VmInstance> requestedAndAccessible=CloudMetadatas.filteringFor(VmInstance.class).byId(toInstanceIds(request.getBundleIds())).byPredicate(Predicates.compose(filter.asPredicate(),VmInstances.bundleTask())).byPredicate(VmInstance.Filters.BUNDLING).byPrivileges().buildPredicate();
    for (    final VmInstance v : VmInstances.list(null,filter.asCriterion(),filter.getAliases(),requestedAndAccessible)) {
      reply.getBundleTasks().add(Bundles.transform(v.getRuntimeState().getBundleTask()));
    }
  }
 catch (  Exception ex) {
    Logs.exhaust().error(ex,ex);
    throw new EucalyptusCloudException(ex);
  }
 finally {
    db.rollback();
  }
  return reply;
}
