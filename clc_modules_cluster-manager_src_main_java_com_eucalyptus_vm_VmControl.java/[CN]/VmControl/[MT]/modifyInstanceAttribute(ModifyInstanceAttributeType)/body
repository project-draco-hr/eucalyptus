{
  final ModifyInstanceAttributeResponseType reply=request.getReply();
  final String instanceId=normalizeIdentifier(request.getInstanceId());
  Context ctx=Contexts.lookup();
  try (final TransactionResource tx=Entities.transactionFor(VmInstance.class)){
    final VmInstance vm;
    try {
      vm=RestrictedTypes.doPrivileged(instanceId,VmInstance.class);
    }
 catch (    AuthException|NoSuchElementException e) {
      throw new ClientComputeException("InvalidInstanceID.NotFound","The instance ID '" + instanceId + "' does not exist");
    }
    if (request.getBlockDeviceMappingSet() != null && !request.getBlockDeviceMappingSet().getItem().isEmpty()) {
      nextmapping:       for (      final InstanceBlockDeviceMappingItemType mapping : request.getBlockDeviceMappingSet().getItem()) {
        for (        VmVolumeAttachment vmVolumeAttachment : Iterables.concat(vm.getBootRecord().getPersistentVolumes(),vm.getTransientVolumeState().getAttachments())) {
          if (vmVolumeAttachment.getDevice().equals(mapping.getDeviceName())) {
            if (mapping.getEbs() != null && mapping.getEbs().getVolumeId() != null) {
              if (mapping.getEbs().getVolumeId().equals(vmVolumeAttachment.getVolumeId()))               try {
                Volumes.lookup(ctx.getUserFullName().asAccountFullName(),ResourceIdentifiers.tryNormalize().apply(mapping.getEbs().getVolumeId()));
              }
 catch (              Exception e) {
                throw new ClientComputeException("InvalidInstanceAttributeValue","Invalid volume (" + mapping.getEbs().getVolumeId() + ")");
              }
 else {
                throw new ClientComputeException("InvalidInstanceAttributeValue","Invalid volume (" + mapping.getEbs().getVolumeId() + ")");
              }
            }
            vmVolumeAttachment.setDeleteOnTerminate(mapping.getEbs() == null ? true : Objects.firstNonNull(mapping.getEbs().getDeleteOnTermination(),true));
            break nextmapping;
          }
        }
        throw new ClientComputeException("InvalidInstanceAttributeValue","No device is currently mapped at " + mapping.getDeviceName());
      }
      tx.commit();
    }
 else     if (request.getDisableApiTermination() != null) {
    }
 else     if (request.getEbsOptimized() != null) {
    }
 else     if (request.getGroupIdSet() != null && !request.getGroupIdSet().getItem().isEmpty()) {
      final Collection<NetworkGroup> groups=Lists.newArrayList();
      final AccountFullName accountFullName=ctx.getUserFullName().asAccountFullName();
      for (      final SecurityGroupIdSetItemType groupIdItemType : request.getGroupIdSet().getItem())       try {
        final String groupId=ResourceIdentifiers.tryNormalize().apply(groupIdItemType.getGroupId());
        final NetworkGroup networkGroup=NetworkGroups.lookupByGroupId(accountFullName,groupId);
        if (!RestrictedTypes.filterPrivileged().apply(networkGroup)) {
          throw new IllegalAccessException("Not authorized to access security group " + groupId + " for "+ ctx.getUserFullName());
        }
        if (!Objects.firstNonNull(networkGroup.getVpcId(),"").equals(vm.getVpcId())) {
          throw new ClientComputeException("InvalidGroup.NotFound","Security group (" + groupId + ") not found");
        }
        groups.add(networkGroup);
      }
 catch (      NoSuchMetadataException e) {
        throw new ClientComputeException("InvalidGroup.NotFound","Security group (" + groupIdItemType.getGroupId() + ") not found");
      }
      vm.getNetworkGroups().clear();
      vm.getNetworkGroups().addAll(groups);
      tx.commit();
      NetworkGroups.flushRules();
    }
 else     if (request.getInstanceInitiatedShutdownBehavior() != null) {
    }
 else     if (request.getSourceDestCheck() != null) {
    }
 else     if (request.getSriovNetSupport() != null) {
    }
 else {
      if (!VmState.STOPPED.apply(vm)) {
        throw new ClientComputeException("IncorrectInstanceState","The instance (" + instanceId + ") is not in the 'stopped' state.");
      }
      if (request.getInstanceType() != null) {
        VmType vmType=VmTypes.lookup(request.getInstanceType().getValue());
        if (!RestrictedTypes.filterPrivileged().apply(vmType)) {
          throw new IllegalAccessException("Not authorized to allocate vm type " + vmType + " for "+ ctx.getUserFullName());
        }
        vm.getBootRecord().setVmType(vmType);
        tx.commit();
      }
 else       if (request.getKernel() != null) {
        try {
          final KernelImageInfo kernelImg=Images.lookupKernel(request.getKernel().getValue());
          if (Images.FilterPermissions.INSTANCE.apply(kernelImg) && ImageMetadata.State.available.equals(kernelImg.getState())) {
            if (!RestrictedTypes.filterPrivilegedWithoutOwner().apply(kernelImg))             throw new IllegalAccessException("Not authorize to use image " + kernelImg.getName() + " for ModifyInstanceAttribute");
            vm.getBootRecord().setKernel(kernelImg);
            tx.commit();
          }
 else {
            throw new ClientComputeException("InvalidAMIID.NotFound","Image id (" + request.getRamdisk().getValue() + ") not found");
          }
        }
 catch (        final NoSuchElementException e) {
          throw new ClientComputeException("InvalidAMIID.NotFound","Image id (" + request.getRamdisk().getValue() + ") not found");
        }
      }
 else       if (request.getRamdisk() != null) {
        try {
          final RamdiskImageInfo ramdiskImg=Images.lookupRamdisk(request.getRamdisk().getValue());
          if (Images.FilterPermissions.INSTANCE.apply(ramdiskImg) && ImageMetadata.State.available.equals(ramdiskImg.getState())) {
            if (!RestrictedTypes.filterPrivilegedWithoutOwner().apply(ramdiskImg))             throw new IllegalAccessException("Not authorize to use image " + ramdiskImg.getName() + " for ModifyInstanceAttribute");
            vm.getBootRecord().setRamdisk(ramdiskImg);
            tx.commit();
          }
 else {
            throw new ClientComputeException("InvalidAMIID.NotFound","Image id (" + request.getRamdisk().getValue() + ") not found");
          }
        }
 catch (        final NoSuchElementException e) {
          throw new ClientComputeException("InvalidAMIID.NotFound","Image id (" + request.getRamdisk().getValue() + ") not found");
        }
      }
 else       if (request.getUserData() != null) {
        final byte[] userData;
        try {
          userData=B64.standard.dec(request.getUserData().getValue());
        }
 catch (        ArrayIndexOutOfBoundsException|StringIndexOutOfBoundsException|DecoderException e) {
          throw new ClientComputeException("InvalidParameterValue","User data decoding error.");
        }
        if (userData.length > Integer.parseInt(VmInstances.USER_DATA_MAX_SIZE_KB) * 1024) {
          throw new InvalidMetadataException("User data may not exceed " + VmInstances.USER_DATA_MAX_SIZE_KB + " KB");
        }
        vm.getBootRecord().setUserData(userData);
        tx.commit();
      }
 else {
      }
    }
    reply.set_return(true);
  }
 catch (  final ComputeException e) {
    throw e;
  }
catch (  Exception ex) {
    if (Exceptions.isCausedBy(ex,NoSuchMetadataException.class)) {
      throw new ClientComputeException("InvalidInstanceAttributeValue","The instanceType '" + request.getInstanceType() + "' is invalid.");
    }
 else     if (Exceptions.isCausedBy(ex,IllegalAccessException.class)) {
      throw new ClientComputeException("UnauthorizedOperation","You are not authorized to perform this operation.");
    }
 else     if (Exceptions.isCausedBy(ex,InvalidMetadataException.class)) {
      throw new ClientComputeException("InvalidParameterValue","User data is limited to 16384 bytes");
    }
    LOG.error(ex,ex);
    throw new ComputeException("InternalError","Error processing request: " + ex.getMessage());
  }
  return reply;
}
