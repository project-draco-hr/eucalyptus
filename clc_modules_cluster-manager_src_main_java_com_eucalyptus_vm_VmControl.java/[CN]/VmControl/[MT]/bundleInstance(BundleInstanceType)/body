{
  final Context ctx=Contexts.lookup();
  final BundleInstanceResponseType reply=request.getReply();
  final String instanceId=normalizeIdentifier(request.getInstanceId());
  if (!validBucketName(request.getBucket())) {
    throw new ClientComputeException(" InvalidParameterValue","Value (" + request.getBucket() + ") for parameter Bucket is invalid.");
  }
 else   if (!validBucketName(request.getPrefix())) {
    throw new ClientComputeException(" InvalidParameterValue","Value (" + request.getPrefix() + ") for parameter Prefix is invalid.");
  }
  Bundles.checkAndCreateBucket(ctx.getUser(),request.getBucket());
  Function<String,VmInstance> bundleFunc=new Function<String,VmInstance>(){
    @Override public VmInstance apply(    String input){
      reply.set_return(false);
      try {
        final VmInstance v=RestrictedTypes.doPrivileged(input,VmInstance.class);
        if (v.getRuntimeState().isBundling()) {
          reply.setTask(Bundles.transform(v.getRuntimeState().getBundleTask()));
          reply.markWinning();
        }
 else         if (!VmState.RUNNING.equals(v.getState())) {
          throw new EucalyptusCloudException("Failed to bundle requested vm because it is not currently 'running': " + instanceId);
        }
 else         if (RestrictedTypes.filterPrivileged().apply(v)) {
          final VmBundleTask bundleTask=Bundles.create(v,request.getBucket(),request.getPrefix(),new String(Base64.decode(request.getUploadPolicy())));
          if (v.getRuntimeState().startBundleTask(bundleTask)) {
            reply.setTask(Bundles.transform(bundleTask));
            reply.markWinning();
          }
 else           if (v.getRuntimeState().getBundleTask() == null) {
            v.resetBundleTask();
            if (v.getRuntimeState().startBundleTask(bundleTask)) {
              reply.setTask(Bundles.transform(bundleTask));
              reply.markWinning();
            }
          }
 else {
            throw new EucalyptusCloudException("Instance is already being bundled: " + v.getRuntimeState().getBundleTask().getBundleId());
          }
          EventRecord.here(VmControl.class,EventType.BUNDLE_PENDING,ctx.getUserFullName().toString(),v.getRuntimeState().getBundleTask().getBundleId(),v.getInstanceId()).debug();
        }
 else {
          throw new EucalyptusCloudException("Failed to find instance: " + instanceId);
        }
        return v;
      }
 catch (      Exception ex) {
        LOG.error(ex);
        Logs.extreme().error(ex,ex);
        throw Exceptions.toUndeclared(ex);
      }
    }
  }
;
  final Function<String,AccessKey> LookupAccessKey=new Function<String,AccessKey>(){
    @Override public AccessKey apply(    final String policySignature){
      try {
        final List<AccessKey> keys=ctx.getUser().getKeys();
        AccessKey keyForSign=null;
        final Mac hmac=Mac.getInstance("HmacSHA1");
        for (        final AccessKey key : keys) {
          hmac.init(new SecretKeySpec(key.getSecretKey().getBytes("UTF-8"),"HmacSHA1"));
          final String sig=B64.standard.encString(hmac.doFinal(request.getUploadPolicy().getBytes("UTF-8")));
          if (sig.equals(policySignature)) {
            keyForSign=key;
            break;
          }
        }
        return keyForSign;
      }
 catch (      final Exception ex) {
        LOG.warn("Failed to generate upload policy signature",ex);
        return null;
      }
    }
  }
;
  final AccessKey accessKeyForPolicySignature=LookupAccessKey.apply(request.getUploadPolicySignature());
  if (accessKeyForPolicySignature == null) {
    throw new ComputeException("InternalError","Error processing request: unable to find the access key signed the upload policy");
  }
  VmInstance bundledVm=Entities.asTransaction(VmInstance.class,bundleFunc).apply(instanceId);
  final ImageInfo imageInfo=Images.lookupImage(bundledVm.getImageId());
  try {
    ServiceConfiguration cluster=Topology.lookup(ClusterController.class,bundledVm.lookupPartition());
    BundleInstanceType reqInternal=new BundleInstanceType(){
{
        setInstanceId(request.getInstanceId());
        setBucket(request.getBucket());
        setPrefix(request.getPrefix());
        setAwsAccessKeyId(accessKeyForPolicySignature.getAccessKey());
        setUploadPolicy(request.getUploadPolicy());
        setUploadPolicySignature(request.getUploadPolicySignature());
        setUrl(request.getUrl());
        setUserKey(request.getUserKey());
        setArchitecture(imageInfo != null ? imageInfo.getArchitecture().name() : "i386");
      }
    }
.regardingUserRequest(request);
    AsyncRequests.newRequest(Bundles.createCallback(reqInternal)).dispatch(cluster);
  }
 catch (  Exception ex) {
    LOG.error(ex);
    Logs.extreme().error(ex,ex);
    throw Exceptions.toUndeclared(ex);
  }
  return reply;
}
