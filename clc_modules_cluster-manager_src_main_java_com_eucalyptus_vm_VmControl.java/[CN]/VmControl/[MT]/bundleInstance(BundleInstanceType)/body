{
  final Context ctx=Contexts.lookup();
  final BundleInstanceResponseType reply=request.getReply();
  final String instanceId=normalizeIdentifier(request.getInstanceId());
  if (!validBucketName(request.getBucket())) {
    throw new ClientComputeException(" InvalidParameterValue","Value (" + request.getBucket() + ") for parameter Bucket is invalid.");
  }
 else   if (!validBucketName(request.getPrefix())) {
    throw new ClientComputeException(" InvalidParameterValue","Value (" + request.getPrefix() + ") for parameter Prefix is invalid.");
  }
  if (request.getUploadPolicy() != null && request.getUploadPolicy().length() > 4096) {
    throw new ClientComputeException(" InvalidParameterValue","Value for parameter UploadPolicy is invalid (too long)");
  }
  final String uploadPolicyJson=B64.standard.decString(request.getUploadPolicy());
  Bundles.checkAndCreateBucket(ctx.getUser(),request.getBucket(),request.getPrefix());
  final Function<String,VmInstance> bundleFunc=new Function<String,VmInstance>(){
    @Override public VmInstance apply(    String input){
      reply.set_return(false);
      try {
        final VmInstance v=RestrictedTypes.doPrivileged(input,VmInstance.class);
        if (!VmState.RUNNING.equals(v.getState())) {
          throw new ClientComputeException("InvalidState","Failed to bundle requested vm because it is not currently 'running': " + instanceId);
        }
 else {
          final VmBundleTask bundleTask=Bundles.create(v,request.getBucket(),request.getPrefix(),uploadPolicyJson);
          if (Bundles.startBundleTask(bundleTask)) {
            reply.setTask(Bundles.transform(bundleTask));
            reply.markWinning();
          }
 else {
            throw new ClientComputeException("BundlingInProgress","Instance is already being bundled: " + v.getRuntimeState().getBundleTask().getBundleId());
          }
          EventRecord.here(VmControl.class,EventType.BUNDLE_PENDING,ctx.getUserFullName().toString(),v.getRuntimeState().getBundleTask().getBundleId(),v.getInstanceId()).debug();
        }
        return v;
      }
 catch (      final ComputeException e) {
        throw Exceptions.toUndeclared(e);
      }
catch (      final AuthException|NoSuchElementException e) {
        throw Exceptions.toUndeclared(new ClientComputeException("InvalidInstanceID.NotFound","The instance ID '" + instanceId + "' does not exist"));
      }
catch (      final Exception ex) {
        LOG.error(ex);
        Logs.extreme().error(ex,ex);
        throw Exceptions.toUndeclared(ex);
      }
    }
  }
;
  AccessKey accessKey;
  try {
    final String accessKeyId=request.getAwsAccessKeyId();
    final JSONObject policyJsonObj=JSONObject.fromObject(uploadPolicyJson);
    final JSONArray conditions=policyJsonObj.getJSONArray("conditions");
    String securityToken=null;
    for (    final Object object : conditions) {
      if (object instanceof JSONObject && ((JSONObject)object).has("x-amz-security-token")) {
        securityToken=((JSONObject)object).getString("x-amz-security-token");
        break;
      }
    }
    accessKey=AccessKeys.lookupAccessKey(accessKeyId,securityToken);
    final byte[] sig=HmacUtils.getSignature(accessKey.getSecretKey(),request.getUploadPolicy(),Hmac.HmacSHA1);
    if (!MessageDigest.isEqual(sig,B64.standard.dec(request.getUploadPolicySignature()))) {
      throw new ClientComputeException("InvalidParameterValue","Value for UploadPolicySignature is invalid.");
    }
  }
 catch (  final JSONException e) {
    throw new ClientComputeException("InvalidParameterValue","Value for UploadPolicy is invalid.");
  }
catch (  final AuthException e) {
    throw new ClientComputeException("InvalidParameterValue","Value (" + request.getAwsAccessKeyId() + ") for AWSAccessKeyId is invalid.");
  }
catch (  final AuthenticationException e) {
    LOG.error("Error processing upload policy signature ",e);
    throw new ClientComputeException("InternalError","Error processing request; upload policy signature error.");
  }
  final VmInstance bundledVm;
  try {
    bundledVm=Entities.asTransaction(VmInstance.class,bundleFunc).apply(instanceId);
  }
 catch (  final RuntimeException e) {
    LOG.error(e,e);
    Exceptions.findAndRethrow(e,ComputeException.class);
    throw e;
  }
  final ImageInfo imageInfo=Images.lookupImage(bundledVm.getImageId());
  final AccessKey accessKeyForPolicySignature=accessKey;
  try {
    ServiceConfiguration cluster=Topology.lookup(ClusterController.class,bundledVm.lookupPartition());
    BundleInstanceType reqInternal=new BundleInstanceType(){
{
        setInstanceId(request.getInstanceId());
        setBucket(request.getBucket());
        setPrefix(request.getPrefix());
        setAwsAccessKeyId(accessKeyForPolicySignature.getAccessKey());
        setUploadPolicy(request.getUploadPolicy());
        setUploadPolicySignature(request.getUploadPolicySignature());
        setUrl(request.getUrl());
        setUserKey(request.getUserKey());
        setArchitecture(imageInfo != null ? imageInfo.getArchitecture().name() : "i386");
      }
    }
.regardingUserRequest(request);
    AsyncRequests.newRequest(Bundles.createCallback(reqInternal)).dispatch(cluster);
  }
 catch (  Exception ex) {
    LOG.error(ex);
    Logs.extreme().error(ex,ex);
    throw Exceptions.toUndeclared(ex);
  }
  return reply;
}
