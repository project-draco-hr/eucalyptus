{
  final ResetInstanceAttributeResponseType reply=request.getReply();
  final String instanceId=normalizeIdentifier(request.getInstanceId());
  try (final TransactionResource tx=Entities.transactionFor(VmInstance.class)){
    final VmInstance vm=RestrictedTypes.doPrivileged(instanceId,VmInstance.class);
    if ("sourceDestCheck".equals(request.getAttribute())) {
      if (vm.getNetworkInterfaces() != null) {
        for (        final NetworkInterface networkInterface : vm.getNetworkInterfaces()) {
          if (networkInterface.getAttachment().getDeviceIndex() == 0) {
            networkInterface.setSourceDestCheck(true);
            tx.commit();
            NetworkGroups.flushRules();
            break;
          }
        }
      }
    }
 else     if ("disableApiTermination".equals(request.getAttribute())) {
      vm.setDisableApiTermination(false);
      tx.commit();
    }
 else     if (VmState.STOPPED.equals(vm.getState())) {
      if (request.getAttribute().equals("kernel")) {
        String kernelId=vm.getKernelId();
        if (kernelId == null) {
          vm.getBootRecord().setKernel();
        }
 else {
          KernelImageInfo kernelImg=Images.lookupKernel(kernelId);
          if (!ImageMetadata.State.available.equals(kernelImg.getState())) {
            throw new NoSuchElementException("InvalidAMIID.NotFound: Unable to start instance with deregistered/failed image : " + kernelImg.getImageName());
          }
          vm.getBootRecord().setKernel(kernelImg);
        }
        Entities.merge(vm);
        tx.commit();
      }
 else       if (request.getAttribute().equals("ramdisk")) {
        String ramdiskId=vm.getRamdiskId();
        if (ramdiskId == null) {
          vm.getBootRecord().setRamdisk();
        }
 else {
          RamdiskImageInfo ramdiskImg=Images.lookupRamdisk(ramdiskId);
          if (!ImageMetadata.State.available.equals(ramdiskImg.getState())) {
            throw new NoSuchElementException("InvalidAMIID.NotFound: Unable to start instance with deregistered/failed image : " + ramdiskImg.getImageName());
          }
          vm.getBootRecord().setRamdisk(ramdiskImg);
        }
        Entities.merge(vm);
        tx.commit();
      }
      reply.set_return(true);
    }
 else {
      throw new EucalyptusCloudException("IncorrectInstanceState: The instance '" + instanceId + "' is not in the 'stopped' state.");
    }
  }
 catch (  Exception ex) {
    LOG.error(ex);
    if (Exceptions.isCausedBy(ex,EucalyptusCloudException.class)) {
      throw new ClientComputeException("IncorrectInstanceState","The instance '" + instanceId + "' is not in the 'stopped' state.");
    }
 else     if (Exceptions.isCausedBy(ex,NoSuchElementException.class) && ex.toString().contains("InvalidAMIID.NotFound")) {
      throw new ClientComputeException("InvalidAMIID.NotFound","The default " + request.getAttribute() + " does not exist");
    }
    throw new ClientComputeException("InvalidInstanceID.NotFound","The instance ID '" + instanceId + "' does not exist");
  }
  return reply;
}
