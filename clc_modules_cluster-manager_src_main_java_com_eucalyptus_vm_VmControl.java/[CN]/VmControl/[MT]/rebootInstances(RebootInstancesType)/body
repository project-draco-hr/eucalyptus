{
  final RebootInstancesResponseType reply=request.getReply();
  try {
    List<String> instanceSet=normalizeIdentifiers(request.getInstancesSet());
    ArrayList<String> noAccess=new ArrayList<>();
    ArrayList<String> migrating=new ArrayList<>();
    ArrayList<String> noSuchElement=new ArrayList<>();
    for (int i=0; i < instanceSet.size(); i++) {
      String currentInstance=instanceSet.get(i);
      try {
        final VmInstance v=VmInstances.lookup(currentInstance);
        if (!RestrictedTypes.filterPrivileged().apply(v)) {
          noAccess.add(currentInstance);
        }
        if (MigrationState.isMigrating(v)) {
          migrating.add(currentInstance);
        }
      }
 catch (      NoSuchElementException nse) {
        if (!(nse instanceof TerminatedInstanceException)) {
          noSuchElement.add(currentInstance);
        }
 else {
          instanceSet.remove(i--);
        }
      }
      if ((i == instanceSet.size() - 1) && (!noSuchElement.isEmpty())) {
        String outList=noSuchElement.toString();
        throw new EucalyptusCloudException("No such instance(s): " + outList.substring(1,outList.length() - 1));
      }
 else       if ((i == instanceSet.size() - 1) && (!noAccess.isEmpty())) {
        String outList=noAccess.toString();
        throw new EucalyptusCloudException("Permission denied for vm(s): " + outList.substring(1,outList.length() - 1));
      }
 else       if ((i == instanceSet.size() - 1) && (!migrating.isEmpty())) {
        String outList=noAccess.toString();
        throw new EucalyptusCloudException("Cannot reboot an instances which is currently migrating: " + outList.substring(1,outList.length() - 1));
      }
    }
    final boolean result=Iterables.all(instanceSet,new Predicate<String>(){
      @Override public boolean apply(      final String instanceId){
        try {
          final VmInstance v=VmInstances.lookup(instanceId);
          final Request<ClusterRebootInstancesType,ClusterRebootInstancesResponseType> req=AsyncRequests.newRequest(new RebootCallback(v.getInstanceId()));
          ServiceConfiguration ccConfig=Topology.lookup(ClusterController.class,v.lookupPartition());
          req.dispatch(ccConfig);
          return true;
        }
 catch (        final NoSuchElementException e) {
          return false;
        }
      }
    }
);
    reply.set_return(result);
    return reply;
  }
 catch (  final Exception e) {
    LOG.error(e);
    LOG.debug(e,e);
    throw new EucalyptusCloudException(e.getMessage());
  }
}
