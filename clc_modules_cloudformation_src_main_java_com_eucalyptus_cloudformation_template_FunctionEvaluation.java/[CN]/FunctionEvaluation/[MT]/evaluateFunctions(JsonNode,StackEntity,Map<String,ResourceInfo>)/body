{
  if (jsonNode == null)   return jsonNode;
  if (!jsonNode.isArray() && !jsonNode.isObject())   return jsonNode;
  ObjectMapper objectMapper=new ObjectMapper();
  if (jsonNode.isArray()) {
    ArrayNode arrayCopy=objectMapper.createArrayNode();
    for (int i=0; i < jsonNode.size(); i++) {
      JsonNode arrayElement=evaluateFunctions(jsonNode.get(i),stackEntity,resourceInfoMap);
      arrayCopy.add(arrayElement);
    }
    return arrayCopy;
  }
  for (  IntrinsicFunction intrinsicFunction : IntrinsicFunctions.values()) {
    IntrinsicFunction.MatchResult matchResult=intrinsicFunction.evaluateMatch(jsonNode);
    if (matchResult.isMatch()) {
      IntrinsicFunction.ValidateResult validateResult=intrinsicFunction.validateArgTypesWherePossible(matchResult);
      return intrinsicFunction.evaluateFunction(validateResult,stackEntity,resourceInfoMap);
    }
  }
  ObjectNode objectCopy=objectMapper.createObjectNode();
  List<String> fieldNames=Lists.newArrayList(jsonNode.fieldNames());
  for (  String key : fieldNames) {
    JsonNode objectElement=evaluateFunctions(jsonNode.get(key),stackEntity,resourceInfoMap);
    objectCopy.put(key,objectElement);
  }
  return objectCopy;
}
