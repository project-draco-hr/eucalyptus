{
  final VmState oldState=this.getVmInstance().getState();
  Runnable action=null;
  if (VmStateSet.RUN.contains(newState) && VmStateSet.NOT_RUNNING.contains(oldState)) {
    action=this.cleanUpRunnable(SEND_USER_TERMINATE);
  }
 else   if (!oldState.equals(newState)) {
    action=handleStateTransition(newState,oldState);
    EventRecord.caller(VmInstance.class,EventType.VM_STATE,this.getVmInstance().getInstanceId(),this.vmInstance.getOwner(),this.getVmInstance().getState().name());
  }
  this.getVmInstance().updateTimeStamps();
  if (action != null) {
    LOG.error("Running cleanUp for instance: " + this.getVmInstance().getInstanceId(),new RuntimeException());
    EventRecord.caller(VmInstance.class,EventType.VM_TERMINATING,this.getVmInstance().getInstanceId(),this.vmInstance.getOwner(),this.getVmInstance().getState().name());
    if (Reason.APPEND.equals(reason)) {
      reason=this.reason;
    }
    this.addReasonDetail(extra);
    this.reason=reason;
    try {
      Threads.lookup(Eucalyptus.class,VmInstance.class).limitTo(VmInstances.MAX_STATE_THREADS).submit(action).get(10,TimeUnit.MILLISECONDS);
    }
 catch (    final TimeoutException ex) {
    }
catch (    final Exception ex) {
      LOG.error(ex,ex);
    }
  }
}
