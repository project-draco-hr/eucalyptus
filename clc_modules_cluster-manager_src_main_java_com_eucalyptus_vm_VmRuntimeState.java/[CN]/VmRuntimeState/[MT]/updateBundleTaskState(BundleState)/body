{
  if (this.getBundleTask() != null) {
    final BundleState current=this.getBundleTask().getState();
    if (BundleState.complete.equals(state) && !BundleState.complete.equals(current)) {
      this.getBundleTask().setState(state);
    }
 else     if (BundleState.failed.equals(state) && !BundleState.failed.equals(current)) {
      this.getBundleTask().setState(state);
    }
 else     if (BundleState.canceling.equals(current) || BundleState.canceling.equals(state)) {
    }
 else     if (BundleState.pending.equals(current) && !BundleState.none.equals(state)) {
      this.getBundleTask().setState(state);
      this.getBundleTask().setUpdateTime(new Date());
      EventRecord.here(VmRuntimeState.class,EventType.BUNDLE_TRANSITION,this.vmInstance.getOwner().toString(),"" + this.getBundleTask()).info();
    }
 else     if (BundleState.storing.equals(state)) {
      this.getBundleTask().setState(state);
      this.getBundleTask().setUpdateTime(new Date());
      EventRecord.here(VmRuntimeState.class,EventType.BUNDLE_TRANSITION,this.vmInstance.getOwner().toString(),"" + this.getBundleTask()).info();
    }
  }
 else {
    this.setBundleTask(new VmBundleTask(this.vmInstance,state.name(),new Date(),new Date(),0,"unknown","unknown","unknown","unknown"));
    Logs.extreme().trace("Unhandle bundle task state update: " + state);
  }
}
