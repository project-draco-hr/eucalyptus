{
  if (VERBOSE) {
    LOG.debug("Loading users from LDAP/AD");
  }
  Set<String> attrNames=Sets.newHashSet();
  attrNames.addAll(lic.getUserInfoAttributes().keySet());
  if (!Strings.isNullOrEmpty(lic.getUserIdAttribute())) {
    attrNames.add(lic.getUserIdAttribute());
  }
  if (!Strings.isNullOrEmpty(lic.getUserSaslIdAttribute())) {
    attrNames.add(lic.getUserSaslIdAttribute());
  }
  if (VERBOSE) {
    LOG.debug("Attributes to load for users: " + attrNames);
  }
  retrieveSelection(ldap,lic.getUserBaseDn(),lic.getUsersSelection(),attrNames.toArray(new String[0]),new LdapEntryProcessor(){
    @Override public void processLdapEntry(    String dn,    Attributes attrs) throws NamingException {
      if (VERBOSE) {
        LOG.debug("Retrieved user: " + dn + " -> "+ attrs);
      }
      String id=sanitizeUserGroupId(getId(dn,lic.getUserIdAttribute(),attrs));
      userDnToId.put(dn,id);
      Map<String,String> infoMap=Maps.newHashMap();
      for (      String attrName : lic.getUserInfoAttributes().keySet()) {
        String infoKey=lic.getUserInfoAttributes().get(attrName);
        String infoVal=getAttrWithNullCheck(attrs,attrName);
        if (infoVal != null) {
          infoMap.put(infoKey,infoVal);
        }
      }
      infoMap.put(EuareUser.DN,dn);
      if (!Strings.isNullOrEmpty(lic.getUserSaslIdAttribute())) {
        infoMap.put(EuareUser.SASLID,getAttrWithNullCheck(attrs,lic.getUserSaslIdAttribute()));
      }
      users.put(id,infoMap);
    }
  }
);
}
