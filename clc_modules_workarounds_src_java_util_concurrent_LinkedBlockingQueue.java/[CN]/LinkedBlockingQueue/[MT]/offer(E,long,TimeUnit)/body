{
  if (e == null)   throw new NullPointerException();
  long nanos=unit.toNanos(timeout);
  int c=-1;
  final ReentrantLock putLock=this.putLock;
  final AtomicInteger count=this.count;
  putLock.lockInterruptibly();
  try {
    for (; ; ) {
      if (count.get() < capacity) {
        insert(e);
        c=count.getAndIncrement();
        if (c + 1 < capacity)         notFull.signal();
        break;
      }
      if (nanos <= 0)       return false;
      try {
        nanos=notFull.awaitNanos(nanos);
      }
 catch (      InterruptedException ie) {
        notFull.signal();
        throw ie;
      }
    }
  }
  finally {
    putLock.unlock();
  }
  if (c == 0)   signalNotEmpty();
  return true;
}
