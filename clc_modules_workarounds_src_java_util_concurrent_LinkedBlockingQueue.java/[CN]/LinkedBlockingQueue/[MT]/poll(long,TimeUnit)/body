{
  E x=null;
  int c=-1;
  long nanos=unit.toNanos(timeout);
  final AtomicInteger count=this.count;
  final ReentrantLock takeLock=this.takeLock;
  takeLock.lockInterruptibly();
  try {
    for (; ; ) {
      if (count.get() > 0) {
        x=extract();
        c=count.getAndDecrement();
        if (c > 1)         notEmpty.signal();
        break;
      }
      if (nanos <= 0)       return null;
      try {
        nanos=notEmpty.awaitNanos(nanos);
      }
 catch (      InterruptedException ie) {
        notEmpty.signal();
        throw ie;
      }
    }
  }
  finally {
    takeLock.unlock();
  }
  if (c == capacity)   signalNotFull();
  return x;
}
