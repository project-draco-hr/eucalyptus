{
  return new Function<String,Runnable>(){
    @Override public Runnable apply(    final String database){
      final String hostName=host.getBindAddress().getHostAddress();
      return new Runnable(){
        @Override public void run(){
          try {
            final boolean fullSync=!Hosts.isCoordinator() && host.isLocalHost() && BootstrapArgs.isCloudController()&& !Databases.isSynchronized();
            final boolean passiveSync=!fullSync && host.hasSynced();
            if (!fullSync && !passiveSync) {
              throw Exceptions.toUndeclared("Host is not ready to be activated: " + host);
            }
 else {
              final DatabaseClusterMBean cluster=lookup(database,TimeUnit.SECONDS.toMillis(30));
              final boolean activated=cluster.getactiveDatabases().contains(hostName);
              final boolean deactivated=cluster.getinactiveDatabases().contains(hostName);
              final String passiveStrategy=cluster.getdefaultSynchronizationStrategy();
              final String fullStrategy=Iterables.getFirst(Sets.difference(cluster.getsynchronizationStrategies(),Collections.singleton(passiveStrategy)),"full");
              final String syncStrategy=fullSync ? fullStrategy : passiveStrategy;
              if (activated) {
                resetDatabaseWeights(database);
                return;
              }
 else               if (deactivated) {
                ActivateHostFunction.prepareConnections(host,database);
              }
 else {
                LOG.info("Creating database " + database + " connections for: "+ host);
                try {
                  lookupDatabase(database,hostName);
                }
 catch (                NoSuchElementException e) {
                  try {
                    cluster.add(hostName);
                    Logs.extreme().debug("Added database " + database + " connections for host: "+ hostName);
                  }
 catch (                  IllegalArgumentException ex) {
                    Logs.extreme().debug("Skipping addition of database " + database + " connections for host which already exists: "+ hostName);
                  }
catch (                  IllegalStateException ex) {
                    if (Exceptions.isCausedBy(ex,InstanceAlreadyExistsException.class)) {
                      ManagementFactory.getPlatformMBeanServer().unregisterMBean(new ObjectName(jdbcJmxDomain,new Hashtable<>(ImmutableMap.of("cluster",database,"type","Database","database",hostName))));
                      cluster.add(hostName);
                    }
 else {
                      throw ex;
                    }
                  }
                }
                ActivateHostFunction.prepareConnections(host,database);
              }
              if (Hosts.isCoordinator(host)) {
                for (                Host secondaryHost : Hosts.listActiveDatabases())                 if (!secondaryHost.equals(host))                 try {
                  lookupDatabase(database,secondaryHost.getDisplayName()).setweight(DATABASE_WEIGHT_SECONDARY);
                }
 catch (                NoSuchElementException e) {
                }
catch (                Exception e) {
                  LOG.error("Error setting primary weight for host " + secondaryHost.getDisplayName() + " context "+ database,e);
                }
              }
              try {
                if (fullSync) {
                  LOG.info("Full sync of database " + database + " on: "+ host+ " using: "+ fullStrategy);
                }
 else {
                  LOG.info("Passive activation of database " + database + " connections to: "+ host);
                }
                cluster.activate(hostName,syncStrategy);
                if (fullSync) {
                  LOG.info("Full sync of database " + database + " on: "+ host+ " using "+ cluster.getactiveDatabases());
                }
 else {
                  LOG.info("Passive activation of database " + database + " on: "+ host+ " using "+ cluster.getactiveDatabases());
                }
              }
 catch (              Exception ex) {
                throw Exceptions.toUndeclared(ex);
              }
              try {
                LOG.debug("Refreshing idle pooled connections for context: " + database);
                ProxoolFacade.killAllConnections(database,"Database registered",true);
                LOG.debug("Refreshed idle pooled connections for context: " + database);
              }
 catch (              Exception ex) {
                LOG.error("Error refreshing connections on activation of context: " + database,ex);
              }
            }
          }
 catch (          final NoSuchElementException|IllegalStateException ex1) {
            LOG.error(ex1);
            Logs.extreme().error(ex1,ex1);
            return;
          }
catch (          final Exception ex1) {
            LOG.error(ex1);
            Logs.extreme().error(ex1,ex1);
            throw Exceptions.toUndeclared("Failed to activate database " + database + " host "+ host+ " because of: "+ ex1.getMessage(),ex1);
          }
        }
        @Override public String toString(){
          return "Databases.enable(): " + host.getDisplayName() + " "+ database;
        }
      }
;
    }
    @Override public String toString(){
      return "Databases.enable(): " + host;
    }
  }
;
}
