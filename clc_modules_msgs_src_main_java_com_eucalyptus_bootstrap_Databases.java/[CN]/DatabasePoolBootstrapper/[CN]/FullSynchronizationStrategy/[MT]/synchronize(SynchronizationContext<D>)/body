{
  Connection sourceConnection=context.getConnection(context.getSourceDatabase());
  Connection targetConnection=context.getConnection(context.getTargetDatabase());
  Dialect dialect=context.getDialect();
  boolean autoCommit=targetConnection.getAutoCommit();
  targetConnection.setAutoCommit(true);
  SynchronizationSupport.dropForeignKeys(context);
  targetConnection.setAutoCommit(false);
  try {
    for (    TableProperties table : context.getSourceDatabaseProperties().getTables()) {
      String tableName=table.getName();
      Collection<String> columns=table.getColumns();
      String commaDelimitedColumns=Strings.join(columns,Strings.PADDED_COMMA);
      final String selectSQL="SELECT " + commaDelimitedColumns + " FROM "+ tableName;
      final Statement selectStatement=sourceConnection.createStatement();
      selectStatement.setFetchSize(this.fetchSize);
      String deleteSQL=dialect.getTruncateTableSQL(table);
      LOG.info(deleteSQL);
      Statement deleteStatement=targetConnection.createStatement();
      int deletedRows=deleteStatement.executeUpdate(deleteSQL);
      LOG.info(Messages.getMessage(Messages.DELETE_COUNT,deletedRows,tableName));
      deleteStatement.close();
      ResultSet resultSet=selectStatement.executeQuery(selectSQL);
      LOG.info(selectSQL);
      int statementCount=0;
      while (resultSet.next()) {
        String insertSQL="INSERT INTO " + tableName + " ("+ commaDelimitedColumns+ ") VALUES ("+ Strings.join(Collections.nCopies(columns.size(),Strings.QUESTION),Strings.PADDED_COMMA)+ ")";
        LOG.info(insertSQL);
        PreparedStatement insertStatement=targetConnection.prepareStatement(insertSQL);
        int index=0;
        String selected="SELECT * FROM " + tableName + ": "+ resultSet.getRow()+ " ";
        for (        String column : columns) {
          index+=1;
          int type=dialect.getColumnType(table.getColumnProperties(column));
          Object object=SynchronizationSupport.getObject(resultSet,index,type);
          selected+="\n\t" + column + "="+ object+ " ";
          if (resultSet.wasNull()) {
            insertStatement.setNull(index,type);
          }
 else {
            insertStatement.setObject(index,object,type);
          }
        }
        LOG.info(selected);
        insertStatement.addBatch();
        insertStatement.executeBatch();
        insertStatement.clearBatch();
        insertStatement.clearParameters();
        insertStatement.close();
      }
      LOG.info(Messages.getMessage(Messages.INSERT_COUNT,statementCount,tableName));
      selectStatement.close();
      targetConnection.commit();
    }
  }
 catch (  SQLException e) {
    SynchronizationSupport.rollback(targetConnection);
    throw e;
  }
catch (  Exception e) {
    SynchronizationSupport.rollback(targetConnection);
    throw new RuntimeException(e);
  }
  targetConnection.setAutoCommit(true);
  SynchronizationSupport.restoreForeignKeys(context);
  SynchronizationSupport.synchronizeIdentityColumns(context);
  SynchronizationSupport.synchronizeSequences(context);
  targetConnection.setAutoCommit(autoCommit);
}
