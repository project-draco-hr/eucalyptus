{
  Collection<SequenceProperties> sequences=context.getSourceDatabaseProperties().getSequences();
  if (!sequences.isEmpty()) {
    net.sf.hajdbc.Database<D> sourceDatabase=context.getSourceDatabase();
    Set<net.sf.hajdbc.Database<D>> databases=context.getActiveDatabaseSet();
    ExecutorService executor=context.getExecutor();
    Dialect dialect=context.getDialect();
    Map<SequenceProperties,Long> sequenceMap=new HashMap<SequenceProperties,Long>();
    Map<net.sf.hajdbc.Database<D>,Future<Long>> futureMap=new HashMap<net.sf.hajdbc.Database<D>,Future<Long>>();
    for (    SequenceProperties sequence : sequences) {
      final String sql=dialect.getNextSequenceValueSQL(sequence);
      LOG.debug(sql);
      for (      final net.sf.hajdbc.Database<D> database : databases) {
        Callable<Long> task=new Callable<Long>(){
          public Long call() throws SQLException {
            Statement statement=context.getConnection(database).createStatement();
            ResultSet resultSet=statement.executeQuery(sql);
            resultSet.next();
            long value=resultSet.getLong(1);
            statement.close();
            return value;
          }
        }
;
        futureMap.put(database,executor.submit(task));
      }
      try {
        Long sourceValue=futureMap.get(sourceDatabase).get();
        sequenceMap.put(sequence,sourceValue);
        for (        net.sf.hajdbc.Database<D> database : databases) {
          if (!database.equals(sourceDatabase)) {
            Long value=futureMap.get(database).get();
            if (!value.equals(sourceValue)) {
              throw new SQLException(Messages.getMessage(Messages.SEQUENCE_OUT_OF_SYNC,sequence,database,value,sourceDatabase,sourceValue));
            }
          }
        }
      }
 catch (      InterruptedException e) {
        throw SQLExceptionFactory.createSQLException(e);
      }
catch (      ExecutionException e) {
        throw SQLExceptionFactory.createSQLException(e.getCause());
      }
    }
    Connection targetConnection=context.getConnection(context.getTargetDatabase());
    Statement targetStatement=targetConnection.createStatement();
    for (    SequenceProperties sequence : sequences) {
      String sql=dialect.getAlterSequenceSQL(sequence,sequenceMap.get(sequence) + 1);
      LOG.debug(sql);
      targetStatement.addBatch(sql);
    }
    targetStatement.executeBatch();
    targetStatement.close();
  }
}
