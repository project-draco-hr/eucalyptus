{
  return new Function<String,Runnable>(){
    @Override public Runnable apply(    final String ctx){
      final String hostName=host.getBindAddress().getHostAddress();
      final String contextName=ctx.startsWith("eucalyptus_") ? ctx : "eucalyptus_" + ctx;
      Runnable removeRunner=new Runnable(){
        @Override public void run(){
          try {
            final boolean fullSync=!Hosts.isCoordinator() && host.isLocalHost() && BootstrapArgs.isCloudController()&& !Databases.isSynchronized();
            final boolean passiveSync=!fullSync && host.hasSynced();
            if (!fullSync && !passiveSync) {
              throw Exceptions.toUndeclared("Host is not ready to be activated: " + host);
            }
 else {
              DriverDatabaseClusterMBean cluster=LookupPersistenceContextDatabaseCluster.INSTANCE.apply(contextName);
              final String dbUrl="jdbc:" + ServiceUris.remote(Database.class,host.getBindAddress(),contextName);
              final String dbPass=SystemIds.databasePassword();
              final String realJdbcDriver=Databases.getDriverName();
              try {
                if (fullSync) {
                  if (cluster.getActiveDatabases().contains(hostName)) {
                    LOG.info("Deactivating existing database connections to: " + host);
                    cluster.deactivate(hostName);
                  }
                  if (cluster.getInactiveDatabases().contains(hostName)) {
                    LOG.info("Deactivating existing database connections to: " + host);
                    cluster.remove(hostName);
                  }
                  LOG.info("Creating database connections for: " + host);
                  cluster.add(hostName,realJdbcDriver,dbUrl);
                  ActivateHostFunction.prepareInactiveConnections(host,hostName,contextName,dbPass);
                  LOG.info("Full sync of database on: " + host + " using "+ cluster.getActiveDatabases());
                  cluster.activate(hostName,"full");
                  return;
                }
 else                 if (passiveSync) {
                  if (cluster.getActiveDatabases().contains(hostName)) {
                    return;
                  }
 else                   if (cluster.getInactiveDatabases().contains(hostName)) {
                    LOG.info("Passive activation of database connections to: " + host);
                    ActivateHostFunction.prepareInactiveConnections(host,hostName,contextName,dbPass);
                    cluster.activate(hostName,"passive");
                    return;
                  }
 else {
                    LOG.info("Creating database connections for: " + host);
                    cluster.add(hostName,realJdbcDriver,dbUrl);
                    ActivateHostFunction.prepareInactiveConnections(host,hostName,contextName,dbPass);
                    cluster.activate(hostName,"passive");
                  }
                }
 else {
                  Logs.extreme().info("Skipping activation of already present database for: " + contextName + " on "+ hostName);
                }
              }
 catch (              Exception ex) {
                try {
                  try {
                    cluster.deactivate(hostName);
                  }
 catch (                  Exception ex1) {
                    LOG.debug(ex1);
                  }
                  cluster.remove(hostName);
                }
 catch (                Exception ex1) {
                  LOG.debug(ex1);
                }
                throw Exceptions.toUndeclared(ex);
              }
            }
          }
 catch (          final NoSuchElementException ex1) {
            LOG.debug(ex1);
            Logs.extreme().debug(ex1,ex1);
            return;
          }
catch (          final IllegalStateException ex1) {
            LOG.debug(ex1);
            Logs.extreme().debug(ex1,ex1);
            return;
          }
catch (          final Exception ex1) {
            Logs.extreme().error(ex1,ex1);
            throw Exceptions.toUndeclared("Failed to activate host " + host + " because of: "+ ex1.getMessage(),ex1);
          }
        }
        @Override public String toString(){
          return "Databases.enable(): " + host.getDisplayName() + " "+ contextName;
        }
      }
;
      return removeRunner;
    }
  }
;
}
