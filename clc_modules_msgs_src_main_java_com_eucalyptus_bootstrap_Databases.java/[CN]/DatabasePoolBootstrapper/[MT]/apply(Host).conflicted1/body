{
  return new Function<String,Runnable>(){
    @Override public Runnable apply(    final String ctx){
      final String hostName=host.getBindAddress().getHostAddress();
      final String contextName=ctx.startsWith("eucalyptus_") ? ctx : "eucalyptus_" + ctx;
      Runnable removeRunner=new Runnable(){
        @Override public void run(){
          try {
            final boolean fullSync=!Hosts.isCoordinator() && host.isLocalHost() && BootstrapArgs.isCloudController()&& !Databases.isSynchronized();
            final boolean passiveSync=!fullSync && host.hasSynced();
            DriverDatabaseClusterMBean cluster=LookupPersistenceContextDatabaseCluster.INSTANCE.apply(contextName);
            final String dbUrl="jdbc:" + ServiceUris.remote(Database.class,host.getBindAddress(),contextName);
            final String dbPass=SystemIds.databasePassword();
            final String realJdbcDriver=Databases.getDriverName();
            if (!cluster.getActiveDatabases().contains(hostName) && !cluster.getInactiveDatabases().contains(hostName)) {
              LOG.info("Creating database connections for: " + host);
              cluster.add(hostName,realJdbcDriver,dbUrl);
              final InactiveDatabaseMBean database=Databases.lookupInactiveDatabase(contextName,hostName);
              database.setUser("eucalyptus");
              database.setPassword(dbPass);
            }
            if (fullSync) {
              if (cluster.getActiveDatabases().contains(hostName)) {
                LOG.info("Deactivating existing database connections to: " + host);
                cluster.deactivate(hostName);
              }
              LOG.info("Full sync of database on: " + host + " using "+ cluster.getActiveDatabases());
              cluster.activate(hostName,"full");
            }
 else             if (passiveSync) {
              if (!cluster.getActiveDatabases().contains(hostName)) {
                LOG.info("Passively activating database connections to: " + host);
                cluster.activate(hostName,"passive");
              }
 else {
                LOG.info("Skipping passive activation of extant database: " + host);
              }
            }
          }
 catch (          final NoSuchElementException ex1) {
            LOG.error(ex1,ex1);
          }
catch (          final Exception ex1) {
            LOG.error(ex1,ex1);
          }
        }
        @Override public String toString(){
          return "Databases.enable(): " + host.getDisplayName() + " "+ contextName;
        }
      }
;
      return removeRunner;
    }
  }
;
}
