{
  return new Function<String,Runnable>(){
    @Override public Runnable apply(    String ctx){
      final String hostName=host.getBindAddress().getHostAddress();
      final String contextName=ctx.startsWith("eucalyptus_") ? ctx : "eucalyptus_" + ctx;
      Runnable removeRunner=new Runnable(){
        @Override public void run(){
          try {
            DriverDatabaseClusterMBean cluster=LookupPersistenceContextDatabaseCluster.INSTANCE.apply(contextName);
            final String dbUrl="jdbc:" + ServiceUris.remote(Database.class,host.getBindAddress(),contextName);
            final String dbPass=SystemIds.databasePassword();
            final String realJdbcDriver=Databases.getDriverName();
            if (!cluster.getActiveDatabases().contains(hostName) && !cluster.getInactiveDatabases().contains(hostName)) {
              cluster.add(hostName,realJdbcDriver,dbUrl);
            }
 else             if (cluster.getActiveDatabases().contains(hostName)) {
              cluster.deactivate(hostName);
            }
            final InactiveDatabaseMBean database=Databases.lookupInactiveDatabase(contextName,hostName);
            database.setUser("eucalyptus");
            database.setPassword(dbPass);
            if (!Hosts.isCoordinator() && host.isLocalHost() && BootstrapArgs.isCloudController()&& !Databases.isSynchronized()) {
              cluster.activate(hostName,"full");
            }
 else             if (host.hasSynced()) {
              cluster.activate(hostName,"passive");
            }
          }
 catch (          final NoSuchElementException ex1) {
            LOG.error(ex1,ex1);
          }
catch (          final Exception ex1) {
            LOG.error(ex1,ex1);
          }
        }
        @Override public String toString(){
          return "Databases.enable(): " + host.getDisplayName() + " "+ contextName;
        }
      }
;
      return removeRunner;
    }
  }
;
}
