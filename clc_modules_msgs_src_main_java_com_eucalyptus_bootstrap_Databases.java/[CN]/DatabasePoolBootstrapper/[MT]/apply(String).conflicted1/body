{
  return new Function<String,Runnable>(){
    @Override public Runnable apply(    final String ctx){
      final String contextName=ctx.startsWith("eucalyptus_") ? ctx : "eucalyptus_" + ctx;
      Runnable removeRunner=new Runnable(){
        @Override public void run(){
          if (Internets.testLocal(hostName)) {
            return;
          }
          try {
            final DriverDatabaseClusterMBean cluster=lookup(contextName);
            Lock dbLock=cluster.getLockManager().writeLock("");
            if (dbLock.tryLock(5,TimeUnit.SECONDS)) {
              try {
                try {
                  cluster.getDatabase(hostName);
                }
 catch (                Exception ex1) {
                  return;
                }
                LOG.info("Tearing down database connections for: " + hostName + " to context: "+ contextName);
                for (int i=0; i < 10; i++) {
                  if (cluster.getActiveDatabases().contains(hostName)) {
                    try {
                      LOG.info("Deactivating database connections for: " + hostName + " to context: "+ contextName);
                      cluster.deactivate(hostName);
                      LOG.info("Deactived database connections for: " + hostName + " to context: "+ contextName);
                      try {
                        LOG.info("Removing database connections for: " + hostName + " to context: "+ contextName);
                        cluster.remove(hostName);
                        LOG.info("Removed database connections for: " + hostName + " to context: "+ contextName);
                        return;
                      }
 catch (                      IllegalStateException ex) {
                        Logs.extreme().debug(ex,ex);
                      }
                    }
 catch (                    Exception ex) {
                      LOG.info(ex);
                      Logs.extreme().debug(ex,ex);
                    }
                  }
 else                   if (cluster.getInactiveDatabases().contains(hostName)) {
                    try {
                      LOG.info("Removing database connections for: " + hostName + " to context: "+ contextName);
                      cluster.remove(hostName);
                      LOG.info("Removed database connections for: " + hostName + " to context: "+ contextName);
                      return;
                    }
 catch (                    Exception ex) {
                      LOG.info(ex);
                      Logs.extreme().debug(ex,ex);
                    }
                  }
                }
              }
  finally {
                dbLock.unlock();
              }
            }
          }
 catch (          final Exception ex1) {
            LOG.info(ex1);
            Logs.extreme().debug(ex1,ex1);
          }
        }
        @Override public String toString(){
          return "Databases.disable(): " + hostName + " "+ contextName;
        }
      }
;
      return removeRunner;
    }
    @Override public String toString(){
      return "Databases.disable(): " + hostName;
    }
  }
;
}
