{
  final WorkflowTypeInfos workflowTypeInfos=new WorkflowTypeInfos();
  final Context ctx=Contexts.lookup();
  final AccountFullName accountFullName=ctx.getUserFullName().asAccountFullName();
  final Predicate<? super WorkflowType> requestedAndAccessible=SimpleWorkflowMetadatas.filteringFor(WorkflowType.class).byProperty(Optional.fromNullable(request.getDomain()).asSet(),WorkflowTypes.StringFunctions.DOMAIN).byProperty(Optional.fromNullable(request.getRegistrationStatus()).asSet(),WorkflowTypes.StringFunctions.REGISTRATION_STATUS).byId(Optional.fromNullable(request.getName()).asSet()).byPrivileges().buildPredicate();
  try {
    workflowTypeInfos.getTypeInfos().addAll(workflowTypes.list(accountFullName,Restrictions.conjunction(),Collections.<String,String>emptyMap(),requestedAndAccessible,TypeMappers.lookup(WorkflowType.class,WorkflowTypeInfo.class)));
  }
 catch (  Exception e) {
    throw handleException(e);
  }
  return request.reply(workflowTypeInfos);
}
