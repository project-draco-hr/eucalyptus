{
  final String list=Joiner.on('/').join(type,domain,taskList);
  try {
    NotifyClient.pollTaskList(accountFullName,domain,type,taskList,Contexts.consumerWithCurrentContext(new Consumer<Boolean>(){
      @Override public void accept(      final Boolean notified){
        try {
          if (notified) {
            final SimpleWorkflowMessage taskResponse=responseCallable.call();
            if (taskResponse != null) {
              taskResponse.setCorrelationId(correlationId);
              Contexts.response(taskResponse);
              return;
            }
          }
        }
 catch (        final InterruptedException e) {
          logger.info("Interrupted while polling for task " + list,e);
        }
catch (        final ExecutionException e) {
          handleExecutionExceptionForPolling(e,list);
        }
catch (        final Exception e) {
          logger.error("Error polling for task " + list,e);
        }
        emptyResponse.setCorrelationId(correlationId);
        Contexts.response(emptyResponse);
      }
    }
));
  }
 catch (  ExecutionException e) {
    handleExecutionExceptionForPolling(e,list);
  }
catch (  Exception e) {
    logger.error("Error polling for task " + list,e);
    emptyResponse.setCorrelationId(correlationId);
    Contexts.response(emptyResponse);
  }
}
