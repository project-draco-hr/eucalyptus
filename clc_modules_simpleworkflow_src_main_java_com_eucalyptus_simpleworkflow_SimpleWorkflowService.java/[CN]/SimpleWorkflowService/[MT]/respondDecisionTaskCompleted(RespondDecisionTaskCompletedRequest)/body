{
  final Context ctx=Contexts.lookup();
  final UserFullName userFullName=ctx.getUserFullName();
  final AccountFullName accountFullName=userFullName.asAccountFullName();
  final Predicate<? super WorkflowExecution> accessible=SimpleWorkflowMetadatas.filteringFor(WorkflowExecution.class).byPrivileges().buildPredicate();
  try {
    final TaskToken token=taskTokenManager.decryptTaskToken(accountFullName.getAccountNumber(),request.getTaskToken());
    final Domain domain=domains.lookupByExample(Domain.exampleWithUuid(accountFullName,token.getDomainUuid()),accountFullName,token.getDomainUuid(),Predicates.alwaysTrue(),Functions.<Domain>identity());
    final Set<Pair<String,String>> notificationTypeListPairs=Sets.newHashSet();
    try (final WorkflowLock lock=WorkflowLock.lock(accountFullName,domain,token.getRunId())){
      workflowExecutions.withRetries().updateByExample(WorkflowExecution.exampleWithUniqueName(accountFullName,domain.getDisplayName(),token.getRunId()),accountFullName,token.getRunId(),new Function<WorkflowExecution,WorkflowExecution>(){
        @Nullable @Override public WorkflowExecution apply(        final WorkflowExecution workflowExecution){
          if (accessible.apply(workflowExecution)) {
            notificationTypeListPairs.clear();
            final List<WorkflowHistoryEvent> events=workflowExecution.getWorkflowHistory();
            final List<WorkflowHistoryEvent> reverseEvents=Lists.reverse(events);
            final WorkflowHistoryEvent started=Iterables.find(reverseEvents,CollectionUtils.propertyPredicate("DecisionTaskStarted",EVENT_TYPE));
            if (!started.getEventId().equals(token.getStartedEventId())) {
              throw upClient("ValidationError","Bad token");
            }
            final WorkflowHistoryEvent scheduled=Iterables.find(reverseEvents,CollectionUtils.propertyPredicate("DecisionTaskScheduled",EVENT_TYPE));
            if (scheduled.getEventId() < started.getEventId()) {
              workflowExecution.setDecisionStatus(Idle);
              workflowExecution.setDecisionTimestamp(new Date());
            }
 else {
              workflowExecution.setDecisionStatus(Pending);
              workflowExecution.setDecisionTimestamp(new Date());
              notificationTypeListPairs.add(Pair.pair("decision",workflowExecution.getTaskList()));
            }
            int activityTaskScheduledCount=0;
            final Supplier<Long> activityTaskCounter=Suppliers.memoize(new Supplier<Long>(){
              @Override public Long get(){
                try {
                  return activityTasks.countByWorkflowExecution(accountFullName,domain.getDisplayName(),workflowExecution.getDisplayName());
                }
 catch (                SwfMetadataException e) {
                  throw up(e);
                }
              }
            }
);
            workflowExecution.setLatestExecutionContext(request.getExecutionContext());
            final Long completedId=workflowExecution.addHistoryEvent(WorkflowHistoryEvent.create(workflowExecution,new DecisionTaskCompletedEventAttributes().withExecutionContext(request.getExecutionContext()).withScheduledEventId(token.getScheduledEventId()).withStartedEventId(token.getStartedEventId())));
            boolean scheduleDecisionTask=false;
            if (request.getDecisions() != null)             for (            final Decision decision : request.getDecisions()) {
switch (decision.getDecisionType()) {
case "CancelTimer":
                final CancelTimerDecisionAttributes cancelTimer=decision.getCancelTimerDecisionAttributes();
              try {
                final List<Timer> timerList=timers.listByExample(Timer.exampleWithTimerId(accountFullName,workflowExecution.getDomainName(),workflowExecution.getDisplayName(),cancelTimer.getTimerId()),Predicates.alwaysTrue(),Functions.<Timer>identity());
                if (!timerList.isEmpty()) {
                  final Timer timer=Iterables.getOnlyElement(timerList);
                  timers.deleteByExample(timer);
                  workflowExecution.addHistoryEvent(WorkflowHistoryEvent.create(workflowExecution,new TimerCanceledEventAttributes().withDecisionTaskCompletedEventId(completedId).withStartedEventId(timer.getStartedEventId()).withTimerId(cancelTimer.getTimerId())));
                }
 else {
                  workflowExecution.addHistoryEvent(WorkflowHistoryEvent.create(workflowExecution,new CancelTimerFailedEventAttributes().withCause(CancelTimerFailedCause.TIMER_ID_UNKNOWN).withDecisionTaskCompletedEventId(completedId).withTimerId(cancelTimer.getTimerId())));
                  scheduleDecisionTask=true;
                }
              }
 catch (              SwfMetadataException e) {
                throw up(e);
              }
            break;
case "CancelWorkflowExecution":
          final CancelWorkflowExecutionDecisionAttributes cancelWorkflowExecution=decision.getCancelWorkflowExecutionDecisionAttributes();
        workflowExecution.closeWorkflow(WorkflowExecution.CloseStatus.Canceled,WorkflowHistoryEvent.create(workflowExecution,new WorkflowExecutionCanceledEventAttributes().withDecisionTaskCompletedEventId(completedId).withDetails(cancelWorkflowExecution.getDetails())));
      deleteActivities(activityTasks,accountFullName,workflowExecution);
    break;
case "CompleteWorkflowExecution":
  final CompleteWorkflowExecutionDecisionAttributes completed=decision.getCompleteWorkflowExecutionDecisionAttributes();
workflowExecution.closeWorkflow(WorkflowExecution.CloseStatus.Completed,WorkflowHistoryEvent.create(workflowExecution,new WorkflowExecutionCompletedEventAttributes().withDecisionTaskCompletedEventId(completedId).withResult(completed.getResult())));
break;
case "ContinueAsNewWorkflowExecution":
final ContinueAsNewWorkflowExecutionDecisionAttributes continueAsNew=decision.getContinueAsNewWorkflowExecutionDecisionAttributes();
ContinueAsNewWorkflowExecutionFailedCause failedCause=null;
if (Pending == workflowExecution.getDecisionStatus()) {
failedCause=ContinueAsNewWorkflowExecutionFailedCause.UNHANDLED_DECISION;
}
WorkflowType workflowType=null;
if (failedCause == null) try {
workflowType=workflowTypes.lookupByExample(WorkflowType.exampleWithUniqueName(accountFullName,workflowExecution.getDomainName(),workflowExecution.getWorkflowType().getName(),MoreObjects.firstNonNull(continueAsNew.getWorkflowTypeVersion(),workflowExecution.getWorkflowType().getWorkflowVersion())),accountFullName,workflowExecution.getWorkflowType().getName(),Predicates.<WorkflowType>alwaysTrue(),Functions.<WorkflowType>identity());
if (!WorkflowType.Status.Registered.apply(workflowType)) {
failedCause=ContinueAsNewWorkflowExecutionFailedCause.WORKFLOW_TYPE_DEPRECATED;
}
}
 catch (SwfMetadataNotFoundException e) {
failedCause=ContinueAsNewWorkflowExecutionFailedCause.WORKFLOW_TYPE_DOES_NOT_EXIST;
}
catch (SwfMetadataException e) {
throw up(e);
}
if (failedCause == null) {
final Integer requestedExecutionStartToCloseTimeout=parsePeriod(continueAsNew.getExecutionStartToCloseTimeout(),-1);
final Integer requestedTaskStartToCloseTimeout=parsePeriod(continueAsNew.getTaskStartToCloseTimeout(),-1);
if (continueAsNew.getChildPolicy() == null && workflowType.getDefaultChildPolicy() == null) {
failedCause=ContinueAsNewWorkflowExecutionFailedCause.DEFAULT_CHILD_POLICY_UNDEFINED;
}
 else if (requestedExecutionStartToCloseTimeout == null && workflowType.getDefaultExecutionStartToCloseTimeout() == null) {
failedCause=ContinueAsNewWorkflowExecutionFailedCause.DEFAULT_EXECUTION_START_TO_CLOSE_TIMEOUT_UNDEFINED;
}
 else if (continueAsNew.getTaskList() == null && workflowType.getDefaultTaskList() == null) {
failedCause=ContinueAsNewWorkflowExecutionFailedCause.DEFAULT_TASK_LIST_UNDEFINED;
}
 else if (requestedTaskStartToCloseTimeout == null && workflowType.getDefaultTaskStartToCloseTimeout() == null) {
failedCause=ContinueAsNewWorkflowExecutionFailedCause.DEFAULT_TASK_START_TO_CLOSE_TIMEOUT_UNDEFINED;
}
 else {
final String childPolicy=MoreObjects.firstNonNull(continueAsNew.getChildPolicy(),workflowType.getDefaultChildPolicy());
final String taskList=continueAsNew.getTaskList() == null ? workflowType.getDefaultTaskList() : continueAsNew.getTaskList().getName();
final Integer executionStartToCloseTimeout=MoreObjects.firstNonNull(requestedExecutionStartToCloseTimeout,workflowType.getDefaultExecutionStartToCloseTimeout());
final Integer taskStartToCloseTimeout=MoreObjects.firstNonNull(requestedTaskStartToCloseTimeout,workflowType.getDefaultTaskStartToCloseTimeout());
final String taskStartToCloseTimeoutStr=taskStartToCloseTimeout < 0 ? "NONE" : String.valueOf(taskStartToCloseTimeout);
final WorkflowExecution workflowExecutionContinued=WorkflowExecution.create(userFullName,UUID.randomUUID().toString(),domain,workflowType,workflowExecution.getWorkflowId(),childPolicy,taskList,executionStartToCloseTimeout,taskStartToCloseTimeout < 0 ? null : taskStartToCloseTimeout,continueAsNew.getTagList(),Lists.newArrayList(new WorkflowExecutionStartedEventAttributes().withChildPolicy(childPolicy).withContinuedExecutionRunId(workflowExecution.getDisplayName()).withExecutionStartToCloseTimeout(String.valueOf(executionStartToCloseTimeout)).withInput(continueAsNew.getInput()).withParentInitiatedEventId(0L).withTaskList(new TaskList().withName(taskList)).withTagList(continueAsNew.getTagList()).withTaskStartToCloseTimeout(taskStartToCloseTimeoutStr).withWorkflowType(new com.eucalyptus.simpleworkflow.common.model.WorkflowType().withName(workflowType.getDisplayName()).withVersion(workflowType.getWorkflowVersion())),new DecisionTaskScheduledEventAttributes().withStartToCloseTimeout(taskStartToCloseTimeoutStr).withTaskList(new TaskList().withName(taskList))));
try {
workflowExecutions.save(workflowExecutionContinued);
}
 catch (SwfMetadataException e) {
throw up(e);
}
workflowExecution.closeWorkflow(WorkflowExecution.CloseStatus.Continued_As_New,WorkflowHistoryEvent.create(workflowExecution,new WorkflowExecutionCompletedEventAttributes().withDecisionTaskCompletedEventId(completedId)));
deleteActivities(activityTasks,accountFullName,workflowExecution);
notificationTypeListPairs.add(Pair.pair("decision",taskList));
}
}
if (failedCause != null) {
workflowExecution.addHistoryEvent(WorkflowHistoryEvent.create(workflowExecution,new ContinueAsNewWorkflowExecutionFailedEventAttributes().withCause(ContinueAsNewWorkflowExecutionFailedCause.OPERATION_NOT_PERMITTED).withDecisionTaskCompletedEventId(completedId)));
scheduleDecisionTask=true;
}
break;
case "FailWorkflowExecution":
final FailWorkflowExecutionDecisionAttributes failed=decision.getFailWorkflowExecutionDecisionAttributes();
workflowExecution.closeWorkflow(WorkflowExecution.CloseStatus.Failed,WorkflowHistoryEvent.create(workflowExecution,new WorkflowExecutionFailedEventAttributes().withDecisionTaskCompletedEventId(completedId).withDetails(failed.getDetails()).withReason(failed.getReason())));
deleteActivities(activityTasks,accountFullName,workflowExecution);
break;
case "RecordMarker":
final RecordMarkerDecisionAttributes mark=decision.getRecordMarkerDecisionAttributes();
workflowExecution.addHistoryEvent(WorkflowHistoryEvent.create(workflowExecution,new MarkerRecordedEventAttributes().withDetails(mark.getDetails()).withDecisionTaskCompletedEventId(completedId).withMarkerName(mark.getMarkerName())));
break;
case "RequestCancelActivityTask":
final RequestCancelActivityTaskDecisionAttributes cancelActivity=decision.getRequestCancelActivityTaskDecisionAttributes();
try {
activityTasks.updateByExample(ActivityTask.exampleWithActivityId(accountFullName,workflowExecution.getDomainName(),workflowExecution.getDisplayName(),cancelActivity.getActivityId()),accountFullName,cancelActivity.getActivityId(),new Function<ActivityTask,Void>(){
@Override public Void apply(final ActivityTask activityTask){
final Long cancelRequestedId=workflowExecution.addHistoryEvent(WorkflowHistoryEvent.create(workflowExecution,new ActivityTaskCancelRequestedEventAttributes().withDecisionTaskCompletedEventId(completedId).withActivityId(cancelActivity.getActivityId())));
if (activityTask.getState() == ActivityTask.State.Active) {
activityTask.setCancelRequestedEventId(cancelRequestedId);
}
 else {
workflowExecution.addHistoryEvent(WorkflowHistoryEvent.create(workflowExecution,new ActivityTaskCanceledEventAttributes().withLatestCancelRequestedEventId(cancelRequestedId).withScheduledEventId(activityTask.getScheduledEventId()).withStartedEventId(activityTask.getStartedEventId())));
Entities.delete(activityTask);
}
return null;
}
}
);
}
 catch (SwfMetadataNotFoundException e) {
workflowExecution.addHistoryEvent(WorkflowHistoryEvent.create(workflowExecution,new RequestCancelActivityTaskFailedEventAttributes().withCause(RequestCancelActivityTaskFailedCause.ACTIVITY_ID_UNKNOWN).withDecisionTaskCompletedEventId(completedId).withActivityId(cancelActivity.getActivityId())));
}
catch (SwfMetadataException e) {
throw up(e);
}
scheduleDecisionTask=true;
break;
case "RequestCancelExternalWorkflowExecution":
final RequestCancelExternalWorkflowExecutionDecisionAttributes cancelExternalWorkflow=decision.getRequestCancelExternalWorkflowExecutionDecisionAttributes();
workflowExecution.addHistoryEvent(WorkflowHistoryEvent.create(workflowExecution,new RequestCancelExternalWorkflowExecutionFailedEventAttributes().withCause(RequestCancelExternalWorkflowExecutionFailedCause.UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION).withControl(cancelExternalWorkflow.getControl()).withDecisionTaskCompletedEventId(completedId).withRunId(cancelExternalWorkflow.getRunId()).withWorkflowId(cancelExternalWorkflow.getWorkflowId())));
scheduleDecisionTask=true;
break;
case "ScheduleActivityTask":
workflowExecution.setLatestActivityTaskScheduled(new Date());
final ScheduleActivityTaskDecisionAttributes scheduleActivity=decision.getScheduleActivityTaskDecisionAttributes();
final Long scheduledId=workflowExecution.addHistoryEvent(WorkflowHistoryEvent.create(workflowExecution,new ActivityTaskScheduledEventAttributes().withDecisionTaskCompletedEventId(completedId).withActivityId(scheduleActivity.getActivityId()).withActivityType(scheduleActivity.getActivityType()).withControl(scheduleActivity.getControl()).withHeartbeatTimeout(scheduleActivity.getHeartbeatTimeout()).withInput(scheduleActivity.getInput()).withScheduleToCloseTimeout(scheduleActivity.getScheduleToCloseTimeout()).withScheduleToStartTimeout(scheduleActivity.getScheduleToStartTimeout()).withStartToCloseTimeout(scheduleActivity.getStartToCloseTimeout()).withTaskList(scheduleActivity.getTaskList())));
try {
final ActivityType activityType;
try {
activityType=activityTypes.lookupByExample(ActivityType.exampleWithUniqueName(accountFullName,domain.getDisplayName(),scheduleActivity.getActivityType().getName(),scheduleActivity.getActivityType().getVersion()),accountFullName,scheduleActivity.getActivityType().getName(),Predicates.alwaysTrue(),Functions.<ActivityType>identity());
}
 catch (final SwfMetadataNotFoundException e) {
throw new ScheduleActivityTaskException(ACTIVITY_TYPE_DOES_NOT_EXIST);
}
if (ActivityType.Status.Deprecated.apply(activityType)) {
throw new ScheduleActivityTaskException(ACTIVITY_TYPE_DEPRECATED);
}
final String list=scheduleActivity.getTaskList() == null ? activityType.getDefaultTaskList() : scheduleActivity.getTaskList().getName();
if (list == null) {
throw new ScheduleActivityTaskException(DEFAULT_TASK_LIST_UNDEFINED);
}
if (activityTaskCounter.get() + activityTaskScheduledCount >= SimpleWorkflowProperties.getOpenActivityTasksPerWorkflowExecution()) {
throw new ScheduleActivityTaskException(OPEN_ACTIVITIES_LIMIT_EXCEEDED);
}
activityTasks.save(com.eucalyptus.simpleworkflow.ActivityTask.create(userFullName,workflowExecution,domain.getDisplayName(),domain.getNaturalId(),scheduleActivity.getActivityId(),scheduleActivity.getActivityType().getName(),scheduleActivity.getActivityType().getVersion(),scheduleActivity.getInput(),scheduledId,list,parseActivityPeriod(scheduleActivity.getScheduleToCloseTimeout(),activityType.getDefaultTaskScheduleToCloseTimeout(),DEFAULT_SCHEDULE_TO_CLOSE_TIMEOUT_UNDEFINED),parseActivityPeriod(scheduleActivity.getScheduleToStartTimeout(),activityType.getDefaultTaskScheduleToStartTimeout(),DEFAULT_SCHEDULE_TO_START_TIMEOUT_UNDEFINED),parseActivityPeriod(scheduleActivity.getStartToCloseTimeout(),activityType.getDefaultTaskStartToCloseTimeout(),DEFAULT_START_TO_CLOSE_TIMEOUT_UNDEFINED),parseActivityPeriod(scheduleActivity.getHeartbeatTimeout(),activityType.getDefaultTaskHeartbeatTimeout(),DEFAULT_HEARTBEAT_TIMEOUT_UNDEFINED)));
activityTaskScheduledCount++;
notificationTypeListPairs.add(Pair.pair("activity",list));
}
 catch (final ScheduleActivityTaskException e) {
workflowExecution.addHistoryEvent(WorkflowHistoryEvent.create(workflowExecution,new ScheduleActivityTaskFailedEventAttributes().withActivityId(scheduleActivity.getActivityId()).withActivityType(scheduleActivity.getActivityType()).withCause(e.getFailedCause()).withDecisionTaskCompletedEventId(completedId)));
scheduleDecisionTask=true;
}
catch (final Exception e) {
throw up(e);
}
break;
case "SignalExternalWorkflowExecution":
final SignalExternalWorkflowExecutionDecisionAttributes signalExternalWorkflow=decision.getSignalExternalWorkflowExecutionDecisionAttributes();
workflowExecution.addHistoryEvent(WorkflowHistoryEvent.create(workflowExecution,new SignalExternalWorkflowExecutionFailedEventAttributes().withCause(SignalExternalWorkflowExecutionFailedCause.UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION).withControl(signalExternalWorkflow.getControl()).withDecisionTaskCompletedEventId(completedId).withRunId(signalExternalWorkflow.getRunId()).withWorkflowId(signalExternalWorkflow.getWorkflowId())));
scheduleDecisionTask=true;
break;
case "StartChildWorkflowExecution":
final StartChildWorkflowExecutionDecisionAttributes startChildWorkflow=decision.getStartChildWorkflowExecutionDecisionAttributes();
workflowExecution.addHistoryEvent(WorkflowHistoryEvent.create(workflowExecution,new StartChildWorkflowExecutionFailedEventAttributes().withCause(StartChildWorkflowExecutionFailedCause.OPERATION_NOT_PERMITTED).withControl(startChildWorkflow.getControl()).withDecisionTaskCompletedEventId(completedId).withWorkflowId(startChildWorkflow.getWorkflowId()).withWorkflowType(startChildWorkflow.getWorkflowType())));
scheduleDecisionTask=true;
break;
case "ScheduleLambdaFunction":
final ScheduleLambdaFunctionDecisionAttributes scheduleLambdaFunction=decision.getScheduleLambdaFunctionDecisionAttributes();
workflowExecution.addHistoryEvent(WorkflowHistoryEvent.create(workflowExecution,new ScheduleLambdaFunctionFailedEventAttributes().withId(scheduleLambdaFunction.getId()).withName(scheduleLambdaFunction.getName()).withCause(ScheduleLambdaFunctionFailedCause.LAMBDA_SERVICE_NOT_AVAILABLE_IN_REGION).withDecisionTaskCompletedEventId(completedId)));
scheduleDecisionTask=true;
break;
case "StartTimer":
final StartTimerDecisionAttributes startTimer=decision.getStartTimerDecisionAttributes();
try {
if (!timers.listByExample(Timer.exampleWithTimerId(accountFullName,workflowExecution.getDomainName(),workflowExecution.getDisplayName(),startTimer.getTimerId()),Predicates.alwaysTrue(),Functions.<Timer>identity()).isEmpty()) {
throw new StartTimerException(StartTimerFailedCause.TIMER_ID_ALREADY_IN_USE);
}
final Long startedId=workflowExecution.addHistoryEvent(WorkflowHistoryEvent.create(workflowExecution,new TimerStartedEventAttributes().withControl(startTimer.getControl()).withDecisionTaskCompletedEventId(completedId).withStartToFireTimeout(startTimer.getStartToFireTimeout()).withTimerId(startTimer.getTimerId())));
if (timers.countByWorkflowExecution(accountFullName,domain.getDisplayName(),workflowExecution.getDisplayName()) >= SimpleWorkflowProperties.getOpenTimersPerWorkflowExecution()) {
throw new StartTimerException(StartTimerFailedCause.OPEN_TIMERS_LIMIT_EXCEEDED);
}
timers.save(Timer.create(userFullName,workflowExecution,workflowExecution.getDomainName(),workflowExecution.getDomainUuid(),startTimer.getTimerId(),startTimer.getControl(),parsePeriod(startTimer.getStartToFireTimeout(),0),completedId,startedId));
}
 catch (StartTimerException e) {
workflowExecution.addHistoryEvent(WorkflowHistoryEvent.create(workflowExecution,new StartTimerFailedEventAttributes().withCause(e.getFailedCause()).withDecisionTaskCompletedEventId(completedId).withTimerId(startTimer.getTimerId())));
scheduleDecisionTask=true;
}
catch (SwfMetadataException e) {
throw up(e);
}
break;
default :
throw up(new SimpleWorkflowException("InternalFailure",Role.Receiver,"Unsupported decision type: " + decision.getDecisionType()));
}
}
if (scheduleDecisionTask && workflowExecution.getDecisionStatus() != Pending) {
workflowExecution.addHistoryEvent(WorkflowHistoryEvent.create(workflowExecution,new DecisionTaskScheduledEventAttributes().withTaskList(new TaskList().withName(workflowExecution.getTaskList())).withStartToCloseTimeout(String.valueOf(workflowExecution.getTaskStartToCloseTimeout()))));
workflowExecution.setDecisionStatus(Pending);
workflowExecution.setDecisionTimestamp(new Date());
notificationTypeListPairs.add(Pair.pair("decision",workflowExecution.getTaskList()));
}
 else {
workflowExecution.updateTimeStamps();
}
}
return workflowExecution;
}
}
);
}
 for (final Pair<String,String> notificationTypeListPair : notificationTypeListPairs) {
notifyTaskList(accountFullName,domain.getDisplayName(),notificationTypeListPair.getLeft(),notificationTypeListPair.getRight());
}
}
 catch (Exception e) {
throw handleException(e);
}
return request.reply(new SimpleWorkflowMessage());
}
