{
  final Context ctx=Contexts.lookup();
  final UserFullName userFullName=ctx.getUserFullName();
  final AccountFullName accountFullName=userFullName.asAccountFullName();
  final Predicate<? super ActivityTask> accessible=SimpleWorkflowMetadatas.filteringFor(ActivityTask.class).byPrivileges().buildPredicate();
  com.eucalyptus.simpleworkflow.common.model.ActivityTask activityTask=null;
  try {
    final List<ActivityTask> pending=activityTasks.listByExample(ActivityTask.examplePending(accountFullName,request.getDomain(),request.getTaskList().getName()),accessible,Functions.<ActivityTask>identity());
    Collections.sort(pending,Ordering.natural().onResultOf(AbstractPersistentSupport.creation()));
    for (    final ActivityTask pendingTask : pending) {
      if (activityTask != null)       break;
      try {
        activityTask=activityTasks.updateByExample(pendingTask,accountFullName,pendingTask.getDisplayName(),new Function<ActivityTask,com.eucalyptus.simpleworkflow.common.model.ActivityTask>(){
          @Nullable @Override public com.eucalyptus.simpleworkflow.common.model.ActivityTask apply(          final ActivityTask activityTask){
            if (activityTask.getState() == ActivityTask.State.Pending) {
              final WorkflowExecution workflowExecution=activityTask.getWorkflowExecution();
              final Long startedId=workflowExecution.addHistoryEvent(WorkflowHistoryEvent.create(workflowExecution,new ActivityTaskStartedEventAttributes().withIdentity(request.getIdentity()).withScheduledEventId(activityTask.getScheduledEventId())));
              activityTask.setState(ActivityTask.State.Active);
              activityTask.setStartedEventId(startedId);
              return new com.eucalyptus.simpleworkflow.common.model.ActivityTask().withStartedEventId(startedId).withInput(activityTask.getInput()).withTaskToken(taskTokenManager.encryptTaskToken(new TaskToken(accountFullName.getAccountNumber(),workflowExecution.getDomain().getNaturalId(),workflowExecution.getDisplayName(),activityTask.getScheduledEventId(),startedId,System.currentTimeMillis(),System.currentTimeMillis()))).withActivityId(activityTask.getDisplayName()).withActivityType(new com.eucalyptus.simpleworkflow.common.model.ActivityType().withName(activityTask.getActivityType()).withVersion(activityTask.getActivityVersion())).withWorkflowExecution(new com.eucalyptus.simpleworkflow.common.model.WorkflowExecution().withRunId(workflowExecution.getDisplayName()).withWorkflowId(workflowExecution.getWorkflowId()));
            }
            return null;
          }
        }
);
      }
 catch (      Exception e) {
        logger.error("Error taking activity task",e);
      }
    }
  }
 catch (  Exception e) {
    throw handleException(e);
  }
  if (activityTask == null) {
    longPollSimulation();
    activityTask=new com.eucalyptus.simpleworkflow.common.model.ActivityTask();
  }
  return request.reply(activityTask);
}
