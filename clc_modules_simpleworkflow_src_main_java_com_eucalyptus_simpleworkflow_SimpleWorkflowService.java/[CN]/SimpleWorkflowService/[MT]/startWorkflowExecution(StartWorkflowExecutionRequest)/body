{
  final Context ctx=Contexts.lookup();
  final UserFullName userFullName=ctx.getUserFullName();
  final AccountFullName accountFullName=userFullName.asAccountFullName();
  final Predicate<? super WorkflowType> accessible=SimpleWorkflowMetadatas.filteringFor(WorkflowType.class).byPrivileges().buildPredicate();
  final WorkflowExecution workflowExecution=allocate(new Supplier<WorkflowExecution>(){
    @Override public WorkflowExecution get(){
      try {
        if (!workflowExecutions.listByExample(WorkflowExecution.exampleForOpenWorkflow(accountFullName,request.getDomain(),request.getWorkflowId()),Predicates.alwaysTrue(),Functions.identity()).isEmpty()) {
          throw new SimpleWorkflowClientException("WorkflowExecutionAlreadyStartedFault","Workflow open with ID " + request.getWorkflowId());
        }
        final Domain domain;
        try {
          domain=domains.lookupByName(accountFullName,request.getDomain(),Registered,Functions.<Domain>identity());
        }
 catch (        SwfMetadataNotFoundException e) {
          throw upClient("UnknownResourceFault","Unknown domain: " + request.getDomain());
        }
        if (workflowExecutions.countOpenByDomain(accountFullName,domain.getDisplayName()) >= SimpleWorkflowConfiguration.getOpenWorkflowExecutionsPerDomain()) {
          throw upClient("LimitExceededFault","Request would exceed limit for open workflow executions");
        }
        final WorkflowType workflowType;
        try {
          workflowType=workflowTypes.lookupByExample(WorkflowType.exampleWithUniqueName(accountFullName,request.getDomain(),request.getWorkflowType().getName(),request.getWorkflowType().getVersion()),accountFullName,request.getWorkflowType().getName(),Predicates.and(accessible,WorkflowType.Status.Registered),Functions.<WorkflowType>identity());
        }
 catch (        SwfMetadataNotFoundException e) {
          throw upClient("UnknownResourceFault","Unknown workflow type: " + request.getWorkflowType().getName());
        }
        if (request.getChildPolicy() == null && workflowType.getDefaultChildPolicy() == null) {
          throw upClient("DefaultUndefinedFault","Default child policy undefined");
        }
        if (request.getTaskList() == null && workflowType.getDefaultTaskList() == null) {
          throw upClient("DefaultUndefinedFault","Default task list undefined");
        }
        final String childPolicy=Objects.firstNonNull(request.getChildPolicy(),workflowType.getDefaultChildPolicy());
        final String taskList=request.getTaskList() == null ? workflowType.getDefaultTaskList() : request.getTaskList().getName();
        final Integer executionStartToCloseTimeout=requireDefault(parsePeriod(request.getExecutionStartToCloseTimeout()),workflowType.getDefaultExecutionStartToCloseTimeout(),"ExecutionStartToCloseTimeout");
        final Integer taskStartToCloseTimeout=requireDefault(parsePeriod(request.getTaskStartToCloseTimeout()),workflowType.getDefaultTaskStartToCloseTimeout(),"TaskStartToCloseTimeout");
        final WorkflowExecution workflowExecution=WorkflowExecution.create(userFullName,UUID.randomUUID().toString(),domain,workflowType,request.getWorkflowId(),childPolicy,taskList,executionStartToCloseTimeout,taskStartToCloseTimeout,request.getTagList(),Lists.newArrayList(new WorkflowExecutionStartedEventAttributes().withChildPolicy(childPolicy).withExecutionStartToCloseTimeout(String.valueOf(executionStartToCloseTimeout)).withInput(request.getInput()).withParentInitiatedEventId(0L).withTaskList(new TaskList().withName(taskList)).withTagList(request.getTagList()).withTaskStartToCloseTimeout(String.valueOf(taskStartToCloseTimeout)).withWorkflowType(request.getWorkflowType()),new DecisionTaskScheduledEventAttributes().withStartToCloseTimeout(String.valueOf(taskStartToCloseTimeout)).withTaskList(request.getTaskList())));
        return workflowExecutions.save(workflowExecution);
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex);
      }
    }
  }
,WorkflowExecution.class,request.getWorkflowId());
  notifyTaskList(accountFullName,workflowExecution.getDomainName(),"decision",workflowExecution.getTaskList());
  final Run run=new Run();
  run.setRunId(workflowExecution.getDisplayName());
  return request.reply(run);
}
