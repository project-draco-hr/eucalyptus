{
  final SimpleWorkflowException cause=Exceptions.findCause(e,SimpleWorkflowException.class);
  if (cause != null) {
    throw cause;
  }
  final WorkflowHistorySizeLimitException historySizeLimitCause=Exceptions.findCause(e,WorkflowHistorySizeLimitException.class);
  if (historySizeLimitCause != null) {
    WorkflowExecutions.Utils.terminateWorkflowExecution(workflowExecutions,"EVENT_LIMIT_EXCEEDED",historySizeLimitCause.getAccountNumber(),historySizeLimitCause.getDomain(),historySizeLimitCause.getWorkflowId());
    throw new SimpleWorkflowClientException("LimitExceededFault","Request would exceed history limit for workflow execution");
  }
  final AuthQuotaException quotaCause=Exceptions.findCause(e,AuthQuotaException.class);
  if (quotaCause != null) {
    throw new SimpleWorkflowClientException("LimitExceededFault","Request would exceed quota for type: " + quotaCause.getType());
  }
  final TaskTokenException tokenCause=Exceptions.findCause(e,TaskTokenException.class);
  if (tokenCause != null) {
    throw new SimpleWorkflowClientException("InvalidParameterValue","Invalid task token.");
  }
  logger.error(e,e);
  final SimpleWorkflowException exception=new SimpleWorkflowException("InternalError",Role.Receiver,String.valueOf(e.getMessage()));
  if (Contexts.lookup().hasAdministrativePrivileges()) {
    exception.initCause(e);
  }
  throw exception;
}
