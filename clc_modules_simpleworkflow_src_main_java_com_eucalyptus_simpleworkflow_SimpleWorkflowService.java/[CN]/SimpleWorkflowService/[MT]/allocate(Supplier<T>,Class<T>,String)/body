{
  try {
    return RestrictedTypes.allocateUnitlessResources(type,1,transactional(allocator)).get(0);
  }
 catch (  Exception e) {
    final ConstraintViolationException constraintViolationException=Exceptions.findCause(e,ConstraintViolationException.class);
    if (constraintViolationException != null) {
      final String typeName=type.getSimpleName();
      final String faultPrefix=typeName.endsWith("Type") ? "Type" : typeName;
      throw new SimpleWorkflowClientException(faultPrefix + "AlreadyExistsFault",typeName + " already exists: " + name);
    }
    throw handleException(e);
  }
}
