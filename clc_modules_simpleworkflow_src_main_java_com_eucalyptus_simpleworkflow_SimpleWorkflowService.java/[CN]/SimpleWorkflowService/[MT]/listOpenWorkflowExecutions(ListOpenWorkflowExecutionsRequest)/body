{
  final Context ctx=Contexts.lookup();
  final UserFullName userFullName=ctx.getUserFullName();
  final AccountFullName accountFullName=userFullName.asAccountFullName();
  final Predicate<? super WorkflowExecution> accessible=SimpleWorkflowMetadatas.filteringFor(WorkflowExecution.class).byPrivileges().buildPredicate();
  final WorkflowExecutionInfos workflowExecutionInfos=new WorkflowExecutionInfos();
  try {
    final Conjunction filter=Restrictions.conjunction();
    final Map<String,String> aliases=Maps.newHashMap();
    buildFilters(request,filter,aliases);
    workflowExecutionInfos.getExecutionInfos().addAll(workflowExecutions.listByExample(WorkflowExecution.exampleForOpenWorkflow(accountFullName,request.getDomain(),null),accessible,filter,aliases,TypeMappers.lookup(WorkflowExecution.class,WorkflowExecutionInfo.class)));
    final Ordering<WorkflowExecutionInfo> ordering=Ordering.natural().onResultOf(WorkflowExecutions.WorkflowExecutionInfoDateFunctions.START_TIMESTAMP);
    Collections.sort(workflowExecutionInfos.getExecutionInfos(),MoreObjects.firstNonNull(request.getReverseOrder(),Boolean.FALSE) ? ordering.reverse() : ordering);
  }
 catch (  Exception e) {
    throw handleException(e);
  }
  return request.reply(workflowExecutionInfos);
}
