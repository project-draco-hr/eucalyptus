{
  final ActivityTypeInfos activityTypeInfos=new ActivityTypeInfos();
  final Context ctx=Contexts.lookup();
  final AccountFullName accountFullName=ctx.getUserFullName().asAccountFullName();
  final Predicate<? super ActivityType> requestedAndAccessible=SimpleWorkflowMetadatas.filteringFor(ActivityType.class).byProperty(Optional.fromNullable(request.getDomain()).asSet(),ActivityTypes.StringFunctions.DOMAIN).byProperty(Optional.fromNullable(request.getRegistrationStatus()).asSet(),ActivityTypes.StringFunctions.REGISTRATION_STATUS).byId(Optional.fromNullable(request.getName()).asSet()).byPrivileges().buildPredicate();
  try {
    activityTypeInfos.getTypeInfos().addAll(activityTypes.list(accountFullName,requestedAndAccessible,TypeMappers.lookup(ActivityType.class,ActivityTypeInfo.class)));
    final Ordering<ActivityTypeInfo> ordering=Ordering.natural().onResultOf(ActivityTypes.ActivityTypeInfoStringFunctions.NAME);
    Collections.sort(activityTypeInfos.getTypeInfos(),Objects.firstNonNull(request.getReverseOrder(),Boolean.FALSE) ? ordering.reverse() : ordering);
  }
 catch (  Exception e) {
    throw handleException(e);
  }
  return request.reply(activityTypeInfos);
}
