{
  final State initialState=input.lookupState();
  boolean enabledEndState=false;
  ServiceConfiguration endResult=input;
  try {
    endResult=ServiceTransitions.pathTo(input,nextState).get();
    if (!nextState.equals(initialState)) {
      LOG.info(this.toString(endResult,initialState,nextState));
    }
    return endResult;
  }
 catch (  final Exception ex) {
    if (Exceptions.isCausedBy(ex,ExistingTransitionException.class)) {
      LOG.error(this.toString(input,initialState,nextState,ex));
      enabledEndState=true;
      throw Exceptions.toUndeclared(ex);
    }
 else {
      Exceptions.maybeInterrupted(ex);
      LOG.error(this.toString(input,initialState,nextState,ex));
      Logs.extreme().error(ex,Throwables.getRootCause(ex));
      Logs.extreme().error(ex,ex);
      throw Exceptions.toUndeclared(ex);
    }
  }
 finally {
    enabledEndState|=Component.State.ENABLED.equals(endResult.lookupState());
    if (Bootstrap.isFinished() && !enabledEndState && Topology.getInstance().services.containsValue(input)) {
      Topology.guard().tryDisable(endResult);
    }
 else     if (Bootstrap.isFinished() && enabledEndState && !Topology.getInstance().services.containsValue(input)) {
      LOG.error("service enabled but lookup failed: " + endResult);
      Topology.guard().tryEnable(endResult);
    }
  }
}
