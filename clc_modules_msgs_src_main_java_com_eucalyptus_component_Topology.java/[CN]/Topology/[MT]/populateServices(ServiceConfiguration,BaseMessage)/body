{
  try {
    Predicate<ServiceConfiguration> filter=new Predicate<ServiceConfiguration>(){
      @Override public boolean apply(      final ServiceConfiguration filterConfig){
        ComponentId filteredComponent=filterConfig.getComponentId();
        ComponentId destComponent=config.getComponentId();
        if (filteredComponent.isDistributedService()) {
          if (destComponent.isAlwaysLocal()) {
            return filterConfig.lookupState().ordinal() >= Component.State.STOPPED.ordinal();
          }
 else           if (destComponent.isPartitioned() && filteredComponent.isPartitioned()) {
            return config.getPartition().equals(filterConfig.getPartition());
          }
 else {
            return true;
          }
        }
 else {
          return false;
        }
      }
    }
;
    Function<ServiceConfiguration,ServiceId> typeMapper=TypeMappers.lookup(ServiceConfiguration.class,ServiceId.class);
    if (Hosts.isCoordinator()) {
      msg.set_epoch(Topology.epoch());
      for (      ServiceConfiguration s : Topology.getInstance().getServices().values()) {
        if (filter.apply(s)) {
          msg.get_services().add(typeMapper.apply(s));
        }
      }
      for (      Component c : Components.list()) {
        for (        ServiceConfiguration s : c.services()) {
          if (filter.apply(s) && !msg.get_services().contains(s)) {
            if (State.DISABLED.apply(s)) {
              msg.get_disabledServices().add(typeMapper.apply(s));
            }
 else             if (State.STOPPED.apply(s)) {
              msg.get_stoppedServices().add(typeMapper.apply(s));
            }
 else             if (State.NOTREADY.ordinal() >= s.getStateMachine().getState().ordinal()) {
              msg.get_notreadyServices().add(typeMapper.apply(s));
            }
 else             if (State.ENABLED.apply(s) && c.getComponentId().isManyToOnePartition() && c.getComponentId().isDistributedService()) {
              msg.get_services().add(typeMapper.apply(s));
            }
          }
        }
      }
    }
  }
 catch (  Exception ex) {
    Logs.extreme().error(ex,ex);
  }
}
