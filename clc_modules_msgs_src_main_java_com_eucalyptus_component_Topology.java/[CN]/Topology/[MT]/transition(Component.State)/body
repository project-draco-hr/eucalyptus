{
  final Function<ServiceConfiguration,Future<ServiceConfiguration>> transition=new Function<ServiceConfiguration,Future<ServiceConfiguration>>(){
    private final List<Component.State> serializedStates=Lists.newArrayList(Component.State.ENABLED,Component.State.DISABLED,Component.State.STOPPED);
    @Override public Future<ServiceConfiguration> apply(    final ServiceConfiguration input){
      final Callable<ServiceConfiguration> call=Topology.callable(input,Topology.get(toState));
      if (this.serializedStates.contains(toState) || this.serializedStates.contains(input.lookupState())) {
        return Threads.enqueue(input.getComponentId().getClass(),Topology.class,1,call);
      }
 else {
        return Queue.EXTERNAL.enqueue(call);
      }
    }
  }
;
  return transition;
}
