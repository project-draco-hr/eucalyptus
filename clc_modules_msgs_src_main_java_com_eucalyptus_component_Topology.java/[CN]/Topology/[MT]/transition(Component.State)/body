{
  final Function<ServiceConfiguration,Future<ServiceConfiguration>> transition=new Function<ServiceConfiguration,Future<ServiceConfiguration>>(){
    private final List<Component.State> serializedStates=Lists.newArrayList(Component.State.ENABLED,Component.State.DISABLED);
    @Override public Future<ServiceConfiguration> apply(    final ServiceConfiguration input){
      final Callable<ServiceConfiguration> call=TopologyChanges.callable(input,TopologyChanges.get(toState));
      final Queue workQueue=(this.serializedStates.contains(toState) ? Queue.INTERNAL : Queue.EXTERNAL);
      return workQueue.enqueue(call);
    }
  }
;
  return transition;
}
