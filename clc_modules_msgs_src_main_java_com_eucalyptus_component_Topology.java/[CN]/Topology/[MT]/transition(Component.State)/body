{
  final Function<ServiceConfiguration,Future<ServiceConfiguration>> transition=new Function<ServiceConfiguration,Future<ServiceConfiguration>>(){
    private final List<Component.State> serializedStates=Lists.newArrayList(Component.State.ENABLED);
    @Override public Future<ServiceConfiguration> apply(    final ServiceConfiguration input){
      final Callable<ServiceConfiguration> call=Topology.callable(input,Topology.get(toState));
      if (Bootstrap.isOperational()) {
        final Queue workQueue=(this.serializedStates.contains(toState) ? Queue.INTERNAL : Queue.EXTERNAL);
        return workQueue.enqueue(call);
      }
 else {
        try {
          return Futures.predestinedFuture(input);
        }
 catch (        Exception ex) {
          return Futures.predestinedFuture(input);
        }
      }
    }
  }
;
  return transition;
}
