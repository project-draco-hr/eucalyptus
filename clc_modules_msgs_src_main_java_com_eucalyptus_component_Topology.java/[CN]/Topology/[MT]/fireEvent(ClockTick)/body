{
  final int backoff=Hosts.isCoordinator() ? COORDINATOR_CHECK_BACKOFF_SECS : LOCAL_CHECK_BACKOFF_SECS;
  Callable<Object> call=new Callable<Object>(){
    @Override public Object call(){
      try {
        return RunChecks.INSTANCE.call();
      }
  finally {
        busy.set(false);
      }
    }
  }
;
  if (busy.compareAndSet(false,true)) {
    try {
      TimeUnit.SECONDS.sleep(backoff);
    }
 catch (    InterruptedException ex) {
      busy.set(false);
      return;
    }
    final Set<String> enabledComponentClassNames=ImmutableSet.copyOf(Iterables.transform(Topology.getInstance().services.values(),Functions.compose(Classes.nameFunction(),ServiceConfigurations.componentId())));
    if ((Hosts.isCoordinator() || counter.incrementAndGet() % 3 == 0 || !enabledClassNames.get().containsAll(enabledComponentClassNames)) && lock.writeLock().tryLock()) {
      lock.writeLock().unlock();
      enabledClassNames.set(enabledComponentClassNames);
      try {
        Queue.INTERNAL.enqueue(call);
      }
 catch (      Exception ex) {
        busy.set(false);
      }
    }
 else {
      busy.set(false);
    }
  }
}
