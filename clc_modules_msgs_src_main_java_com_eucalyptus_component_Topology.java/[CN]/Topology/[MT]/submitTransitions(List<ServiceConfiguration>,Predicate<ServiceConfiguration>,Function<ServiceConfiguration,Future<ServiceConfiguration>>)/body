{
  final Collection<ServiceConfiguration> filteredServices=Collections2.filter(allServices,proceedToDisableFilter);
  final Collection<Future<ServiceConfiguration>> submittedCallables=Collections2.transform(filteredServices,submitFunction);
  final Collection<Future<ServiceConfiguration>> completedServices=Collections2.filter(submittedCallables,WaitForResults.INSTANCE);
  List<ServiceConfiguration> results=Lists.newArrayList(Collections2.transform(completedServices,ExtractFuture.INSTANCE));
  printCheckInfo(submitFunction.toString(),results);
  final Collection<Future<ServiceConfiguration>> failedCheckServices=Collections2.filter(submittedCallables,FilterErrorResults.INSTANCE);
  List<Exception> failedResults=Lists.newArrayList(Collections2.transform(failedCheckServices,ExtractErrorFuture.INSTANCE));
  for (  Exception ex : failedResults) {
    if (ex != null) {
      if (ex instanceof CheckException) {
        Faults.persist((CheckException)ex);
      }
 else {
        LOG.error("Failed to identify service for error: " + ex);
      }
    }
  }
  return results;
}
