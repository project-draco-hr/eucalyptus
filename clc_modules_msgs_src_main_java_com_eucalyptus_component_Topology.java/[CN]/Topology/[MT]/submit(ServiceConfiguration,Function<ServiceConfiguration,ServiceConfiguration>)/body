{
  EventRecord.here(Topology.class,EventType.ENQUEUE,Topology.this.toString(),function.toString(),config.toString()).info();
  final Long queueStart=System.currentTimeMillis();
  return this.getWorker().submit(new Callable<ServiceConfiguration>(){
    @Override public ServiceConfiguration call() throws Exception {
      if (Bootstrap.isShuttingDown()) {
        return null;
      }
 else {
        try {
          while (!Bootstrap.isFinished()) {
            TimeUnit.MILLISECONDS.sleep(50);
          }
        }
 catch (        InterruptedException ex1) {
          Thread.currentThread().interrupt();
          throw ex1;
        }
        Long serviceStart=System.currentTimeMillis();
        EventRecord.here(Topology.class,EventType.DEQUEUE,Topology.this.toString(),function.toString(),config.toString()).append(EventType.QUEUE_TIME.name(),Long.toString(serviceStart - queueStart)).info();
        try {
          ServiceConfiguration result=function.apply(config);
          Long finish=System.currentTimeMillis();
          EventRecord.here(Topology.class,EventType.QUEUE,Topology.this.toString(),function.toString(),config.toString()).append(EventType.SERVICE_TIME.name(),Long.toString(finish - serviceStart)).info();
          return result;
        }
 catch (        Exception ex) {
          Logs.exhaust().error(ex,ex);
          LOG.error(ex);
          throw ex;
        }
      }
    }
  }
);
}
