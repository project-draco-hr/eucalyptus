{
  return new TransitionGuard(){
    @Override public boolean nextEpoch(){
      Topology.this.currentEpoch++;
      return true;
    }
    @Override public boolean tryEnable(    final ServiceConfiguration config){
      final ServiceKey serviceKey=ServiceKey.create(config);
      final ServiceConfiguration curr=Topology.this.getServices().putIfAbsent(serviceKey,config);
      LOG.debug("tryEnable():before " + Topology.this.toString() + " => "+ config);
      if ((curr != null) && !curr.equals(config)) {
        LOG.debug("tryEnable():false  " + Topology.this.toString() + " => "+ config);
        return false;
      }
 else       if ((curr != null) && curr.equals(config)) {
        LOG.debug("tryEnable():true   " + Topology.this.toString() + " => "+ config);
        return true;
      }
 else {
        Topology.this.currentEpoch++;
        LOG.debug("tryEnable():true   " + Topology.this.toString() + " => "+ config);
        return true;
      }
    }
    @Override public boolean tryDisable(    final ServiceConfiguration config){
      final ServiceKey serviceKey=ServiceKey.create(config);
      boolean tryDisable=!config.equals(Topology.this.getServices().get(serviceKey)) || (Topology.this.getServices().remove(serviceKey,config) && this.nextEpoch());
      LOG.debug("tryDisable():" + tryDisable + " "+ Topology.this.toString()+ " => "+ config);
      return tryDisable;
    }
  }
;
}
