{
  if (Databases.isVolatile()) {
    return Lists.newArrayList();
  }
  final List<ServiceConfiguration> allServices=Lists.newArrayList();
  for (  final Component c : Components.list()) {
    allServices.addAll(c.services());
  }
  List<ServiceConfiguration> checkedServices=submitTransitions(allServices,CheckServiceFilter.INSTANCE,SubmitCheck.INSTANCE);
  if (!checkedServices.isEmpty()) {
    Logs.extreme().debug("CHECKED" + ": " + Joiner.on("\n" + "CHECKED" + ": ").join(Collections2.transform(checkedServices,ServiceString.INSTANCE)));
  }
  if (Faults.isFailstop()) {
    Hosts.failstop();
    for (    final Component c : Components.list()) {
      if (c.hasLocalService()) {
        try {
          SubmitDisable.INSTANCE.apply(c.getLocalServiceConfiguration()).get();
        }
 catch (        Exception ex) {
          Exceptions.maybeInterrupted(ex);
          LOG.error(ex,ex);
        }
      }
    }
    return Lists.newArrayList();
  }
 else   if (!Hosts.isCoordinator()) {
    final Predicate<ServiceConfiguration> proceedToDisableFilter=Predicates.and(ServiceConfigurations.filterHostLocal(),ProceedToDisabledServiceFilter.INSTANCE);
    submitTransitions(allServices,proceedToDisableFilter,SubmitDisable.INSTANCE);
    return checkedServices;
  }
 else {
    final Predicate<ServiceConfiguration> canPromote=Predicates.and(Predicates.in(checkedServices),FailoverPredicate.INSTANCE);
    final Collection<ServiceConfiguration> promoteServices=Collections2.filter(allServices,canPromote);
    List<ServiceConfiguration> result=submitTransitions(allServices,canPromote,SubmitEnable.INSTANCE);
    final Predicate<ServiceConfiguration> proceedToDisableFilter=Predicates.and(Predicates.not(Predicates.in(promoteServices)),ProceedToDisabledServiceFilter.INSTANCE);
    submitTransitions(allServices,proceedToDisableFilter,SubmitDisable.INSTANCE);
    return result;
  }
}
