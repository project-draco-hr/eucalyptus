{
  final List<ServiceConfiguration> checkServices=Lists.newArrayList();
  for (  Component c : Components.list()) {
    checkServices.addAll(Collections2.filter(c.services(),CheckServiceFilter.INSTANCE));
  }
  final Collection<Future<ServiceConfiguration>> submittedChecks=Collections2.transform(checkServices,SubmitCheck.INSTANCE);
  final Collection<Future<ServiceConfiguration>> checkedServiceFutures=Collections2.filter(submittedChecks,WaitForResults.INSTANCE);
  final List<ServiceConfiguration> checkedServices=Lists.newArrayList(Collections2.transform(checkedServiceFutures,ExtractFuture.INSTANCE));
  LOG.trace(LogUtil.subheader("CHECKED: " + Joiner.on("\nCHECKED: ").join(checkedServices)));
  if (!Hosts.isCoordinator()) {
    return Lists.newArrayList(Collections2.transform(checkedServiceFutures,ExtractFuture.INSTANCE));
  }
 else {
    final Predicate<ServiceConfiguration> canPromote=Predicates.and(Predicates.in(checkedServices),FailoverPredicate.INSTANCE);
    final List<ServiceConfiguration> promoteServices=Lists.newArrayList();
    for (    Component c : Components.list()) {
      promoteServices.addAll(Collections2.filter(c.services(),canPromote));
    }
    final Collection<Future<ServiceConfiguration>> enableCallables=Collections2.transform(promoteServices,SubmitEnable.INSTANCE);
    final Collection<Future<ServiceConfiguration>> enabledServices=Collections2.filter(enableCallables,WaitForResults.INSTANCE);
    LOG.trace(LogUtil.subheader("ENABLED: " + Joiner.on("\nENABLED: ").join(enabledServices)));
    return Lists.transform(Lists.newArrayList(enabledServices),ExtractFuture.INSTANCE);
  }
}
