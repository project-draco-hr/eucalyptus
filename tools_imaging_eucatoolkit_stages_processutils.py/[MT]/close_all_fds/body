def close_all_fds(except_fds=None):
    "\n    Closes all fds outside of stdout,stderr for this process/subprocess.\n    :param except_fds: list of files, or fds to 'not' close\n    "
    except_filenos = [1, 2]
    if (except_fds is not None):
        for except_fd in except_fds:
            if (except_fd is None):
                pass
            elif isinstance(except_fd, int):
                except_filenos.append(except_fd)
            elif hasattr(except_fd, 'fileno'):
                except_filenos.append(except_fd.fileno())
            else:
                raise ValueError('{0} must be an int or have a fileno method'.format(repr(except_fd)))
    fileno_ranges = []
    next_range_min = 0
    for except_fileno in sorted(except_filenos):
        if (except_fileno > next_range_min):
            fileno_ranges.append((next_range_min, except_fileno))
        next_range_min = max(next_range_min, (except_fileno + 1))
    fileno_ranges.append((next_range_min, 1024))
    for fileno_range in fileno_ranges:
        os.closerange(fileno_range[0], fileno_range[1])
