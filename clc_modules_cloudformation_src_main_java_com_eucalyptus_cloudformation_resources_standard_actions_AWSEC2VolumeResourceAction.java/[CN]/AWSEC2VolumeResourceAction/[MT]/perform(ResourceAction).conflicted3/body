{
  AWSEC2VolumeResourceAction action=(AWSEC2VolumeResourceAction)resourceAction;
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
  CreateVolumeType createVolumeType=MessageHelper.createMessage(CreateVolumeType.class,action.info.getEffectiveUserId());
  createVolumeType.setAvailabilityZone(action.properties.getAvailabilityZone());
  if (action.properties.getEncrypted() != null) {
    createVolumeType.setEncrypted(action.properties.getEncrypted());
  }
  if (action.properties.getIops() != null) {
    createVolumeType.setIops(action.properties.getIops());
  }
  if (action.properties.getSize() != null) {
    createVolumeType.setSize(action.properties.getSize());
  }
  if (action.properties.getSnapshotId() != null) {
    createVolumeType.setSnapshotId(action.properties.getSnapshotId());
  }
  if (action.properties.getVolumeType() != null) {
    createVolumeType.setVolumeType(action.properties.getVolumeType());
  }
 else {
    createVolumeType.setVolumeType("standard");
  }
  CreateVolumeResponseType createVolumeResponseType=AsyncRequests.<CreateVolumeType,CreateVolumeResponseType>sendSync(configuration,createVolumeType);
  action.info.setPhysicalResourceId(createVolumeResponseType.getVolume().getVolumeId());
  action.info.setCreatedEnoughToDelete(true);
  action.info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(action.info.getPhysicalResourceId())));
  return action;
}
