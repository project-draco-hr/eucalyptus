{
  List<StorageInfoWeb> storageList=new ArrayList<StorageInfoWeb>();
  for (  ClusterConfiguration cc : ServiceConfigurations.getConfigurations(ClusterConfiguration.class)) {
    try {
      if (Internets.testLocal(cc.getHostName()) && !Components.lookup("storage").isRunningLocally()) {
        storageList.add(StorageInfoWeb.DEFAULT_SC);
        continue;
      }
    }
 catch (    Exception e) {
      LOG.debug("Got an error while trying to retrieving storage controller configuration list",e);
    }
    StorageControllerConfiguration c;
    try {
      c=ServiceConfigurations.getConfiguration(StorageControllerConfiguration.class,cc.getName());
      StorageInfoWeb scInfo=new StorageInfoWeb(c.getName(),c.getHostName(),c.getPort());
      try {
        GetStorageConfigurationResponseType getStorageConfigResponse=RemoteInfoHandler.sendForStorageInfo(cc,c);
        if (c.getName().equals(getStorageConfigResponse.getName())) {
          scInfo.setStorageParams(convertParams(getStorageConfigResponse.getStorageParams()));
        }
 else {
          LOG.debug("Unexpected storage controller name: " + getStorageConfigResponse.getName(),new Exception());
          LOG.debug("Expected configuration for SC related to CC: " + LogUtil.dumpObject(c));
          LOG.debug("Received configuration for SC related to CC: " + LogUtil.dumpObject(getStorageConfigResponse));
        }
      }
 catch (      Throwable e) {
        LOG.debug("Got an error while trying to communicate with remote storage controller",e);
      }
      storageList.add(scInfo);
    }
 catch (    Exception e1) {
      storageList.add(StorageInfoWeb.DEFAULT_SC);
    }
  }
  return storageList;
}
