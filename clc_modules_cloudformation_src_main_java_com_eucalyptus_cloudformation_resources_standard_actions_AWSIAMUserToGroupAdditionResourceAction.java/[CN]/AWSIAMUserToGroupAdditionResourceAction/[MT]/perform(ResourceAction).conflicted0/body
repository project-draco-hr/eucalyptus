{
  AWSIAMUserToGroupAdditionResourceAction action=(AWSIAMUserToGroupAdditionResourceAction)resourceAction;
  ServiceConfiguration configuration=Topology.lookup(Euare.class);
  if (!IAMHelper.groupExists(configuration,action.properties.getGroupName(),action.info.getEffectiveUserId())) {
    throw new ValidationErrorException("No such group " + action.properties.getGroupName());
  }
  Collection<String> nonexistantUsers=IAMHelper.nonexistantUsers(configuration,action.properties.getUsers(),action.info.getEffectiveUserId());
  if (!nonexistantUsers.isEmpty()) {
    throw new ValidationErrorException("No such user(s) " + nonexistantUsers.toString());
  }
  Set<String> existingUsersInGroup=IAMHelper.getUserNamesForGroup(configuration,action.properties.getGroupName(),action.info.getEffectiveUserId());
  Set<String> passedInUsers=Sets.newLinkedHashSet();
  if (action.properties.getUsers() != null) {
    passedInUsers.addAll(action.properties.getUsers());
  }
  for (  String userName : Sets.difference(passedInUsers,existingUsersInGroup)) {
    AddUserToGroupType addUserToGroupType=MessageHelper.createMessage(AddUserToGroupType.class,action.info.getEffectiveUserId());
    addUserToGroupType.setGroupName(action.properties.getGroupName());
    addUserToGroupType.setUserName(userName);
    AsyncRequests.<AddUserToGroupType,AddUserToGroupResponseType>sendSync(configuration,addUserToGroupType);
  }
  action.info.setPhysicalResourceId(action.getDefaultPhysicalResourceId());
  action.info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(action.info.getPhysicalResourceId())));
  return action;
}
