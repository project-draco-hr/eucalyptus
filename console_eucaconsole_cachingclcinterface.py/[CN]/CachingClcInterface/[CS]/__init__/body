def __init__(self, clcinterface, config, user_session):
    self.caches = {}
    self.clc = clcinterface
    pollfreq = config.getint('server', 'pollfreq')
    if (pollfreq < 5):
        pollfreq = 5
    try:
        freq = config.getint('server', 'pollfreq.zones')
    except ConfigParser.NoOptionError:
        freq = pollfreq
    self.caches['zones'] = Cache('zone', freq, self.clc.get_all_zones, user_session)
    try:
        freq = config.getint('server', 'pollfreq.images')
    except ConfigParser.NoOptionError:
        freq = pollfreq
    self.caches['images'] = Cache('image', freq, self.clc.get_all_images, user_session)
    try:
        freq = config.getint('server', 'pollfreq.instances')
    except ConfigParser.NoOptionError:
        freq = pollfreq
    self.caches['instances'] = Cache('instance', freq, self.clc.get_all_instances, user_session)
    try:
        freq = config.getint('server', 'pollfreq.keypairs')
    except ConfigParser.NoOptionError:
        freq = pollfreq
    self.caches['keypairs'] = Cache('keypair', freq, self.clc.get_all_key_pairs, user_session)
    try:
        freq = config.getint('server', 'pollfreq.groups')
    except ConfigParser.NoOptionError:
        freq = pollfreq
    self.caches['groups'] = Cache('sgroup', freq, self.clc.get_all_security_groups, user_session)
    try:
        freq = config.getint('server', 'pollfreq.addresses')
    except ConfigParser.NoOptionError:
        freq = pollfreq
    self.caches['addresses'] = Cache('eip', freq, self.clc.get_all_addresses, user_session)
    try:
        freq = config.getint('server', 'pollfreq.volumes')
    except ConfigParser.NoOptionError:
        freq = pollfreq
    self.caches['volumes'] = Cache('volume', freq, self.clc.get_all_volumes, user_session)
    try:
        freq = config.getint('server', 'pollfreq.snapshots')
    except ConfigParser.NoOptionError:
        freq = pollfreq
    self.caches['snapshots'] = Cache('snapshot', freq, self.clc.get_all_snapshots, user_session)
    try:
        freq = config.getint('server', 'pollfreq.tags')
    except ConfigParser.NoOptionError:
        freq = pollfreq
    self.caches['tags'] = Cache('tag', freq, self.clc.get_all_tags, user_session)
