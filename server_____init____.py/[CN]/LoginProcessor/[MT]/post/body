@staticmethod
def post(web_req):
    auth_hdr = web_req.request.headers.get('Authorization')
    if (not auth_hdr):
        raise NotImplementedError('auth header not found')
    if (not auth_hdr.startswith('Basic ')):
        raise NotImplementedError('auth header in wrong format')
    auth_decoded = base64.decodestring(auth_hdr[6:])
    (account, user, passwd) = auth_decoded.split(':', 3)
    remember = web_req.get_argument('remember')
    if (config.getboolean('eui', 'usemock') == False):
        auth = TokenAuthenticator(config.get('eui', 'clchost'), 3600)
        creds = auth.authenticate(account, user, passwd)
        if creds:
            session_token = creds.session_token
            access_id = creds.access_key
            secret_key = creds.secret_key
        else:
            raise EuiException(401, 'Not Authorized')
    else:
        session_token = 'Larry'
        access_id = 'Moe'
        secret_key = 'Curly'
    while True:
        sid = os.urandom(16).encode('hex')
        if (sid in sessions):
            continue
        break
    web_req.set_cookie('session-id', sid)
    if (remember == 'yes'):
        web_req.set_cookie('account', account)
        web_req.set_cookie('username', user)
        web_req.set_cookie('remember', ('true' if remember else 'false'))
    else:
        web_req.clear_cookie('account')
        web_req.clear_cookie('username')
        web_req.clear_cookie('remember')
    sessions[sid] = UserSession(account, user, session_token, access_id, secret_key)
    return LoginResponse(sessions[sid])
