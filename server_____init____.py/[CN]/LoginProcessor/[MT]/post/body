@staticmethod
def post(web_req):
    auth_hdr = web_req.get_argument('Authorization')
    if (not auth_hdr):
        raise NotImplementedError('auth header not found')
    auth_decoded = base64.decodestring(auth_hdr)
    first = auth_decoded.index(':')
    second = auth_decoded.index(':', (first + 1))
    account = auth_decoded[:first]
    user = auth_decoded[(first + 1):second]
    passwd = auth_decoded[(second + 1):]
    remember = web_req.get_argument('remember')
    if (config.getboolean('test', 'usemock') == False):
        auth = TokenAuthenticator(config.get('server', 'clchost'), (config.getint('server', 'session.abs.timeout') + 60))
        creds = auth.authenticate(account, user, passwd)
        session_token = creds.session_token
        access_id = creds.access_key
        secret_key = creds.secret_key
    else:
        session_token = 'Larry'
        access_id = 'Moe'
        secret_key = 'Curly'
    while True:
        sid = os.urandom(16).encode('hex')
        if (sid in sessions):
            continue
        break
    if using_ssl:
        web_req.set_cookie('session-id', sid, secure='yes')
    else:
        web_req.set_cookie('session-id', sid)
    if (remember == 'yes'):
        expiration = (datetime.now() + timedelta(days=180))
        web_req.set_cookie('account', account, expires=expiration)
        web_req.set_cookie('username', user, expires=expiration)
        web_req.set_cookie('remember', ('true' if remember else 'false'), expires=expiration)
    else:
        web_req.clear_cookie('account')
        web_req.clear_cookie('username')
        web_req.clear_cookie('remember')
    sessions[sid] = UserSession(account, user, session_token, access_id, secret_key)
    return LoginResponse(sessions[sid])
