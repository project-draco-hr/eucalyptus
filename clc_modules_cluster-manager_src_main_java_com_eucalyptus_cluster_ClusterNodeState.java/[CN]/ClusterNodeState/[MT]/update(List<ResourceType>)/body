{
  int outstandingCount=0;
  int pending=0, submitted=0, redeemed=0;
  for (  ResourceToken t : this.pendingTokens)   pending+=t.getAmount();
  for (  ResourceToken t : this.submittedTokens)   submitted+=t.getAmount();
  for (  ResourceToken t : this.redeemedTokens)   redeemed+=t.getAmount();
  outstandingCount=pending + submitted;
  LOG.debug(LogUtil.subheader(String.format("Resource update for cluster=%s, outstanding=%d pending=%d submitted=%d redeemed=%d",this.clusterName,outstandingCount,pending,submitted,redeemed)));
  this.redeemedTokens.clear();
  StringBuffer before=new StringBuffer();
  before.append("-> BEFORE: [");
  StringBuffer after=new StringBuffer();
  after.append("-> AFTER: [");
  for (  ResourceType rsc : rscUpdate) {
    VmTypeAvailability vmAvailable=this.typeMap.get(rsc.getInstanceType().getName());
    before.append(String.format(" %s available=%d/%d",vmAvailable.getType().getName(),vmAvailable.getAvailable(),vmAvailable.getMax()));
    if (vmAvailable == null)     continue;
    vmAvailable.setAvailable(rsc.getAvailableInstances());
    vmAvailable.decrement(outstandingCount);
    vmAvailable.setMax(rsc.getMaxInstances());
    after.append(String.format(" %s available=%d/%d",vmAvailable.getType().getName(),vmAvailable.getAvailable(),vmAvailable.getMax()));
  }
  LOG.debug(before.toString() + " ]");
  LOG.debug(after.toString() + " ]");
}
