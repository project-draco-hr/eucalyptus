{
  final SetDesiredCapacityResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  try {
    final Callback<AutoScalingGroup> groupCallback=new Callback<AutoScalingGroup>(){
      @Override public void fire(      final AutoScalingGroup autoScalingGroup){
        if (RestrictedTypes.filterPrivileged().apply(autoScalingGroup)) {
          failIfScaling(activityManager,autoScalingGroup);
          final Integer desiredCapacity=Numbers.intValue(request.getDesiredCapacity());
          if (desiredCapacity < autoScalingGroup.getMinSize()) {
            throw Exceptions.toUndeclared(new ValidationErrorException(String.format("New SetDesiredCapacity value %d is below min value %d for the AutoScalingGroup.",desiredCapacity,autoScalingGroup.getMinSize())));
          }
          if (desiredCapacity > autoScalingGroup.getMaxSize()) {
            throw Exceptions.toUndeclared(new ValidationErrorException(String.format("New SetDesiredCapacity value %d is above max value %d for the AutoScalingGroup.",desiredCapacity,autoScalingGroup.getMaxSize())));
          }
          setDesiredCapacityWithCooldown(autoScalingGroup,request.getHonorCooldown(),null,desiredCapacity,String.format("a user request explicitly set group desired capacity changing the desired capacity from %1$d to %2$d",autoScalingGroup.getDesiredCapacity(),desiredCapacity));
        }
      }
    }
;
    autoScalingGroups.update(ctx.getUserFullName().asAccountFullName(),request.getAutoScalingGroupName(),groupCallback);
  }
 catch (  AutoScalingMetadataNotFoundException e) {
    throw new ValidationErrorException("Auto scaling group not found: " + request.getAutoScalingGroupName());
  }
catch (  Exception e) {
    handleException(e);
  }
  return reply;
}
