{
  final ExecutePolicyResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final AccountFullName accountFullName=ctx.getUserFullName().asAccountFullName();
  try {
    final ScalingPolicy scalingPolicy;
    try {
      scalingPolicy=scalingPolicies.lookup(accountFullName,request.getAutoScalingGroupName(),request.getPolicyName());
    }
 catch (    AutoScalingMetadataNotFoundException e) {
      throw new ValidationErrorException("Scaling policy not found: " + request.getPolicyName());
    }
    autoScalingGroups.update(accountFullName,request.getAutoScalingGroupName(),new Callback<AutoScalingGroup>(){
      @Override public void fire(      final AutoScalingGroup autoScalingGroup){
        failIfScaling(activityManager,autoScalingGroup);
        final Integer desiredCapacity=scalingPolicy.getAdjustmentType().adjustCapacity(autoScalingGroup.getDesiredCapacity(),scalingPolicy.getScalingAdjustment(),Objects.firstNonNull(scalingPolicy.getMinAdjustmentStep(),0),Objects.firstNonNull(autoScalingGroup.getMinSize(),0),Objects.firstNonNull(autoScalingGroup.getMaxSize(),Integer.MAX_VALUE));
        setDesiredCapacityWithCooldown(autoScalingGroup,request.getHonorCooldown(),scalingPolicy.getCooldown(),desiredCapacity,String.format("a user request executed policy %1$s changing the desired capacity from %2$d to %3$d",scalingPolicy.getDisplayName(),autoScalingGroup.getDesiredCapacity(),desiredCapacity));
      }
    }
);
  }
 catch (  Exception e) {
    handleException(e);
  }
  return reply;
}
