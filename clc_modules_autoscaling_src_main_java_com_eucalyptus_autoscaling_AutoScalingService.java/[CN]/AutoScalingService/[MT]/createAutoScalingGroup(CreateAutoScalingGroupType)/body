{
  final CreateAutoScalingGroupResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  if (request.getTags() != null) {
    for (    final TagType tagType : request.getTags().getMember()) {
      final String key=tagType.getKey();
      if (com.google.common.base.Strings.isNullOrEmpty(key) || key.trim().length() > 128 || isReserved(key)) {
        throw new InvalidParameterValueException("Invalid key (max length 128, must not be empty, reserved prefixes " + reservedPrefixes + "): "+ key);
      }
    }
    if (request.getTags().getMember().size() >= MAX_TAGS_PER_RESOURCE) {
      throw Exceptions.toUndeclared(new LimitExceededException("Tag limit exceeded"));
    }
  }
  final Supplier<AutoScalingGroup> allocator=new Supplier<AutoScalingGroup>(){
    @Override public AutoScalingGroup get(){
      try {
        final AutoScalingGroups.PersistingBuilder builder=autoScalingGroups.create(ctx.getUserFullName(),request.getAutoScalingGroupName(),launchConfigurations.lookup(ctx.getUserFullName().asAccountFullName(),request.getLaunchConfigurationName()),Numbers.intValue(request.getMinSize()),Numbers.intValue(request.getMaxSize())).withAvailabilityZones(request.availabilityZones()).withDefaultCooldown(Numbers.intValue(request.getDefaultCooldown())).withDesiredCapacity(Numbers.intValue(request.getDesiredCapacity())).withHealthCheckGracePeriod(Numbers.intValue(request.getHealthCheckGracePeriod())).withHealthCheckType(request.getHealthCheckType() == null ? null : HealthCheckType.valueOf(request.getHealthCheckType())).withLoadBalancerNames(request.loadBalancerNames()).withTerminationPolicyTypes(request.terminationPolicies() == null ? null : Collections2.filter(Collections2.transform(request.terminationPolicies(),Enums.valueOfFunction(TerminationPolicyType.class)),Predicates.not(Predicates.isNull()))).withTags(request.getTags() == null ? null : Iterables.transform(request.getTags().getMember(),TypeMappers.lookup(TagType.class,AutoScalingGroupTag.class)));
        final List<String> referenceErrors=activityManager.validateReferences(ctx.getUserFullName(),request.availabilityZones(),request.loadBalancerNames());
        if (!referenceErrors.isEmpty()) {
          throw Exceptions.toUndeclared(new InvalidParameterValueException("Invalid parameters " + referenceErrors));
        }
        return builder.persist();
      }
 catch (      AutoScalingMetadataNotFoundException e) {
        throw Exceptions.toUndeclared(new InvalidParameterValueException("Launch configuration not found: " + request.getLaunchConfigurationName()));
      }
catch (      IllegalArgumentException e) {
        throw Exceptions.toUndeclared(new InvalidParameterValueException("Invalid health check type: " + request.getHealthCheckType()));
      }
catch (      Exception ex) {
        throw new RuntimeException(ex);
      }
    }
  }
;
  try {
    RestrictedTypes.allocateUnitlessResource(allocator);
  }
 catch (  Exception e) {
    handleException(e,true);
  }
  return reply;
}
