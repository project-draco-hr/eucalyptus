{
  final DescribeAutoScalingGroupsResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final boolean showAll=request.autoScalingGroupNames().remove("verbose");
  final OwnerFullName ownerFullName=ctx.hasAdministrativePrivileges() && showAll ? null : ctx.getUserFullName().asAccountFullName();
  final Predicate<AutoScalingGroupMetadata> requestedAndAccessible=AutoScalingMetadatas.filterPrivilegesByIdOrArn(AutoScalingGroupMetadata.class,request.autoScalingGroupNames());
  try {
    final List<AutoScalingGroupType> results=reply.getDescribeAutoScalingGroupsResult().getAutoScalingGroups().getMember();
    results.addAll(autoScalingGroups.list(ownerFullName,requestedAndAccessible,TypeMappers.lookup(AutoScalingGroup.class,AutoScalingGroupType.class)));
    final Map<String,List<Tag>> tagsMap=TagSupport.forResourceClass(AutoScalingGroup.class).getResourceTagMap(ctx.getUserFullName().asAccountFullName(),Iterables.transform(results,AutoScalingGroupType.groupName()),Predicates.alwaysTrue());
    for (    final AutoScalingGroupType type : results) {
      final TagDescriptionList tags=new TagDescriptionList();
      Tags.addFromTags(tags.getMember(),TagDescription.class,tagsMap.get(type.getAutoScalingGroupName()));
      if (!tags.getMember().isEmpty()) {
        type.setTags(tags);
      }
    }
  }
 catch (  Exception e) {
    handleException(e);
  }
  return reply;
}
