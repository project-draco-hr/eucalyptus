{
  final DescribeAutoScalingGroupsResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final boolean showAll=request.autoScalingGroupNames().remove("verbose");
  final OwnerFullName ownerFullName=ctx.hasAdministrativePrivileges() && showAll ? null : ctx.getUserFullName().asAccountFullName();
  final Predicate<AutoScalingGroupMetadata> requestedAndAccessible=AutoScalingMetadatas.filterPrivilegesByIdOrArn(request.autoScalingGroupNames());
  try {
    final List<AutoScalingGroupType> results=reply.getDescribeAutoScalingGroupsResult().getAutoScalingGroups().getMember();
    for (    final AutoScalingGroup autoScalingGroup : autoScalingGroups.list(ownerFullName,requestedAndAccessible)) {
      final AutoScalingGroupType type=TypeMappers.transform(autoScalingGroup,AutoScalingGroupType.class);
      final Instances instances=new Instances();
      Iterables.addAll(instances.getMember(),Iterables.transform(autoScalingInstances.listByGroup(autoScalingGroup),TypeMappers.lookup(AutoScalingInstance.class,Instance.class)));
      if (!instances.getMember().isEmpty()) {
        type.setInstances(instances);
      }
      results.add(type);
    }
  }
 catch (  Exception e) {
    handleException(e);
  }
  return reply;
}
