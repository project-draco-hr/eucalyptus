{
  final CreateLaunchConfigurationResponseType reply=request.getReply();
  final Context ctx=Contexts.lookup();
  final Supplier<LaunchConfiguration> allocator=new Supplier<LaunchConfiguration>(){
    @Override public LaunchConfiguration get(){
      try {
        final LaunchConfigurations.PersistingBuilder builder=launchConfigurations.create(ctx.getUserFullName(),request.getLaunchConfigurationName(),request.getImageId(),request.getInstanceType()).withKernelId(request.getKernelId()).withRamdiskId(request.getRamdiskId()).withKeyName(request.getKeyName()).withUserData(request.getUserData()).withInstanceMonitoring(request.getInstanceMonitoring() != null ? request.getInstanceMonitoring().getEnabled() : null).withSecurityGroups(request.getSecurityGroups() != null ? request.getSecurityGroups().getMember() : null);
        if (request.getBlockDeviceMappings() != null) {
          for (          final BlockDeviceMappingType blockDeviceMappingType : request.getBlockDeviceMappings().getMember()) {
            builder.withBlockDeviceMapping(blockDeviceMappingType.getDeviceName(),blockDeviceMappingType.getVirtualName(),blockDeviceMappingType.getEbs() != null ? blockDeviceMappingType.getEbs().getSnapshotId() : null,blockDeviceMappingType.getEbs() != null ? Numbers.intValue(blockDeviceMappingType.getEbs().getVolumeSize()) : null);
          }
        }
        return builder.persist();
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex);
      }
    }
  }
;
  try {
    RestrictedTypes.allocateUnitlessResource(allocator);
  }
 catch (  Exception e) {
    handleException(e);
  }
  return reply;
}
