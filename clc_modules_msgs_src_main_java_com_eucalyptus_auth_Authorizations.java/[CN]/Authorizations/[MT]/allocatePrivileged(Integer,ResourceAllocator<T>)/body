{
  try {
    NavigableSet<T> resources=allocator.allocate(quantity);
    final Date expires=!resources.isEmpty() ? PolicyEngine.lookupExpiration(resources.first().getClass()) : new Date(2012,12,12);
    final NavigableSet<ResourceLease<T>> leases=Sets.newTreeSet();
    Iterators.all(resources.iterator(),new Predicate<T>(){
      @Override public boolean apply(      final T r){
        return leases.add(new ResourceLease<T>(){
{
            this.expiration=expires;
            this.resource=r;
          }
        }
);
      }
    }
);
    return ImmutableSortedSet.copyOf(leases);
  }
 catch (  ResourceAllocationException ex) {
    LOG.error(ex,ex);
    throw ex;
  }
catch (  AuthorizationException ex) {
    LOG.error(ex,ex);
    throw ex;
  }
}
