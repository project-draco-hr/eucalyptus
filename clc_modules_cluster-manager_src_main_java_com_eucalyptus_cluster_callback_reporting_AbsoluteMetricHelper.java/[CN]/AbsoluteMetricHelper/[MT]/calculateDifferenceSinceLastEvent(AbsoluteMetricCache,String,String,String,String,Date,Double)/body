{
  LOG.trace("namespace=" + namespace + ",metricName="+ metricName+ ",dimensionName="+ dimensionName+ ",dimensionValue="+ dimensionValue+ ",newTimestamp="+ newTimestamp+ ",newMetricValue="+ newMetricValue);
  MetricDifferenceInfo returnValue=null;
  AbsoluteMetricHistory lastEntity=cache.lookup(namespace,metricName,dimensionName,dimensionValue);
  if (lastEntity == null) {
    LOG.trace("First entry");
    lastEntity=new AbsoluteMetricHistory();
    lastEntity.setNamespace(namespace);
    lastEntity.setMetricName(metricName);
    lastEntity.setDimensionName(dimensionName);
    lastEntity.setDimensionValue(dimensionValue);
    lastEntity.setTimestamp(newTimestamp);
    lastEntity.setLastMetricValue(newMetricValue);
    Entities.persist(lastEntity);
    cache.clearSessionIfNecessary();
    cache.put(namespace,metricName,dimensionName,dimensionValue,lastEntity);
    returnValue=null;
  }
 else {
    double TOLERANCE=0.0000001;
    long elapsedTimeInMillis=newTimestamp.getTime() - lastEntity.getTimestamp().getTime();
    LOG.trace("lastTimestamp=" + lastEntity.getTimestamp());
    double valueDifference=newMetricValue - lastEntity.getLastMetricValue();
    if (elapsedTimeInMillis < 0) {
      LOG.trace("earlier point, kicking out");
      return null;
    }
 else     if (elapsedTimeInMillis == 0) {
      if (Math.abs(valueDifference) > TOLERANCE) {
        LOG.warn("Getting different values " + newMetricValue + " and "+ lastEntity.getLastMetricValue()+ " for absolute metric "+ metricName+ " at the same timestamp "+ newTimestamp+ ", keeping the second value.");
      }
      return null;
    }
 else     if (elapsedTimeInMillis > MAX_DIFFERENCE_DURATION_MS) {
      LOG.trace("too much time has passed, (" + elapsedTimeInMillis + " ms), starting over");
      lastEntity.setTimestamp(newTimestamp);
      lastEntity.setLastMetricValue(newMetricValue);
      cache.clearSessionIfNecessary();
      returnValue=null;
    }
 else     if (elapsedTimeInMillis > 0) {
      lastEntity.setTimestamp(newTimestamp);
      lastEntity.setLastMetricValue(newMetricValue);
      cache.clearSessionIfNecessary();
      if (valueDifference < -TOLERANCE) {
        returnValue=null;
      }
 else {
        if (Math.abs(valueDifference) < TOLERANCE) {
          valueDifference=0.0;
        }
        returnValue=new MetricDifferenceInfo(valueDifference,elapsedTimeInMillis);
      }
    }
    if (returnValue != null) {
      LOG.trace("new values=valueDifference=" + valueDifference + ",elapsedTimeInMillis="+ elapsedTimeInMillis);
    }
 else {
      LOG.trace("sending null value out");
    }
  }
  return returnValue;
}
