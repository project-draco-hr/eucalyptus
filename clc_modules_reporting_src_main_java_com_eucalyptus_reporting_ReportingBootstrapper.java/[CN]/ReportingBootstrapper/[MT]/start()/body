{
  try {
    queueFactory=QueueFactory.getInstance();
    queueFactory.startup();
    QueueReceiver snapshotReceiver=queueFactory.getReceiver(QueueIdentifier.SNAPSHOT);
    if (snapshotListener == null) {
      snapshotListener=new SnapShotUsageEventListener();
      log.info("New snapshot listener instantiated");
    }
 else {
      log.info("Used existing snapshot listener");
    }
    snapshotReceiver.addEventListener(snapshotListener);
    log.info("Storage queue poller started");
    QueueReceiver s3Receiver=queueFactory.getReceiver(QueueIdentifier.S3);
    if (s3Listener == null) {
      s3Listener=new S3EventListener();
      log.info("New s3 listener instantiated");
    }
 else {
      log.info("Used existing s3 listener");
    }
    s3Receiver.addEventListener(s3Listener);
    ListenerRegistry.getInstance().register(InstanceEvent.class,new EventListener(){
      @Override public void fireEvent(      Event event){
        if (event instanceof InstanceEvent) {
          QueueSender sender=QueueFactory.getInstance().getSender(QueueIdentifier.INSTANCE);
          sender.send((com.eucalyptus.reporting.event.Event)event);
        }
      }
    }
);
    ListenerRegistry.getInstance().register(StorageEvent.class,new EventListener(){
      @Override public void fireEvent(      Event event){
        if (event instanceof StorageEvent) {
          QueueSender sender=QueueFactory.getInstance().getSender(QueueIdentifier.STORAGE);
          sender.send((com.eucalyptus.reporting.event.Event)event);
        }
      }
    }
);
    log.info("ReportingBootstrapper started");
    return true;
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    log.error("ReportingBootstrapper failed to start",ex);
    return false;
  }
}
