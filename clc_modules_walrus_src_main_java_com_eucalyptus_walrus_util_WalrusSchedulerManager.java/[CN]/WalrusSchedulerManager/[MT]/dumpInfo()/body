{
  StringBuilder sb=new StringBuilder();
  try {
    sb.append("scheduler is named " + scheduler.getSchedulerName() + "\n");
    if (scheduler.isStarted()) {
      sb.append("scheduler is started\n");
      if (scheduler.getJobGroupNames() != null && scheduler.getJobGroupNames().size() > 0) {
        sb.append("scheduler has " + scheduler.getJobGroupNames().size() + " job groups\n");
        for (        String groupName : scheduler.getJobGroupNames()) {
          Set<JobKey> jobKeys=scheduler.getJobKeys(GroupMatcher.<JobKey>groupEquals(groupName));
          if (jobKeys != null && jobKeys.size() > 0) {
            sb.append(" in job group " + groupName + " there are "+ jobKeys.size()+ " jobs\n");
            for (            JobKey jobKey : jobKeys) {
              JobDetail jobDetail=scheduler.getJobDetail(jobKey);
              if (jobDetail != null) {
                sb.append("  job named " + jobKey.getName() + " using class "+ jobDetail.getJobClass().getName()+ "\n");
                List<? extends Trigger> triggers=scheduler.getTriggersOfJob(jobKey);
                if (triggers != null && triggers.size() > 0) {
                  for (                  Trigger trigger : triggers) {
                    sb.append("   " + jobKey.getName() + " is triggered by "+ trigger.getKey().getName()+ "\n");
                  }
                }
              }
            }
          }
        }
      }
 else {
        sb.append("scheduler does not have any job groups\n");
      }
      if (scheduler.getTriggerGroupNames() != null && scheduler.getTriggerGroupNames().size() > 0) {
        sb.append("scheduler has " + scheduler.getTriggerGroupNames().size() + " trigger groups\n");
        for (        String triggerGroupName : scheduler.getTriggerGroupNames()) {
          Set<TriggerKey> triggerKeys=scheduler.getTriggerKeys(GroupMatcher.<TriggerKey>groupEquals(triggerGroupName));
          if (triggerKeys != null && triggerKeys.size() > 0) {
            sb.append(" in trigger group " + triggerGroupName + " there are "+ triggerKeys.size()+ " triggers\n");
            for (            TriggerKey triggerKey : triggerKeys) {
              sb.append("   trigger named " + triggerKey.getName() + " is currently in state "+ scheduler.getTriggerState(triggerKey).name()+ " and will fire again at "+ scheduler.getTrigger(triggerKey).getNextFireTime().toString()+ "\n");
            }
          }
        }
      }
 else {
        sb.append("scheduler does not have any trigger groups\n");
      }
    }
 else {
      sb.append("scheduler is shutdown\n");
    }
  }
 catch (  SchedulerException se) {
    sb.append("exception caught while dumping scheduler info - " + se.getMessage() + "\n");
  }
  return sb.toString();
}
