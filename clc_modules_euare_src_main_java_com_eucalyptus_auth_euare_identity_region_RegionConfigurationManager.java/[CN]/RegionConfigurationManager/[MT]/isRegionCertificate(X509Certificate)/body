{
  boolean found=false;
  final Optional<RegionConfiguration> configurationOptional=regionConfigurationSupplier.get();
  if (configurationOptional.isPresent()) {
    final RegionConfiguration configuration=configurationOptional.get();
    for (    final Region region : configuration) {
      try {
        final Digest digest=Digest.forAlgorithm(region.getCertificateFingerprintDigest()).or(Digest.SHA256);
        final byte[] regionCertificateFingerprint=certificateDigestCache.get(region.getCertificateFingerprint(),new Callable<byte[]>(){
          @Override public byte[] call() throws Exception {
            return BaseEncoding.base16().withSeparator(":",2).decode(region.getCertificateFingerprint());
          }
        }
);
        found=MessageDigest.isEqual(regionCertificateFingerprint,digest.digestBinary(certificate.getEncoded()));
        if (found)         break;
      }
 catch (      ExecutionException|CertificateEncodingException e) {
      }
    }
  }
  return found;
}
