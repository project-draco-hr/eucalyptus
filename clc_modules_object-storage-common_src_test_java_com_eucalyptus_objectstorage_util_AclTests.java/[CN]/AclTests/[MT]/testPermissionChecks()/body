{
  S3AccessControlledEntity testEntity=getACLEntity("");
  assert(!account1CanonicalId.equals(account2CanonicalId));
  testEntity.setOwnerCanonicalId(account1CanonicalId);
  AccessControlList acl=new AccessControlList();
  acl.setGrants(new ArrayList<Grant>());
  acl.getGrants().add(account1FullControl);
  AccessControlPolicy acp=new AccessControlPolicy();
  acp.setOwner(canonicalUser1);
  acp.setAccessControlList(acl);
  try {
    testEntity.setAcl(acp);
  }
 catch (  Exception e) {
    fail(e.toString() + ": " + e.getMessage());
  }
  System.out.println("Testing acp for user1. User1 only in acl");
  Assert.assertTrue("User1 should be able to read",testEntity.can(Permission.READ,account1CanonicalId));
  Assert.assertTrue("User1 should be able to read acp",testEntity.can(Permission.READ_ACP,account1CanonicalId));
  Assert.assertTrue("User1 should be able to write",testEntity.can(Permission.WRITE,account1CanonicalId));
  Assert.assertTrue("User1 should be able to write acp",testEntity.can(Permission.WRITE_ACP,account1CanonicalId));
  Assert.assertTrue("User1 should be able to full control",testEntity.can(Permission.FULL_CONTROL,account1CanonicalId));
  System.out.println("Testing acp for user2. User1 only in acl, should not be allowed");
  Assert.assertTrue("User2 should not be able to read",!testEntity.can(Permission.READ,account2CanonicalId));
  Assert.assertTrue("User2 should not be able to read acp",!testEntity.can(Permission.READ_ACP,account2CanonicalId));
  Assert.assertTrue("User2 should not be able to write",!testEntity.can(Permission.WRITE,account2CanonicalId));
  Assert.assertTrue("User2 should not be able to write acp",!testEntity.can(Permission.WRITE_ACP,account2CanonicalId));
  Assert.assertTrue("User2 should not be able to full control",!testEntity.can(Permission.FULL_CONTROL,account2CanonicalId));
  acl.getGrants().add(account2Read);
  try {
    testEntity.setAcl(acp);
  }
 catch (  Exception e) {
    fail(e.toString() + ": " + e.getMessage());
  }
  Assert.assertTrue("User1 should be able to read",testEntity.can(Permission.READ,account1CanonicalId));
  Assert.assertTrue("User1 should be able to read acp",testEntity.can(Permission.READ_ACP,account1CanonicalId));
  Assert.assertTrue("User1 should be able to write",testEntity.can(Permission.WRITE,account1CanonicalId));
  Assert.assertTrue("User1 should be able to write acp",testEntity.can(Permission.WRITE_ACP,account1CanonicalId));
  Assert.assertTrue("User1 should be able to full control",testEntity.can(Permission.FULL_CONTROL,account1CanonicalId));
  Assert.assertTrue("User2 should be able to read",testEntity.can(Permission.READ,account2CanonicalId));
  Assert.assertTrue("User2 should not be able to read acp",!testEntity.can(Permission.READ_ACP,account2CanonicalId));
  Assert.assertTrue("User2 should not be able to write",!testEntity.can(Permission.WRITE,account2CanonicalId));
  Assert.assertTrue("User2 should not be able to write acp",!testEntity.can(Permission.WRITE_ACP,account2CanonicalId));
  Assert.assertTrue("User2 should not be able to full control",!testEntity.can(Permission.FULL_CONTROL,account2CanonicalId));
  acl.getGrants().add(account2ReadAcp);
  try {
    testEntity.setAcl(acp);
  }
 catch (  Exception e) {
    fail(e.toString() + ": " + e.getMessage());
  }
  Assert.assertTrue("User1 should be able to read",testEntity.can(Permission.READ,account1CanonicalId));
  Assert.assertTrue("User1 should be able to read acp",testEntity.can(Permission.READ_ACP,account1CanonicalId));
  Assert.assertTrue("User1 should be able to write",testEntity.can(Permission.WRITE,account1CanonicalId));
  Assert.assertTrue("User1 should be able to write acp",testEntity.can(Permission.WRITE_ACP,account1CanonicalId));
  Assert.assertTrue("User1 should be able to full control",testEntity.can(Permission.FULL_CONTROL,account1CanonicalId));
  Assert.assertTrue("User2 should be able to read",testEntity.can(Permission.READ,account2CanonicalId));
  Assert.assertTrue("User2 should be able to read acp",testEntity.can(Permission.READ_ACP,account2CanonicalId));
  Assert.assertTrue("User2 should not be able to write",!testEntity.can(Permission.WRITE,account2CanonicalId));
  Assert.assertTrue("User2 should not be able to write acp",!testEntity.can(Permission.WRITE_ACP,account2CanonicalId));
  Assert.assertTrue("User2 should not be able to full control",!testEntity.can(Permission.FULL_CONTROL,account2CanonicalId));
  acl.getGrants().add(account2Write);
  try {
    testEntity.setAcl(acp);
  }
 catch (  Exception e) {
    fail(e.toString() + ": " + e.getMessage());
  }
  Assert.assertTrue("User1 should be able to read",testEntity.can(Permission.READ,account1CanonicalId));
  Assert.assertTrue("User1 should be able to read acp",testEntity.can(Permission.READ_ACP,account1CanonicalId));
  Assert.assertTrue("User1 should be able to write",testEntity.can(Permission.WRITE,account1CanonicalId));
  Assert.assertTrue("User1 should be able to write acp",testEntity.can(Permission.WRITE_ACP,account1CanonicalId));
  Assert.assertTrue("User1 should be able to full control",testEntity.can(Permission.FULL_CONTROL,account1CanonicalId));
  Assert.assertTrue("User2 should be able to read",testEntity.can(Permission.READ,account2CanonicalId));
  Assert.assertTrue("User2 should be able to read acp",testEntity.can(Permission.READ_ACP,account2CanonicalId));
  Assert.assertTrue("User2 should be able to write",testEntity.can(Permission.WRITE,account2CanonicalId));
  Assert.assertTrue("User2 should not be able to write acp",!testEntity.can(Permission.WRITE_ACP,account2CanonicalId));
  Assert.assertTrue("User2 should not be able to full control",!testEntity.can(Permission.FULL_CONTROL,account2CanonicalId));
  acl.getGrants().add(account2WriteAcp);
  try {
    testEntity.setAcl(acp);
  }
 catch (  Exception e) {
    fail(e.toString() + ": " + e.getMessage());
  }
  Assert.assertTrue("User1 should be able to read",testEntity.can(Permission.READ,account1CanonicalId));
  Assert.assertTrue("User1 should be able to read acp",testEntity.can(Permission.READ_ACP,account1CanonicalId));
  Assert.assertTrue("User1 should be able to write",testEntity.can(Permission.WRITE,account1CanonicalId));
  Assert.assertTrue("User1 should be able to write acp",testEntity.can(Permission.WRITE_ACP,account1CanonicalId));
  Assert.assertTrue("User1 should be able to full control",testEntity.can(Permission.FULL_CONTROL,account1CanonicalId));
  Assert.assertTrue("User2 should be able to read",testEntity.can(Permission.READ,account2CanonicalId));
  Assert.assertTrue("User2 should be able to read acp",testEntity.can(Permission.READ_ACP,account2CanonicalId));
  Assert.assertTrue("User2 should be able to write",testEntity.can(Permission.WRITE,account2CanonicalId));
  Assert.assertTrue("User2 should be able to write acp",testEntity.can(Permission.WRITE_ACP,account2CanonicalId));
  Assert.assertTrue("User2 should be able to full control",testEntity.can(Permission.FULL_CONTROL,account2CanonicalId));
}
