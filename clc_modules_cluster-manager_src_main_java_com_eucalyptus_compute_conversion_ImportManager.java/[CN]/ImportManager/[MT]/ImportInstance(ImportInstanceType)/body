{
  LOG.info(request);
  final ImportInstanceResponseType reply=request.getReply();
  ImagingTask task=new ImagingTask(new ConversionTask(),ImportTaskState.NEW,0);
  ImportInstanceTaskDetails taskDetails=new ImportInstanceTaskDetails();
  final UserFullName ufn=Contexts.lookup().getUserFullName();
  for (  DiskImage diskImage : request.getDiskImageSet()) {
    final DiskImageDetail imageDetails=diskImage.getImage();
    final String manifestLocation=imageDetails.getImportManifestUrl();
    final String imageDescription=diskImage.getDescription();
    ImportInstanceVolumeDetail volumeDetail=new ImportInstanceVolumeDetail();
    volumeDetail.setBytesConverted(0L);
    volumeDetail.setDescription(imageDescription);
    volumeDetail.setAvailabilityZone("");
    volumeDetail.setVolume(new DiskImageVolumeDescription(diskImage.getVolume().getSize(),""));
    volumeDetail.setImage(new DiskImageDescription(imageDetails.getFormat(),imageDetails.getBytes(),imageDetails.getImportManifestUrl(),""));
    volumeDetail.setStatus(ImportTaskState.NEW.getExternalVolumeStateName());
    volumeDetail.setStatusMessage(ImportTaskState.NEW.getExternalVolumeStatusMessage());
    taskDetails.getVolumes().add(volumeDetail);
  }
  String taskId=Crypto.generateId(request.getCorrelationId(),"import-i");
  final String instanceId=Crypto.generateId(request.getCorrelationId(),"i");
  final String reservationId=Crypto.generateId(request.getCorrelationId(),"r");
  final String imageId=Crypto.generateId(request.getCorrelationId(),"emi");
  task.setId(taskId);
  Date expiration=Dates.hoursFromNow(CONVERSION_EXPIRATION_TIMEOUT);
  task.getTask().setExpirationTime(expiration.toString());
  task.getTask().setState(ImportTaskState.NEW.getExternalTaskStateName());
  taskDetails.setPlatform(request.getPlatform());
  taskDetails.setDescription(request.getDescription());
  task.getTask().setImportInstance(taskDetails);
  reply.setConversionTask(task.getTask());
  putConversionTask(taskId,task);
  return reply;
}
