{
  ServiceConfiguration configuration=Topology.lookup(Compute.class);
switch (stepNum) {
case 0:
    if (!"default".equals(properties.getDhcpOptionsId())) {
      DescribeDhcpOptionsType describeDhcpOptionsType=new DescribeDhcpOptionsType();
      describeDhcpOptionsType.setEffectiveUserId(info.getEffectiveUserId());
      setDhcpOptionsId(describeDhcpOptionsType,properties.getDhcpOptionsId());
      DescribeDhcpOptionsResponseType describeDhcpOptionsResponseType=AsyncRequests.<DescribeDhcpOptionsType,DescribeDhcpOptionsResponseType>sendSync(configuration,describeDhcpOptionsType);
      if (describeDhcpOptionsResponseType.getDhcpOptionsSet() == null || describeDhcpOptionsResponseType.getDhcpOptionsSet().getItem() == null || describeDhcpOptionsResponseType.getDhcpOptionsSet().getItem().isEmpty()) {
        throw new ValidationErrorException("No such dhcp options: " + properties.getDhcpOptionsId());
      }
    }
  DescribeVpcsType describeVpcsType=new DescribeVpcsType();
describeVpcsType.setEffectiveUserId(info.getEffectiveUserId());
setVpcId(describeVpcsType,properties.getVpcId());
DescribeVpcsResponseType describeVpcsResponseType=AsyncRequests.<DescribeVpcsType,DescribeVpcsResponseType>sendSync(configuration,describeVpcsType);
if (describeVpcsResponseType.getVpcSet() == null || describeVpcsResponseType.getVpcSet().getItem() == null || describeVpcsResponseType.getVpcSet().getItem().isEmpty()) {
throw new ValidationErrorException("No such vpc: " + properties.getVpcId());
}
AssociateDhcpOptionsType associateDhcpOptionsType=new AssociateDhcpOptionsType();
associateDhcpOptionsType.setEffectiveUserId(info.getEffectiveUserId());
associateDhcpOptionsType.setDhcpOptionsId(properties.getDhcpOptionsId());
associateDhcpOptionsType.setVpcId(properties.getVpcId());
AsyncRequests.<AssociateDhcpOptionsType,AssociateDhcpOptionsResponseType>sendSync(configuration,associateDhcpOptionsType);
info.setPhysicalResourceId(getDefaultPhysicalResourceId());
info.setReferenceValueJson(JsonHelper.getStringFromJsonNode(new TextNode(info.getPhysicalResourceId())));
break;
default :
throw new IllegalStateException("Invalid step " + stepNum);
}
}
