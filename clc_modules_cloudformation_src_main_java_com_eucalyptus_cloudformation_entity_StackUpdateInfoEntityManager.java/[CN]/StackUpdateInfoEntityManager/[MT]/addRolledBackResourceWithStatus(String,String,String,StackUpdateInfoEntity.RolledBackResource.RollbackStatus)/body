{
  try (TransactionResource db=Entities.transactionFor(StackUpdateInfoEntity.class)){
    Criteria criteria=Entities.createCriteria(StackUpdateInfoEntity.class).add(Restrictions.eq("accountId",accountId)).add(Restrictions.eq("stackId",stackId));
    List<StackUpdateInfoEntity> results=criteria.list();
    if (results == null || results.isEmpty()) {
      throw new ValidationErrorException("No record exists for this stack update info");
    }
    if (results.size() > 1) {
      throw new ValidationErrorException("More than one stack update info record exists");
    }
    Criteria criteria2=Entities.createCriteria(StackUpdateInfoEntity.RolledBackResource.class).add(Restrictions.eq("accountId",accountId)).add(Restrictions.eq("stackId",stackId)).add(Restrictions.eq("resourceId",resourceId));
    List<StackUpdateInfoEntity.RolledBackResource> results2=criteria2.list();
    if (results2 == null || results2.isEmpty()) {
      StackUpdateInfoEntity.RolledBackResource rolledBackResource=new StackUpdateInfoEntity.RolledBackResource();
      rolledBackResource.setResourceId(resourceId);
      rolledBackResource.setRollbackStatusValue(status);
      rolledBackResource.setAccountId(accountId);
      rolledBackResource.setStackId(stackId);
      Entities.persist(rolledBackResource);
    }
 else     if (results2.size() > 1) {
      throw new ValidationErrorException("More than one resource record exists for resource " + resourceId + " in the stack update info");
    }
 else {
      StackUpdateInfoEntity.RolledBackResource rolledBackResource=results2.get(0);
      rolledBackResource.setRollbackStatusValue(status);
    }
    db.commit();
  }
 }
