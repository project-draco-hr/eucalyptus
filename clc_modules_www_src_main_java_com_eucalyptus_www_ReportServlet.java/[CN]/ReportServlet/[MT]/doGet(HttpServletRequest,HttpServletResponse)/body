{
  User user=this.getUserFromSession(Param.session.getRaw(req));
  if (user == null) {
    throw new RuntimeException("User was null");
  }
  final String reportType=Param.type.get(req);
  final ReportFormat format=ReportFormat.valueOf(Objects.firstNonNull(Param.format.get(req),"html"));
  final long start=Long.parseLong(Param.start.get(req));
  final long end=Long.parseLong(Param.end.get(req));
  final Period period=new Period(start,end);
  final ReportingCriterion criterion=ReportingCriterion.valueOf(Param.criterion.get(req));
  final Units displayUnits=Units.getDefaultDisplayUnits();
  ReportingCriterion groupByCriterion=null;
  String groupByParam=req.getParameter(Param.groupByCriterion.name());
  if (groupByParam != null && !groupByParam.equalsIgnoreCase("NONE")) {
    groupByCriterion=ReportingCriterion.valueOf(Param.groupByCriterion.get(req));
  }
  LOG.info(String.format("Params: type:%s format:%s period:%s" + "criterion:%s groupBy:%s",reportType,format,period,criterion,groupByCriterion));
  setContentTypeHeader(res,format,Param.type.get(req));
  String report=null;
  try {
    if (user.isSystemAdmin()) {
      report=ReportGenerationFacade.generateReport(reportType,format.name(),period.getBeginningMs(),period.getEndingMs());
    }
 else {
      throw new RuntimeException("Only admins can generate reports");
    }
    res.getWriter().print(report);
  }
 catch (  ReportGenerationFacade.ReportGenerationException e) {
    LOG.error(e,e);
  }
}
