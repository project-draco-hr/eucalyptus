{
  User user=this.getUserFromSession(Param.session.getRaw(req));
  if (user == null) {
    throw new RuntimeException("User was null");
  }
  final String reportType=Param.type.get(req);
  final ReportFormat format=ReportFormat.valueOf(Param.format.get(req));
  final long start=Long.parseLong(Param.start.get(req));
  final long end=Long.parseLong(Param.end.get(req));
  final Period period=new Period(start,end);
  final ReportingCriterion criterion=ReportingCriterion.valueOf(Param.criterion.get(req));
  final Units displayUnits=Units.getDefaultDisplayUnits();
  ReportingCriterion groupByCriterion=null;
  String groupByParam=req.getParameter(Param.groupByCriterion.name());
  if (groupByParam != null && !groupByParam.equalsIgnoreCase("NONE")) {
    groupByCriterion=ReportingCriterion.valueOf(Param.groupByCriterion.get(req));
  }
  LOG.info(String.format("Params: type:%s format:%s period:%s" + "criterion:%s groupBy:%s",reportType,format,period,criterion,groupByCriterion));
  setContentTypeHeader(res,format,Param.type.get(req));
  if (user.isSystemAdmin()) {
    ReportGenerator.getInstance().generateReport(reportType,format,period,criterion,groupByCriterion,displayUnits,res.getOutputStream(),null);
  }
 else   if (user.isAccountAdmin()) {
    String accountId;
    try {
      accountId=user.getAccount().getAccountNumber();
    }
 catch (    AuthException aex) {
      throw new RuntimeException("Auth failed");
    }
    ReportGenerator.getInstance().generateReport(reportType,format,period,criterion,groupByCriterion,displayUnits,res.getOutputStream(),accountId);
  }
 else {
    throw new RuntimeException("Only admins and account owners can generate reports");
  }
}
