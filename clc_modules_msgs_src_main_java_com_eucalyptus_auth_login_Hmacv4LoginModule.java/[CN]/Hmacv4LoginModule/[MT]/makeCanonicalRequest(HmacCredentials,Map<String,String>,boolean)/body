{
  final StringBuilder sb=new StringBuilder(512);
  sb.append(credentials.getVerb());
  sb.append('\n');
  sb.append(skipPath ? "/" : canonicalizePath(credentials.getServicePath()));
  sb.append('\n');
  boolean addedParam=false;
  for (  final String parameter : Ordering.natural().sortedCopy(credentials.getParameters().keySet())) {
    if (credentials.getVariant() == HmacUtils.SignatureVariant.SignatureV4Query && SecurityParameter.X_Amz_Signature.parameter().equals(parameter)) {
      continue;
    }
    for (    final String value : Ordering.natural().sortedCopy(credentials.getParameters().get(parameter))) {
      sb.append(urlencode(parameter));
      sb.append('=');
      sb.append(urlencode(value));
      sb.append('&');
      addedParam=true;
    }
  }
  if (addedParam)   sb.setLength(sb.length() - 1);
  sb.append('\n');
  for (  final String header : authorizationParameters.get("SignedHeaders").split(";")) {
    final List<String> values=Lists.transform(credentials.getHeaders().get(header),new Function<String,String>(){
      @Override public String apply(      final String text){
        return text.trim();
      }
    }
);
    sb.append(header);
    sb.append(':');
    sb.append(Joiner.on(',').join(Ordering.<String>natural().sortedCopy(values)));
    sb.append('\n');
  }
  sb.append('\n');
  sb.append(authorizationParameters.get("SignedHeaders"));
  sb.append('\n');
  sb.append(digestUTF8(credentials.getBody()));
  if (signatureLogger.isTraceEnabled())   signatureLogger.trace("VERSION4: " + sb.toString());
  return sb;
}
