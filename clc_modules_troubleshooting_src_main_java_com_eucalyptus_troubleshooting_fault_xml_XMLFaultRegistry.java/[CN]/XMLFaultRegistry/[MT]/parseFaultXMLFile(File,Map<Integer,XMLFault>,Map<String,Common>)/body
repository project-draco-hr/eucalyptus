{
  try {
    LOG.debug("Parsing fault file " + faultXMLFile);
    DocumentBuilderFactory dbFactory=DocumentBuilderFactory.newInstance();
    DocumentBuilder dBuilder=dbFactory.newDocumentBuilder();
    Document doc=dBuilder.parse(faultXMLFile);
    Element docElement=doc.getDocumentElement();
    docElement.normalize();
    if (!EUCAFAULTS.equalsIgnoreCase(docElement.getTagName())) {
      LOG.warn("File " + faultXMLFile + " contains the wrong outer XML tag, will not be parsed.");
    }
 else {
      commonMap.clear();
      NodeList children=docElement.getChildNodes();
      final int length=children.getLength();
      for (int i=0; i < length; i++) {
        Node currentNode=children.item(i);
        if (currentNode.getNodeType() == Node.ELEMENT_NODE) {
          Element currentElement=(Element)currentNode;
          if (FAULT.equalsIgnoreCase(currentElement.getTagName())) {
            XMLFault fault=parseFaultElement(currentElement,commonMap);
            if (fault.getId() != parseIdFromFileName(faultXMLFile.getName())) {
              LOG.warn("Fault " + fault.getId() + " found in file "+ faultXMLFile+ ", in the wrong file.  Will not be processed");
            }
 else {
              LOG.debug("Successfully parsed " + faultXMLFile + " and read in fault "+ fault.getId());
              faultMap.put(fault.getId(),fault);
            }
          }
        }
      }
    }
  }
 catch (  ParserConfigurationException ex) {
    LOG.error(ex);
  }
catch (  SAXException ex) {
    LOG.error(ex);
  }
catch (  IOException ex) {
    LOG.error(ex);
  }
}
