{
  LOG.info("Queue poll:" + System.currentTimeMillis());
  EntityWrapper<StorageUsageSnapshot> entityWrapper=EntityWrapper.get(StorageUsageSnapshot.class);
  try {
    final StorageUsageLog usageLog=StorageUsageLog.getStorageUsageLog();
    if (usageDataMap == null) {
      this.usageDataMap=new HashMap<UsageDataKey,StorageUsageData>();
      this.changedSnapshots=new HashSet<UsageDataKey>();
      Iterator<StorageUsageSnapshot> iter=usageLog.scanLog(new Period(0l,Long.MAX_VALUE));
      while (iter.hasNext()) {
        StorageUsageSnapshot snapshot=iter.next();
        UsageDataKey key=new UsageDataKey(snapshot.getSnapshotKey());
        usageDataMap.put(key,snapshot.getUsageData());
        System.out.println("Loaded key:" + key);
      }
      LOG.info("Loaded usageDataMap");
    }
    for (Event event=receiver.receiveEventNoWait(); event != null; event=receiver.receiveEventNoWait()) {
      StorageEvent storageEvent=(StorageEvent)event;
      LOG.info("Receive event:" + storageEvent.toString());
      UsageDataKey key=new UsageDataKey(storageEvent.getOwnerId(),storageEvent.getAccountId(),storageEvent.getClusterName(),storageEvent.getAvailabilityZone());
      StorageUsageData usageData;
      if (usageDataMap.containsKey(key)) {
        usageData=usageDataMap.get(key);
      }
 else {
        usageData=new StorageUsageData();
        usageDataMap.put(key,usageData);
      }
      long addAmountMegs=(storageEvent.isCreateOrDelete()) ? storageEvent.getSizeMegs() : -storageEvent.getSizeMegs();
      long addNum=(storageEvent.isCreateOrDelete()) ? 1 : -1;
switch (storageEvent.getEventType()) {
case S3Object:
        Long newObjectsNum=addLong(usageData.getObjectsNum(),addNum);
      usageData.setObjectsNum(newObjectsNum);
    Long newObjectsMegs=addLong(usageData.getObjectsMegs(),addAmountMegs);
  usageData.setObjectsMegs(newObjectsMegs);
break;
case EbsSnapshot:
Long newSnapshotsNum=addLong(usageData.getSnapshotsNum(),addNum);
usageData.setSnapshotsNum(newSnapshotsNum);
Long newSnapshotsMegs=addLong(usageData.getSnapshotsMegs(),addAmountMegs);
usageData.setSnapshotsMegs(newSnapshotsMegs);
break;
case EbsVolume:
Long newVolumesNum=addLong(usageData.getVolumesNum(),addNum);
usageData.setVolumesNum(newVolumesNum);
Long newVolumesMegs=addLong(usageData.getVolumesMegs(),addAmountMegs);
usageData.setVolumesMegs(newVolumesMegs);
break;
}
changedSnapshots.add(key);
}
final long timestampMs=getTimestampMs();
for (UsageDataKey key : changedSnapshots) {
SnapshotKey snapshotKey=key.newSnapshotKey(timestampMs);
StorageUsageSnapshot sus=new StorageUsageSnapshot(snapshotKey,usageDataMap.get(key));
System.out.println("Storing:" + sus);
entityWrapper.add(sus);
}
changedSnapshots.clear();
entityWrapper.commit();
}
 catch (Exception ex) {
entityWrapper.rollback();
LOG.error(ex);
}
}
