{
  reply.setOriginCluster(this.getSubject().getConfiguration().getName());
  final Set<String> reportedInstances=Sets.newHashSet();
  for (  VmInfo vmInfo : reply.getVms()) {
    reportedInstances.add(vmInfo.getInstanceId());
    vmInfo.setPlacement(this.getSubject().getConfiguration().getName());
    VmTypeInfo typeInfo=vmInfo.getInstanceType();
    if (typeInfo.getName() == null || "".equals(typeInfo.getName())) {
      for (      VmType t : VmTypes.list()) {
        if (t.getCpu().equals(typeInfo.getCores()) && t.getDisk().equals(typeInfo.getDisk()) && t.getMemory().equals(typeInfo.getMemory())) {
          typeInfo.setName(t.getName());
        }
      }
    }
  }
  final Set<String> unreportedInstances=Sets.newHashSet(Sets.difference(this.initialInstances,reportedInstances));
  final Set<String> restoreInstances=Sets.newHashSet(Sets.difference(reportedInstances,this.initialInstances));
  for (  final VmInfo runVm : reply.getVms()) {
    if (this.initialInstances.contains(runVm.getInstanceId())) {
      VmStateCallback.handleReportedState(runVm);
      this.initialInstances.remove(runVm.getInstanceId());
    }
 else     if (restoreInstances.contains(runVm.getInstanceId())) {
      VmStateCallback.handleRestore(runVm);
    }
  }
  for (  final String vmId : unreportedInstances) {
    VmStateCallback.handleUnreported(vmId);
  }
}
