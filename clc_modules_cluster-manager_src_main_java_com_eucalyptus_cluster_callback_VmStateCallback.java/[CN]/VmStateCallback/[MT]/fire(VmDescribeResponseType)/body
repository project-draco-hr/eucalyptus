{
  UpdateInstanceResourcesType update=new UpdateInstanceResourcesType();
  update.setPartition(this.getSubject().getPartition());
  update.setResources(TypeMappers.transform(reply,InstanceResourceReportType.class));
  Networking.getInstance().update(update);
  if (Databases.isVolatile()) {
    return;
  }
  reply.setOriginCluster(this.getSubject().getConfiguration().getName());
  final Set<String> reportedInstances=Sets.newHashSet();
  for (  VmInfo vmInfo : reply.getVms()) {
    reportedInstances.add(vmInfo.getInstanceId());
    vmInfo.setPlacement(this.getSubject().getConfiguration().getName());
    VmTypeInfo typeInfo=vmInfo.getInstanceType();
    if (typeInfo.getName() == null || "".equals(typeInfo.getName())) {
      for (      VmType t : VmTypes.list()) {
        if (t.getCpu().equals(typeInfo.getCores()) && t.getDisk().equals(typeInfo.getDisk()) && t.getMemory().equals(typeInfo.getMemory())) {
          typeInfo.setName(t.getName());
        }
      }
    }
  }
  final Set<String> unreportedInstances=Sets.newHashSet(Sets.difference(this.initialInstances.get(),reportedInstances));
  if (Databases.isVolatile()) {
    return;
  }
  final Set<String> unknownInstances=Sets.newHashSet(Sets.difference(reportedInstances,this.initialInstances.get()));
  final List<Optional<Runnable>> taskList=Lists.newArrayList();
  for (  final VmInfo runVm : reply.getVms()) {
    if (this.initialInstances.get().contains(runVm.getInstanceId())) {
      taskList.add(UpdateTaskFunction.REPORTED.apply(Either.<String,VmInfo>right(runVm)));
    }
 else     if (unknownInstances.contains(runVm.getInstanceId())) {
      taskList.add(UpdateTaskFunction.UNKNOWN.apply(Either.<String,VmInfo>right(runVm)));
    }
  }
  for (  final String vmId : unreportedInstances) {
    taskList.add(UpdateTaskFunction.UNREPORTED.apply(Either.<String,VmInfo>left(vmId)));
  }
  for (  final Runnable task : Optional.presentInstances(taskList)) {
    Threads.enqueue(ClusterController.class,VmStateCallback.class,(Runtime.getRuntime().availableProcessors() * 2) + 1,Executors.callable(task));
  }
}
