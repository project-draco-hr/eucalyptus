{
  if (Databases.isVolatile()) {
    return;
  }
 else {
    reply.setOriginCluster(this.getSubject().getConfiguration().getName());
    final Set<String> reportedInstances=Sets.newHashSet();
    for (    VmInfo vmInfo : reply.getVms()) {
      reportedInstances.add(vmInfo.getInstanceId());
      vmInfo.setPlacement(this.getSubject().getConfiguration().getName());
      VmTypeInfo typeInfo=vmInfo.getInstanceType();
      if (typeInfo.getName() == null || "".equals(typeInfo.getName())) {
        for (        VmType t : VmTypes.list()) {
          if (t.getCpu().equals(typeInfo.getCores()) && t.getDisk().equals(typeInfo.getDisk()) && t.getMemory().equals(typeInfo.getMemory())) {
            typeInfo.setName(t.getName());
          }
        }
      }
    }
    final Set<String> unreportedInstances=Sets.newHashSet(Sets.difference(this.initialInstances.get(),reportedInstances));
    final Set<String> restoreInstances=Sets.newHashSet(Sets.difference(reportedInstances,this.initialInstances.get()));
    for (    final VmInfo runVm : reply.getVms()) {
      if (Databases.isVolatile()) {
        return;
      }
 else       if (this.initialInstances.get().contains(runVm.getInstanceId())) {
        VmStateCallback.handleReportedState(runVm);
      }
 else       if (restoreInstances.contains(runVm.getInstanceId())) {
        VmStateCallback.handleRestore(runVm);
      }
    }
    for (    final String vmId : unreportedInstances) {
      if (Databases.isVolatile()) {
        return;
      }
 else {
        VmStateCallback.handleUnreported(vmId);
      }
    }
  }
}
