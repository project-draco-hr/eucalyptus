{
  final VmState runVmState=VmState.Mapper.get(runVm.getStateName());
  try {
    final EntityTransaction db=Entities.get(VmInstance.class);
    try {
      VmInstance vm=VmInstances.cachedLookup(runVm.getInstanceId());
      if (VmState.TERMINATED.apply(vm)) {
        db.rollback();
        if (VmInstance.Reason.EXPIRED.apply(vm)) {
          if (VmStateCallback.handleRestore(runVm)) {
            VmInstances.restored(runVm.getInstanceId());
          }
        }
 else {
          LOG.trace("Ignore state update to terminated instance: " + runVm.getInstanceId());
        }
        return;
      }
      if (VmInstances.Timeout.EXPIRED.apply(vm)) {
        if (vm.isBlockStorage()) {
          VmInstances.stopped(vm);
        }
 else {
          VmInstances.shutDown(vm);
        }
      }
 else       if (VmState.SHUTTING_DOWN.equals(runVmState)) {
        db.rollback();
        VmStateCallback.handleReportedTeardown(vm,runVm);
        return;
      }
 else       if (VmStateSet.RUN.apply(vm)) {
        vm.doUpdate().apply(runVm);
      }
 else       if (!VmStateSet.RUN.apply(vm) && VmStateSet.RUN.contains(runVmState) && vm.lastUpdateMillis() > (VmInstances.VOLATILE_STATE_TIMEOUT_SEC * 1000l)) {
        vm.doUpdate().apply(runVm);
      }
 else {
        return;
      }
      Entities.commit(db);
    }
 catch (    Exception ex) {
      LOG.error(ex);
      Logs.extreme().error(ex,ex);
      throw ex;
    }
 finally {
      if (db.isActive())       db.rollback();
    }
  }
 catch (  TerminatedInstanceException ex1) {
    LOG.trace("Ignore state update to terminated instance: " + runVm.getInstanceId());
  }
catch (  NoSuchElementException ex1) {
  }
catch (  Exception ex1) {
    LOG.error(ex1);
    Logs.extreme().error(ex1,ex1);
  }
}
