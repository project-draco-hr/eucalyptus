{
  final ServiceEndpoint serviceEndpoint;
  if (factory.getClass().getSimpleName().startsWith("GatherLog")) {
    serviceEndpoint=new ServiceEndpoint(endpoint.getParent(),false,URI.create(endpoint.getUri().toASCIIString().replaceAll("EucalyptusCC","EucalyptusGL")));
  }
 else {
    serviceEndpoint=endpoint;
  }
  if (!this.request.compareAndSet(null,request)) {
    LOG.warn("Duplicate write attempt for request: " + this.request.get().getClass().getSimpleName());
    return true;
  }
 else {
    try {
      this.clientBootstrap=ChannelUtil.getClientBootstrap(new ChannelPipelineFactory(){
        @Override public ChannelPipeline getPipeline() throws Exception {
          ChannelPipeline pipeline=factory.getPipeline();
          ChannelUtil.addPipelineMonitors(pipeline,30);
          pipeline.addLast("request-handler",AsyncRequestHandler.this);
          return pipeline;
        }
      }
);
      LOG.debug(request.getClass().getSimpleName() + ":" + request.getCorrelationId()+ " connecting to "+ serviceEndpoint.getSocketAddress());
      EventRecord.here(request.getClass(),EventClass.SYSTEM_REQUEST,EventType.CHANNEL_OPENING,request.getClass().getSimpleName(),request.getCorrelationId(),serviceEndpoint.getSocketAddress().toString()).trace();
      this.connectFuture=this.clientBootstrap.connect(serviceEndpoint.getSocketAddress());
      final HttpRequest httpRequest=new MappingHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.POST,serviceEndpoint,this.request.get());
      this.connectFuture.addListener(new ChannelFutureListener(){
        @Override public void operationComplete(        ChannelFuture future) throws Exception {
          try {
            if (future.isSuccess()) {
              EventRecord.here(request.getClass(),EventClass.SYSTEM_REQUEST,EventType.CHANNEL_OPEN,request.getClass().getSimpleName(),request.getCorrelationId(),serviceEndpoint.getSocketAddress().toString(),"" + future.getChannel().getLocalAddress(),"" + future.getChannel().getRemoteAddress()).trace();
              future.getChannel().getCloseFuture().addListener(new ChannelFutureListener(){
                @Override public void operationComplete(                ChannelFuture future) throws Exception {
                  EventRecord.here(request.getClass(),EventClass.SYSTEM_REQUEST,EventType.CHANNEL_CLOSED,request.getClass().getSimpleName(),request.getCorrelationId(),serviceEndpoint.getSocketAddress().toString(),"" + future.getChannel().getLocalAddress(),"" + future.getChannel().getRemoteAddress()).trace();
                }
              }
);
              future.getChannel().write(httpRequest).addListener(new ChannelFutureListener(){
                @Override public void operationComplete(                ChannelFuture future) throws Exception {
                  AsyncRequestHandler.this.writeComplete.set(true);
                  EventRecord.here(request.getClass(),EventClass.SYSTEM_REQUEST,EventType.CHANNEL_WRITE,request.getClass().getSimpleName(),request.getCorrelationId(),serviceEndpoint.getSocketAddress().toString(),"" + future.getChannel().getLocalAddress(),"" + future.getChannel().getRemoteAddress()).trace();
                }
              }
);
            }
 else {
              AsyncRequestHandler.this.teardown(future.getCause());
            }
          }
 catch (          RuntimeException ex) {
            LOG.error(ex,ex);
            AsyncRequestHandler.this.teardown(future.getCause());
          }
        }
      }
);
      return true;
    }
 catch (    Throwable t) {
      LOG.error(t,t);
      this.teardown(t);
      return false;
    }
  }
}
