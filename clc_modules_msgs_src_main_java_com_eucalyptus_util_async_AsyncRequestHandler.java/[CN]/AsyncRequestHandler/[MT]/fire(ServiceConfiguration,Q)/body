{
  if (!this.request.compareAndSet(null,request)) {
    LOG.warn("Duplicate write attempt for request: " + this.request.get().getClass().getSimpleName());
    return false;
  }
 else {
    final SocketAddress serviceSocketAddress=config.getSocketAddress();
    final ChannelPipelineFactory factory=config.getComponentId().getClientPipeline();
    try {
      this.clientBootstrap=WebServices.clientBootstrap(new ChannelPipelineFactory(){
        @Override public ChannelPipeline getPipeline() throws Exception {
          final ChannelPipeline pipeline=factory.getPipeline();
          pipeline.addLast("request-handler",AsyncRequestHandler.this);
          return pipeline;
        }
      }
);
      EventRecord.here(request.getClass(),EventClass.SYSTEM_REQUEST,EventType.CHANNEL_OPENING,request.getClass().getSimpleName(),request.getCorrelationId(),serviceSocketAddress.toString()).trace();
      this.connectFuture=this.clientBootstrap.connect(serviceSocketAddress);
      final HttpRequest httpRequest=new MappingHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.POST,config,this.request.get());
      this.connectFuture.addListener(new ChannelFutureListener(){
        @Override public void operationComplete(        final ChannelFuture future) throws Exception {
          try {
            if (future.isSuccess()) {
              final InetAddress localAddr=((InetSocketAddress)future.getChannel().getLocalAddress()).getAddress();
              if (!factory.getClass().getSimpleName().startsWith("GatherLog") && Hosts.isCoordinator()) {
                AsyncRequestHandler.this.request.get().set_epoch(Topology.epoch());
                AsyncRequestHandler.this.request.get().get_services().addAll(Topology.partitionRelativeView(config,localAddr));
              }
              EventRecord.here(request.getClass(),EventClass.SYSTEM_REQUEST,EventType.CHANNEL_OPEN,request.getClass().getSimpleName(),request.getCorrelationId(),serviceSocketAddress.toString(),"" + future.getChannel().getLocalAddress(),"" + future.getChannel().getRemoteAddress()).trace();
              future.getChannel().getCloseFuture().addListener(new ChannelFutureListener(){
                @Override public void operationComplete(                final ChannelFuture future) throws Exception {
                  EventRecord.here(request.getClass(),EventClass.SYSTEM_REQUEST,EventType.CHANNEL_CLOSED,request.getClass().getSimpleName(),request.getCorrelationId(),serviceSocketAddress.toString(),"" + future.getChannel().getLocalAddress(),"" + future.getChannel().getRemoteAddress()).trace();
                }
              }
);
              future.getChannel().write(httpRequest).addListener(new ChannelFutureListener(){
                @Override public void operationComplete(                final ChannelFuture future) throws Exception {
                  AsyncRequestHandler.this.writeComplete.set(true);
                  EventRecord.here(request.getClass(),EventClass.SYSTEM_REQUEST,EventType.CHANNEL_WRITE,request.getClass().getSimpleName(),request.getCorrelationId(),serviceSocketAddress.toString(),"" + future.getChannel().getLocalAddress(),"" + future.getChannel().getRemoteAddress()).trace();
                }
              }
);
            }
 else {
              AsyncRequestHandler.this.teardown(future.getCause());
            }
          }
 catch (          final Exception ex) {
            LOG.error(ex,ex);
            AsyncRequestHandler.this.teardown(future.getCause());
          }
        }
      }
);
      return true;
    }
 catch (    final Exception t) {
      LOG.error(t,t);
      this.teardown(t);
      return false;
    }
  }
}
