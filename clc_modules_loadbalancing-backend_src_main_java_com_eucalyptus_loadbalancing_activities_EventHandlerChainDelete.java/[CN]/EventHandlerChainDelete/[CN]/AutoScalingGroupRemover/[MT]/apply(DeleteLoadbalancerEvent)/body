{
  LoadBalancer lb;
  try {
    lb=LoadBalancers.getLoadbalancer(evt.getLoadBalancerAccountNumber(),evt.getLoadBalancer());
  }
 catch (  NoSuchElementException ex) {
    return;
  }
catch (  Exception ex) {
    LOG.warn("Failed to find the loadbalancer named " + evt.getLoadBalancer(),ex);
    return;
  }
  final LoadBalancerAutoScalingGroupCoreView group=lb.getAutoScaleGroup();
  if (group == null) {
    LOG.warn(String.format("Loadbalancer %s had no autoscale group associated with it",lb.getDisplayName()));
    return;
  }
  final String groupName=group.getName();
  String launchConfigName=null;
  try {
    final DescribeAutoScalingGroupsResponseType resp=EucalyptusActivityTasks.getInstance().describeAutoScalingGroups(Lists.newArrayList(groupName));
    final AutoScalingGroupType asgType=resp.getDescribeAutoScalingGroupsResult().getAutoScalingGroups().getMember().get(0);
    launchConfigName=asgType.getLaunchConfigurationName();
  }
 catch (  final Exception ex) {
    LOG.warn(String.format("Unable to find the launch config associated with %s",groupName));
  }
  try {
    EucalyptusActivityTasks.getInstance().updateAutoScalingGroup(groupName,null,0);
  }
 catch (  final Exception ex) {
    LOG.warn(String.format("Unable to set desired capacity for %s",groupName),ex);
  }
  boolean error;
  final int NUM_DELETE_ASG_RETRY=4;
  for (int i=0; i < NUM_DELETE_ASG_RETRY; i++) {
    try {
      EucalyptusActivityTasks.getInstance().deleteAutoScalingGroup(groupName,true);
      error=false;
    }
 catch (    final Exception ex) {
      error=true;
      LOG.warn(String.format("Failed to delete autoscale group (%d'th attempt): %s",(i + 1),groupName));
      try {
        long sleepMs=(i + 1) * 500;
        Thread.sleep(sleepMs);
      }
 catch (      final Exception ex2) {
      }
    }
    if (!error)     break;
  }
  if (launchConfigName != null) {
    try {
      EucalyptusActivityTasks.getInstance().deleteLaunchConfiguration(launchConfigName);
    }
 catch (    Exception ex) {
      LOG.warn("Failed to delete launch configuration " + launchConfigName,ex);
    }
  }
  LoadBalancerAutoScalingGroup scaleGroup=null;
  try {
    final LoadBalancerAutoScalingGroupCoreView groupView=lb.getAutoScaleGroup();
    scaleGroup=LoadBalancerAutoScalingGroupEntityTransform.INSTANCE.apply(groupView);
  }
 catch (  final Exception ex) {
    LOG.error("falied to update servo instance record",ex);
  }
  if (scaleGroup == null)   return;
  try (TransactionResource db=Entities.transactionFor(LoadBalancerServoInstance.class)){
    for (    final LoadBalancerServoInstanceCoreView instanceView : scaleGroup.getServos()) {
      LoadBalancerServoInstance instance;
      try {
        instance=LoadBalancerServoInstanceEntityTransform.INSTANCE.apply(instanceView);
      }
 catch (      final Exception ex) {
        continue;
      }
      final LoadBalancerServoInstance found=Entities.uniqueResult(instance);
      found.setAvailabilityZone(null);
      found.setAutoScalingGroup(null);
      found.setState(LoadBalancerServoInstance.STATE.Retired);
      Entities.persist(found);
    }
    db.commit();
  }
 catch (  final Exception ex) {
    LOG.error("Failed to update servo instance record",ex);
  }
}
