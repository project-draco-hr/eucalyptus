{
  if (!(Bootstrap.isOperational() && Topology.isEnabledLocally(LoadBalancingBackend.class) && Topology.isEnabled(Eucalyptus.class)))   return;
  List<LoadBalancerSecurityGroup> allGroups=null;
  try (TransactionResource db=Entities.transactionFor(LoadBalancerSecurityGroup.class)){
    allGroups=Entities.query(LoadBalancerSecurityGroup.withState(LoadBalancerSecurityGroup.STATE.OutOfService));
  }
 catch (  Exception ex) {
  }
  if (allGroups == null || allGroups.size() <= 0)   return;
  final List<LoadBalancerSecurityGroup> toDelete=Lists.newArrayList();
  for (  LoadBalancerSecurityGroup group : allGroups) {
    Collection<LoadBalancerServoInstanceCoreView> instances=group.getServoInstances();
    if (instances == null || instances.size() <= 0)     toDelete.add(group);
  }
  for (  final LoadBalancerSecurityGroup group : toDelete) {
    boolean deleted=false;
    try {
      final List<SecurityGroupItemType> existingGroups=EucalyptusActivityTasks.getInstance().describeSystemSecurityGroups(Lists.newArrayList(group.getName()),true);
      if (existingGroups == null || existingGroups.size() <= 0)       deleted=true;
 else {
        EucalyptusActivityTasks.getInstance().deleteSystemSecurityGroup(group.getName(),true);
        LOG.info("deleted security group: " + group.getName());
        deleted=true;
      }
    }
 catch (    final Exception ex) {
      try {
        final List<SecurityGroupItemType> existingGroups=EucalyptusActivityTasks.getInstance().describeSystemSecurityGroups(Lists.newArrayList(group.getName()),false);
        if (existingGroups == null || existingGroups.size() <= 0)         deleted=true;
 else {
          EucalyptusActivityTasks.getInstance().deleteSystemSecurityGroup(group.getName(),false);
          LOG.info("deleted security group: " + group.getName());
          deleted=true;
        }
      }
 catch (      final Exception ex2) {
        LOG.warn("failed to delete the security group from eucalyptus",ex2);
      }
    }
    if (deleted) {
      try (final TransactionResource db=Entities.transactionFor(LoadBalancerSecurityGroup.class)){
        final LoadBalancerSecurityGroup g=Entities.uniqueResult(group);
        Entities.delete(g);
        db.commit();
      }
 catch (      NoSuchElementException ex) {
        ;
      }
catch (      Exception ex) {
        LOG.warn("failed to delete the securty group from DB",ex);
      }
    }
  }
}
