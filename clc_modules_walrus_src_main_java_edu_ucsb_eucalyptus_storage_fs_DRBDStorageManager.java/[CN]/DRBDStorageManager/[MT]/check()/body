{
  try {
    boolean notConnected=false;
    if (!isConnected()) {
      connectResource();
      if (!isConnected()) {
        LOG.warn("Unable to connect resource");
        notConnected=true;
      }
    }
    boolean notUpToDate=false;
    if (!isUpToDate()) {
      LOG.warn("Resource is not up to date");
      notUpToDate=true;
    }
    if (Component.State.ENABLED.equals(Components.lookup("walrus").getState())) {
      if (!isPrimary()) {
        throw new EucalyptusCloudException("I am the master, but not DRBD primary. Aborting!");
      }
      return;
    }
 else {
      if (Component.State.DISABLED.equals(Components.lookup("walrus").getState())) {
        if (!isSecondary()) {
          LOG.warn("I am the slave, but not DRBD secondary. Trying to become secondary...");
          makeSecondary();
          if (!isSecondary()) {
            throw new EucalyptusCloudException("Attempt to set secondary failed. Unable to proceed!");
          }
        }
        NavigableSet<Service> hii=Components.lookup("walrus").getServices();
        boolean isOtherPrimary=false;
        for (        Service ii : hii) {
          isOtherPrimary|=Component.State.ENABLED.equals(ii.getStateMachine().getState()) && !ii.isLocal() ? true : false;
        }
        if (!isOtherPrimary) {
          return;
        }
      }
      if (!notConnected) {
        throw new EucalyptusCloudException("Resource not connected and not primary or cannot become one!");
      }
      if (!notUpToDate) {
        throw new EucalyptusCloudException("Resource not up to date and not primary or cannot become one!");
      }
    }
  }
 catch (  ExecutionException ex) {
    throw new EucalyptusCloudException(ex);
  }
}
