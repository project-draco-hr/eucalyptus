{
  if (System.getProperty("euca.debug.addr") != null) {
    String host=System.getProperty("euca.debug.addr");
    for (    Component c : Components.list()) {
      if (c.getComponentId().isCloudLocal()) {
        URI uri=c.getUri(host,c.getComponentId().getPort());
        ServiceBuilder builder=c.getBuilder();
        ServiceConfiguration config=builder.toConfiguration(uri);
        c.loadService(config);
      }
    }
    for (    Bootstrap.Stage stage : Bootstrap.Stage.values()) {
      stage.updateBootstrapDependencies();
    }
    try {
      GroovyUtil.evaluateScript("after_database.groovy");
    }
 catch (    ScriptExecutionFailedException e1) {
      LOG.error("Failed with invalid DB address");
      LOG.debug(e1,e1);
      System.exit(123);
    }
    try {
      if (NetworkUtil.testReachability(host)) {
        LOG.debug("Initializing SSL just in case: " + SslSetup.class);
      }
 else {
        LOG.error("Failed with invalid DB address");
        System.exit(-1);
      }
    }
 catch (    Throwable e) {
      LOG.error("Failed with invalid DB address");
    }
  }
 else {
    this.channel=this.bootstrap.bind(new InetSocketAddress(this.port));
    LOG.info("Waiting for system properties before continuing bootstrap.");
    this.channel.getCloseFuture().awaitUninterruptibly();
    LOG.info("Channel closed, proceeding with bootstrap.");
  }
  return true;
}
