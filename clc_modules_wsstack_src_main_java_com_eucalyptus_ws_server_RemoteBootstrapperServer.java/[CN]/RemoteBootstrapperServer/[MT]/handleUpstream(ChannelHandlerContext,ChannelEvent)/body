{
  if (e instanceof MessageEvent) {
    Object message=((MessageEvent)e).getMessage();
    if (message instanceof HttpRequest) {
      HttpRequest request=((HttpRequest)message);
      ByteArrayInputStream bis=new ByteArrayInputStream(request.getContent().toByteBuffer().array());
      Properties props=new Properties();
      props.load(bis);
      boolean foundDb=false;
      List<String> localAddrs=NetworkUtil.getAllAddresses();
      for (      Entry<Object,Object> entry : props.entrySet()) {
        String key=(String)entry.getKey();
        String value=(String)entry.getValue();
        if (key.startsWith("euca.db.host")) {
          try {
            if (NetworkUtil.testReachability(value) && !localAddrs.contains(value)) {
              LOG.info("Found candidate db host address: " + value);
              String oldValue=System.setProperty("euca.db.host",value);
              LOG.info("Setting property: euca.db.host=" + value + " [oldvalue="+ oldValue+ "]");
              Component.db.setHostAddress(value);
              foundDb=true;
            }
          }
 catch (          Exception e1) {
            LOG.warn("Ignoring proposed database address: " + value);
          }
        }
 else {
          String oldValue=System.setProperty((String)entry.getKey(),(String)entry.getValue());
          LOG.info("Setting property: " + entry.getKey() + "="+ entry.getValue()+ " [oldvalue="+ oldValue+ "]");
        }
      }
      if (foundDb) {
        ChannelFuture writeFuture=ctx.getChannel().write(new DefaultHttpResponse(request.getProtocolVersion(),HttpResponseStatus.OK));
        writeFuture.addListener(ChannelFutureListener.CLOSE);
        this.channel.close();
      }
 else {
        ChannelFuture writeFuture=ctx.getChannel().write(new DefaultHttpResponse(request.getProtocolVersion(),HttpResponseStatus.NOT_ACCEPTABLE));
        writeFuture.addListener(ChannelFutureListener.CLOSE);
      }
    }
  }
}
