{
  final ObjectMetadataManager objectManager=ObjectMetadataManagers.getInstance();
  if (BucketState.extant.equals(entity.getBucket().getState())) {
    try {
      if (!ObjectState.extant.equals(entity.getState())) {
        entity=objectManager.initiateCreation(entity);
      }
    }
 catch (    Exception e) {
      LOG.warn("Error initiating an object in the db:",e);
      throw new InternalErrorException(entity.getResourceFullName());
    }
  }
 else {
    throw new NoSuchBucketException(entity.getBucket().getBucketName());
  }
  final String etag;
  Date lastMod;
  CopyObjectResponseType response;
  try {
    final ObjectEntity uploadingObject=entity;
    Callable<CopyObjectResponseType> putCallable=new Callable<CopyObjectResponseType>(){
      @Override public CopyObjectResponseType call() throws Exception {
        LOG.debug("calling copyObject");
        CopyObjectResponseType response;
        try {
          response=provider.copyObject(request);
        }
 catch (        Exception ex) {
          if (useGetPutOnCopy()) {
            response=providerGetPut(provider,request,requestUser,metadataDirective);
          }
 else {
            LOG.warn("Exception caught while attempting to copy object on backend");
            throw ex;
          }
        }
        LOG.debug("Done with copyObject. " + response.getStatusMessage());
        return response;
      }
    }
;
    final FutureTask<CopyObjectResponseType> putTask=new FutureTask<>(putCallable);
    PUT_OBJECT_SERVICE.execute(putTask);
    final long failTime=System.currentTimeMillis() + getPutTimeoutInMillis();
    final long checkIntervalSec=ObjectStorageProperties.OBJECT_CREATION_EXPIRATION_INTERVAL_SEC / 2;
    final AtomicReference<ObjectEntity> entityRef=new AtomicReference<>(uploadingObject);
    Callable updateTimeout=new Callable(){
      @Override public Object call() throws Exception {
        ObjectEntity tmp=entityRef.get();
        try {
          entityRef.getAndSet(ObjectMetadataManagers.getInstance().updateCreationTimeout(tmp));
        }
 catch (        Exception ex) {
          LOG.warn("Could not update the creation expiration time for ObjectUUID " + tmp.getObjectUuid() + " Will retry next interval",ex);
        }
        return entityRef.get();
      }
    }
;
    response=waitForCompletion(putTask,uploadingObject.getObjectUuid(),updateTimeout,failTime,checkIntervalSec);
    etag=response.getEtag();
    lastMod=new Date();
  }
 catch (  Exception e) {
    LOG.error("Data PUT failure to backend for bucketuuid / objectuuid : " + entity.getBucket().getBucketUuid() + "/"+ entity.getObjectUuid(),e);
    try {
      ObjectMetadataManagers.getInstance().transitionObjectToState(entity,ObjectState.deleting);
    }
 catch (    Exception ex) {
      LOG.warn("Failed to mark failed object entity in deleting state on failure rollback. Will be cleaned later.",e);
    }
    throw new InternalErrorException(entity.getObjectKey());
  }
  try {
    return ObjectMetadataManagers.getInstance().finalizeCreation(entity,lastMod,etag);
  }
 catch (  Exception e) {
    LOG.warn("Failed to update object metadata for finalization. Failing PUT operation",e);
    throw new InternalErrorException(entity.getResourceFullName());
  }
}
