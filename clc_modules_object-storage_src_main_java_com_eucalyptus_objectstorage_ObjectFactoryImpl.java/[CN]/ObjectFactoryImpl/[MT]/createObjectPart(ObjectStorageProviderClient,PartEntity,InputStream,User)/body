{
  if (BucketState.extant.equals(entity.getBucket().getState())) {
    try {
      entity=MpuPartMetadataManagers.getInstance().initiatePartCreation(entity);
    }
 catch (    Exception e) {
      LOG.error("Error initializing metadata for object creation: " + entity.getResourceFullName());
      InternalErrorException ex=new InternalErrorException(entity.getResourceFullName());
      ex.initCause(e);
      throw ex;
    }
  }
 else {
    throw new NoSuchBucketException(entity.getBucket().getBucketName());
  }
  final Date lastModified;
  final String etag;
  UploadPartResponseType response;
  try {
    final PartEntity uploadingObject=entity;
    final UploadPartType putRequest=new UploadPartType();
    putRequest.setBucket(uploadingObject.getBucket().getBucketUuid());
    putRequest.setKey(uploadingObject.getPartUuid());
    putRequest.setUser(requestUser);
    putRequest.setContentLength(entity.getSize().toString());
    putRequest.setPartNumber(String.valueOf(entity.getPartNumber()));
    putRequest.setUploadId(entity.getUploadId());
    Callable<UploadPartResponseType> putCallable=new Callable<UploadPartResponseType>(){
      @Override public UploadPartResponseType call() throws Exception {
        LOG.debug("Putting data");
        UploadPartResponseType response=provider.uploadPart(putRequest,content);
        LOG.debug("Done with put. " + response.getStatusMessage());
        return response;
      }
    }
;
    final FutureTask<UploadPartResponseType> putTask=new FutureTask<>(putCallable);
    PUT_OBJECT_SERVICE.execute(putTask);
    final long failTime=System.currentTimeMillis() + (ObjectStorageGlobalConfiguration.failed_put_timeout_hrs * 60 * 60* 1000);
    final long checkIntervalSec=ObjectStorageProperties.OBJECT_CREATION_EXPIRATION_INTERVAL_SEC / 2;
    final AtomicReference<PartEntity> entityRef=new AtomicReference<>(uploadingObject);
    Callable updateTimeout=new Callable(){
      @Override public Object call() throws Exception {
        PartEntity tmp=entityRef.get();
        try {
          entityRef.getAndSet(MpuPartMetadataManagers.getInstance().updateCreationTimeout(tmp));
        }
 catch (        Exception ex) {
          LOG.warn("Could not update the creation expiration time for PartUUID " + tmp.getPartUuid() + " Will retry next interval",ex);
        }
        return entityRef.get();
      }
    }
;
    response=waitForCompletion(putTask,uploadingObject.getPartUuid(),updateTimeout,failTime,checkIntervalSec);
    lastModified=response.getLastModified();
    etag=response.getEtag();
  }
 catch (  Exception e) {
    LOG.error("Data PUT failure to backend for bucketuuid / objectuuid : " + entity.getBucket().getBucketUuid() + "/"+ entity.getPartUuid(),e);
    try {
      MpuPartMetadataManagers.getInstance().transitionPartToState(entity,ObjectState.deleting);
    }
 catch (    Exception ex) {
      LOG.error("Failed to mark failed object entity in deleting state on failure rollback. Will be cleaned later.",e);
    }
    throw new InternalErrorException(entity.getObjectKey());
  }
  try {
    return MpuPartMetadataManagers.getInstance().finalizeCreation(entity,lastModified,etag);
  }
 catch (  Exception e) {
    LOG.error("Failed to update object metadata for finalization. Failing PUT operation",e);
    throw new InternalErrorException(entity.getResourceFullName());
  }
}
