{
  ObjectEntity toBeReturned=null;
  if (entity.getBucket() == null) {
    throw new InternalErrorException();
  }
switch (entity.getBucket().getVersioning()) {
case Suspended:
case Enabled:
    try {
      AccessControlPolicy acp=AclUtils.processNewResourcePolicy(requestUser,null,entity.getBucket().getOwnerCanonicalId());
      toBeReturned=ObjectMetadataManagers.getInstance().generateAndPersistDeleteMarker(entity,acp,requestUser);
    }
 catch (    Exception e) {
      LOG.warn("Failure configuring and persisting the delete marker for object " + entity.getResourceFullName());
      throw new InternalErrorException(e);
    }
  break;
case Disabled:
logicallyDeleteVersion(provider,entity,requestUser);
break;
default :
LOG.error("Cannot logically delete object due to unexpected bucket state found: " + entity.getBucket().getVersioning());
throw new InternalErrorException(entity.getBucket().getName());
}
return toBeReturned;
}
