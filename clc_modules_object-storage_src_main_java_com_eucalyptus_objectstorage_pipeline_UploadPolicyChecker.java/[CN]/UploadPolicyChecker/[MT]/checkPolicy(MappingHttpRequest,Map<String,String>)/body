{
  if (formFields.containsKey(ObjectStorageProperties.FormField.policy.toString())) {
    String authenticationHeader="";
    String policy=new String(Base64.decode(formFields.remove(ObjectStorageProperties.FormField.policy.toString())));
    String policyData;
    try {
      policyData=new String(Base64.encode(policy.getBytes()));
    }
 catch (    Exception ex) {
      LOG.warn(ex,ex);
      throw new AuthenticationException("error reading policy data.");
    }
    try {
      JsonSlurper jsonSlurper=new JsonSlurper();
      JSONObject policyObject=(JSONObject)jsonSlurper.parseText(policy);
      String expiration=(String)policyObject.get(ObjectStorageProperties.PolicyHeaders.expiration.toString());
      if (expiration != null) {
        Date expirationDate=DateUtils.parseIso8601DateTimeOrDate(expiration);
        if ((new Date()).getTime() > expirationDate.getTime()) {
          LOG.warn("Policy has expired.");
          throw new AuthenticationException("Policy has expired.");
        }
      }
      List<String> policyItemNames=new ArrayList<String>();
      JSONArray conditions=(JSONArray)policyObject.get(ObjectStorageProperties.PolicyHeaders.conditions.toString());
      for (int i=0; i < conditions.size(); ++i) {
        Object policyItem=conditions.get(i);
        if (policyItem instanceof JSONObject) {
          JSONObject jsonObject=(JSONObject)policyItem;
          if (!exactMatch(jsonObject,formFields,policyItemNames)) {
            LOG.warn("Policy verification failed. ");
            throw new AuthenticationException("Policy verification failed.");
          }
        }
 else         if (policyItem instanceof JSONArray) {
          JSONArray jsonArray=(JSONArray)policyItem;
          if (!partialMatch(jsonArray,formFields,policyItemNames)) {
            LOG.warn("Policy verification failed. ");
            throw new AuthenticationException("Policy verification failed.");
          }
        }
      }
      Set<String> formFieldsKeys=formFields.keySet();
      for (      String formKey : formFieldsKeys) {
        if (formKey.startsWith(ObjectStorageProperties.IGNORE_PREFIX))         continue;
        boolean fieldOkay=false;
        for (        ObjectStorageProperties.IgnoredFields field : ObjectStorageProperties.IgnoredFields.values()) {
          if (formKey.equals(field.toString())) {
            fieldOkay=true;
            break;
          }
        }
        if (fieldOkay)         continue;
        if (policyItemNames.contains(formKey))         continue;
        LOG.error("All fields except those marked with x-ignore- should be in policy. Form Key: " + formKey);
        throw new AuthenticationException("All fields except those marked with x-ignore- should be in policy.");
      }
    }
 catch (    Exception ex) {
      LOG.warn(ex);
      throw new AuthenticationException(ex);
    }
    if (formFields.containsKey(ObjectStorageProperties.FormField.AWSAccessKeyId.toString())) {
      String accessKeyId=formFields.remove(ObjectStorageProperties.FormField.AWSAccessKeyId.toString());
      authenticationHeader+="AWS" + " " + accessKeyId + ":";
    }
    if (formFields.containsKey(ObjectStorageProperties.FormField.signature.toString())) {
      String signature=formFields.remove(ObjectStorageProperties.FormField.signature.toString());
      authenticationHeader+=signature;
      httpRequest.addHeader(ObjectStoragePOSTAuthenticationHandler.SecurityParameter.Authorization.toString(),authenticationHeader);
    }
    httpRequest.addHeader(ObjectStorageProperties.FormField.FormUploadPolicyData.toString(),policyData);
  }
}
