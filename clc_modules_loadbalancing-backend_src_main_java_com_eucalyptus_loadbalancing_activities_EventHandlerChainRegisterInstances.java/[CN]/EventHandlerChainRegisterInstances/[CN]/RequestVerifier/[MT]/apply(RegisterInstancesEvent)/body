{
  if (evt.getInstances() == null || evt.getInstances().size() <= 0)   return;
  final List<Instance> instances=Lists.newArrayList(evt.getInstances());
  try (final TransactionResource db=Entities.transactionFor(LoadBalancerServoInstance.class)){
    for (    final Instance instance : instances) {
      try {
        LoadBalancerServoInstance servo=Entities.uniqueResult(LoadBalancerServoInstance.named(instance.getInstanceId()));
        if (servo != null)         throw new EventHandlerException("Loadbalancer VM cannot be registered");
      }
 catch (      EventHandlerException ex) {
        throw ex;
      }
catch (      NoSuchElementException ex) {
      }
catch (      Exception ex) {
        break;
      }
    }
  }
   LoadBalancer lb;
  try {
    lb=LoadBalancers.getLoadbalancer(evt.getContext(),evt.getLoadBalancer());
  }
 catch (  NoSuchElementException ex) {
    throw new EventHandlerException("Could not find the loadbalancer with name=" + evt.getLoadBalancer(),ex);
  }
catch (  Exception ex) {
    throw new EventHandlerException("Error while looking for loadbalancer with name=" + evt.getLoadBalancer(),ex);
  }
  final Set<String> lbZones=Sets.newHashSet(Collections2.transform(lb.getZones(),new Function<LoadBalancerZoneCoreView,String>(){
    @Override public String apply(    LoadBalancerZoneCoreView arg0){
      return arg0.getName();
    }
  }
));
  final String acctNumber=evt.getContext().getAccountNumber();
  final List<String> instanceIds=Lists.newArrayList(Collections2.transform(evt.getInstances(),new Function<Instance,String>(){
    @Override public String apply(    Instance arg0){
      return arg0.getInstanceId();
    }
  }
));
  List<RunningInstancesItemType> eucaInstances=Lists.newArrayList();
  try {
    eucaInstances=EucalyptusActivityTasks.getInstance().describeUserInstances(acctNumber,instanceIds);
  }
 catch (  final Exception ex) {
    throw new EventHandlerException("Failed to query instances: " + ex.getMessage());
  }
  for (  final RunningInstancesItemType instance : eucaInstances) {
    if (!lbZones.contains(instance.getPlacement())) {
      throw new EventHandlerException("Instance " + instance.getInstanceId() + "'s availaibility zone is not enabled for the loadbalancer");
    }
  }
}
