{
  try {
    DatabaseBootstrapper db=Databases.getBootstrapper();
    final Map<String,String> props=ImmutableMap.<String,String>builder().put("hibernate.show_sql","false").put("hibernate.format_sql","false").put("hibernate.connection.autocommit","false").put("hibernate.hbm2ddl.auto","update").put("hibernate.generate_statistics","false").put("hibernate.connection.driver_class",db.getDriverName()).put("hibernate.connection.username",db.getUserName()).put("hibernate.connection.password",db.getPassword()).put("hibernate.bytecode.use_reflection_optimizer","true").put("hibernate.cglib.use_reflection_optimizer","true").put("hibernate.dialect",db.getHibernateDialect()).put("hibernate.cache.use_second_level_cache","false").put("hibernate.cache.use_query_cache","false").build();
    for (    final String ctx : PersistenceContexts.list()) {
      final Properties p=new Properties();
      p.putAll(props);
      final String ctxUrl=String.format("jdbc:%s",ServiceUris.remote(Components.lookup(Database.class),DatabaseFilters.NEWVERSION.getVersionedName(ctx)));
      p.put("hibernate.connection.url",ctxUrl);
      final Ejb3Configuration config=new Ejb3Configuration();
      config.setProperties(p);
      for (      final Class c : PersistenceContexts.listEntities(ctx)) {
        config.addAnnotatedClass(c);
      }
      PersistenceContexts.registerPersistenceContext(ctx,config);
    }
  }
 catch (  final Exception e) {
    LOG.fatal(e,e);
    LOG.fatal("Failed to initialize the persistence layer.");
    throw Exceptions.toUndeclared(e);
  }
  return true;
}
