{
  if (UpgradeEventLog.create()) {
    return true;
  }
 else {
    UpgradeState previousState=UpgradeEventLog.getLastState();
    boolean continueUpgrade=false;
switch (previousState) {
case START:
case PARSE_ARGS:
case CHECK_ARGS:
case CHECK_UPGRADE_LOG:
case PRE_SCHEMA_UPDATE:
case CHECK_VERSIONS:
      continueUpgrade=true;
    break;
case BEGIN_UPGRADE:
case PRE_BACKINGUP_DATABASE:
case PRE_COPYING_DATABASES:
case PRE_SETUP_JPA:
case RUN_PRE_UPGRADE:
case RUN_ENTITY_UPGRADE:
case RUN_POST_UPGRADE:
  for (  String databaseName : Iterables.filter(Databases.getBootstrapper().listDatabases(),DatabaseFilters.OLDVERSION)) {
    Databases.getBootstrapper().deleteDatabase(databaseName);
  }
for (String databaseName : Iterables.filter(Databases.getBootstrapper().listDatabases(),DatabaseFilters.NEWVERSION)) {
  Databases.getBootstrapper().deleteDatabase(databaseName);
}
continueUpgrade=true;
break;
case POST_SHUTDOWN_JPA:
case POST_DELETE_ORIG_DB:
for (String databaseName : Iterables.filter(Databases.getBootstrapper().listDatabases(),DatabaseFilters.NEWVERSION)) {
Databases.getBootstrapper().deleteDatabase(databaseName);
}
for (String databaseName : Iterables.filter(Databases.getBootstrapper().listDatabases(),DatabaseFilters.EUCALYPTUS)) {
Databases.getBootstrapper().deleteDatabase(databaseName);
}
for (String databaseName : Iterables.filter(Databases.getBootstrapper().listDatabases(),DatabaseFilters.OLDVERSION)) {
Databases.getBootstrapper().renameDatabase(databaseName,DatabaseFilters.EUCALYPTUS.getVersionedName(databaseName));
}
continueUpgrade=true;
break;
case POST_RENAME_NEW_TO_ORIG_DB:
case POST_DELETE_OLD_DB:
POST_DELETE_OLD_DB.callAndLog();
COMPLETED.callAndLog();
continueUpgrade=false;
break;
case COMPLETED:
continueUpgrade=true;
break;
case ERROR:
LOG.fatal("Last upgrade stage executed was ERROR!  We need to bail out and have someone look at what is going on here.");
System.exit(1);
continueUpgrade=false;
break;
}
return continueUpgrade;
}
}
