{
  if (Ats.from(candidate).has(EntityUpgrade.class)) {
    if (!Predicate.class.isAssignableFrom(candidate)) {
      throw new IllegalArgumentException("@EntityUpgrade can only be used on a type which implements Predicate:  " + candidate);
    }
    EntityUpgrade upgrade=Ats.from(candidate).get(EntityUpgrade.class);
    ComponentUpgradeInfo.put(upgrade.value(),candidate);
  }
 else   if (Ats.from(candidate).has(PreUpgrade.class)) {
    if (!Callable.class.isAssignableFrom(candidate)) {
      throw new IllegalArgumentException("@PreUpgrade can only be used on a type which implements Callable:  " + candidate);
    }
    PreUpgrade upgrade=Ats.from(candidate).get(PreUpgrade.class);
    ComponentUpgradeInfo.put(upgrade.value(),candidate);
  }
 else   if (Ats.from(candidate).has(PostUpgrade.class)) {
    if (!Callable.class.isAssignableFrom(candidate)) {
      throw new IllegalArgumentException("@PostUpgrade can only be used on a type which implements Callable:  " + candidate);
    }
    PostUpgrade upgrade=Ats.from(candidate).get(PostUpgrade.class);
    ComponentUpgradeInfo.put(upgrade.value(),candidate);
  }
 else {
    return false;
  }
  return true;
}
