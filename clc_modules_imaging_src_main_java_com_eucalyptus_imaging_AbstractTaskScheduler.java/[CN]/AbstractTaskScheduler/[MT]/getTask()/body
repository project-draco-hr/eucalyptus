{
  final ImagingTask nextTask=this.getNext();
  if (nextTask == null)   return null;
  if (this.imagingServiceKey == null) {
    loadImagingServiceKey();
    if (this.imagingServiceKey == null)     throw new Exception("Failed to load public key of the imaging service");
  }
  WorkerTask newTask=null;
  final X509Certificate cloudCert=SystemCredentials.lookup(Eucalyptus.class).getCertificate();
  try {
    if (nextTask instanceof DiskImagingTask) {
      final DiskImagingTask imagingTask=(DiskImagingTask)nextTask;
      final DiskImageConversionTask conversionTask=imagingTask.getTask();
      try {
        final List<ImportDiskImageDetail> importImages=conversionTask.getImportDisk().getDiskImageSet();
        for (        final ImportDiskImageDetail image : importImages) {
          String manifestUrl=image.getDownloadManifestUrl();
          final String key=manifestUrl.substring(manifestUrl.lastIndexOf("/") + 1);
          manifestUrl=manifestUrl.substring(0,manifestUrl.lastIndexOf("/"));
          final String bucket=manifestUrl.substring(manifestUrl.lastIndexOf("/") + 1);
          final ImageManifestFile manifestFile=new ImageManifestFile(String.format("%s/%s",bucket,key),BundleImageManifest.INSTANCE);
          final String downloadManifest=DownloadManifestFactory.generateDownloadManifest(manifestFile,this.imagingServiceKey,conversionTask.getImportDisk().getConvertedImage().getPrefix() + "-" + image.getFormat(),5);
          image.setDownloadManifestUrl(downloadManifest);
        }
      }
 catch (      final Exception ex) {
        ImagingTasks.setState(imagingTask,ImportTaskState.FAILED,"Failed to generate download manifest");
        throw new EucalyptusCloudException("Failed to generate download manifest",ex);
      }
      newTask=new WorkerTask(imagingTask.getDisplayName(),WorkerTaskType.convert_image);
      final InstanceStoreTask ist=new InstanceStoreTask();
      ist.setAccountId(imagingTask.getOwnerAccountNumber());
      ist.setAccessKey(conversionTask.getImportDisk().getAccessKey());
      ist.setConvertedImage(conversionTask.getImportDisk().getConvertedImage());
      ist.setImportImageSet(conversionTask.getImportDisk().getDiskImageSet());
      ist.setUploadPolicy(conversionTask.getImportDisk().getUploadPolicy());
      ist.setUploadPolicySignature(conversionTask.getImportDisk().getUploadPolicySignature());
      ist.setEc2Cert(B64.standard.encString(PEMFiles.getBytes(cloudCert)));
      ist.setServiceCertArn(this.imagingServiceCertArn);
      final ServiceConfiguration osg=Topology.lookup(ObjectStorage.class);
      final URI osgUri=osg.getUri();
      ist.setS3Url(String.format("%s://%s:%d%s",osgUri.getScheme(),osgUri.getHost(),osgUri.getPort(),osgUri.getPath()));
      newTask.setInstanceStoreTask(ist);
    }
 else     if (nextTask instanceof ImportVolumeImagingTask) {
      final ImportVolumeImagingTask volumeTask=(ImportVolumeImagingTask)nextTask;
      String manifestLocation=null;
      if (volumeTask.getDownloadManifestUrl().size() == 0) {
        try {
          manifestLocation=DownloadManifestFactory.generateDownloadManifest(new ImageManifestFile(volumeTask.getImportManifestUrl(),ImportImageManifest.INSTANCE),null,volumeTask.getDisplayName(),1);
        }
 catch (        final InvalidBaseManifestException ex) {
          ImagingTasks.setState(volumeTask,ImportTaskState.FAILED,"Failed to generate download manifest");
          throw new EucalyptusCloudException("Failed to generate download manifest",ex);
        }
        ImagingTasks.addDownloadManifestUrl(volumeTask,volumeTask.getImportManifestUrl(),manifestLocation);
      }
 else       manifestLocation=volumeTask.getDownloadManifestUrl().get(0).getDownloadManifestUrl();
      newTask=new WorkerTask(volumeTask.getDisplayName(),WorkerTaskType.import_volume);
      final VolumeTask vt=new VolumeTask();
      final ImageManifest im=new ImageManifest();
      im.setManifestUrl(manifestLocation);
      im.setFormat(volumeTask.getFormat());
      vt.setImageManifestSet(Lists.newArrayList(im));
      vt.setVolumeId(volumeTask.getVolumeId());
      vt.setEc2Cert(B64.standard.encString(PEMFiles.getBytes(cloudCert)));
      newTask.setVoumeTask(vt);
    }
 else     if (nextTask instanceof ImportInstanceImagingTask) {
      final ImportInstanceImagingTask instanceTask=(ImportInstanceImagingTask)nextTask;
      for (      final ImportInstanceVolumeDetail volume : instanceTask.getVolumes()) {
        final String importManifestUrl=volume.getImage().getImportManifestUrl();
        if (!instanceTask.hasDownloadManifestUrl(importManifestUrl)) {
          String manifestLocation=null;
          manifestLocation=instanceTask.getDownloadManifestUrl(importManifestUrl);
          if (manifestLocation == null) {
            try {
              manifestLocation=DownloadManifestFactory.generateDownloadManifest(new ImageManifestFile(importManifestUrl,ImportImageManifest.INSTANCE),null,nextTask.getDisplayName(),1);
              ImagingTasks.addDownloadManifestUrl(instanceTask,importManifestUrl,manifestLocation);
            }
 catch (            final InvalidBaseManifestException ex) {
              ImagingTasks.setState(instanceTask,ImportTaskState.FAILED,"Failed to generate download manifest");
              throw new EucalyptusCloudException("Failed to generate download manifest",ex);
            }
          }
          newTask=new WorkerTask(instanceTask.getDisplayName(),WorkerTaskType.import_volume);
          final VolumeTask vt=new VolumeTask();
          final ImageManifest im=new ImageManifest();
          im.setManifestUrl(manifestLocation);
          im.setFormat(volume.getImage().getFormat());
          vt.setImageManifestSet(Lists.newArrayList(im));
          vt.setVolumeId(volume.getVolume().getId());
          vt.setEc2Cert(B64.standard.encString(PEMFiles.getBytes(cloudCert)));
          newTask.setVoumeTask(vt);
          break;
        }
      }
    }
  }
 catch (  final EucalyptusCloudException ex) {
    throw new Exception("failed to prepare worker task",ex);
  }
catch (  final Exception ex) {
    ImagingTasks.setState(nextTask,ImportTaskState.FAILED,"Internal error");
    throw new Exception("failed to prepare worker task",ex);
  }
  try {
    ImagingTasks.transitState(nextTask,ImportTaskState.PENDING,ImportTaskState.CONVERTING,null);
  }
 catch (  final Exception ex) {
    ;
  }
  return newTask;
}
