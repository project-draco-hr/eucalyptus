{
  List<ListMetric> metrics=Lists.newArrayList();
  if (dimensionMap == null) {
    dimensionMap=new HashMap<String,String>();
  }
 else   if (dimensionMap.size() > ListMetric.MAX_DIM_NUM) {
    throw new IllegalArgumentException("Too many dimensions for metric, " + dimensionMap.size());
  }
  TreeSet<DimensionEntity> dimensions=new TreeSet<DimensionEntity>();
  for (  Map.Entry<String,String> entry : dimensionMap.entrySet()) {
    DimensionEntity d=new DimensionEntity();
    d.setName(entry.getKey());
    d.setValue(entry.getValue());
    dimensions.add(d);
  }
  Set<Set<DimensionEntity>> permutations=null;
  if (metricType == MetricType.System) {
    if (!namespace.equals("AWS/EC2")) {
      permutations=Sets.powerSet(dimensions);
    }
 else {
      permutations=Sets.filter(Sets.powerSet(dimensions),new Predicate<Set<DimensionEntity>>(){
        public boolean apply(        @Nullable Set<DimensionEntity> candidate){
          return (candidate != null && candidate.size() < 2);
        }
      }
);
    }
  }
 else {
    permutations=Sets.newHashSet();
    permutations.add(dimensions);
  }
  for (  Set<DimensionEntity> dimensionsPermutation : permutations) {
    ListMetric metric=new ListMetric();
    metric.setAccountId(accountId);
    metric.setMetricName(metricName);
    metric.setNamespace(namespace);
    metric.setDimensions(dimensionsPermutation);
    metric.setMetricType(metricType);
    metrics.add(metric);
  }
  return metrics;
}
