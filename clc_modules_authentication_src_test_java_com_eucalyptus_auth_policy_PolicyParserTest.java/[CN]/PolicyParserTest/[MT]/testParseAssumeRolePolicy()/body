{
  String policyJson="{\n" + "    \"Statement\": [ {\n" + "      \"Effect\": \"Allow\",\n"+ "      \"Principal\": {\n"+ "         \"Service\": [ \"ec2.amazonaws.com\" ]\n"+ "      },\n"+ "      \"Action\": [ \"sts:AssumeRole\" ]\n"+ "    } ]\n"+ "}";
  PolicyEntity policy=PolicyParser.getResourceInstance().parse(policyJson);
  assertNotNull("Policy null",policy);
  assertNotNull("Statements null",policy.getStatements());
  assertEquals("Statement count",1,policy.getStatements().size());
  StatementEntity statement=policy.getStatements().get(0);
  assertNotNull("Statement null",statement);
  assertNotNull("Statement principal",statement.getPrincipal());
  PrincipalEntity principal=statement.getPrincipal();
  assertEquals("Principal type",Principal.PrincipalType.Service,principal.getType());
  assertEquals("Principal values",Sets.newHashSet("ec2.amazonaws.com"),principal.getValues());
  assertEquals("Principal not",false,principal.isNotPrincipal());
  assertNotNull("Statement authorizations",statement.getAuthorizations());
  assertEquals("Statement authorization count",1,statement.getAuthorizations().size());
  AuthorizationEntity authorization=statement.getAuthorizations().get(0);
  assertNotNull("Authorization null",authorization);
  assertEquals("Authorization actions",Sets.newHashSet("sts:assumerole"),authorization.getActions());
  assertEquals("Authorization effect",Authorization.EffectType.Allow,authorization.getEffect());
  assertNotNull("Authorization resources",authorization.getResources());
  assertEquals("Authorization resource count",0,authorization.getResources().size());
  assertNotNull("Statement conditions",statement.getConditions());
  assertEquals("Statement condition count",0,statement.getConditions().size());
}
