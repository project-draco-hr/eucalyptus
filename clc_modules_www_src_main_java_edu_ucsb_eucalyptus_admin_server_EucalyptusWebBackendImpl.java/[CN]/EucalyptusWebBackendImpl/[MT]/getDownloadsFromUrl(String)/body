{
  List<DownloadsWeb> downloadsList=new ArrayList<DownloadsWeb>();
  HttpClient httpClient=new HttpClient();
  if (System.getProperty("http.proxyHost") != null) {
    String proxyHost=System.getProperty("http.proxyHost");
    if (System.getProperty("http.proxyPort") != null) {
      int proxyPort=Integer.parseInt(System.getProperty("http.proxyPort"));
      httpClient.getHostConfiguration().setProxy(proxyHost,proxyPort);
    }
 else {
      httpClient.getHostConfiguration().setProxyHost(new ProxyHost(proxyHost));
    }
  }
  GetMethod method=new GetMethod(downloadsUrl);
  Integer timeoutMs=new Integer(3 * 1000);
  method.getParams().setSoTimeout(timeoutMs);
  try {
    httpClient.executeMethod(method);
    String str="";
    InputStream in=method.getResponseBodyAsStream();
    byte[] readBytes=new byte[1024];
    int bytesRead=-1;
    while ((bytesRead=in.read(readBytes)) > 0) {
      str+=new String(readBytes,0,bytesRead);
    }
    String entries[]=str.split("[\\r\\n]+");
    for (int i=0; i < entries.length; i++) {
      String entry[]=entries[i].split("\\t");
      if (entry.length == 3) {
        downloadsList.add(new DownloadsWeb(entry[0],entry[1],entry[2]));
      }
    }
  }
 catch (  MalformedURLException e) {
    LOG.warn("Malformed URL exception: " + e.getMessage());
    e.printStackTrace();
  }
catch (  IOException e) {
    LOG.warn("I/O exception: " + e.getMessage());
    e.printStackTrace();
  }
 finally {
    method.releaseConnection();
  }
  return downloadsList;
}
