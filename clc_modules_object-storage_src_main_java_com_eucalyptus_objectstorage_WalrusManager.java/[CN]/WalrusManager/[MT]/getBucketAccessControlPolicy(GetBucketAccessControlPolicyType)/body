{
  GetBucketAccessControlPolicyResponseType reply=(GetBucketAccessControlPolicyResponseType)request.getReply();
  String bucketName=request.getBucket();
  Context ctx=Contexts.lookup();
  Account account=ctx.getAccount();
  String ownerId=null;
  EntityWrapper<BucketInfo> db=EntityWrapper.get(BucketInfo.class);
  BucketInfo bucketInfo=new BucketInfo(bucketName);
  List<BucketInfo> bucketList=db.queryEscape(bucketInfo);
  AccessControlListType accessControlList=new AccessControlListType();
  BucketLogData logData;
  if (bucketList.size() > 0) {
    BucketInfo bucket=bucketList.get(0);
    logData=bucket.getLoggingEnabled() ? request.getLogData() : null;
    List<GrantInfo> grantInfos=bucket.getGrants();
    if (ctx.hasAdministrativePrivileges() || (bucket.canReadACP(account.getAccountNumber()) && (bucket.isGlobalReadACP() || Lookups.checkPrivilege(PolicySpec.S3_GETBUCKETACL,PolicySpec.VENDOR_S3,PolicySpec.S3_RESOURCE_BUCKET,bucketName,null)))) {
      if (logData != null) {
        updateLogData(bucket,logData);
        reply.setLogData(logData);
      }
      ownerId=bucket.getOwnerId();
      ArrayList<Grant> grants=new ArrayList<Grant>();
      bucket.readPermissions(grants);
      addGrants(grants,grantInfos);
      accessControlList.setGrants(grants);
    }
 else {
      LOG.error("Not authorized to get bucket ACL by " + ctx.getUserFullName());
      db.rollback();
      throw new AccessDeniedException("Bucket",bucketName,logData);
    }
  }
 else {
    db.rollback();
    throw new NoSuchBucketException(bucketName);
  }
  AccessControlPolicyType accessControlPolicy=new AccessControlPolicyType();
  try {
    Account ownerInfo=Accounts.lookupAccountById(ownerId);
    accessControlPolicy.setOwner(new CanonicalUserType(ownerInfo.getAccountNumber(),ownerInfo.getName()));
    accessControlPolicy.setAccessControlList(accessControlList);
  }
 catch (  AuthException e) {
    db.rollback();
    throw new AccessDeniedException("Bucket",bucketName,logData);
  }
  reply.setAccessControlPolicy(accessControlPolicy);
  db.commit();
  return reply;
}
